#include "RPG.dh"

#include "ItemData.dh"
#include "Minigame.dh"
#include "Mission.dh"
#include "Utils.dh"

acscript void ItemRoulette(int Difficulty, fixed Speed, int Size)
{
    // Exit if already in a minigame
    if (Player.InMinigame) return;
    
    ItemInfoPtr[MAX_ROULETTE_ITEMS] WheelItems;
    ItemInfoPtr ItemNone;
    bool Finished = false;
    bool Spinning = true;
    int Amount = (Size > 0 ? Amount = Size : 8 + (4 * Random(0, 3)));
    int Radius = 128 + (Amount * 3);
    int Selection = 0;
    fixed Offset;
    
    Player.InMinigame = true;
    
    // Prevent under/overflow
    if (Difficulty <= 0)
        Difficulty = Random(1, 7);
    if (Difficulty > 7)
        Difficulty = 7;
    if (Speed <= 0)
        Speed = Random(1, 9);
    if (Speed > 9)
        Speed = 9;
    
    // Setup blank item
    ItemNone->Name = "\caNothing";
    ItemNone->Sprite.Name = "SprNone";
    ItemNone->Sprite.XOff = 0;
    ItemNone->Sprite.YOff = 0;
    
    // Populate Wheel Items
    for (int i = 0; i < Amount; i++)
    {
        WheelItems[i] = GetRewardItem(Difficulty + 1);
        
        // Place a dud
        if (Random(1, 4) == 1)
            WheelItems[i] = ItemNone;
    };
    
    // Set Resolution
    SetHudSize(640, 480, false);
    
    while (!Finished)
    {
        // Buttons
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        
        // Keep menus closed - This is technically a hack and shouldn't be here
        Player.InMenu = false;
        Player.InShop = false;
        
        // Freeze and Fade
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
        // Wheel Handling
        for (int i = 0; i < Amount; i++)
        {
            fixed Angle = -0.25 + ((1.0 / Amount) * i) + Offset;
            fixed X = 320.0 + (Radius * Cos(Angle)) + WheelItems[i]->Sprite.XOff;
            fixed Y = 240.0 + (Radius * Sin(Angle)) + WheelItems[i]->Sprite.YOff;
            
            // Determine the current item near the cursor
            if (DistanceScreen(320, 240 + Radius, X - WheelItems[i]->Sprite.XOff, Y - WheelItems[i]->Sprite.YOff) < 32)
                Selection = i;
            
            // Draw Name
            SetFont("BIGFONT");
            if (GetCVar("drpg_debug"))
                HudMessage("%s\n", WheelItems[Selection]->Name, HUDMSG_PLAIN, MINIGAME_ID, CR_WHITE, 320, 240 + Radius + 32, 0.05);
            
            // Draw Box
            PrintSprite("ItemBoxH", 0, 320, 240 + Radius, 0.05);
            
            // Draw Icon
            PrintSprite(WheelItems[i]->Sprite.Name, 0, (int)X, (int)Y, 0.05);
            if (StrLen(WheelItems[i]->Sprite.Name) < 0)
                PrintSprite("SprNone", 0, (int)X, (int)Y, 0.05);
            
            // Audio Loop
            PlaySound(0, "transfer/loop", CHAN_BODY, 1.0, true, ATTN_NONE);
        };
        
        // Input Handling
        if (Buttons & BT_USE && Spinning)
        {
            ActivatorSound("menu/move", 127);
            Spinning = false;
        };
        if (Buttons & BT_SPEED && Spinning)
        {
            StopSound(0, CHAN_BODY);
            Finished = true;
        };
        
        // Slowly decrease the spin when done
        if (!Spinning)
            Speed -= 0.05;
        
        // Spin
        Offset += (Speed * 0.005);
        
        // Finished
        if (!Spinning && Speed <= 0)
        {
            // Draw Name
            SetFont("BIGFONT");
            HudMessage("%s\n", WheelItems[Selection]->Name, HUDMSG_FADEOUT, MINIGAME_ID, (WheelItems[Selection] == ItemNone ? CR_RED : CR_GREEN), 320, 240 + Radius + 32, 2.0, 1.0);
            
            // Draw Box
            PrintSpriteFade("ItemBoxR", 0, 320, 240 + Radius, 0.25, 0.75);
            
            // Draw Icon
            PrintSpriteFade(WheelItems[Selection]->Sprite.Name, 0, 320 + WheelItems[Selection]->Sprite.XOff, 240 + Radius + WheelItems[Selection]->Sprite.YOff, 2.0, 1.0);
            
            // Give the item if it wasn't a blank
            if (WheelItems[Selection] != ItemNone)
            {
                PlaySound(0, "transfer/complete", CHAN_BODY, 1.0, false, ATTN_NONE);
                
                // Item
                str ItemActor = WheelItems[Selection]->Actor;
                
                // DoomRL Compatibility for weapons
                if (GetCVar("drpg_ext_doomrl") && WheelItems[Selection]->Category == 0) // Weapons
                    ItemActor = StrParam("%sPickup\n", ItemActor);
                
                // Spawn Item and try to pick it up
                SpawnForced(ItemActor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
                SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
            }
            else
                PlaySound(0, "menu/error", CHAN_BODY, 1.0, false, ATTN_NONE);
            
            Finished = true;
        };
        
        Delay(1);
    };
    
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
    Player.InMinigame = false;
};
