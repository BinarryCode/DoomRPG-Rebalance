#include "RPG.dh"

#include "ItemData.dh"
#include "Mission.dh"
#include "Map.dh"
#include "Monsters.dh"
#include "Outpost.dh"
#include "Stats.dh"
#include "Utils.dh"

AddressSpace MapArray LootSpace;
LootSpace LootItem[MAX_LOOT] LootData =
{
    { "DRPGLootMedicalSupplies";    "Medical Supplies";     "LT01"; };
    { "DRPGLootChemicals";          "Chemicals";            "LT02"; };
    { "DRPGLootHazardousMaterials"; "Hazardous Materials";  "LT03"; };
 // { "DRPGLootAnomalousMaterials"; "Anomalous Materials";  "LT04"; };
    { "DRPGLootBriefcase";          "Briefcase Data";       "LT05"; };
    { "DRPGLootComputerData";       "Computer Data";        "LT06"; };
    { "DRPGLootGunParts";           "Gun Parts";            "LT07"; };
 // { "DRPGLootAmmoCasings";        "Ammo Casings";         "LT08"; };
    { "DRPGLootFuelCapsule";        "Fuel Capsule";         "LT09"; };
 // { "DRPGLootScrapMetals";        "Scrap Metals";         "LT10"; };
    { "DRPGLootScrapElectronics";   "Scrap Electronics";    "LT11"; };
    { "DRPGLootExperimentalParts";  "Experimental Parts";   "LT12"; };
 // { "DRPGLootDemonArtifact";      "Demon Artifacts";      "LT13"; };
};

str[MAX_DIFFICULTIES] MissionDifficulties =
{
    "\cdVery Easy";
    "\cdEasy";
    "\cjNormal";
    "\caHard";
    "\caVery Hard";
    "\caNightmare";
    "\cgInsane";
    "\cgImpossible";
    "\cgSuicide";
};

str[MAX_MISSION_TYPES] MissionTypes =
{
    "\cdCollection";
    "\caKill";
    "\caKill Uniques";
    "\caKill Reinforcements";
    "\cgAssassination";
    "\cfFind Secrets";
    "\cnFind Items";
    "\ctAchieve Combo";
};

script void PopulateMissions(int Index)
{
    // Wait for the Rewards List to finish processing
    while (!RewardsInit) Delay(1);
    
    for (int i = 0; i < MAX_MISSIONS; i++)
    {
        if (Index >= 0) i = Index;
        
        int Type = Random(0, MAX_MISSION_TYPES - 1);
        int Difficulty = Random(0, MAX_DIFFICULTIES - 1);
        int NumPlayers = 0;
        int RewardXP = 0;
        int RewardRank = 0;
        int RewardCredits = 0;
        ItemInfoPtr RewardItem = GetRewardItem(Difficulty);
        
        // Calculate the rewards based on all Player's average Level and Rank
        for (int i = 0; i < MAX_PLAYERS; i++)
        {
            if (!PlayerInGame(i)) continue;
            
            RewardXP += (Difficulty + 2) * (XPTable[Players(i).Level] / 100);
            RewardRank += (Difficulty + 2) * (RankTable[Players(i).RankLevel] / 100);
            RewardCredits += (Difficulty + Players(i).RankLevel + 1) * 100 * Random(1, 4);
            
            NumPlayers++;
        };
        
        // Average the rewards
        RewardXP /= NumPlayers;
        RewardRank /= NumPlayers;
        RewardCredits /= NumPlayers;
        
        // Assign info to the struct
        Missions[i].Active = false;
        Missions[i].Type = Type;
        Missions[i].Difficulty = Difficulty;
        Missions[i].RewardXP = RewardXP;
        Missions[i].RewardRank = RewardRank;
        Missions[i].RewardCredits = RewardCredits;
        Missions[i].RewardItem = RewardItem;
        
        // Collection Mission
        if (Type == MT_COLLECT)
        {
            // Generate Item and Amount
            int ItemIndex = Random(0, MAX_LOOT - 1);
            int Amount = Random(5, 10);
            LootItemPtr ItemPtr = &LootData[ItemIndex];
            
            // Remove any of the selected loot item if you already have any
            if (CheckInventory(ItemPtr->Actor) > 0)
                SetInventory(ItemPtr->Actor, 0);
            
            // Pass data to the Mission struct
            Missions[i].Item = ItemPtr;
            Missions[i].Amount = Amount;
        };
        
        // Kill Mission
        if (Type == MT_KILL)
            GetTargetMonster(&Missions[i]);
        
        // Kill Uniques Mission
        if (Type == MT_KILLUNIQUES)
            Missions[i].Amount = Random(5 * (Difficulty + 1), 5 * (Difficulty + 1) * 2);
        
        // Kill Reinforcements Mission
        if (Type == MT_REINFORCEMENTS)
            Missions[i].Amount = Random(10 * (Difficulty + 1), 10 * (Difficulty + 1) * 2);
        
        // Assassination Mission
        if (Type == MT_ASSASSINATION)
            GetTargetMonster(&Missions[i]);
        
        // Find Secrets Mission
        if (Type == MT_SECRETS)
            Missions[i].Amount = Random((Difficulty + 1), (Difficulty + 2) * 2) * 2;
        
        // Find Items Mission
        if (Type == MT_ITEMS)
            Missions[i].Amount = Random((Difficulty + 1), (Difficulty + 2) * 2) * 20;
        
        // Combo Mission
        if (Type == MT_COMBO)
            Missions[i].Amount = (Difficulty + 2) * 50;
        
        if (Index >= 0) break;
    };
};

script void InitMission()
{
    // If you aren't on a mission or you're in the Outpost, return
    if (!Player.Mission.Active || InBase) return;
    
    // Kill Reinforcements Mission
    if (Player.Mission.Type == MT_REINFORCEMENTS)
        MonsterTransport(CalculateAverageDifficulty(), 10 - Player.Mission.Difficulty, 1024);
    
    // Assassination Mission
    if (Player.Mission.Type == MT_ASSASSINATION)
    {
        // Need to wait until all monsters have been initialized
        Delay(35);
        
        for (int i = 0; i < MonsterID; i++)
        {
            str ActorToCheck = StrParam("DRPG%s\n", Player.Mission.Monster->Actor);
            
            if (GetCVar("drpg_ext_doomrl"))
                ActorToCheck = Player.Mission.Monster->Actor;
            
            if (Random(1, 4) && StartsWith(Monsters[i].Actor, ActorToCheck))
            {
                Monsters[i].Target = true;
                Monsters[i].Aura = 10;
                
                Monsters[i].Level += Player.Mission.Difficulty * 10;
                Monsters[i].Strength += Player.Mission.Difficulty * 10;
                Monsters[i].Defense += Player.Mission.Difficulty * 10;
                Monsters[i].Vitality += Player.Mission.Difficulty * 10;
                Monsters[i].Energy += Player.Mission.Difficulty * 10;
                Monsters[i].Regeneration += Player.Mission.Difficulty * 10;
                Monsters[i].Agility += Player.Mission.Difficulty * 10;
                Monsters[i].Capacity += Player.Mission.Difficulty * 10;
                Monsters[i].Luck += Player.Mission.Difficulty * 10;
                
                if (GetCVar("drpg_debug"))
                    Log("\cdDEBUG: \c-Mission Target Chosen: \ca%d\n", i);
                
                break;
            };
            
            Delay(1);
        };
    };
};

script void MissionDeathCheck(int Killer, MonsterStatsPtr Stats)
{
    if (Killer > -1 && Players(Killer).Mission.Active && !InBase && !GetActorProperty(0, APROP_Friendly))
    {
        // Collection Mission
        if (Players(Killer).Mission.Type == MT_COLLECT)
            if (Random(1, 1 << ((Players(Killer).Mission.Difficulty + 1))) == 1)
                DropMonsterItem(Killer, 0, Players(Killer).Mission.Item->Actor, 256);
        
        // Kill Mission
        if (Players(Killer).Mission.Type == MT_KILL)
        {
            str Actor = GetActorClass(0);
            str NeededActor = StrParam("DRPG%s\n", Players(Killer).Mission.Monster->Actor);
            int Match = StrCmp(Actor, NeededActor);
            
            // DoomRL Compatibility
            if (GetCVar("drpg_ext_doomrl"))
            {
                NeededActor = StrParam("%sRPG\n", Players(Killer).Mission.Monster->Actor);
                
                // Special handling for Humans
                for (int i = 0; i < MAX_HUMANS; i++)
                    if (StrCmp(StrLeft(Actor, StrLen(Actor) - 3), MonsterHumanData[i][0]) == 0)
                    {
                        Actor = StrParam("%sRPG\n", MonsterHumanData[i][1]);
                        break;
                    };
                
                // Re-check the match
                Match = StrCmp(Actor, NeededActor);
            }
            // Extras Compatibility
            else if (GetCVar("drpg_ext_extras"))
            {
                NeededActor = StrParam("DRPG%sExtras\n", Players(Killer).Mission.Monster->Actor);
                Match = StrCmp(Actor, NeededActor);
            }
            // Brutal Doom Compatibility
            else if (GetCVar("drpg_ext_brutal"))
            {
                NeededActor = StrParam("%sBD\n", Players(Killer).Mission.Monster->Actor);
                Match = StrCmp(Actor, NeededActor);
            };
            
            if (GetUserCVar(Killer, "drpg_debug"))
                Log("\cdDEBUG: \caKilled %s, need %s, match was %d\n", Actor, NeededActor, Match);
            
            if (Match == 0)
                Players(Killer).Mission.Current++;
        };
        
        // Kill Uniques Mission
        if (Players(Killer).Mission.Type == MT_KILLUNIQUES)
            if (Stats->Aura > 0)
                Players(Killer).Mission.Current++;
        
        // Kill Reinforcements Mission
        if (Players(Killer).Mission.Type == MT_REINFORCEMENTS)
            if (Stats->Reinforcement)
                Players(Killer).Mission.Current++;
        
        // Assassination Mission
        if (Players(Killer).Mission.Type == MT_ASSASSINATION)
            if (Stats->Target)
                Players(Killer).Mission.Current++;
    };
};

function void CheckMission()
{
    bool Complete = false;
    
    // If you currently have no mission, return
    if (!Player.Mission.Active) return;
    
    // Collection Mission
    if (Player.Mission.Type == MT_COLLECT)
    {
        Player.Mission.Current = CheckInventory(Player.Mission.Item->Actor);
        
        // Complete
        if (Player.Mission.Current >= Player.Mission.Amount)
        {
            TakeInventory(Player.Mission.Item->Actor, Player.Mission.Amount);
            Complete = true;
        };
    };
    
    // Generic Checking
    if (Player.Mission.Type == MT_KILL || Player.Mission.Type == MT_KILLUNIQUES ||
        Player.Mission.Type == MT_REINFORCEMENTS || Player.Mission.Type == MT_SECRETS ||
        Player.Mission.Type == MT_ITEMS)
        if (Player.Mission.Current >= Player.Mission.Amount)
            Complete = true;
    
    // Assassination Mission
    if (Player.Mission.Type == MT_ASSASSINATION)
        if (Player.Mission.Current >= 1)
            Complete = true;
    
    // Combo Mission
    if (Player.Mission.Type == MT_COMBO)
    {
        if (Player.ComboTimer == COMBO_STOP)
            if (Player.Combo > Player.Mission.Current)
                Player.Mission.Current = Player.Combo;
        
        // Complete
        if (Player.Mission.Current >= Player.Mission.Amount)
            Complete = true;
    };
    
    // Mission Complete!
    if (Complete)
    {
        // Message
        ActivatorSound("mission/complete", 127);
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("Mission Complete!\n\n\cj+%d XP\n\ck+%d Rank\n\cf+%d Credits\n\ciItem: \cj%s\n",
                   Player.Mission.RewardXP, Player.Mission.RewardRank, Player.Mission.RewardCredits, Player.Mission.RewardItem->Name,
                   HUDMSG_FADEOUT, MISSION_ID, CR_GREEN, 320.4, 240.0, 3.0, 2.0);
        
        // Reward - XP/Rank
        Player.XP += Player.Mission.RewardXP;
        Player.Rank += Player.Mission.RewardRank;
        
        // Credits
        GiveInventory("DRPGCredits", Player.Mission.RewardCredits);
        
        // Item
        str RewardActor = Player.Mission.RewardItem->Actor;
        
        // DoomRL Compatibility for weapons
        if (GetCVar("drpg_ext_doomrl") && Player.Mission.RewardItem->Category == 0) // Weapons
            RewardActor = StrParam("%sPickup\n", RewardActor);
        
        // Spawn Item and try to pick it up
        SpawnForced(RewardActor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
        SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
        
        // Increase Payout Bonus
        Player.PayBonus++;
        
        // Clear the Mission
        ClearMission();
        
        // Reset the completion flag
        Complete = false;
    };
};

function void ClearMission()
{
    Player.Mission.Active = false;
    Player.Mission.Difficulty = 0;
    
    Player.Mission.RewardXP = 0;
    Player.Mission.RewardRank = 0;
    Player.Mission.RewardCredits = 0;
    Player.Mission.RewardItem = {};
    
    Player.Mission.Item = {};
    Player.Mission.Monster = {};
    Player.Mission.Current = 0;
    Player.Mission.Amount = 0;
};

function ItemInfoPtr GetRewardItem(int Difficulty)
{
    // [KS] I redid all of it
    // [K873] The rest of it is done via sorting into a separate RewardList array in BuildItemData()
    int SliceStart = (MaxRewards / MAX_DIFFICULTIES) * Difficulty;
    int SliceLength = MaxRewards / MAX_DIFFICULTIES;
    if (Difficulty == MAX_DIFFICULTIES - 1)
        SliceLength += MaxRewards % MAX_DIFFICULTIES;
    
    return RewardList[Random(SliceStart, (SliceStart + SliceLength) - 1)];
};

function void GetTargetMonster(MissionInfo *Mission)
{
    bool DRLA = GetCVar("drpg_ext_doomrl");
    bool Brutal = GetCVar("drpg_ext_Brutal");
    int MonsterIndex = MonsterIndex = (DRLA ? Random((GameSkill() >= 5 ? 20 : 0), MAX_DEF_MONSTERS_DRLA - ((GameSkill() >= 5 ? 8 - Mission->Difficulty : 36 - (Mission->Difficulty * 4))) - 1) : Random(0, MAX_DEF_MONSTERS - 1));
    int Amount;
    MonsterInfoPtr MonsterPtr;
    
    // Determine which table to lookup the monster data from
    if (DRLA)
        MonsterPtr = &MonsterDataDRLA[MonsterIndex]
    else if (Brutal)
        MonsterPtr = &MonsterDataBrutal[MonsterIndex]
    else
        MonsterPtr = &MonsterData[MonsterIndex];
    
    // Now that we know the monster type, we can calculate an amount
    int BaseAmount = (10 + (23 * Mission->Difficulty) * (101 - MonsterPtr->Difficulty)) / 100;
    Amount = Random((BaseAmount / 4) * 3, BaseAmount);
    if (Amount < 2) Amount = 2;
    
    // Insert info into the passed struct
    Mission->Monster = MonsterPtr;
    Mission->Amount = Amount;
};

function int CalculateAverageDifficulty()
{
    int NumPlayers;
    int AvgDifficulty;
    
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        if (!PlayerInGame(i)) continue;
        
        if (Players(i).Mission.Active)
            AvgDifficulty += Players(i).Mission.Difficulty;
            
        NumPlayers++;
    };
    
    AvgDifficulty /= NumPlayers;
    
    return AvgDifficulty;
};
