#include "RPG.dh"

#include "ItemData.dh"
#include "Mission.dh"
#include "Map.dh"
#include "Monsters.dh"
#include "Outpost.dh"
#include "Stats.dh"
#include "Utils.dh"

str[MAX_DIFFICULTIES] MissionDifficulties =
{
    "\cdVery Easy";
    "\cdEasy";
    "\cjNormal";
    "\caHard";
    "\caVery Hard";
    "\caNightmare";
    "\cgInsane";
    "\cgImpossible";
    "\cgSuicide";
};

str[MT_MAX] MissionTypes =
{
    "\cdCollection";
    "\caKill";
    "\caKill Auras";
    "\caKill Reinforcements";
    "\cgAssassination";
    "\cfFind Secrets";
    "\cnFind Items";
    "\ctAchieve Combo";
};

bool MissionInit;

script void PopulateMissions()
{
    // Wait for the Rewards List to finish processing
    while (!RewardsInit) Delay(1);
    
    for (int i = 0; i < MAX_DIFFICULTIES; i++)
    {
        for (int j = 0; j < MAX_MISSIONS; j++)
            Missions[i][j] = *CreateMission(i);
            
        Delay(1);
    };
    
    MissionInit = true;
};

script void InitMission()
{
    // If you aren't on a mission or you're in the Outpost, return
    if (!Player.Mission.Active || InBase) return;
    
    // Kill Reinforcements Mission
    if (Player.Mission.Type == MT_REINFORCEMENTS)
        MonsterTransport(CalculateAverageDifficulty(), 10 - Player.Mission.Difficulty, 1024);
    
    // Assassination Mission
    if (Player.Mission.Type == MT_ASSASSINATION)
    {
        // Need to wait until all monsters have been initialized
        Delay(35);
        
        if (MonsterID <= 1) return; // No monsters, no assassination.
        
        auto DynamicArray PotentialTargets = BLANKDYNAMICARRAY;
        ArrayCreate(&PotentialTargets, "TARG\x00", 32, sizeof(LevelInfo));
        
        for (int i = 1; i < MonsterID; i++)
        {
            str ActorToCheck;
            
            for (int j = 0; j < MAX_PLAYERS; j++)
            {
                if (!PlayerInGame(j)) continue;
                
                ActorToCheck = StrParam("DRPG%s\n", Players(j).Mission.Monster->Actor);
                
                if (CompatMode == COMPAT_DRLA)
                    ActorToCheck = Players(j).Mission.Monster->Actor;
                
                if (StartsWith(Monsters[i].Actor, ActorToCheck))
                {
                    if (PotentialTargets.Position == PotentialTargets.Size)
                        ArrayResize(&PotentialTargets);
                    
                    ((int *)PotentialTargets.Data)[PotentialTargets.Position++] = i;
                };
                
                if (!(i % 1000)) Delay(1);
            };
        };
        
        if (PotentialTargets.Position)
        {
            int Chosen = ((int *)PotentialTargets.Data)[Random(0, PotentialTargets.Position - 1)];
            int LevelMod = Player.Mission.Difficulty * Player.Level + Random(0, 100);
            
            Monsters[Chosen].Target = PlayerNumber() + 1;
            Monsters[Chosen].Level += LevelMod;
            Monsters[Chosen].Level /= 2; // Shadow Auras always double their level
            Monsters[Chosen].NeedReinit = true;
            
            // Shadow Aura
            for (int i = 0; i < AURA_MAX; i++)
                Monsters[Chosen].Aura.Type[i].Active = true;
            
            // EVIL LAUGH OF WARNING
            if (Monsters[Chosen].Threat >= 10)
                LocalAmbientSound("mission/gottarget2", 127)
            else
                LocalAmbientSound("mission/gottarget1", 127);
            
            if (GetCVar("drpg_debug"))
                Log("\cdDEBUG: \c-Mission Target Chosen: \ca%d\n", Chosen);
        };
        
        ArrayDestroy(&PotentialTargets);
    };
};

script void MissionDeathCheck(int Killer, MonsterStatsPtr Stats)
{
    if ((GetCVar("drpg_mission_monsterkillscount") ? Killer >= -1 : Killer > -1) && !InBase && !GetActorProperty(0, APROP_Friendly))
    {
        /* Collection Mission
        if (Players(Killer).Mission.Type == MT_COLLECT)
            if (Random(1, 1 << ((Players(Killer).Mission.Difficulty + 1))) == 1)
                DropMonsterItem(Killer, 0, Players(Killer).Mission.Item->Actor, 256);
        */
        
        // Kill Mission
        for (int i = 0; i < MAX_PLAYERS; i++)
        {
            // Determine actor name
            str Actor = GetActorClass(0);
            str NeededActor;
            int Match;
            
            if (!PlayerInGame(i)) continue;
            
            // DoomRL Compatibility
            if (CompatMode == COMPAT_DRLA)
            {
                NeededActor = StrParam("%sRPG\n", Players(i).Mission.Monster->Actor);
                
                // Special handling for Humans
                for (int i = 0; i < MAX_HUMANS; i++)
                    if (StrCmp(StrLeft(Actor, StrLen(Actor) - 3), MonsterHumanData[i][0]) == 0)
                    {
                        Actor = StrParam("%sRPG\n", MonsterHumanData[i][1]);
                        break;
                    };
            }
            // Extras Compatibility
            else if (CompatMode == COMPAT_EXTRAS)
                NeededActor = StrParam("DRPG%sExtras\n", Players(i).Mission.Monster->Actor)
            else // Vanilla
                NeededActor = StrParam("DRPG%s\n", Players(i).Mission.Monster->Actor);
            
            // Check to see if we match
            Match = StrCmp(Actor, NeededActor);
            
            // Perform actor -> needed actor match checking
            if (Match == 0)
                if (Players(i).Mission.Active && Players(i).Mission.Type == MT_KILL)
                    Players(i).Mission.Current++;
        };
        
        // Kill Auras Mission
        if (MonsterHasAura(Stats))
        {
            for (int i = 0; i < MAX_PLAYERS; i++)
            {
                if (!PlayerInGame(i)) continue;
                
                if (Players(i).Mission.Active && Players(i).Mission.Type == MT_KILLAURAS)
                    Players(i).Mission.Current++;
            };
        };
        
        // Kill Reinforcements Mission
        if (Stats->Reinforcement)
        {
            for (int i = 0; i < MAX_PLAYERS; i++)
            {
                if (!PlayerInGame(i)) continue;
                if (Players(i).Mission.Active && Players(i).Mission.Type == MT_REINFORCEMENTS)
                    Players(i).Mission.Current++;
            };
        };
        
        // Assassination Mission
        if (Stats->Target)
        {
            for (int i = 0; i < MAX_PLAYERS; i++)
            {
                if (!PlayerInGame(i)) continue;
                
                if (Players(i).Mission.Active && Players(i).Mission.Type == MT_ASSASSINATION)
                    Players(i).Mission.Current++;
            };
        };
    };
};

function MissionInfo *CreateMission(int Difficulty)
{
    int Type = Random(0, MT_MAX - 1);
    int NumPlayers = 0;
    long int RewardXP = 0;
    long int RewardRank = 0;
    int RewardCredits = 0;
    int RewardModules = 0;
    ItemInfoPtr RewardItem = GetRewardItem(Difficulty);
    static MissionInfo Mission;
    
    // Calculate the rewards based on all Player's average Level and Rank
    // XPTable[Player.Level + 1] / (3 + MAX_DIFFICULTIES - Difficulty) + Random(0, XPTable[Player.Level + 1] / GameSkill());
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        long int XPNext;
        long int RankNext;
        
        if (!PlayerInGame(i)) continue;
        
        // Prevent overflows due to trying to check for a null table index
        if (Players(i).Level >= MAX_LEVEL)
            XPNext = XPTable[MAX_LEVEL - 1]
        else
            XPNext = XPTable[Players(i).Level];
        if (Players(i).RankLevel >= MAX_RANK)
            RankNext = RankTable[MAX_RANK - 1]
        else
            RankNext = RankTable[Players(i).RankLevel];
        
        RewardXP += XPNext * 1000 / (100000 - (Difficulty * 10000));
        RewardRank += RankNext * 1000 / (100000 - (Difficulty * 10000));
        RewardCredits += Random(100 * (Difficulty + 1) * (Players(i).Level + 1), 100 * (Difficulty + 1) * (Players(i).Level + 1) * 2);
        RewardModules += Random(10 * (Difficulty + 1) * (Players(i).Level + 1), 10 * (Difficulty + 1) * (Players(i).Level + 1) * 2);
        
        NumPlayers++;
    };
    
    // Average the rewards
    RewardXP /= NumPlayers;
    RewardRank /= NumPlayers;
    RewardCredits /= NumPlayers;
    RewardModules /= NumPlayers;
    
    // Assign info to the struct
    Mission.Active = false;
    Mission.Type = Type;
    Mission.Difficulty = Difficulty;
    Mission.RewardXP = RewardXP;
    Mission.RewardRank = RewardRank;
    Mission.RewardCredits = RewardCredits;
    Mission.RewardModules = RewardModules;
    Mission.RewardItem = RewardItem;
    
    // Collection Mission
    if (Type == MT_COLLECT)
    {
        // Generate Item and Amount
        int ItemIndex = Random(0, MAX_LOOT - 1);
        int Amount = 10 + (Difficulty * 5);
        ItemInfoPtr ItemPtr = &ItemData[8][ItemIndex];
        
        // Pass data to the Mission struct
        Mission.Item = ItemPtr;
        Mission.Amount = Amount;
    };
    
    // Kill Mission
    if (Type == MT_KILL)
        GetTargetMonster(&Mission);
    
    // Kill Auras Mission
    if (Type == MT_KILLAURAS)
        Mission.Amount = Random(5 * (Difficulty + 1), 5 * (Difficulty + 1) * 2);
    
    // Kill Reinforcements Mission
    if (Type == MT_REINFORCEMENTS)
        Mission.Amount = Random(10 * (Difficulty + 1), 10 * (Difficulty + 1) * 2);
    
    // Assassination Mission
    if (Type == MT_ASSASSINATION)
        GetTargetMonster(&Mission);
    
    // Find Secrets Mission
    if (Type == MT_SECRETS)
        Mission.Amount = Random((Difficulty + 1), (Difficulty + 2) * 2) * 1;
    
    // Find Items Mission
    if (Type == MT_ITEMS)
        Mission.Amount = Random((Difficulty + 1), (Difficulty + 2) * 2) * 10;
    
    // Combo Mission
    if (Type == MT_COMBO)
        Mission.Amount = (Difficulty + 2) * 10;
    
    return &Mission;
};

function void CreateMissionAt(int Difficulty, int Index)
{
    Missions[Difficulty][Index] = *CreateMission(Difficulty);
};

function void CheckMission()
{
    bool Complete = false;
    
    // If you currently have no mission, return
    if (!Player.Mission.Active) return;
    
    // Collection Mission
    if (Player.Mission.Type == MT_COLLECT)
    {
        Player.Mission.Current = CheckInventory(Player.Mission.Item->Actor);
        
        // Complete
        if (Player.Mission.Current >= Player.Mission.Amount)
        {
            TakeInventory(Player.Mission.Item->Actor, Player.Mission.Amount);
            Complete = true;
        };
    };
    
    // Generic Checking
    if (Player.Mission.Type == MT_KILL || Player.Mission.Type == MT_KILLAURAS ||
        Player.Mission.Type == MT_REINFORCEMENTS || Player.Mission.Type == MT_SECRETS ||
        Player.Mission.Type == MT_ITEMS)
        if (Player.Mission.Current >= Player.Mission.Amount)
            Complete = true;
    
    // Assassination Mission
    if (Player.Mission.Type == MT_ASSASSINATION)
        if (Player.Mission.Current >= 1)
            Complete = true;
    
    // Combo Mission
    if (Player.Mission.Type == MT_COMBO && !InBase)
    {
        if (Player.ComboTimer == COMBO_STOP)
            if (Player.Combo > Player.Mission.Current)
                Player.Mission.Current = Player.Combo;
        
        // Complete
        if (Player.Mission.Current >= Player.Mission.Amount)
            Complete = true;
    };
    
    // Mission Complete!
    if (Complete)
    {
        // Message
        ActivatorSound("mission/complete", 127);
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("Mission Complete!\n\n\cj+%d XP\n\ck+%d Rank\n\cf+%d Credits\n\cd%d Modules\n\n\ciItem: \cj%s\n",
                   Player.Mission.RewardXP, Player.Mission.RewardRank, Player.Mission.RewardCredits, Player.Mission.RewardModules, Player.Mission.RewardItem->Name,
                   HUDMSG_FADEOUT, MISSION_ID, CR_GREEN, 320.4, 240.0, 3.0, 2.0);
        
        // Reward - XP/Rank
        Player.XP += Player.Mission.RewardXP;
        Player.Rank += Player.Mission.RewardRank;
        
        // Credits
        GiveInventory("DRPGCredits", Player.Mission.RewardCredits);
        
        // Modules
        GiveInventory("DRPGModule", Player.Mission.RewardModules);
        
        // Item
        str RewardActor = Player.Mission.RewardItem->Actor;
        
        // Spawn Item and try to pick it up
        SpawnForced(RewardActor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
        SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
        
        // Increase Payout Bonus
        Player.PayBonus++;
        
        // Clear the Mission
        ClearMission();
        
        // Reset the completion flag
        Complete = false;
    };
};

function void ClearMission()
{
    Player.Mission.Active = false;
    Player.Mission.Difficulty = 0;
    
    Player.Mission.RewardXP = 0;
    Player.Mission.RewardRank = 0;
    Player.Mission.RewardCredits = 0;
    Player.Mission.RewardItem = {};
    
    Player.Mission.Item = {};
    Player.Mission.Monster = {};
    Player.Mission.Current = 0;
    Player.Mission.Amount = 0;
};

function void GetTargetMonster(MissionInfo *Mission)
{
    bool DRLA = (CompatMode == COMPAT_DRLA);
    int Amount;
    MonsterInfoPtr[64] PotentialMonsters;
    int NumPotentialMonsters;
    int MonsterDataAmount;
    
    if (DRLA)
        MonsterDataAmount = MAX_DEF_MONSTERS_DRLA
    else
        MonsterDataAmount = MAX_DEF_MONSTERS;
    
    // Generate a list based on monsters' threat levels.
    for (int i = 0; i < MonsterDataAmount; i++)
    {
        MonsterInfoPtr TempMonster;
        if (DRLA)
            TempMonster = &MonsterDataDRLA[i]
        else
            TempMonster = &MonsterData[i];
    
        if (TempMonster->Difficulty > ((Mission->Difficulty + 1) * 10) - 15 &&
            TempMonster->Difficulty < ((Mission->Difficulty + 1) * 10) + 15)
            PotentialMonsters[NumPotentialMonsters++] = TempMonster;
    };
    
    MonsterInfoPtr MonsterPtr = PotentialMonsters[Random(0, NumPotentialMonsters - 1)];
    
    // Now that we know the monster type, we can calculate an amount
    int BaseAmount = (10 + (23 * Mission->Difficulty) * (101 - MonsterPtr->Difficulty)) / 100;
    Amount = Random((BaseAmount / 4) * 3, BaseAmount);
    if (Amount < 2) Amount = 2;
    
    // Insert info into the passed struct
    Mission->Monster = MonsterPtr;
    Mission->Amount = Amount;
};

function int CalculateAverageDifficulty()
{
    int NumPlayers;
    int AvgDifficulty;
    
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        if (!PlayerInGame(i)) continue;
        
        if (Players(i).Mission.Active)
            AvgDifficulty += Players(i).Mission.Difficulty;
            
        NumPlayers++;
    };
    
    AvgDifficulty /= NumPlayers;
    
    return AvgDifficulty;
};
