#include "RPG.dh"

#include "ItemData.dh"
#include "Mission.dh"
#include "Monsters.dh"
#include "Outpost.dh"
#include "Stats.dh"
#include "Utils.dh"

/*
    -- Generic Loot Types ---
    
    * Medical Supplies
    * Chemicals
    * Hazardous Materials
    * Anomalous Materials
    * Briefcase Data
    * Computer Data
    * Gun Parts
    * Ammo Casings
    * Fuel Capsule
    * Scrap Metals
    * Scrap Electronics
    * Experimental Parts
    * Demon Artifacts
    
*/

AddressSpace map_array LootSpace;

LootSpace LootItem[MAX_LOOT] LootData =
{
    { "DRPGLootMedicalSupplies";    "Medical Supplies";     "LT01"; };
    { "DRPGLootChemicals";          "Chemicals";            "LT02"; };
    { "DRPGLootHazardousMaterials"; "Hazardous Materials";  "LT03"; };
 // { "DRPGLootAnomalousMaterials"; "Anomalous Materials";  "LT04"; };
    { "DRPGLootBriefcase";          "Briefcase Data";       "LT05"; };
    { "DRPGLootComputerData";       "Computer Data";        "LT06"; };
    { "DRPGLootGunParts";           "Gun Parts";            "LT07"; };
 // { "DRPGLootAmmoCasings";        "Ammo Casings";         "LT08"; };
    { "DRPGLootFuelCapsule";        "Fuel Capsule";         "LT09"; };
 // { "DRPGLootScrapMetals";        "Scrap Metals";         "LT10"; };
    { "DRPGLootScrapElectronics";   "Scrap Electronics";    "LT11"; };
    { "DRPGLootExperimentalParts";  "Experimental Parts";   "LT12"; };
 // { "DRPGLootDemonArtifact";      "Demon Artifacts";      "LT13"; };
};

str[MAX_DIFFICULTIES] MissionDifficulties =
{
    "\cdVery Easy";
    "\cdEasy";
    "\cjNormal";
    "\caHard";
    "\caVery Hard";
    "\caNightmare";
    "\cgInsane";
    "\cgImpossible";
    "\cgSuicide";
};

acscript void GetMission(int ForceType, int ForceDifficulty)
{
    int Type = (ForceType > 0 ? ForceType - 1 : Random(0, MAX_MISSION_TYPES - 1));
    int Difficulty = (ForceDifficulty > 0 ? ForceDifficulty - 1 : Random(0, MAX_DIFFICULTIES - 1));
    int RewardXP = (Difficulty + 2) * (XPTable[Player.Level] / 100);
    int RewardRank = (Difficulty + 2) * (RankTable[Player.RankLevel] / 100);
    int RewardCredits = Random((Difficulty + 2), (Difficulty + 2) * 100) * (Player.RankLevel + 1);
    ItemInfoPtr RewardItem = GetRewardItem(Difficulty);
    
    // If Marines are hostile, terminate
    if (MarinesHostile) return;
    
    // Clear extended message portions
    ClearMessage(MISSION_ID + 1);
    
    // Abort Mission
    if (GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_SPEED)
    {
        AbortMission();
        return;
    };
    
    // You already have a mission
    if (Player.Mission.Active)
    {
        ActivatorSound("menu/error", 127);
        SetFont("BIGFONT");
        HudMessage("You are already on a mission!\n", HUDMSG_FADEOUT, MISSION_ID, CR_RED, 1.5, 0.5, 3.0, 2.0);
        return;
    };
    
    // Collection Mission
    if (Type == MT_COLLECT)
    {
        // Generate Item and Amount
        int ItemIndex = Random(0, MAX_LOOT - 1);
        int Amount = Random(5, 10);
        LootItemPtr ItemPtr = &LootData[ItemIndex];
        
        // Remove any of the selected loot item if you already have any
        if (CheckInventory(ItemPtr->Actor) > 0)
            SetInventory(ItemPtr->Actor, 0);
        
        // Message and Loot Icon
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("New Mission! (%s\c-)\n\n\cdCollection\n\n\ckFind %d %s\n", MissionDifficulties[Difficulty], Amount, ItemPtr->Name, HUDMSG_FADEOUT, MISSION_ID, CR_WHITE, 320.4, 240.0, 3.0, 2.0);
        PrintSpriteFade(ItemPtr->Icon, MISSION_ID + 1, 320.4, 300.4, 3.0, 2.0);
        FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 5.0);
        
        // Pass data to the Mission struct
        Player.Mission.Item = ItemPtr;
        Player.Mission.Amount = Amount;
    };
    
    // Kill Mission
    if (Type == MT_KILL)
    {
        bool DRLA = GetCVar("drpg_ext_doomrl");
        bool Brutal = GetCVar("drpg_ext_Brutal");
        int MonsterIndex;
        int Amount;
        MonsterInfoPtr MonsterPtr;
        
        while (true)
        {
            MonsterIndex = (DRLA ? Random((GameSkill() >= 5 ? 20 : 0), MAX_DEF_MONSTERS_DRLA - ((GameSkill() >= 5 ? 8 - Difficulty : 36 - (Difficulty * 4))) - 1) : Random(0, MAX_DEF_MONSTERS - 1));
            
            // Do we lookup data from the Vanilla or DRLA table?
            if (DRLA)
                MonsterPtr = &MonsterDataDRLA[MonsterIndex]
            else if (Brutal)
                MonsterPtr = &MonsterDataBrutal[MonsterIndex]
            else
                MonsterPtr = &MonsterData[MonsterIndex];
            
            if (MonsterPtr->Difficulty <= 65 + (Difficulty * 10))
                break;
        };
        
        // Now that we know the monster type, we can calculate an amount
        int BaseAmount = (10 + (23 * Difficulty) * (101 - MonsterPtr->Difficulty)) / 100;
        Amount = Random((BaseAmount / 4) * 3, BaseAmount);
        if (Amount < 2) Amount = 2;
        
        // Message
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("New Mission! (%s\c-)\n\n\caKill\n\n\ckKill %d %ss\n", MissionDifficulties[Difficulty], Amount, MonsterPtr->Name, HUDMSG_FADEOUT, MISSION_ID, CR_WHITE, 320.4, 240.0, 3.0, 2.0);
        FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 5.0);
        
        // Pass data to the Mission struct
        Player.Mission.Monster = MonsterPtr;
        Player.Mission.Amount = Amount;
    };
    
    // Kill Reinforcements Mission
    if (Type == MT_REINFORCEMENTS)
    {
        int Amount = Random(10 * (Difficulty + 1), 10 * (Difficulty + 1) * 2);
        
        // Message
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("New Mission! (%s\c-)\n\n\caKill Reinforcements\n\n\ckKill %d Reinforcements\n", MissionDifficulties[Difficulty], Amount, HUDMSG_FADEOUT, MISSION_ID, CR_WHITE, 320.4, 240.0, 3.0, 2.0);
        FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 5.0);
        
        Player.Mission.Amount = Amount;
    };
    
    // Mission Accepted
    ActivatorSound("mission/get", 127);
    Player.Mission.Active = true;
    Player.Mission.Type = Type;
    Player.Mission.Difficulty = Difficulty;
    
    // Assign Rewards to Mission struct
    Player.Mission.RewardXP = RewardXP;
    Player.Mission.RewardRank = RewardRank;
    Player.Mission.RewardCredits = RewardCredits;
    Player.Mission.RewardItem = RewardItem;
};

acscript void AbortMission()
{
    // If you don't have a mission, terminate
    if (!Player.Mission.Active) return;
    
    // Message
    ActivatorSound("mission/fail", 127);
    SetFont("BIGFONT");
    SetHudSize(640, 480, false);
    HudMessage("Mission Aborted!\n", HUDMSG_FADEOUT, MISSION_ID, CR_ORANGE, 320.4, 240.0, 3.0, 2.0);
    
    // Clear the Mission
    ClearMission();
};

function void CheckMission()
{
    bool Complete = false;
    
    // If you currently have no mission, return
    if (!Player.Mission.Active) return;
    
    // Collection Mission
    if (Player.Mission.Type == MT_COLLECT)
    {
        Player.Mission.Current = CheckInventory(Player.Mission.Item->Actor);
        
        // Complete
        if (Player.Mission.Current >= Player.Mission.Amount)
        {
            TakeInventory(Player.Mission.Item->Actor, Player.Mission.Amount);
            Complete = true;
        };
    };
    
    // Kill Mission
    if (Player.Mission.Type == MT_KILL || Player.Mission.Type == MT_REINFORCEMENTS)
        if (Player.Mission.Current >= Player.Mission.Amount)
            Complete = true;
    
    // Mission Complete!
    if (Complete)
    {
        // Message
        ActivatorSound("mission/complete", 127);
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("Mission Complete!\n\n\cj+%d XP\n\ck+%d Rank\n\cf+%d Credits\n\ciItem: \cj%s\n",
                   Player.Mission.RewardXP, Player.Mission.RewardRank, Player.Mission.RewardCredits, Player.Mission.RewardItem->Name,
                   HUDMSG_FADEOUT, MISSION_ID, CR_GREEN, 320.4, 240.0, 3.0, 2.0);
        
        // Reward - XP/Rank
        Player.XP += Player.Mission.RewardXP;
        Player.Rank += Player.Mission.RewardRank;
        
        // Credits
        GiveInventory("DRPGCredits", Player.Mission.RewardCredits);
        
        // Item
        SpawnForced(Player.Mission.RewardItem->Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
        SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
        
        // Clear the Mission
        ClearMission();
        
        // Reset the completion flag
        Complete = false;
    };
};

function void ClearMission()
{
    Player.Mission.Active = false;
    Player.Mission.Difficulty = 0;
    
    Player.Mission.RewardXP = 0;
    Player.Mission.RewardRank = 0;
    Player.Mission.RewardCredits = 0;
    Player.Mission.RewardItem = {};
    
    Player.Mission.Item = {};
    Player.Mission.Monster = {};
    Player.Mission.Current = 0;
    Player.Mission.Amount = 0;
};

function ItemInfoPtr GetRewardItem(int Difficulty)
{
    // Category Mapping
    int[ITEM_CATEGORIES] Categories = 
    {
        0;  // Weapons
        1;  // Ammo
        2;  // Health
        10; // Boots
        0;  // Loot (Mapped to Weapons)
        3;  // Armor
        4;  // Powerups
        9;  // Mod Packs
        7;  // Stims/Augs
        5;  // Tokens
        6;  // Shield Parts
    };
    
    // DoomRL Compatibility
    if (!GetCVar("drpg_ext_doomrl"))
    {
        Categories[3] = 3; // Map Boots to Armor
        Categories[7] = 7; // Map Mod Packs to Stims/Augs
    };
    
    /* We calculate an offset to make the highest reward scope larger if the category is not evenly divisible by
       MAX_DIFFICULTIES. The ScopeLength is calculated based on an evenly divisible measurement of the category.
       ScopeStart is a simple multiplier according to Difficulty. This creates evenly sized reward scopes within
       a category of items. Much better than what we've been doing.
       
       Thanks to SidDoyle for the super math
    */
    
    int RewardCategories = MAX_DIFFICULTIES;
    int Category = Random(0, Difficulty + 2);
    if (Category > 2)
        RewardCategories -= Category - 2;
    int RewardOffset = ItemMax[Categories[Category]] % RewardCategories;
    int ScopeLength = (ItemMax[Categories[Category]] - RewardOffset) / RewardCategories;
    int ScopeStart = Difficulty * ScopeLength;
    if (Category > 2)
        ScopeStart = (Difficulty - (Category - 2)) * ScopeLength;
    if (Difficulty == MAX_DIFFICULTIES - 1)
        ScopeLength += RewardOffset;
    int Index = Random(ScopeStart, ScopeStart + ScopeLength - 1);
    if (RewardCategories > ItemMax[Categories[Category]])
    {
        Index = Random(Difficulty, Difficulty + 1);
        if (Index >= ItemMax[Categories[Category]])
            Index = ItemMax[Categories[Category]] - 1;
    };
    if (Category == 5 && Index == 0) // Quick lolhax to skip Armor Bonus
        Index++;
    ItemInfoPtr ItemPtr = &ItemData[Categories[Category]][Index];
    
    // DoomRL Compatibility
    if (GetCVar("drpg_ext_doomrl") && Category == 0) // Weapons
        ItemPtr->Actor = StrParam("%sPickup\n", ItemPtr->Actor);
    
    // Debugging
    if (GetCVar("drpg_debug"))
        Log("\cdDEBUG: \c-Mission Reward Item: Category %d (mapped to %d), Index %d\n", Category, Categories[Category], Index);
    
    return ItemPtr;
};

function int CalculateAverageDifficulty()
{
    int NumPlayers;
    int AvgDifficulty;
    
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        if (PlayerInGame(i))
            NumPlayers++;
        
        if (Players(i).Mission.Active)
            AvgDifficulty += Players(i).Mission.Difficulty;
    };
    
    AvgDifficulty /= NumPlayers;
    
    return AvgDifficulty;
};