#include "RPG.dh"

#include "ItemData.dh"
#include "Mission.dh"
#include "Monsters.dh"
#include "Outpost.dh"
#include "Stats.dh"
#include "Utils.dh"

AddressSpace map_array LootSpace;
LootSpace LootItem[MAX_LOOT] LootData =
{
    { "DRPGLootMedicalSupplies";    "Medical Supplies";     "LT01"; };
    { "DRPGLootChemicals";          "Chemicals";            "LT02"; };
    { "DRPGLootHazardousMaterials"; "Hazardous Materials";  "LT03"; };
 // { "DRPGLootAnomalousMaterials"; "Anomalous Materials";  "LT04"; };
    { "DRPGLootBriefcase";          "Briefcase Data";       "LT05"; };
    { "DRPGLootComputerData";       "Computer Data";        "LT06"; };
    { "DRPGLootGunParts";           "Gun Parts";            "LT07"; };
 // { "DRPGLootAmmoCasings";        "Ammo Casings";         "LT08"; };
    { "DRPGLootFuelCapsule";        "Fuel Capsule";         "LT09"; };
 // { "DRPGLootScrapMetals";        "Scrap Metals";         "LT10"; };
    { "DRPGLootScrapElectronics";   "Scrap Electronics";    "LT11"; };
    { "DRPGLootExperimentalParts";  "Experimental Parts";   "LT12"; };
 // { "DRPGLootDemonArtifact";      "Demon Artifacts";      "LT13"; };
};

str[MAX_DIFFICULTIES] MissionDifficulties =
{
    "\cdVery Easy";
    "\cdEasy";
    "\cjNormal";
    "\caHard";
    "\caVery Hard";
    "\caNightmare";
    "\cgInsane";
    "\cgImpossible";
    "\cgSuicide";
};

str[MAX_MISSION_TYPES] MissionTypes =
{
    "\cdCollection";
    "\caKill";
    "\caKill Reinforcements";
};

function void PopulateMissions(int Index)
{
    for (int i = 0; i < MAX_MISSIONS; i++)
    {
        if (Index >= 0) i = Index;
        
        int Type = Random(0, MAX_MISSION_TYPES - 1);
        int Difficulty = Random(0, MAX_DIFFICULTIES - 1);
        int RewardXP = (Difficulty + 2) * (XPTable[Player.Level] / 100);
        int RewardRank = (Difficulty + 2) * (RankTable[Player.RankLevel] / 100);
        int RewardCredits = Random((Difficulty + 2), (Difficulty + 2) * 100) * (Player.RankLevel + 1);
        ItemInfoPtr RewardItem = GetRewardItem(Difficulty);
        
        // Assign info to the struct
        Missions[i].Active = false;
        Missions[i].Type = Type;
        Missions[i].Difficulty = Difficulty;
        Missions[i].RewardXP = RewardXP;
        Missions[i].RewardRank = RewardRank;
        Missions[i].RewardCredits = RewardCredits;
        Missions[i].RewardItem = RewardItem;
        
        // Collection Mission
        if (Type == MT_COLLECT)
        {
            // Generate Item and Amount
            int ItemIndex = Random(0, MAX_LOOT - 1);
            int Amount = Random(5, 10);
            LootItemPtr ItemPtr = &LootData[ItemIndex];
            
            // Remove any of the selected loot item if you already have any
            if (CheckInventory(ItemPtr->Actor) > 0)
                SetInventory(ItemPtr->Actor, 0);
            
            // Pass data to the Mission struct
            Missions[i].Item = ItemPtr;
            Missions[i].Amount = Amount;
        };
        
        // Kill Mission
        if (Type == MT_KILL)
        {
            bool DRLA = GetCVar("drpg_ext_doomrl");
            bool Brutal = GetCVar("drpg_ext_Brutal");
            int MonsterIndex;
            int Amount;
            MonsterInfoPtr MonsterPtr;
            
            while (true)
            {
                MonsterIndex = (DRLA ? Random((GameSkill() >= 5 ? 20 : 0), MAX_DEF_MONSTERS_DRLA - ((GameSkill() >= 5 ? 8 - Difficulty : 36 - (Difficulty * 4))) - 1) : Random(0, MAX_DEF_MONSTERS - 1));
                
                // Do we lookup data from the Vanilla or DRLA table?
                if (DRLA)
                    MonsterPtr = &MonsterDataDRLA[MonsterIndex]
                else if (Brutal)
                    MonsterPtr = &MonsterDataBrutal[MonsterIndex]
                else
                    MonsterPtr = &MonsterData[MonsterIndex];
                
                if (MonsterPtr->Difficulty <= 65 + (Difficulty * 10))
                    break;
            };
            
            // Now that we know the monster type, we can calculate an amount
            int BaseAmount = (10 + (23 * Difficulty) * (101 - MonsterPtr->Difficulty)) / 100;
            Amount = Random((BaseAmount / 4) * 3, BaseAmount);
            if (Amount < 2) Amount = 2;
            
            // Pass data to the Mission struct
            Missions[i].Monster = MonsterPtr;
            Missions[i].Amount = Amount;
        };
        
        // Kill Reinforcements Mission
        if (Type == MT_REINFORCEMENTS)
        {
            int Amount = Random(10 * (Difficulty + 1), 10 * (Difficulty + 1) * 2);
            
            Missions[i].Amount = Amount;
        };
        
        if (Index >= 0) break;
    };
};

function void CheckMission()
{
    bool Complete = false;
    
    // If you currently have no mission, return
    if (!Player.Mission.Active) return;
    
    // Collection Mission
    if (Player.Mission.Type == MT_COLLECT)
    {
        Player.Mission.Current = CheckInventory(Player.Mission.Item->Actor);
        
        // Complete
        if (Player.Mission.Current >= Player.Mission.Amount)
        {
            TakeInventory(Player.Mission.Item->Actor, Player.Mission.Amount);
            Complete = true;
        };
    };
    
    // Kill Mission
    if (Player.Mission.Type == MT_KILL || Player.Mission.Type == MT_REINFORCEMENTS)
        if (Player.Mission.Current >= Player.Mission.Amount)
            Complete = true;
    
    // Mission Complete!
    if (Complete)
    {
        // Message
        ActivatorSound("mission/complete", 127);
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("Mission Complete!\n\n\cj+%d XP\n\ck+%d Rank\n\cf+%d Credits\n\ciItem: \cj%s\n",
                   Player.Mission.RewardXP, Player.Mission.RewardRank, Player.Mission.RewardCredits, Player.Mission.RewardItem->Name,
                   HUDMSG_FADEOUT, MISSION_ID, CR_GREEN, 320.4, 240.0, 3.0, 2.0);
        
        // Reward - XP/Rank
        Player.XP += Player.Mission.RewardXP;
        Player.Rank += Player.Mission.RewardRank;
        
        // Credits
        GiveInventory("DRPGCredits", Player.Mission.RewardCredits);
        
        // Item
        SpawnForced(Player.Mission.RewardItem->Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
        SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
        
        // Clear the Mission
        ClearMission();
        
        // Reset the completion flag
        Complete = false;
    };
};

function void ClearMission()
{
    Player.Mission.Active = false;
    Player.Mission.Difficulty = 0;
    
    Player.Mission.RewardXP = 0;
    Player.Mission.RewardRank = 0;
    Player.Mission.RewardCredits = 0;
    Player.Mission.RewardItem = {};
    
    Player.Mission.Item = {};
    Player.Mission.Monster = {};
    Player.Mission.Current = 0;
    Player.Mission.Amount = 0;
};

function ItemInfoPtr GetRewardItem(int Difficulty)
{
    // [KS] I redid all of it.
    int slicestart = (maxrewards / MAX_DIFFICULTIES) * Difficulty;
    int slicelength = maxrewards / MAX_DIFFICULTIES;
    if (Difficulty == MAX_DIFFICULTIES - 1)
        slicelength += maxrewards % MAX_DIFFICULTIES;
    
    return rewardlist[Random(slicestart, (slicestart + slicelength) - 1)];
};

function int CalculateAverageDifficulty()
{
    int NumPlayers;
    int AvgDifficulty;
    
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        if (PlayerInGame(i))
            NumPlayers++;
        
        if (Players(i).Mission.Active)
            AvgDifficulty += Players(i).Mission.Difficulty;
    };
    
    AvgDifficulty /= NumPlayers;
    
    return AvgDifficulty;
};