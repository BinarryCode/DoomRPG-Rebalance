#include "Globals.dh"
#include "ItemData.dh"
#include "LootData.dh"
#include "Mission.dh"
#include "MonsterData.dh"
#include "Outpost.dh"
#include "Stats.dh"
#include "Utils.dh"

/*
    -- Generic Loot Types ---
    
    * Medical Supplies
    * Chemicals
    * Hazardous Materials
    * Anomalous Materials
    * Briefcase Data
    * Computer Data
    * Gun Parts
    * Ammo Casings
    * Fuel Capsule
    * Scrap Metals
    * Scrap Electronics
    * Experimental Parts
    * Demon Artifacts
    
*/

str[MAX_DIFFICULTIES] MissionDifficulties =
{
    "\cdVery Easy";
    "\cdEasy";
    "\cjNormal";
    "\caHard";
    "\caVery Hard";
    "\caNightmare";
    "\cgInsane";
    "\cgImpossible";
    "\cgSuicide";
};

acscript void GetMission(int ForceType, int ForceDifficulty)
{
    int Type = (ForceType > 0 ? ForceType - 1 : Random(0, 1));
    int Difficulty = (ForceDifficulty > 0 ? ForceDifficulty - 1 : Random(0, MAX_DIFFICULTIES - 1));
    int RewardXP = (Difficulty + 2) * (XPTable[Player.Level] / 100);
    int RewardRank = (Difficulty + 2) * (RankTable[Player.RankLevel] / 100);
    int RewardCredits = Random((Difficulty + 2), (Difficulty + 2) * 100) * (Player.RankLevel + 1);
    ItemInfo RewardItem = GetRewardItem(Difficulty);
    
    // If Marines are hostile, terminate
    if (MarinesHostile) return;
	
    // Clear extended message portions
    ClearMessage(MISSION_ID + 1);
    
    // Abort Mission
    if (GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_SPEED)
    {
        AbortMission();
        return;
    };
    
    // You already have a mission
    if (Player.Mission.Active)
    {
        ActivatorSound("menu/error", 127);
        SetFont("BIGFONT");
        HudMessage("You are already on a mission!\n", HUDMSG_FADEOUT, MISSION_ID, CR_RED, 1.5, 0.5, 3.0, 2.0);
        return;
    };
    
    // Collection Mission
    if (Type == MT_COLLECT)
    {
        // Generate Item and Amount
        int ItemIndex = Random(0, MAX_LOOT - 1);
        int Amount = Random(5, 10);
        LootItem Item = LootData[ItemIndex];
        
        // Remove any of the selected loot item if you already have any
        if (CheckInventory(Item.Actor) > 0)
            SetInventory(Item.Actor, 0);
        
        // Message and Loot Icon
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("New Mission! (%s\c-)\n\n\cdCollection\n\n\ckFind %d %s\n", MissionDifficulties[Difficulty], Amount, Item.Name, HUDMSG_FADEOUT, MISSION_ID, CR_WHITE, 320.4, 240.0, 3.0, 2.0);
        PrintSpriteFade(Item.Icon, MISSION_ID + 1, 320.4, 300.4, 3.0, 2.0);
        FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 5.0);
        
        // Pass data to the Mission struct
        Player.Mission.Item = Item;
        Player.Mission.Amount = Amount;
    };
    
    // Kill Mission
    if (Type == MT_KILL)
    {
        bool DRLA = GetCVar("drpg_ext_doomrl");
        int MonsterIndex = (DRLA ? Random((GameSkill() >= 5 ? 20 : 0), MAX_MONSTERS_DRLA - ((GameSkill() >= 5 ? 8 - Difficulty : 36 - (Difficulty * 4))) - 1) : Random(0, MAX_MONSTERS - 1));
        int Amount = Random(2 + (Difficulty * 2), 2 + (2 * (Difficulty * 2)));
        MonsterInfo Monster;
        
        // Do we lookup data from the Vanilla or DRLA table?
        if (DRLA)
            Monster = MonsterDataDRLA[MonsterIndex]
        else
            Monster = MonsterData[MonsterIndex];
        
        // Message
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("New Mission! (%s\c-)\n\n\caKill\n\n\ckKill %d %ss\n", MissionDifficulties[Difficulty], Amount, Monster.Name, HUDMSG_FADEOUT, MISSION_ID, CR_WHITE, 320.4, 240.0, 3.0, 2.0);
        FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 5.0);
        
        // Pass data to the Mission struct
        Player.Mission.Monster = Monster;
        Player.Mission.Amount = Amount;
    };
    
    // Mission Accepted
    ActivatorSound("mission/get", 127);
    Player.Mission.Active = true;
    Player.Mission.Type = Type;
    Player.Mission.Difficulty = Difficulty;
    
    // Assign Rewards to Mission struct
    Player.Mission.RewardXP = RewardXP;
    Player.Mission.RewardRank = RewardRank;
    Player.Mission.RewardCredits = RewardCredits;
    Player.Mission.RewardItem = RewardItem;
};

acscript void AbortMission()
{
    // If you don't have a mission, terminate
    if (!Player.Mission.Active) return;
    
    // Message
    ActivatorSound("mission/fail", 127);
    SetFont("BIGFONT");
    SetHudSize(640, 480, false);
    HudMessage("Mission Aborted!\n", HUDMSG_FADEOUT, MISSION_ID, CR_ORANGE, 320.4, 240.0, 3.0, 2.0);
    
    // Clear the Mission
    ClearMission();
};

function void CheckMission()
{
    bool Complete = false;
    
    // If you currently have no mission, return
    if (!Player.Mission.Active) return;
    
    // Collection Mission
    if (Player.Mission.Type == MT_COLLECT)
    {
        Player.Mission.Current = CheckInventory(Player.Mission.Item.Actor);
        
        // Complete
        if (Player.Mission.Current >= Player.Mission.Amount)
        {
            TakeInventory(Player.Mission.Item.Actor, Player.Mission.Amount);
            Complete = true;
        };
    };
    
    // Kill Mission
    if (Player.Mission.Type == MT_KILL)
        if (Player.Mission.Current >= Player.Mission.Amount)
            Complete = true;
    
    // Mission Complete!
    if (Complete)
    {
        // Message
        ActivatorSound("mission/complete", 127);
        SetFont("BIGFONT");
        SetHudSize(640, 480, false);
        HudMessage("Mission Complete!\n\n\cj+%d XP\n\ck+%d Rank\n\cf+%d Credits\n\ciItem: \cj%s\n",
                   Player.Mission.RewardXP, Player.Mission.RewardRank, Player.Mission.RewardCredits, Player.Mission.RewardItem.Name,
                   HUDMSG_FADEOUT, MISSION_ID, CR_GREEN, 320.4, 240.0, 3.0, 2.0);
        
        // Reward - XP/Rank
        Player.XP += Player.Mission.RewardXP;
        Player.Rank += Player.Mission.RewardRank;
        
        // Credits
        GiveInventory("DRPGCredits", Player.Mission.RewardCredits);
        
        // Item
        SpawnForced(Player.Mission.RewardItem.Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
		SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
        
        // Clear the Mission
        ClearMission();
        
        // Reset the completion flag
        Complete = false;
    };
};

function void ClearMission()
{
    Player.Mission.Active = false;
    Player.Mission.Difficulty = 0;
    
    Player.Mission.RewardXP = 0;
    Player.Mission.RewardRank = 0;
    Player.Mission.RewardCredits = 0;
    // Player.Mission.RewardItem
    
    // Player.Mission.Item
    // Player.Mission.Monster
    Player.Mission.Current = 0;
    Player.Mission.Amount = 0;
};

// TODO: Difficulty effects which category it will pick items from
function ItemInfo GetRewardItem(int Difficulty)
{
    // Category Mapping
    int[ITEM_CATEGORIES] Categories = 
    {
        1;  // Weapons
        2;  // Ammo
        3;  // Health
        10; // Boots
        9;  // Loot
        3;  // Armor
        4;  // Powerups
        9;  // Mod Packs
        7;  // Stims/Augs
        5;  // Tokens
        6;  // Shield Parts
    };
    
    // Calculate Category
    int Category = Random(0, Difficulty + 2);
    
    /* We calculate an offset to make the highest reward scope larger if the category is not evenly divisible by
       MAX_DIFFICULTIES. The ScopeLength is calculated based on an evenly divisible measurement of the category.
       ScopeStart is a simple multiplier according to Difficulty. This creates evenly sized reward scopes within
       a category of items. Much better than what we've been doing.
       
       Thanks to SidDoyle for the super math
    */
    int RewardOffset = ItemMax[Categories[Category]] % MAX_DIFFICULTIES;
    int ScopeLength = (ItemMax[Categories[Category]] - RewardOffset) / MAX_DIFFICULTIES;
    int ScopeStart = Difficulty * ScopeLength;
    if (Difficulty == MAX_DIFFICULTIES - 1)
        ScopeLength += RewardOffset;
    int Index = Random(ScopeStart, ScopeStart + ScopeLength - 1);    
    ItemInfo Item = ItemData[Categories[Category]][Index];
    
    // Debugging
    if (GetCVar("drpg_debug"))
        Log("\cdDEBUG: \c-Mission Reward Item: Category %d (mapped to %d), Index %d\n", Category, Categories[Category], Index);
    
    // DoomRL Compatibility
    if (Category == 0) // Weapons
        Item.Actor = StrParam("%sPickup\n", Item.Actor);
    
    return Item;
};
