#include "Globals.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

bool StimActive;
int StimAmount;
int StimCapacity;
int StimTimer;

str[MAX_COMPONENTS] CompoundNames =
{
	// Stats
	"Strength"; "Defense"; "Vitality"; "Energy"; "Regeneration"; "Agility"; "Capacity"; "Luck";
	
	// Powerups
	// ...
	
	// Utilities
	"Purifier"; "Potency";
};

int[MAX_COMPONENTS] CompoundColors =
{
	// Stats
	CR_RED; CR_GREEN; CR_BRICK; CR_LIGHTBLUE; CR_PURPLE; CR_ORANGE; CR_BLUE; CR_GOLD;
	
	// Powerups
	// ...
	
	// Utilities
	CR_DARKGRAY; CR_WHITE;
};

script UseStim(void)
{
	// If you don't have a stim ready or components in it, terminate
	if (StimActive || StimSize == 0 || StimAmount == 0)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Set Timer
	StimActive = true;
	StimTimer = 35 * 30 + Stim[8];
	
	// Apply Potency
	if (Stim[0] > 0) Stim[0] += Stim[9];
	if (Stim[1] > 0) Stim[1] += Stim[9];
	if (Stim[2] > 0) Stim[2] += Stim[9];
	if (Stim[3] > 0) Stim[3] += Stim[9];
	if (Stim[4] > 0) Stim[4] += Stim[9];
	if (Stim[5] > 0) Stim[5] += Stim[9];
	if (Stim[6] > 0) Stim[6] += Stim[9];
	if (Stim[7] > 0) Stim[7] += Stim[9];
	
	// Apply Stat Bonuses
	StrengthBonus = Stim[0];
	DefenseBonus = Stim[1];
	VitalityBonus = Stim[2];
	EnergyBonus = Stim[3];
	RegenerationBonus = Stim[4];
	AgilityBonus = Stim[5];
	CapacityBonus = Stim[6];
	LuckBonus = Stim[7];
	
	// Apply current Stim to last used Stim
	for (int i = 0; i < MAX_COMPONENTS; i++)
		LastStim[i] = Stim[i];
	
	// Clear the Stim
	StimSize = 0;
	StimAmount = 0;
	for (int i = 0; i < MAX_COMPONENTS; i++)
		Stim[i] = 0;
	
	// FX
	ActivatorSound("misc/stim", 127);
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 1.0);
};

script ScriptAddCompound(int Type, int Amount)
{
	AddCompound(Type, Amount);
};

function void AddCompound(int Type, int Amount)
{
	Vials[Type] += Amount;
	
	if (Vials[Type] > 100)
		Vials[Type] = 100;
};

function void CheckStim()
{
	// Stim maximum capacities
	if (StimSize == 1)
		StimCapacity = 20;
	if (StimSize == 2)
		StimCapacity = 50;
	if (StimSize == 3)
		StimCapacity = 100;
	
	// Calculate the current Stim amount
	StimAmount = 0;
	for (int i = 0; i < MAX_COMPONENTS; i++)
		StimAmount += Stim[i];
	
	// Calculate timer for HUD
	StimTimerHUD = StimTimer / 35 + 1;
	
	// Set StimActive dummy item for the HUD
	SetInventory("StimActive", StimActive);
	
	// Decrease Stim Timer
	if (StimTimer > 0); StimTimer--;
	
	// Remove bonuses when Stim has expired
	if (StimTimer <= 0 && StimActive)
	{
		StrengthBonus = -LastStim[0];
		DefenseBonus = -LastStim[1];
		VitalityBonus = -LastStim[2];
		EnergyBonus = -LastStim[3];
		RegenerationBonus = -LastStim[4];
		AgilityBonus = -LastStim[5];
		CapacityBonus = -LastStim[6];
		LuckBonus = -LastStim[7];
		StimActive = false;
	};
};

function void MixStim(int Type)
{
	// You need at least 5% for mixing and the stim can't be full
	if (Vials[Type] < 5 || StimAmount > StimCapacity - 5)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Add from vial to stim
	ActivatorSound("menu/move", 127);
	Vials[Type] -= 5;
	Stim[Type] += 5;
};

function void SetStim(int Type)
{
	if ((Type == 0 && !CheckInventory("StimSmall")) || 
	    (Type == 1 && !CheckInventory("StimMedium")) ||
		(Type == 2 && !CheckInventory("StimLarge")))
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	StimSize = Type + 1;
	ActivatorSound("menu/move", 127);
	
	if (Type == 0) TakeInventory("StimSmall", 1);
	if (Type == 1) TakeInventory("StimMedium", 1);
	if (Type == 2) TakeInventory("StimLarge", 1);
};
