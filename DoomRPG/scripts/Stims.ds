#include "Globals.dh"
#include "RPG.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

str[MAX_COMPOUNDS] CompoundNames =
{
	// Stats
	"Strength"; "Defense"; "Vitality"; "Energy"; "Regeneration"; "Agility"; "Capacity"; "Luck";
	
	// Boosters
	"Purifier"; "Potency";
	
	// Powerups
	"Indestructible"; "Shadow"; "Infinity"; "Chrono"; "Adrenaline"; "Gravity"; "Vampire"; "Rage"; "Magnetic";
};

int[MAX_COMPOUNDS] CompoundColors =
{
	// Stats
	CR_RED; CR_GREEN; CR_BRICK; CR_LIGHTBLUE; CR_PURPLE; CR_ORANGE; CR_BLUE; CR_YELLOW;
		
	// Boosters
	CR_DARKGRAY; CR_WHITE;
	
	// Powerups
	CR_DARKGREEN; CR_DARKRED; CR_GOLD; CR_GREEN; CR_PURPLE; CR_ORANGE; CR_BRICK; CR_BLACK; CR_GRAY;
};

acscript UseStim() net
{
	// If you don't have a stim ready or components in it, terminate
	if (Player.Stim.Active || Player.Stim.Size == 0 || Player.Stim.Amount == 0)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Set Timer for Stat bonuses
	for (int i = 0; i < 8; i++)
		if (Player.Stim.Current[i] > 0)
		{
			Player.Stim.Active = true;
			Player.Stim.Timer = 35 * (30 + (Player.Stim.Current[STIM_PURIFIER] * 10));
		};
	
	// Apply Potency
	if (Player.Stim.Current[STIM_STRENGTH] > 0) Player.Stim.Current[STIM_STRENGTH] += Player.Stim.Current[STIM_POTENCY];
	if (Player.Stim.Current[STIM_DEFENSE] > 0) Player.Stim.Current[STIM_DEFENSE] += Player.Stim.Current[STIM_POTENCY];
	if (Player.Stim.Current[STIM_VITALITY] > 0) Player.Stim.Current[STIM_VITALITY] += Player.Stim.Current[STIM_POTENCY];
	if (Player.Stim.Current[STIM_ENERGY] > 0) Player.Stim.Current[STIM_ENERGY] += Player.Stim.Current[STIM_POTENCY];
	if (Player.Stim.Current[STIM_REGENERATION] > 0) Player.Stim.Current[STIM_REGENERATION] += Player.Stim.Current[STIM_POTENCY];
	if (Player.Stim.Current[STIM_AGILITY] > 0) Player.Stim.Current[STIM_AGILITY] += Player.Stim.Current[STIM_POTENCY];
	if (Player.Stim.Current[STIM_CAPACITY] > 0) Player.Stim.Current[STIM_CAPACITY] += Player.Stim.Current[STIM_POTENCY];
	if (Player.Stim.Current[STIM_LUCK] > 0) Player.Stim.Current[STIM_LUCK] += Player.Stim.Current[STIM_POTENCY];
	
	// Apply Stat Bonuses
	Player.StrengthBonus = Player.Stim.Current[STIM_STRENGTH] * 5;
	Player.DefenseBonus = Player.Stim.Current[STIM_DEFENSE] * 5;
	Player.VitalityBonus = Player.Stim.Current[STIM_VITALITY] * 5;
	Player.EnergyBonus = Player.Stim.Current[STIM_ENERGY] * 5;
	Player.RegenerationBonus = Player.Stim.Current[STIM_REGENERATION] * 5;
	Player.AgilityBonus = Player.Stim.Current[STIM_AGILITY] * 5;
	Player.CapacityBonus = Player.Stim.Current[STIM_CAPACITY] * 5;
	Player.LuckBonus = Player.Stim.Current[STIM_LUCK] + 5;
	
	// Apply Powerups
	for (int i = 0; i < Player.Stim.Current[STIM_INDESTRUCTIBLE]; i++) GiveInventory("PowerStimIndestructible", 1);
	for (int i = 0; i < Player.Stim.Current[STIM_SHADOW]; i++) GiveInventory("PowerStimShadow", 1);
	for (int i = 0; i < Player.Stim.Current[STIM_INFINITY]; i++) GiveInventory("PowerStimInfinity", 1);
	for (int i = 0; i < Player.Stim.Current[STIM_CHRONO]; i++) GiveInventory("PowerStimChrono", 1);
	for (int i = 0; i < Player.Stim.Current[STIM_ADRENALINE]; i++) Player.RegenBoostTimer += 35 * 10;
	for (int i = 0; i < Player.Stim.Current[STIM_GRAVITY]; i++) GiveInventory("PowerStimGravity", 1);
	for (int i = 0; i < Player.Stim.Current[STIM_VAMPIRE]; i++) GiveInventory("PowerStimVampire", 1);
	for (int i = 0; i < Player.Stim.Current[STIM_RAGE]; i++) GiveInventory("PowerStimRage", 1);
	for (int i = 0; i < Player.Stim.Current[STIM_MAGNETIC]; i++) Player.MagnetTimer += 35 * 10;
	
	// Apply Active Flags
	for (int i = 0; i < MAX_COMPOUNDS; i++)
		if (Player.Stim.Current[i] > 0) Player.Stim.ActiveBonus[i] = true;
	
	// Apply current Stim to last used Stim
	for (int i = 0; i < MAX_COMPOUNDS; i++)
		Player.Stim.Last[i] = Player.Stim.Current[i];
	
	// Clear the Stim
	Player.Stim.Size = 0;
	Player.Stim.Amount = 0;
	for (int i = 0; i < MAX_COMPOUNDS; i++)
		Player.Stim.Current[i] = 0;
	
	// FX
	ActivatorSound("misc/stim", 127);
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 1.0);
};

acscript AddCompound(int Type, int Amount)
{
	Player.Stim.Vials[Type] += Amount;
	
	if (Player.Stim.Vials[Type] > Player.Stim.VialMax)
		Player.Stim.Vials[Type] = Player.Stim.VialMax;
};

function void CheckStim()
{
	// Stim maximum capacities
	if (Player.Stim.Size == 1) // Small
		Player.Stim.Capacity = 10;
	if (Player.Stim.Size == 2) // Medium
		Player.Stim.Capacity = 25;
	if (Player.Stim.Size == 3) // Large
		Player.Stim.Capacity = 50;
	if (Player.Stim.Size == 4) // Extra-Large
		Player.Stim.Capacity = 100;
	
	// Calculate the current Stim amount
	Player.Stim.Amount = 0;
	for (int i = 0; i < MAX_COMPOUNDS; i++)
		Player.Stim.Amount += Player.Stim.Current[i];
	
	// Decrease Stim Timer
	if (Player.Stim.Timer > 0 && !CheckInventory("MenuFreezer") && !CheckInventory("PowerTimeFreezer"))
		Player.Stim.Timer--;
	
	// Remove bonuses and active flags when Stim has expired
	if (Player.Stim.Timer <= 0 && Player.Stim.Active)
	{
		Player.StrengthBonus = -Player.Stim.Last[STIM_STRENGTH] * 5;
		Player.DefenseBonus = -Player.Stim.Last[STIM_DEFENSE] * 5;
		Player.VitalityBonus = -Player.Stim.Last[STIM_VITALITY] * 5;
		Player.EnergyBonus = -Player.Stim.Last[STIM_ENERGY] * 5;
		Player.RegenerationBonus = -Player.Stim.Last[STIM_REGENERATION] * 5;
		Player.AgilityBonus = -Player.Stim.Last[STIM_AGILITY] * 5;
		Player.CapacityBonus = -Player.Stim.Last[STIM_CAPACITY] * 5;
		Player.LuckBonus = -Player.Stim.Last[STIM_LUCK] * 5;
		Player.Stim.Active = false;
		
		for (int i = 0; i < MAX_COMPOUNDS; i++)
			Player.Stim.ActiveBonus[i] = false;
	};

	// Stim FX
	if (GetCVar("drpg_stim_effect"))
	{
		if (Player.Stim.ActiveBonus[STIM_STRENGTH]) SpawnAura(0, 1, true);
		if (Player.Stim.ActiveBonus[STIM_DEFENSE]) SpawnAura(0, 2, true);
		if (Player.Stim.ActiveBonus[STIM_VITALITY]) SpawnAura(0, 4, true);
		if (Player.Stim.ActiveBonus[STIM_ENERGY]) SpawnAura(0, 5, true);
		if (Player.Stim.ActiveBonus[STIM_REGENERATION]) SpawnAura(0, 6, true);
		if (Player.Stim.ActiveBonus[STIM_AGILITY]) SpawnAura(0, 7, true);
		if (Player.Stim.ActiveBonus[STIM_CAPACITY]) SpawnAura(0, 8, true);
		if (Player.Stim.ActiveBonus[STIM_LUCK]) SpawnAura(0, 9, true);
	};
};

function void MixStim(int Type)
{
	if (Player.Stim.Vials[Type] <= 0 || Player.Stim.Amount >= Player.Stim.Capacity)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Add from vial to stim
	ActivatorSound("menu/move", 127);
	Player.Stim.Vials[Type]--;
	Player.Stim.Current[Type]++;
};

function void SetStim(int Type)
{
	if ((Type == 0 && !CheckInventory("StimSmall")) || 
	    (Type == 1 && !CheckInventory("StimMedium")) ||
		(Type == 2 && !CheckInventory("StimLarge")) ||
		(Type == 3 && !CheckInventory("StimXL")))
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	Player.Stim.Size = Type + 1;
	ActivatorSound("menu/move", 127);
	
	if (Type == 0) TakeInventory("StimSmall", 1);
	if (Type == 1) TakeInventory("StimMedium", 1);
	if (Type == 2) TakeInventory("StimLarge", 1);
	if (Type == 3) TakeInventory("StimXL", 1);
};
