#include "Globals.dh"
#include "RPG.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

str[MAX_COMPONENTS] CompoundNames =
{
	// Stats
	"Strength"; "Defense"; "Vitality"; "Energy"; "Regeneration"; "Agility"; "Capacity"; "Luck";
	
	// Powerups
	// ...
	
	// Utilities
	"Purifier"; "Potency";
};

int[MAX_COMPONENTS] CompoundColors =
{
	// Stats
	CR_RED; CR_GREEN; CR_BRICK; CR_LIGHTBLUE; CR_PURPLE; CR_ORANGE; CR_BLUE; CR_GOLD;
	
	// Powerups
	// ...
	
	// Utilities
	CR_DARKGRAY; CR_WHITE;
};

script UseStim() net
{
	// If you don't have a stim ready or components in it, terminate
	if (Player.Stim.Active || Player.Stim.Size == 0 || Player.Stim.Amount == 0)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Set Timer
	Player.Stim.Active = true;
	Player.Stim.Timer = 35 * (30 + Player.Stim.Current[8]);
	
	// Apply Potency
	if (Player.Stim.Current[0] > 0) Player.Stim.Current[0] += Player.Stim.Current[9];
	if (Player.Stim.Current[1] > 0) Player.Stim.Current[1] += Player.Stim.Current[9];
	if (Player.Stim.Current[2] > 0) Player.Stim.Current[2] += Player.Stim.Current[9];
	if (Player.Stim.Current[3] > 0) Player.Stim.Current[3] += Player.Stim.Current[9];
	if (Player.Stim.Current[4] > 0) Player.Stim.Current[4] += Player.Stim.Current[9];
	if (Player.Stim.Current[5] > 0) Player.Stim.Current[5] += Player.Stim.Current[9];
	if (Player.Stim.Current[6] > 0) Player.Stim.Current[6] += Player.Stim.Current[9];
	if (Player.Stim.Current[7] > 0) Player.Stim.Current[7] += Player.Stim.Current[9];
	
	// Apply Stat Bonuses
	Player.StrengthBonus = Player.Stim.Current[0];
	Player.DefenseBonus = Player.Stim.Current[1];
	Player.VitalityBonus = Player.Stim.Current[2];
	Player.EnergyBonus = Player.Stim.Current[3];
	Player.RegenerationBonus = Player.Stim.Current[4];
	Player.AgilityBonus = Player.Stim.Current[5];
	Player.CapacityBonus = Player.Stim.Current[6];
	Player.LuckBonus = Player.Stim.Current[7];
	
	// Apply current Stim to last used Stim
	for (int i = 0; i < MAX_COMPONENTS; i++)
		Player.Stim.Last[i] = Player.Stim.Current[i];
	
	// Clear the Stim
	Player.Stim.Size = 0;
	Player.Stim.Amount = 0;
	for (int i = 0; i < MAX_COMPONENTS; i++)
		Player.Stim.Current[i] = 0;
	
	// FX
	ActivatorSound("misc/stim", 127);
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 1.0);
};

script AddCompoundScript(int Type, int Amount)
{
	AddCompound(Type, Amount);
};

function void AddCompound(int Type, int Amount)
{
	Player.Stim.Vials[Type] += Amount;
	
	if (Player.Stim.Vials[Type] > 100)
		Player.Stim.Vials[Type] = 100;
};

function void CheckStim()
{
	// Stim maximum capacities
	if (Player.Stim.Size == 1)
		Player.Stim.Capacity = 20;
	if (Player.Stim.Size == 2)
		Player.Stim.Capacity = 50;
	if (Player.Stim.Size == 3)
		Player.Stim.Capacity = 100;
	
	// Calculate the current Stim amount
	Player.Stim.Amount = 0;
	for (int i = 0; i < MAX_COMPONENTS; i++)
		Player.Stim.Amount += Player.Stim.Current[i];
	
	// Calculate timer for HUD
	StimTimerHUD = Player.Stim.Timer / 35 + 1;
	
	// Set StimActive dummy item for the HUD
	SetInventory("StimActive", Player.Stim.Active);
	
	// Decrease Stim Timer
	if (Player.Stim.Timer > 0); Player.Stim.Timer--;
	
	// Remove bonuses when Stim has expired
	if (Player.Stim.Timer <= 0 && Player.Stim.Active)
	{
		Player.StrengthBonus = -Player.Stim.Last[0];
		Player.DefenseBonus = -Player.Stim.Last[1];
		Player.VitalityBonus = -Player.Stim.Last[2];
		Player.EnergyBonus = -Player.Stim.Last[3];
		Player.RegenerationBonus = -Player.Stim.Last[4];
		Player.AgilityBonus = -Player.Stim.Last[5];
		Player.CapacityBonus = -Player.Stim.Last[6];
		Player.LuckBonus = -Player.Stim.Last[7];
		Player.Stim.Active = false;
	};
};

function void MixStim(int Type)
{
	// You need at least 5% for mixing and the stim can't be full
	if (Player.Stim.Vials[Type] < 5 || Player.Stim.Amount > Player.Stim.Capacity - 5)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Add from vial to stim
	ActivatorSound("menu/move", 127);
	Player.Stim.Vials[Type] -= 5;
	Player.Stim.Current[Type] += 5;
};

function void SetStim(int Type)
{
	if ((Type == 0 && !CheckInventory("StimSmall")) || 
	    (Type == 1 && !CheckInventory("StimMedium")) ||
		(Type == 2 && !CheckInventory("StimLarge")))
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	Player.Stim.Size = Type + 1;
	ActivatorSound("menu/move", 127);
	
	if (Type == 0) TakeInventory("StimSmall", 1);
	if (Type == 1) TakeInventory("StimMedium", 1);
	if (Type == 2) TakeInventory("StimLarge", 1);
};
