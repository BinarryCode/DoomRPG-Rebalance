#include "RPG.dh"

#include "Menu.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Turret.dh"
#include "Utils.dh"

str[STIM_MAX] CompoundNames =
{
    // Stats
    "Strength";
    "Defense";
    "Vitality";
    "Energy";
    "Regeneration";
    "Agility";
    "Capacity";
    "Luck";
    
    // Boosters
    "Purifier";
    "Potency";
    
    // Powerups
    "Indestructible";
    "Shadow";
    "Infinity";
    "Chrono";
    "Adrenaline";
    "Gravity";
    "Vampire";
    "Rage";
    "Magnetic";
};

int[STIM_MAX] CompoundColors =
{
    // Stats
    CR_RED;
    CR_GREEN;
    CR_BRICK;
    CR_LIGHTBLUE;
    CR_PURPLE;
    CR_ORANGE;
    CR_BLUE;
    CR_YELLOW;
        
    // Boosters
    CR_DARKGRAY;
    CR_WHITE;
    
    // Powerups
    CR_DARKGREEN;
    CR_DARKRED;
    CR_GOLD;
    CR_GREEN;
    CR_PURPLE;
    CR_ORANGE;
    CR_BRICK;
    CR_BLACK;
    CR_GRAY;
};

int StimStatsStart = 0;
int StimStatsEnd = 8;
int StimPowerupStart = 10;
int StimPowerupEnd = STIM_MAX;

acscript void UseStim() net
{
    bool Turret = false;
    int[STIM_MAX] Injector;
    
    // If you're dead, terminate
    if (GetActorProperty(0, APROP_Health) <= 0) return;
    
    // Generate and Activate Turret Stim
    if (GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_SPEED && Player.Turret.Active)
    {
        Turret = true;
        
        // Focused injection handling
        if (Player.Turret.StimFocused && Player.Turret.StimTimer <= 0)
        {
            Player.Turret.StimPicked = false;
            TurretPickStimMenu();
            
            // Wait for the player to pick a vial type
            while (!Player.Turret.StimPicked)
                Delay(1);
            
            // If the player cancelled out of the menu, return
            if (Player.Turret.StimVialType == -1)
                return;
        };
        
        // Store Injector for restore later
        for (int i = 0; i < STIM_MAX; i++)
            Injector[i] = Player.Stim.Current[i];
        
        if (!TurretStim())
            return;
        
        Delay(1);
    };
    
    if (Player.Stim.Size == 0 && !Turret)
    {
        PrintError("You don't have an injector ready");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    if (Player.Stim.Amount == 0 && !Turret)
    {
        PrintError("Your current injector is empty");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    // Store previous states
    if (!Player.Stim.Active)
        Player.Stim.PrevStats =
        {
            Player.Strength;
            Player.Defense;
            Player.Vitality;
            Player.Energy;
            Player.Regeneration;
            Player.Agility;
            Player.Capacity;
            Player.Luck;
        };
    
    // Set Timer for Stat bonuses
    for (int i = StimStatsStart; i < StimStatsEnd + 2; i++)
        if (Player.Stim.Current[i] > 0)
        {
            Player.Stim.Active = true;
            Player.Stim.Timer += 35 * (60 + (Player.Stim.Current[STIM_PURIFIER] * 30));
            if (Player.Stim.Timer >= Player.Stim.TimerMax)
                Player.Stim.TimerMax = Player.Stim.Timer;
        };
    
    // Apply Multiplier and Potency
    for (int i = StimStatsStart; i < StimStatsEnd; i++)
        Player.Stim.Current[i] = (Player.Stim.Current[i] * 5) + (Player.Stim.Current[STIM_POTENCY] * 5);
    
    // Apply Stat Bonuses
    Player.StrengthBonus += Player.Stim.Current[STIM_STRENGTH];
    Player.DefenseBonus += Player.Stim.Current[STIM_DEFENSE];
    Player.VitalityBonus += Player.Stim.Current[STIM_VITALITY];
    Player.EnergyBonus += Player.Stim.Current[STIM_ENERGY];
    Player.RegenerationBonus += Player.Stim.Current[STIM_REGENERATION];
    Player.AgilityBonus += Player.Stim.Current[STIM_AGILITY];
    Player.CapacityBonus += Player.Stim.Current[STIM_CAPACITY];
    Player.LuckBonus += Player.Stim.Current[STIM_LUCK];
    
    // Setup Powerup Timers
    for (int i = StimPowerupStart; i < StimPowerupEnd; i++)
        if (Player.Stim.Current[i] > 0)
        {
            Player.Stim.PowerupTimer[i] += (35 * Player.Stim.Current[i]) * 30;
            if (Player.Stim.PowerupTimer[i] > Player.Stim.PowerupTimerMax[i])
                Player.Stim.PowerupTimerMax[i] = Player.Stim.PowerupTimer[i];
            
            // Regeneration Vial handling
            if (i == STIM_ADRENALINE)
                Player.RegenBoostTimer += (35 * Player.Stim.Current[i]) * 30;
        };
    
    // Apply Active Flags
    for (int i = 0; i < STIM_MAX; i++)
        if (Player.Stim.Current[i] > 0)
            Player.Stim.ActiveBonus[i] = true;
    
    // Toxicity From amount of different compounds
    for (int i = 0; i < STIM_MAX; i++)
        if (Player.Stim.ActiveBonus[i])
            Player.Toxicity++;
    
    // Toxicity from total amount of compounds
    Player.Toxicity += Player.Stim.Amount / 5;
    
    // Toxicity added Based on Skill
    Player.Toxicity += GameSkill();
    
    // Apply current Stim to last used Stim
    for (int i = 0; i < STIM_MAX; i++)
        Player.Stim.Last[i] += Player.Stim.Current[i];
    
    // Restore Injector if it was saved from a turret
    if (Turret)
        for (int i = 0; i < STIM_MAX; i++)
            Player.Stim.Current[i] = Injector[i];
    
    // Clear the Stim
    Player.Stim.Size = 0;
    Player.Stim.Amount = 0;
    for (int i = 0; i < STIM_MAX; i++)
        Player.Stim.Current[i] = 0;
    
    // FX
    ClearToxicityMeter();
    ActivatorSound("items/stim", 127);
    if (Random(0, 100) == 0) // DRUGS
        ActivatorSound("misc/drugs", 127);
    FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 1.0);
    if (!Turret)
        TossStim();
};

acscript void TossStim()
{
    int TID = UniqueTID();
    str StimTossActor;
    fixed Angle = GetActorAngle(0);
    fixed VelX;
    fixed VelY;
    
    // Injector size
    switch (Player.Stim.Size)
    {
    case 1: // Small
        StimTossActor = "DRPGStimSmallTossed";
        break;
    case 2: // Medium
        StimTossActor = "DRPGStimMediumTossed";
        break;
    case 3: // Large
        StimTossActor = "DRPGStimLargeTossed";
        break;
    case 0: // Detox
    case 4: // XL
        StimTossActor = "DRPGStimXLTossed";  
        break;
    };
    
    // Spawn the empty injector
    SpawnForced(StimTossActor, GetActorX(0), GetActorY(0), GetActorZ(0) + 48.0, TID, 0);
    
    // Toss direction
    switch (Random(1, 3))
    {
    case 1: // Left side
        Angle -= 0.25;
        break;
    case 2: // Right side
        Angle += 0.25;
        break;
    case 3: // Behind
        Angle -= 0.5;
        break;
    };
    
    VelX = Cos(Angle);
    VelY = Sin(Angle);
    
    // Adjust the trajectory
    SetActorVelocity(TID, VelX * RandomFixed(2.0, 4.0), VelY * RandomFixed(2.0, 4.0), 0.0, false, false);
};

acscript void AddCompound(int Type, int Amount)
{
    Player.Stim.Vials[Type] += Amount;
    
    if (Player.Stim.Vials[Type] > Player.Stim.VialMax)
        Player.Stim.Vials[Type] = Player.Stim.VialMax;
};

function void CheckStim()
{
    // Saves typing and lets me iterate the powerup timers way easier
    auto str[] StimPowerupActors =
    {
        "DRPGPowerStimIndestructible";
        "DRPGPowerStimShadow";
        "DRPGPowerStimInfinity";
        "DRPGPowerStimChrono";
        "DRPGPowerStimAdrenaline";
        "DRPGPowerStimGravity";
        "DRPGPowerStimVampire";
        "DRPGPowerStimRage";
        "DRPGPowerStimMagnetic";
    };
    
    // Stim maximum capacities
    if (Player.Stim.Size == 1) // Small
        Player.Stim.Capacity = 10;
    if (Player.Stim.Size == 2) // Medium
        Player.Stim.Capacity = 25;
    if (Player.Stim.Size == 3) // Large
        Player.Stim.Capacity = 50;
    if (Player.Stim.Size == 4) // Extra-Large
        Player.Stim.Capacity = 100;
    
    // Calculate the current Stim amount
    Player.Stim.Amount = 0;
    for (int i = 0; i < STIM_MAX; i++)
        Player.Stim.Amount += Player.Stim.Current[i];
    
    // Decrease Stim Timer
    if (Player.Stim.Timer > 0)
        Player.Stim.Timer--;
    
    // Mugshot
    if (Player.Stim.Timer > 0)
        SetMugShotState("Ouch");
    
    // Powerup Timer Handling
    for (int i = StimPowerupStart; i < StimPowerupEnd; i++)
        if (Player.Stim.PowerupTimer[i] > 0)
        {
            GiveInventory(StrParam("%s\n", StimPowerupActors[i - StimPowerupStart]), 1);
            Player.Stim.PowerupTimer[i]--;
        };
    
    // Remove bonuses and active flags when Stim has expired
    if (Player.Stim.Timer <= 0 && Player.Stim.Active)
    {
        Player.Stim.Active = false;
        
        // Restore previous stats
        Player.Strength = Player.Stim.PrevStats[STAT_STRENGTH];
        Player.Defense = Player.Stim.PrevStats[STAT_DEFENSE];
        Player.Vitality = Player.Stim.PrevStats[STAT_VITALITY];
        Player.Energy = Player.Stim.PrevStats[STAT_ENERGY];
        Player.Regeneration = Player.Stim.PrevStats[STAT_REGENERATION];
        Player.Agility = Player.Stim.PrevStats[STAT_AGILITY];
        Player.Capacity = Player.Stim.PrevStats[STAT_CAPACITY];
        Player.Luck = Player.Stim.PrevStats[STAT_LUCK];
        
        for (int i = 0; i < STIM_MAX; i++)
            Player.Stim.Last[i] = 0;
        
        for (int i = 0; i < STIM_MAX; i++)
            Player.Stim.ActiveBonus[i] = false;
    };
};

function void MixStim(int Type)
{
    if (Player.Stim.Size == 0)
    {
        PrintError("You don't have an injector ready");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    if (Player.Stim.Vials[Type] <= 0)
    {
        PrintError("You don't have any vials of this type left");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    if (Player.Stim.Amount >= Player.Stim.Capacity)
    {
        PrintError("The injector is currently full");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    // Add from vial to stim
    ActivatorSound("menu/move", 127);
    Player.Stim.Vials[Type]--;
    Player.Stim.Current[Type]++;
};

function void SetStim(int Type)
{
    if ((Type == 0 && !CheckInventory("DRPGStimSmall")) || 
        (Type == 1 && !CheckInventory("DRPGStimMedium")) ||
        (Type == 2 && !CheckInventory("DRPGStimLarge")) ||
        (Type == 3 && !CheckInventory("DRPGStimXL")))
    {
        PrintError("You have no injectors of this type");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    if (Player.Stim.Size > 0)
    {
        PrintError("You already have a stim ready");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    Player.Stim.Size = Type + 1;
    ActivatorSound("menu/move", 127);
    
    if (Type == 0) TakeInventory("DRPGStimSmall", 1);
    if (Type == 1) TakeInventory("DRPGStimMedium", 1);
    if (Type == 2) TakeInventory("DRPGStimLarge", 1);
    if (Type == 3) TakeInventory("DRPGStimXL", 1);
};
