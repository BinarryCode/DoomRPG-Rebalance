#include "Arena.dh"
#include "Globals.dh"
#include "RPG.dh"
#include "Menu.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Utils.dh"

bool ArenaActive = false;
bool ArenaTimerActive = false;
int ArenaState = ARENA_READY;
int ArenaPlayerNumber = -1;
int ArenaMonstersTID = 1099;
int ArenaItemSpotTID = 1200;
int ArenaItemTID = 1201;
int ArenaSpotSpawns = 1100;
int ArenaSectorTag = 100;
int ArenaWave;
int ArenaTimer;
int ArenaCount;
int ArenaMod;
int ArenaEnvironment;
int ArenaKey;

str[MAX_MODS] ArenaMods =
{
	"\cgNo Regeneration";
};

str[MAX_ENVIRONMENTS] ArenaEnvironments =
{
	"\cmBlackout";
	"\cjFoggy";
	"\ciThe Floor is Lava";
	"\cuGrayscale";
};

str[MAX_BONUS] ArenaBonus =
{
    "\cgFull Health";
    "\cvFull EP";
    "\cfMoney Drop";
    "\cuAmmo Drop";
    "\cgHealth Drop";
    "\cdArmor Drop";
    "\cuWeapon Drop";
	"\caPowerup Drop";
	"\caRune Drop";
	"\cuStim Drop";
	"\cqKey Drop";
};

str[] Monsters =
{
    "ZombieMan"; "ShotgunGuy"; "DoomImp"; "Demon"; "Spectre"; "ChaingunGuy";
    "HellKnight"; "BaronOfHell"; "Cacodemon"; "LostSoul";
    "PainElemental"; "Revenant"; "Fatso"; "Arachnotron"; "ArchVile";
    "Cyberdemon"; "SpiderMastermind";
};

// Arena Script
acscript ArenaLoop()
{
	SetMusic("Outpost", 3);
	ArenaSetEnvironment(0);
	
	// Arena Loop
    while (true)
    {
        // Stop the script if the Arena is stopped or the Arena activator dies
        if (!ArenaActive || GetActorProperty(Players(ArenaPlayerNumber).TID, APROP_Health) <= 0)
		{
			ArenaStop();
            return;
		};
        
        // Arena HUD
		ArenaDrawHUD();
        
		// Arena Status Handling
		if (ArenaState == ARENA_INTERMISSION)
		{
			int BonusRandomizer = Random(-10, MAX_BONUS - 1);

			ArenaMod = -1;
			ArenaGetBonus(BonusRandomizer);
			ArenaSetEnvironment(0);
			ArenaState = ARENA_WAITING;
		}
		else if (ArenaState == ARENA_WAITING)
		{
			int Buttons = GetPlayerInput(ArenaPlayerNumber, INPUT_BUTTONS);
			
			SetHudSize(0, 0, false);
			SetFont("BIGFONT");
			
			if (ArenaPlayerNumber == PlayerNumber())
			{
				if (!Player.InMenu && !Player.InShop && !Player.OutpostMenu)
					HudMessage("Press \cd%K\c- to start the next wave\nPress \cd%K\c- to exit the Arena\n", "+use" , "+speed",
							   HUDMSG_PLAIN, 0, CR_WHITE, 1.5, 0.75, 0.05);
						
				if (Buttons & BT_USE && (!Player.InMenu && !Player.InShop && !Player.OutpostMenu))
					ArenaState = ARENA_READY;
				if (Buttons & BT_SPEED && (!Player.InMenu && !Player.InShop && !Player.OutpostMenu))
				{
					ArenaStop();
					return;
				};
			};
		}
		else if (ArenaState == ARENA_READY)
		{
			int ModRandomizer = Random(-10, MAX_MODS - 1);
			
			// Clean corpses every couple of waves
            if (ArenaWave > 1 && (ArenaWave % 4) == 1)
				Thing_Remove(ArenaMonstersTID);

			ArenaWave++;
			ArenaMod = ModRandomizer;
			ArenaSetEnvironment(-1);
			ArenaSpawnMobs();
			ArenaState = ARENA_ACTIVE;
		}
		else if (ArenaState == ARENA_ACTIVE)
		{
			ArenaCheckMod();
			ArenaCount = ThingCount(0, ArenaMonstersTID);
			if (ArenaCount <= 0)
				ArenaState = ARENA_INTERMISSION;
			if (ArenaTimerActive && ArenaTimer > 0)
				ArenaTimer--;
		};
		
        Delay(1);
    };
};

// Stop the Arena session
acscript ArenaStop()
{
	if (ArenaWave > 1)
		ArenaState = ARENA_WAITING
	else
		ArenaState = ARENA_READY;
	
	ArenaActive = false;
	
	if (ArenaWave >= ArenaMaxWave)
		ArenaMaxWave = ArenaWave;
	
	ArenaPlayerNumber = -1;
	ArenaCount = 0;
    ArenaMod = -1;
	ArenaSetEnvironment(0);
    
	SetMusic("Outpost");
	Ceiling_RaiseByValue(ArenaSectorTag - 1, 64, 128);
	Thing_Remove(ArenaMonstersTID);
	
	if (!InMultiplayer)
		if (GetActorProperty(0, APROP_Health) <= 0)
			SetMusic("Outpost", 1)
		else
			SetMusic("Outpost", 0);
};

// Arena Test Script
acscript SetArena(int Wave, int Environment, int Bonus)
{
    if (Wave > 0)
		ArenaWave = Wave;
	
	if (Environment >= 0)
		ArenaSetEnvironment(Environment);
	
	if (Bonus >= 0)
		ArenaGetBonus(Bonus);
};

acfunc void ArenaDrawHUD()
{
	fixed X = -24.1;
	fixed Y = 24.0;
	
	SetHudSize(320, 240, false);
	SetFont("SMALLFONT");
	
	// Wave
	HudMessageBold("Wave: %d\n", ArenaWave,
				   HUDMSG_PLAIN, 2, CR_GREEN, X, Y, 0.05);
	Y += 8.0;

	// Monster Count
	if (ArenaCount > 0)
	{
		HudMessageBold("Monsters: %d\n", ArenaCount,
					   HUDMSG_PLAIN, 1, CR_GREEN, X, Y, 0.05);
		Y += 8.0;
	};
	
	// Timer
	if (ArenaTimerActive && ArenaTimer > 0)
	{
		HudMessageBold("Time: %d\n", ArenaTimer / 35 + 1,
					   HUDMSG_PLAIN, 3, CR_WHITE, X, Y, 0.05);
		Y += 8.0;
	};
	
	// Mod
	if (ArenaMod >= 0)
	{
		HudMessageBold("%s\n", ArenaMods[ArenaMod],
					   HUDMSG_PLAIN, 4, CR_WHITE, X, Y, 0.05);
		Y += 8.0;
	};

	// Environment
	if (ArenaEnvironment > 0)
	{
		HudMessageBold("%s\n", ArenaEnvironments[ArenaEnvironment - 1],
					   HUDMSG_PLAIN, 5, CR_WHITE, X, Y, 0.05);
		Y += 8.0;
	};
};

acfunc void ArenaCheckMod()
{
	switch (ArenaMod)
	{
		case 0: // No Regeneration
			Player.HPRate = 0;
			Player.EPRate = 0;
			break;
	};
};

acfunc void ArenaGetBonus(int Bonus)
{
	str SpawnItem;
	
	switch (Bonus)
	{
		case 0: // Full Health
			if (InMultiplayer)
				for (int i = 0; i < MAX_PLAYERS; i++)
					SetActorProperty(Players(i).TID, APROP_Health, GetActorProperty(Players(i).TID, APROP_SpawnHealth))
			else
			{
				if (GetActorProperty(0, APROP_Health) >= Player.HealthMax)
				{
					ArenaGetBonus(Random(0, MAX_BONUS - 1));
					return;
				}
				else
					HealThing(1000000);
			};
			break;
		case 1: // Full EP
			if (InMultiplayer)
				for (int i = 0; i < MAX_PLAYERS; i++)
					Players(i).EP = Players(i).EPMax
			else
			{
				if (Player.EP >= Player.EPMax)
				{
					ArenaGetBonus(Random(0, MAX_BONUS - 1));
					return;
				}
				else
					Player.EP = Player.EPMax;
			};
			break;
		case 2: // Money Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			for (int i = 0; i < ArenaWave * PlayerCount(); i++)
			{
				SpawnSpot("MoneyDropper", ArenaItemSpotTID, ArenaItemTID, 0);
				SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
				Thing_ChangeTID(ArenaItemTID, 0);
			};
			break;
		case 3: // Ammo Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			for (int i = 0; i < PlayerCount(); i++)
			{
				SpawnSpot("BackpackRandomizer", ArenaItemSpotTID, ArenaItemTID, 0);
				SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
				Thing_ChangeTID(ArenaItemTID, 0);
			};
			break;
		case 4: // Health Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			for (int i = 0; i < PlayerCount(); i++)
			{
				SpawnSpot("HealthDropper", ArenaItemSpotTID, ArenaItemTID, 0);
				SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
				Thing_ChangeTID(ArenaItemTID, 0);
			};
			break;
		case 5: // Armor Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			for (int i = 0; i < PlayerCount(); i++)
			{
				if (Random(1, 2) == 1)
					SpawnItem = "GreenArmorRandomizer"
				else
					SpawnItem = "BlueArmorRandomizer";
				SpawnSpot(SpawnItem, ArenaItemSpotTID, ArenaItemTID, 0);
				SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
				Thing_ChangeTID(ArenaItemTID, 0);
			};
			break;
		case 6: // Weapon Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			for (int i = 0; i < PlayerCount(); i++)
			{
				SpawnSpot("WeaponDropper", ArenaItemSpotTID, ArenaItemTID, 0);
				SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
				Thing_ChangeTID(ArenaItemTID, 0);
			};
			break;
		case 7: // Powerup Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			for (int i = 0; i < PlayerCount(); i++)
			{
				SpawnSpot("PowerupDropper", ArenaItemSpotTID, ArenaItemTID, 0);
				SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
				Thing_ChangeTID(ArenaItemTID, 0);
			};
			break;
		case 8: // Rune Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			for (int i = 0; i < PlayerCount(); i++)
			{
				SpawnSpot("RuneDropper", ArenaItemSpotTID, ArenaItemTID, 0);
				SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
				Thing_ChangeTID(ArenaItemTID, 0);
			};
			break;
		case 9: // Stim Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			if (Random(1, 10) == 1)
			{
				for (int i = 0; i < PlayerCount(); i++)
				{
					SpawnSpot("StimDropper", ArenaItemSpotTID, ArenaItemTID, 0);
					SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
					Thing_ChangeTID(ArenaItemTID, 0);
				};
			}
			else
				for (int i = 0; i < (ArenaWave / 10 + 1) * PlayerCount(); i++)
				{
					SpawnSpot("VialDropper", ArenaItemSpotTID, ArenaItemTID, 0);
					SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
					Thing_ChangeTID(ArenaItemTID, 0);
				};
			break;
		case 10: // Key Drop
			SpawnSpot("TeleportFog", ArenaItemSpotTID, 0, 0);
			if (ArenaKey == 0) SpawnItem = "RedCard";
			if (ArenaKey == 1) SpawnItem = "YellowCard";
			if (ArenaKey == 2) SpawnItem = "BlueCard";
			if (ArenaKey == 3) SpawnItem = "RedSkull";
			if (ArenaKey == 4) SpawnItem = "YellowSkull";
			if (ArenaKey == 5) SpawnItem = "BlueSkull";
			if (ArenaKey == 6)
			{ 
				ArenaGetBonus(Random(0, MAX_BONUS - 1));
				return;
			};
			for (int i = 0; i < PlayerCount(); i++)
			{
				SpawnSpot(SpawnItem, ArenaItemSpotTID, ArenaItemTID, 0);
				SetActorVelocity(ArenaItemTID, Random(-8, 8), Random(-8, 8), Random(-8, 8), true, false);
				Thing_ChangeTID(ArenaItemTID, 0);
			};
			if (ArenaKey < 6) ArenaKey++;
			break;
	};
	
	// Bonus Message
	if (Bonus >= 0)
	{
		SetHudSize(0, 0, false);
		SetFont("BIGFONT");
		HudMessageBold("%s\n", ArenaBonus[Bonus], HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 0.5, 0.5, 2.0, 1.0);
		ActivatorSound("misc/secret", 127);
	};
};

acfunc void ArenaSpawnMobs()
{
	int MonsterID;
	
	for (int i = ArenaSpotSpawns; i < ArenaSpotSpawns + 30; i++)
	{
		// Get a random monster from the list
		MonsterID = Random(-5 + (ArenaWave / 10), ArenaWave / 5);
		
		if (MonsterID > 16)
			MonsterID = 16;
		
		// Skip this spawn spot if < 0 is hit by the randomizer
		if (MonsterID < 0)
			continue;
			
		// Spawn the monster
		if (SpawnSpotFacingForced(Monsters[MonsterID], i, ArenaMonstersTID))
			SpawnSpotForced("TeleportFog", i, 0, 0);
	};
};

acfunc void ArenaSetEnvironment(int ID)
{
	if (ID == -1)
	{
		int EnvironmentRandomizer = Random(-10, MAX_ENVIRONMENTS);
		if (EnvironmentRandomizer > 0)
			ID = EnvironmentRandomizer;
	};

	switch (ID)
	{
		case 0: // Normal
			Light_Fade(ArenaSectorTag, 192, 35);
			Light_Fade(ArenaSectorTag + 1, 192, 35);
			Light_Fade(ArenaSectorTag + 2, 192, 35);
			Sector_SetFade(ArenaSectorTag, 0, 0, 0);
			Sector_SetFade(ArenaSectorTag + 1, 0, 0, 0);
			Sector_SetFade(ArenaSectorTag + 2, 0, 0, 0);
			ChangeFloor(ArenaSectorTag, "CEIL5_1");
			ChangeFloor(ArenaSectorTag + 1, "CEIL5_2");
			ChangeFloor(ArenaSectorTag + 2, "FLAT3");
			Sector_SetDamage(ArenaSectorTag, 0, 0);
			Sector_SetDamage(ArenaSectorTag + 1, 0, 0);
			Sector_SetDamage(ArenaSectorTag + 2, 0, 0);
			Sector_SetColor(ArenaSectorTag, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 1, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 2, 255, 255, 255);
			break;
		case 1: // Blackout
			Light_Fade(ArenaSectorTag, 0, 35);
			Light_Fade(ArenaSectorTag + 1, 0, 35);
			Light_Fade(ArenaSectorTag + 2, 0, 35);
			break;
		case 2: // Foggy
			int r = Random(0, 255);
			int g = Random(0, 255);
			int b = Random(0, 255);
			Light_Fade(ArenaSectorTag, 128, 35);
			Light_Fade(ArenaSectorTag + 1, 128, 35);
			Light_Fade(ArenaSectorTag + 2, 128, 35);
			Sector_SetFade(ArenaSectorTag, r, g, b);
			Sector_SetFade(ArenaSectorTag + 1, r, g, b);
			Sector_SetFade(ArenaSectorTag + 2, r, g, b);
			break;
		case 3: // The Floor is Lava
			ChangeFloor(ArenaSectorTag, "LAVA1");
			ChangeFloor(ArenaSectorTag + 1, "LAVA1");
			ChangeFloor(ArenaSectorTag + 2, "LAVA1");
			Sector_SetDamage(ArenaSectorTag, 1, 14);
			Sector_SetDamage(ArenaSectorTag + 1, 1, 14);
			Sector_SetDamage(ArenaSectorTag + 2, 1, 14);
			break;
		case 4: // Grayscale
			Sector_SetColor(ArenaSectorTag, 255, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 1, 255, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 2, 255, 255, 255, 255);
			break;
	};
	
	ArenaEnvironment = ID;
};
