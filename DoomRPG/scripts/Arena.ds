#include "Arena.dh"
#include "Globals.dh"
#include "Menu.dh"
#include "Shop.dh"
#include "Stats.dh"

str[MAX_MODS] ArenaMods =
{
	"\cgNo Regeneration";
};

str[MAX_ENVIRONMENTS] ArenaEnvironments =
{
	"\cmBlackout";
	"\cjFoggy";
	"\ciThe Floor is Lava";
	"\cuGrayscale";
};

str[MAX_BONUS] ArenaBonus =
{
    "\cgFull Health";
    "\cvFull EP";
    "\cfMoney Drop";
    "\cuAmmo Drop";
    "\cgHealth Drop";
    "\cdArmor Drop";
    "\cuWeapon Drop";
	"\caPowerup Drop";
	"\caRune Drop";
};

str[17] Monsters =
{
    "ZombieMan"; "ShotgunGuy"; "ChaingunGuy"; "DoomImp"; "Demon"; "Spectre";
    "HellKnight"; "BaronOfHell"; "Cacodemon"; "LostSoul";
    "PainElemental"; "Revenant"; "Fatso"; "Arachnotron"; "ArchVile";
    "Cyberdemon"; "SpIDerMastermind";
};

// Arena Script
script ArenaLoop()
{
	SetMusic("Outpost", 3);
	ArenaSetEnvironment(0);
	
	// Arena Loop
    while (1)
    {
        // Stop the script if the Arena is stopped or you die
        if (!ArenaActive || GetActorProperty(0, APROP_Health) <= 0)
		{
			CallACS("ArenaStop");
            return;
		};
        
        // Arena HUD
		ArenaDrawHUD();
        
		// Arena Status Handling
		if (ArenaState == ARENA_INTERMISSION)
		{
			int BonusRandomizer = Random(-10, MAX_BONUS - 1);

			ArenaMod = -1;
			ArenaGetBonus(BonusRandomizer);
			ArenaSetEnvironment(0);
			ArenaState = ARENA_WAITING;
		}
		else if (ArenaState == ARENA_WAITING)
		{
			int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
			
			SetFont("BIGFONT");
			if (!InMenu && !InShop)
				HudMessage("Press \cd%K\c- to start the next wave\nPress \cd%K\c- to exit the Arena\n", "+use" , "+speed",
						   HUDMSG_PLAIN, 0, CR_WHITE, 0.5, 0.75, 0.05);
						
			if (Buttons & BT_USE && (!InMenu && !InShop))
				ArenaState = ARENA_READY;
			if (Buttons & BT_SPEED && (!InMenu && !InShop))
			{
				CallACS("ArenaStop");
				return;
			};
		}
		else if (ArenaState == ARENA_READY)
		{
			int ModRandomizer = Random(-10, MAX_MODS - 1);
			
			// Clean corpses every couple of waves
            if (ArenaWave > 1 && (ArenaWave % 4) == 1)
				Thing_Remove(1002);

			ArenaWave++;
			ArenaMod = ModRandomizer;
			ArenaSetEnvironment(-1);
			ArenaSpawnMobs();
			ArenaState = ARENA_ACTIVE;
		}
		else if (ArenaState == ARENA_ACTIVE)
		{
			ArenaCheckMod();
			ArenaCount = ThingCount(0, 1002);
			if (ArenaCount <= 0)
				ArenaState = ARENA_INTERMISSION;
			if (ArenaTimerActive && ArenaTimer > 0)
				ArenaTimer--;
		};
		
        Delay(1);
    };
};

// Stop the Arena session
script ArenaStop()
{
	if (ArenaWave > 1)
		{ArenaState = ARENA_WAITING;}
	else
		{ArenaState = ARENA_READY;};
	
	ArenaActive = false;
	
	if (ArenaWave >= ArenaMaxWave)
		ArenaMaxWave = ArenaWave;
	
	ArenaCount = 0;
    ArenaMod = -1;
	ArenaSetEnvironment(0);
    
	Ceiling_RaiseByValue(ArenaSectorTag - 1, 64, 128);
	Thing_Remove(1002);
	
	if (GetActorProperty(0, APROP_Health) <= 0)
		{SetMusic("OutPost", 1);}
	else
		{SetMusic("Outpost", 0);};
};

// Arena Test Script
script SetArena(int Wave, int Environment, int Bonus)
{
    if (Wave > 0)
		ArenaWave = Wave;
	
	if (Environment >= 0)
		ArenaSetEnvironment(Environment);
	
	if (Bonus >= 0)
		ArenaGetBonus(Bonus);
};

function void ArenaDrawHUD()
{
	int X = -0.0225;
	int Y = 0.525;
	
	SetFont("SMALLFONT");
	
	// Wave
	HudMessage("Wave: %d\n", ArenaWave,
			   HUDMSG_PLAIN, 2, CR_GREEN, X, Y, 0.05);
	Y += 0.025;

	// Monster Count
	if (ArenaCount > 0)
	{
		HudMessage("Monsters: %d\n", ArenaCount,
				   HUDMSG_PLAIN, 1, CR_GREEN, X, Y, 0.05);
		Y += 0.025;
	};
	
	// Timer
	if (ArenaTimerActive && ArenaTimer > 0)
	{
		HudMessage("Time: %d\n", ArenaTimer / 35 + 1,
				   HUDMSG_PLAIN, 3, CR_WHITE, X, Y, 0.05);
		Y += 0.025;
	};
	
	// Mod
	if (ArenaMod >= 0)
	{
		HudMessage("%s\n", ArenaMods[ArenaMod],
				   HUDMSG_PLAIN, 4, CR_WHITE, X, Y, 0.05);
		Y += 0.025;
	};

	// Environment
	if (ArenaEnvironment > 0)
	{
		HudMessage("%s\n", ArenaEnvironments[ArenaEnvironment - 1],
				   HUDMSG_PLAIN, 5, CR_WHITE, X, Y, 0.05);
		Y += 0.025;
	};
};

function void ArenaCheckMod()
{
	switch (ArenaMod)
	{
		case 0: // No Regeneration
			HPRate = 0;
			EPRate = 0;
			break;
	};
};

function void ArenaGetBonus(int Bonus)
{
	str SpawnItem;
	int i;
	
	switch (Bonus)
	{
		case 0: // Full Health
			if (GetActorProperty(0, APROP_Health) >= HealthMax)
			{
				ArenaGetBonus(Random(0, MAX_BONUS - 1));
				return;
			}
			else
				HealThing(1000000);
			break;
		case 1: // Full EP
			if (EP >= EPMax)
			{
				ArenaGetBonus(Random(0, MAX_BONUS - 1));
				return;
			}
			else
				EP = EPMax;
			break;
		case 2: // Money Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			for (i = 0; i < ArenaWave; i++)
			{
				SpawnSpot("MoneyDropper", 1200, 1201, 0);
				SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
				Thing_ChangeTID(1201, 0);
			};
			break;
		case 3: // Ammo Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			SpawnSpot("BackpackRandomizer", 1200, 1201, 0);
			SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
			Thing_ChangeTID(1201, 0);
			break;
		case 4: // Health Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			SpawnSpot("HealthDropper", 1200, 1201, 0);
			SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
			Thing_ChangeTID(1201, 0);
			break;
		case 5: // Armor Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			
			if (Random(1, 2) == 1)
				{SpawnItem = "GreenArmorRandomizer";}
			else
				{SpawnItem = "BlueArmorRandomizer";};
			
			SpawnSpot(SpawnItem, 1200, 1201, 0);
			SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
			Thing_ChangeTID(1201, 0);
			break;
		case 6: // Weapon Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			SpawnSpot("WeaponDropper", 1200, 1201, 0);
			SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
			Thing_ChangeTID(1201, 0);
			break;
		case 7: // Powerup Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			SpawnSpot("PowerupDropper", 1200, 1201, 0);
			SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
			Thing_ChangeTID(1201, 0);
			break;
		case 8: // Rune Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			SpawnSpot("RuneDropper", 1200, 1201, 0);
			SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
			Thing_ChangeTID(1201, 0);
			break;
	};
	
	// Bonus Message
	if (Bonus >= 0)
	{
		SetFont("BIGFONT");
		HudMessage("%s\n", ArenaBonus[Bonus], HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 2.0, 1.0);
		ActivatorSound("misc/secret", 127);
	};
};

function void ArenaSpawnMobs()
{
	int MonsterID;
	
	for (int i = ArenaSpotSpawns; i < ArenaSpotSpawns + 30; i++)
	{
		// Get a random monster from the list
		MonsterID = Random(-5 + (ArenaWave / 10), ArenaWave / 5);
		
		if (MonsterID > 16)
			MonsterID = 16;
		
		// Skip this spawn spot if < 0 is hit by the randomizer
		if (MonsterID < 0)
			continue;
			
		// Spawn the monster
		if (SpawnSpotFacingForced(Monsters[MonsterID], i, 1002))
			SpawnSpotForced("TeleportFog", i, 0, 0);
	};
};

function void ArenaSetEnvironment(int ID)
{
	if (ID == -1)
	{
		int EnvironmentRandomizer = Random(-10, MAX_ENVIRONMENTS);
		if (EnvironmentRandomizer > 0)
			ID = EnvironmentRandomizer;
	};

	switch (ID)
	{
		case 0: // Normal
			Light_Fade(ArenaSectorTag, 192, 35);
			Light_Fade(ArenaSectorTag + 1, 192, 35);
			Light_Fade(ArenaSectorTag + 2, 192, 35);
			Sector_SetFade(ArenaSectorTag, 0, 0, 0);
			Sector_SetFade(ArenaSectorTag + 1, 0, 0, 0);
			Sector_SetFade(ArenaSectorTag + 2, 0, 0, 0);
			ChangeFloor(ArenaSectorTag, "CEIL5_1");
			ChangeFloor(ArenaSectorTag + 1, "CEIL5_2");
			ChangeFloor(ArenaSectorTag + 2, "FLAT3");
			Sector_SetDamage(ArenaSectorTag, 0, 0);
			Sector_SetDamage(ArenaSectorTag + 1, 0, 0);
			Sector_SetDamage(ArenaSectorTag + 2, 0, 0);
			Sector_SetColor(ArenaSectorTag, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 1, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 2, 255, 255, 255);
			break;
		case 1: // Blackout
			Light_Fade(ArenaSectorTag, 0, 35);
			Light_Fade(ArenaSectorTag + 1, 0, 35);
			Light_Fade(ArenaSectorTag + 2, 0, 35);
			break;
		case 2: // Foggy
			int r = Random(0, 255);
			int g = Random(0, 255);
			int b = Random(0, 255);
			Light_Fade(ArenaSectorTag, 128, 35);
			Light_Fade(ArenaSectorTag + 1, 128, 35);
			Light_Fade(ArenaSectorTag + 2, 128, 35);
			Sector_SetFade(ArenaSectorTag, r, g, b);
			Sector_SetFade(ArenaSectorTag + 1, r, g, b);
			Sector_SetFade(ArenaSectorTag + 2, r, g, b);
			break;
		case 3: // The Floor is Lava
			ChangeFloor(ArenaSectorTag, "LAVA1");
			ChangeFloor(ArenaSectorTag + 1, "LAVA1");
			ChangeFloor(ArenaSectorTag + 2, "LAVA1");
			Sector_SetDamage(ArenaSectorTag, 1, 14);
			Sector_SetDamage(ArenaSectorTag + 1, 1, 14);
			Sector_SetDamage(ArenaSectorTag + 2, 1, 14);
			break;
		case 4: // Grayscale
			Sector_SetColor(ArenaSectorTag, 255, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 1, 255, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 2, 255, 255, 255, 255);
			break;
	};
	
	ArenaEnvironment = ID;
};
