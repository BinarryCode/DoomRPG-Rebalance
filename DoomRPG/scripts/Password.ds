#include "Password.dh"

/*  
    
    Password Format

    Each password consists of 10 sections
    Each section is delimited by a - (if the pass-by-string route is feasible, that is)
    
    1. XP / Rank
    2. Stats
    3. Skills
    4. Augmentations
    5. Shield Parts
    6. Stims
    7. Misc
    8. Inventory Items
    9. DRLA
    10. Checksum
    
    1. XP / Rank (8 Bytes)
    
    Since XP/Rank cap at 1 billion, 4 bytes is required for each
    
    AAAAAAAABBBBBBBB
    
    A - XP
    B - Rank
    
    2. Stats (8 Bytes)
    
    1 byte per stat should be optimal
    The max you can invest into each stat before bonuses are applied is 200, anything past that is handled via script and doesn't need to be stored
    
    AABBCCDDEEFFGGHH
    
    A - Strength
    B - Defense
    C - Vitality
    D - Energy
    E - Regeneration
    F - Agility
    G - Capacity
    H - Luck
    
    3. Skills (102 Bytes? (17 Skills * 6 Categories))
    
    No idea yet, first idea was something like this
    
    [AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP][...]
    
    Each corresponding to the skills' level in sequential order, each bracket pair represents a skill category
    Each category contains 17 reserved skills
    Skill level never reaches beyond 16, so 1 byte per level should be sufficient
    
    4. Augmentations (9 Bytes)
    
    Since no Augmentation's max level exceeds 15, it should be safe to store them like this
    
    ABCDEFGHI
    
    A - Strength Augmentation Level
    B - Defense Augmentation Level
    C - Vitality Augmentation Level
    D - Energy Augmentation Level
    E - Regeneration Augmentation Level
    F - Agility Augmentation Level
    G - Capacity Augmentation Level
    H - Luck Augmentation Level
    I - Battery Management Augmentation Level
    
    5. Shield Parts (8 Bytes)
    
    Each portion is a bitfield representing which shield parts you own in that category
    Each shield category has 12 slots reserved for parts, so 2 bytes per category is required
    
    AAAABBBBCCCCDDDD
    
    A - Body Parts
    B - Battery Parts
    C - Capacitor Parts
    D - Accessory Parts
    
    6. Stims (38 Bytes)
    
    Since you can hold up to a bonus maximum of around 40k compound per vial, each compound will need to be 2 bytes
    
    AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSS
    
    A - Strength
    B - Defense
    C - Vitality
    D - Energy
    E - Regeneration
    F - Agility
    G - Capacity
    H - Luck
    I - Purifier
    J - Potency
    K - Indestructible
    L - Shadow
    M - Infinity
    N - Chrono
    O - Adrenaline
    P - Gravity
    Q - Vampire
    R - Rage
    S - Magnetic
    
    7. Misc (1 Byte)
    
    Storage for misc stuff, shouldn't be anything too complex
    
    AA
    
    A - Toxicity
    
    8. Inventory Items (7 Bytes)
    
    Store inventory item related things here
    
    AAAABBCCCCDDEEFF
    
    A - Stat Tokens
    B - Stat Cap Tokens
    C - Skill Tokens
    D - Augmentation Canisters
    E - Augmentation Upgrade Canisters
    F - Augmentation Slot Upgrades
    
    9. DRLA (12 Bytes)
    
    For now, I can store the assemblies the player has learned via 2 byte bitfield, since there are no more than 16 assemblies for category
    Could probably store each unique/legendary weapon's known exotic modpack status in a bitfield too, but I'll need to measure how many there are and the size it'll take
    
    AAAABBBBCCCC
    
    A - Basic Assemblies
    B - Advanced Assemblies
    C - Master Assemblies
    
    10. Checksum (8 Bytes)
    
    Basic idea, calculate the checksum by adding each value stored in the buffer to the checksum var, then bit-shifting it << 16 at the end
    Simple, but could work, no idea
    
*/

acscript void GetPassword()
{
};

acscript void Password(int Index, int Data)
{
};
