#include "Globals.dh"
#include "Password.dh"
#include "Shield.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Utils.dh"

/*  
    
    --- Password Format ---
    
    1. Level / Rank Level
        -> Level
        -> Rank Level
    2. Stats
        -> Strength
        -> Defense
        -> Vitality
        -> Energy
        -> Regeneration
        -> Agility
        -> Capacity
        -> Luck
    3. Skills
        -> Healing/Support
            -> Heal
            -> Heal Summons
            -> Heal Team
            -> Life Leech
            -> Decontamination
            -> Repair Armor
            -> Player Teleport
        -> Powerups
            -> Invulnerability
            -> Invisibility
            -> Time Freeze
            -> Iron Feet
            -> Night Vision
            -> Berserk
            -> Mental Mapping
            -> Weapon Drop
            -> Ammo Drop
        -> Auras
            -> Red Aura
            -> Green Aura
            -> White Aura
            -> Pink Aura
            -> Blue Aura
            -> Purple Aura
            -> Orange Aura
            -> Dark Blue Aura
            -> Yellow Aura
        -> Attacks
            -> Weaken
            -> Translocate
            -> Repulsion
        -> Summoning
            -> Summon Marine
            -> Summon Zombieman/Former Human
            -> Summon Shotgun Guy/Former Sergeant
            -> Summon Chaingun Guy/Former Commando
            -> Summon Imp
            -> Summon Demon
            -> Summon Cacodemon
            -> Summon Hell Knight
            -> Summon Baron of Hell
            -> Summon Lost Soul
            -> Summon Pain Elemental
            -> Summon Revenant
            -> Summon Mancubus
            -> Summon Arachnotron
            -> Summon Arch-Vile
            -> Summon Cyberdemon
            -> Summon Spider Mastermind
        -> Utility
            -> Breakdown Armor
            -> Force Wall
            -> Rally
            -> Unsummon
            -> Recall
            -> Wireless Locker
            -> Transport
    4. Augmentations
        -> Strength Augmentation Level
        -> Defense Augmentation Level
        -> Vitality Augmentation Level
        -> Energy Augmentation Level
        -> Regeneration Augmentation Level
        -> Agility Augmentation Level
        -> Capacity Augmentation Level
        -> Luck Augmentation Level
        -> Battery Management Augmentation Level
    5. Shield Parts
        -> Body Parts
        -> Battery Parts
        -> Capacitor Parts
        -> Accessory Parts
    6. Stims
        -> Strength
        -> Defense
        -> Vitality
        -> Energy
        -> Regeneration
        -> Agility
        -> Capacity
        -> Luck
        -> Purifier
        -> Potency
        -> Indestructible
        -> Shadow
        -> Infinity
        -> Chrono
        -> Adrenaline
        -> Gravity
        -> Vampire
        -> Rage
        -> Magnetic
    7. Misc
        -> Toxicity
    8. Inventory Items
        -> Stat Tokens
        -> Stat Cap Tokens
        -> Skill Tokens
        -> Augmentation Canisters
        -> Augmentation Upgrade Canisters
        -> Augmentation Slot Upgrades
        -> Small Stims
        -> Medium Stims
        -> Large Stims
        -> Extra-Large Stims
    9. DRLA Assemblies
        -> Basic Assemblies
        -> Advanced Assemblies
        -> Master Assemblies
    10. DRLA Modpack Info
        -> Jackhammer
        -> Railgun
        -> Mysterious Magnum
        -> BFG10k
        -> Unknown Herald
        -> Frag Shotgun
        -> Quad Shotgun
        -> Lightweaver
        -> Trigun
        -> Grammaton Cleric Beretta
        -> Anti-Freak Jackel
        -> Quantum Tantrum Cannon
        -> Revenant's Launcher
        -> Charch's Null Pointer
        -> Particle Beam Cannon
        -> Steel Beast
        -> Plasma Redirection Cannon
        -> Hell's Reign
        -> Suss Gun
        -> Judge of the Dead
        -> Hurricane Cannon
        -> Neural Stunner
        -> Baron Blaster
        -> Reality Distortion Array
    11. Checksum
    
    1. Level / Rank Level (12 Bits)
    
    AAAAAAABBBBB
    
    A - Level (100 Max)
    B - Rank Level (24 Max)
    
    2. Stats (64 Bits)
    
    AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHH
    
    A - Strength (200 Max)
    B - Defense (200 Max)
    C - Vitality (200 Max)
    D - Energy (200 Max)
    E - Regeneration (200 Max)
    F - Agility (200 Max)
    G - Capacity (200 Max)
    H - Luck (200 Max)
    
    3. Skills (94 Bits)
    
    [AAABCCCDDDEEEFFFG][AABBCCDEFGHHHIII][AABBCCCDDEEFFFGGHHHIII][AABCCC][AAAABBCCDDEEFFFGGHHIIJJKKLLMMNNOOPPQQ][AABBCDDEFFFFFG]
    
    Healing/Support
        A - Heal (4 Max)
        B - Heal Summons (1 Max)
        C - Heal Team (4 Max)
        D - Life Leech (4 Max)
        E - Decontamination (4 Max)
        F - Repair Armor (4 Max)
        G - Player Teleport (1 Max)
    Powerups
        A - Invulnerability (2 Max)
        B - Invisibility (2 Max)
        C - Time Freeze (2 Max)
        D - Iron Feet (1 Max)
        E - Night Vision (1 Max)
        F - Berserk (1 Max)
        G - Mental Mapping (1 Max)
        H - Weapon Drop (7 Max)
        I - Ammo Drop (4 Max)
    Auras
        A - Red Aura (3 Max)
        B - Green Aura (3 Max)
        C - White Aura (5 Max)
        D - Pink Aura (2 Max)
        E - Blue Aura (3 Max)
        F - Purple Aura (4 Max)
        G - Orange Aura (3 Max)
        H - Dark Blue Aura (6 Max)
        I - Yellow Aura (5 Max)
    Attacks
        A - Weaken (2 Max)
        B - Translocate (1 Max)
        C - Repulsion (4 Max)
    Summoning 
        A - Summon Marine (8 Max)
        B - Summon Zombieman/Former Human (3 Max)
        C - Summon Shotgun Guy/Former Sergeant (2 Max)
        D - Summon Chaingun Guy/Former Commando (3 Max)
        E - Summon Imp (3 Max)
        F - Summon Demon (6 Max)
        G - Summon Cacodemon (2 Max)
        H - Summon Hell Knight (3 Max)
        I - Summon Baron of Hell (3 Max)
        J - Summon Lost Soul (3 Max)
        K - Summon Pain Elemental (2 Max)
        L - Summon Revenant (3 Max)
        M - Summon Mancubus (3 Max)
        N - Summon Arachnotron (3 Max)
        O - Summon Arch-Vile (2 Max)
        P - Summon Cyberdemon (2 Max)
        Q - Summon Spider Mastermind (2 Max)
    Utility
        A - Breakdown Armor (2 Max)
        B - Force Wall (2 Max)
        C - Rally (1 Max)
        D - Unsummon (2 Max)
        E - Recall (1 Max)
        F - Wireless Locker (16 Max)
        G - Transport (1 Max)
    
    4. Augmentations (25 Bits)
    
    AAABBBCCDDDEEEFFFGGHHHIII
    
    A - Strength Augmentation Level (4 Max)
    B - Defense Augmentation Level (5 Max)
    C - Vitality Augmentation Level (2 Max)
    D - Energy Augmentation Level (5 Max)
    E - Regeneration Augmentation Level (5 Max)
    F - Agility Augmentation Level (4 Max)
    G - Capacity Augmentation Level (3 Max)
    H - Luck Augmentation Level (5 Max)
    I - Battery Management Augmentation Level (5 Max)
    
    5. Shield Parts (26 Bits)
    
    [ABCDEFG][ABCDEFG][ABCDE][ABCDEFG]
    
    A - Part 1 (1 Max)
    B - Part 2 (1 Max)
    C - Part 3 (1 Max)
    D - Part 4 (1 Max)
    E - Part 5 (1 Max)
    F - Part 6 (1 Max)
    G - Part 7 (1 Max)
    
    6. Stims (285 Bits)
    
    AAAAAAAAAAAAAAABBBBBBBBBBBBBBBCCCCCCCCCCCCCCC...
    
    A - Strength (20000 Max)
    B - Defense (20000 Max)
    C - Vitality (20000 Max)
    ...
    
    7. Misc (15 Bits)
    
    AAAAAAABBBBBBBB
    
    A - Toxicity (100 Max)
    B - Augmentation Battery (200 Max)
    
    8. Inventory Items (48 Bits)
    
    AAAAAAAAAABBBBBBBCCCCCCCCCCDDDDDDDEEEEEEEFFFFFFFGGGGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJ
    
    A - Stat Tokens (10000 Max)
    B - Stat Cap Tokens (100 Max)
    C - Skill Tokens (10000 Max)
    D - Augmentation Canisters (100 Max)
    E - Augmentation Upgrade Canisters (100 Max)
    F - Augmentation Slot Upgrades (100 Max)
    G - Small Stims (1000 Max)
    H - Medium Stims (1000 Max)
    I - Large Stims (1000 Max)
    J - Extra-Large Stims (1000 Max)
    
    9. DRLA Assemblies (11 Bits)
    
    AAAABBBBCCC
    
    A - Basic Assemblies (12 Max)
    B - Advanced Assemblies (15 Max)
    C - Master Assemblies (7 Max)
    
    10. DRLA Modpack Info (48 Bits)
    
    AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXX
    
    A - Jackhammer (3 Max)
    B - Railgun (3 Max)
    C - Mysterious Magnum (3 Max)
    D - BFG10k (3 Max)
    E - Unknown Herald (3 Max)
    F - Frag Shotgun (3 Max)
    G - Quad Shotgun (3 Max)
    H - Lightweaver (3 Max)
    I - Trigun (3 Max)
    J - Grammaton Cleric Beretta (3 Max)
    K - Anti-Freak Jackel (3 Max)
    L - Quantum Tantrum Cannon (3 Max)
    M - Revenant's Launcher (3 Max)
    N - Charch's Null Pointer (3 Max)
    O - Particle Beam Cannon (3 Max)
    P - Steel Beast (3 Max)
    Q - Plasma Redirection Cannon (3 Max)
    R - Hell's Reign (3 Max)
    S - Suss Gun (3 Max)
    T - Judge of the Dead (3 Max)
    U - Hurricane Cannon (3 Max)
    V - Neural Stunner (3 Max)
    W - Baron Blaster (3 Max)
    X - Reality Distortion Array (3 Max)
    
    11. Checksum (32 Bits)
    
*/

acscript void GetPassword()
{
    str[PW_LINES] Output;
    int OutputLine;
    
    // Empty the Output array
    for (int i = 0; i < PW_LINES; i++)
        Output[i] = "";
    
    // Init BitIO State
    BitIO_Open(&State, Player.PasswordData);
    
    // 1. Level / Rank Level
    BitIO_PutBits(&State, 7, Player.Level);
    BitIO_PutBits(&State, 5, Player.RankLevel);
    
    // 2. Stats
    BitIO_PutBits(&State, 8, Player.Strength);
    BitIO_PutBits(&State, 8, Player.Defense);
    BitIO_PutBits(&State, 8, Player.Vitality);
    BitIO_PutBits(&State, 8, Player.Energy);
    BitIO_PutBits(&State, 8, Player.Regeneration);
    BitIO_PutBits(&State, 8, Player.Agility);
    BitIO_PutBits(&State, 8, Player.Capacity);
    BitIO_PutBits(&State, 8, Player.Luck);
    
    // 3. Skills
    BitIO_PutBits(&State, 3, Skills[0][0].Level);
    BitIO_PutBits(&State, 1, Skills[0][1].Level);
    BitIO_PutBits(&State, 3, Skills[0][2].Level);
    BitIO_PutBits(&State, 3, Skills[0][3].Level);
    BitIO_PutBits(&State, 3, Skills[0][4].Level);
    BitIO_PutBits(&State, 3, Skills[0][5].Level);
    BitIO_PutBits(&State, 1, Skills[0][6].Level);
    BitIO_PutBits(&State, 2, Skills[1][0].Level);
    BitIO_PutBits(&State, 2, Skills[1][1].Level);
    BitIO_PutBits(&State, 2, Skills[1][2].Level);
    BitIO_PutBits(&State, 1, Skills[1][3].Level);
    BitIO_PutBits(&State, 1, Skills[1][4].Level);
    BitIO_PutBits(&State, 1, Skills[1][5].Level);
    BitIO_PutBits(&State, 1, Skills[1][6].Level);
    BitIO_PutBits(&State, 3, Skills[1][7].Level);
    BitIO_PutBits(&State, 3, Skills[1][8].Level);
    BitIO_PutBits(&State, 2, Skills[2][0].Level);
    BitIO_PutBits(&State, 2, Skills[2][1].Level);
    BitIO_PutBits(&State, 3, Skills[2][2].Level);
    BitIO_PutBits(&State, 2, Skills[2][3].Level);
    BitIO_PutBits(&State, 2, Skills[2][4].Level);
    BitIO_PutBits(&State, 3, Skills[2][5].Level);
    BitIO_PutBits(&State, 2, Skills[2][6].Level);
    BitIO_PutBits(&State, 3, Skills[2][7].Level);
    BitIO_PutBits(&State, 3, Skills[2][8].Level);
    BitIO_PutBits(&State, 2, Skills[3][0].Level);
    BitIO_PutBits(&State, 1, Skills[3][1].Level);
    BitIO_PutBits(&State, 3, Skills[3][2].Level);
    BitIO_PutBits(&State, 4, Skills[4][0].Level);
    BitIO_PutBits(&State, 2, Skills[4][1].Level);
    BitIO_PutBits(&State, 2, Skills[4][2].Level);
    BitIO_PutBits(&State, 2, Skills[4][3].Level);
    BitIO_PutBits(&State, 2, Skills[4][4].Level);
    BitIO_PutBits(&State, 3, Skills[4][5].Level);
    BitIO_PutBits(&State, 2, Skills[4][6].Level);
    BitIO_PutBits(&State, 2, Skills[4][7].Level);
    BitIO_PutBits(&State, 2, Skills[4][8].Level);
    BitIO_PutBits(&State, 2, Skills[4][9].Level);
    BitIO_PutBits(&State, 2, Skills[4][10].Level);
    BitIO_PutBits(&State, 2, Skills[4][11].Level);
    BitIO_PutBits(&State, 2, Skills[4][12].Level);
    BitIO_PutBits(&State, 2, Skills[4][13].Level);
    BitIO_PutBits(&State, 2, Skills[4][14].Level);
    BitIO_PutBits(&State, 2, Skills[4][15].Level);
    BitIO_PutBits(&State, 2, Skills[4][16].Level);
    BitIO_PutBits(&State, 2, Skills[5][0].Level);
    BitIO_PutBits(&State, 2, Skills[5][1].Level);
    BitIO_PutBits(&State, 1, Skills[5][2].Level);
    BitIO_PutBits(&State, 2, Skills[5][3].Level);
    BitIO_PutBits(&State, 1, Skills[5][4].Level);
    BitIO_PutBits(&State, 5, Skills[5][5].Level);
    BitIO_PutBits(&State, 1, Skills[5][6].Level);
    
    // 4. Augmentations
    BitIO_PutBits(&State, 3, Player.Augs.Level[0]);
    BitIO_PutBits(&State, 3, Player.Augs.Level[1]);
    BitIO_PutBits(&State, 2, Player.Augs.Level[2]);
    BitIO_PutBits(&State, 3, Player.Augs.Level[3]);
    BitIO_PutBits(&State, 3, Player.Augs.Level[4]);
    BitIO_PutBits(&State, 3, Player.Augs.Level[5]);
    BitIO_PutBits(&State, 2, Player.Augs.Level[6]);
    BitIO_PutBits(&State, 3, Player.Augs.Level[7]);
    BitIO_PutBits(&State, 3, Player.Augs.Level[8]);
    
    // 5. Shield Parts
    for (int i = 0; i < ShieldPartsMax[0]; i++)
        BitIO_PutBits(&State, 1, CheckInventory(StrParam("ShieldBody%d\n", i + 1)) == 1);
    for (int i = 0; i < ShieldPartsMax[1]; i++)
        BitIO_PutBits(&State, 1, CheckInventory(StrParam("ShieldBattery%d\n", i + 1)) == 1);
    for (int i = 0; i < ShieldPartsMax[2]; i++)
        BitIO_PutBits(&State, 1, CheckInventory(StrParam("ShieldCapacitor%d\n", i + 1)) == 1);
    for (int i = 0; i < ShieldPartsMax[3]; i++)
        BitIO_PutBits(&State, 1, CheckInventory(StrParam("ShieldAccessory%d\n", i + 1)) == 1);
    
    // 6. Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        BitIO_PutBits(&State, 15, Player.Stim.Vials[i]);
    
    // Loop the data into output
    for (int i = 0; i < PW_SIZE; i += 3)
    {
        if (i >= PW_SIZE - 1)
            Output[OutputLine] = StrParam("%spukename PasswordSetData Always %d %d; \n", Output[OutputLine], i, Player.PasswordData[i])
        else if (i >= PW_SIZE - 2)
            Output[OutputLine] = StrParam("%spukename PasswordSetData Always %d %d %d; \n", Output[OutputLine], i, Player.PasswordData[i], Player.PasswordData[i + 1])
        else
            Output[OutputLine] = StrParam("%spukename PasswordSetData Always %d %d %d %d; \n", Output[OutputLine], i, Player.PasswordData[i], Player.PasswordData[i + 1], Player.PasswordData[i + 2]);
        
        // Seperate onto new lines
        if (i >= 1 && (i % PW_SPLIT) == 0)
            OutputLine++;
    };
    
    // Execution
    Output[OutputLine] = StrParam("%spukename PasswordExecute\n", Output[OutputLine]);
    
    // Dump to the console and log
    Log("\cd ===== DOOM RPG PASSWORD =====\n");
    for (int i = 0; i < PW_LINES; i++)
        if (StrLen(Output[i]) > 0)
            Log("%s\n", Output[i]);
};

acscript void PasswordSetData(int Index, int Data0, int Data1, int Data2)
{
    Player.PasswordData[Index] = Data0;
    Player.PasswordData[Index + 1] = Data1;
    Player.PasswordData[Index + 2] = Data2;
};

acscript void PasswordExecute()
{
    Delay(1);
    
    int[PW_SIZE] Data = Player.PasswordData;
    
    // Init BitIO State
    BitIO_Open(&State, Player.PasswordData);
    
    // 1. Level and Rank Level
    Player.Level = BitIO_GetBits(&State, 7);
    Player.XP = XPTable[Player.Level - 1];
    Player.RankLevel = BitIO_GetBits(&State, 5);
    Player.Rank = RankTable[Player.RankLevel - 1];
    
    // 2. Stats
    Player.Strength = BitIO_GetBits(&State, 8);
    Player.Defense = BitIO_GetBits(&State, 8);
    Player.Vitality = BitIO_GetBits(&State, 8);
    Player.Energy = BitIO_GetBits(&State, 8);
    Player.Regeneration = BitIO_GetBits(&State, 8);
    Player.Agility = BitIO_GetBits(&State, 8);
    Player.Capacity = BitIO_GetBits(&State, 8);
    Player.Luck = BitIO_GetBits(&State, 8);
    
    // 3. Skills
    Skills[0][0].Level = BitIO_GetBits(&State, 3);
    Skills[0][1].Level = BitIO_GetBits(&State, 1);
    Skills[0][2].Level = BitIO_GetBits(&State, 3);
    Skills[0][3].Level = BitIO_GetBits(&State, 3);
    Skills[0][4].Level = BitIO_GetBits(&State, 3);
    Skills[0][5].Level = BitIO_GetBits(&State, 3);
    Skills[0][6].Level = BitIO_GetBits(&State, 1);
    Skills[1][0].Level = BitIO_GetBits(&State, 2);
    Skills[1][1].Level = BitIO_GetBits(&State, 2);
    Skills[1][2].Level = BitIO_GetBits(&State, 2);
    Skills[1][3].Level = BitIO_GetBits(&State, 1);
    Skills[1][4].Level = BitIO_GetBits(&State, 1);
    Skills[1][5].Level = BitIO_GetBits(&State, 1);
    Skills[1][6].Level = BitIO_GetBits(&State, 1);
    Skills[1][7].Level = BitIO_GetBits(&State, 3);
    Skills[1][8].Level = BitIO_GetBits(&State, 3);
    Skills[2][0].Level = BitIO_GetBits(&State, 2);
    Skills[2][1].Level = BitIO_GetBits(&State, 2);
    Skills[2][2].Level = BitIO_GetBits(&State, 3);
    Skills[2][3].Level = BitIO_GetBits(&State, 2);
    Skills[2][4].Level = BitIO_GetBits(&State, 2);
    Skills[2][5].Level = BitIO_GetBits(&State, 3);
    Skills[2][6].Level = BitIO_GetBits(&State, 2);
    Skills[2][7].Level = BitIO_GetBits(&State, 3);
    Skills[2][8].Level = BitIO_GetBits(&State, 3);
    Skills[3][0].Level = BitIO_GetBits(&State, 2);
    Skills[3][1].Level = BitIO_GetBits(&State, 1);
    Skills[3][2].Level = BitIO_GetBits(&State, 3);
    Skills[4][0].Level = BitIO_GetBits(&State, 4);
    Skills[4][1].Level = BitIO_GetBits(&State, 2);
    Skills[4][2].Level = BitIO_GetBits(&State, 2);
    Skills[4][3].Level = BitIO_GetBits(&State, 2);
    Skills[4][4].Level = BitIO_GetBits(&State, 2);
    Skills[4][5].Level = BitIO_GetBits(&State, 3);
    Skills[4][6].Level = BitIO_GetBits(&State, 2);
    Skills[4][7].Level = BitIO_GetBits(&State, 2);
    Skills[4][8].Level = BitIO_GetBits(&State, 2);
    Skills[4][9].Level = BitIO_GetBits(&State, 2);
    Skills[4][10].Level = BitIO_GetBits(&State, 2);
    Skills[4][11].Level = BitIO_GetBits(&State, 2);
    Skills[4][12].Level = BitIO_GetBits(&State, 2);
    Skills[4][13].Level = BitIO_GetBits(&State, 2);
    Skills[4][14].Level = BitIO_GetBits(&State, 2);
    Skills[4][15].Level = BitIO_GetBits(&State, 2);
    Skills[4][16].Level = BitIO_GetBits(&State, 2);
    Skills[5][0].Level = BitIO_GetBits(&State, 2);
    Skills[5][1].Level = BitIO_GetBits(&State, 2);
    Skills[5][2].Level = BitIO_GetBits(&State, 1);
    Skills[5][3].Level = BitIO_GetBits(&State, 2);
    Skills[5][4].Level = BitIO_GetBits(&State, 1);
    Skills[5][5].Level = BitIO_GetBits(&State, 5);
    Skills[5][6].Level = BitIO_GetBits(&State, 1);
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < SkillCategoryMax[i]; j++)
            Skills[i][j].CurrentLevel = Skills[i][j].Level;
    
    // 4. Augmentations
    Player.Augs.Level[0] = BitIO_GetBits(&State, 3);
    Player.Augs.Level[1] = BitIO_GetBits(&State, 3);
    Player.Augs.Level[2] = BitIO_GetBits(&State, 2);
    Player.Augs.Level[3] = BitIO_GetBits(&State, 3);
    Player.Augs.Level[4] = BitIO_GetBits(&State, 3);
    Player.Augs.Level[5] = BitIO_GetBits(&State, 3);
    Player.Augs.Level[6] = BitIO_GetBits(&State, 2);
    Player.Augs.Level[7] = BitIO_GetBits(&State, 3);
    Player.Augs.Level[8] = BitIO_GetBits(&State, 3);
    
    // 5. Shield Parts
    for (int i = 0; i < ShieldPartsMax[0]; i++)
        SetInventory(StrParam("ShieldBody%d\n", i + 1), BitIO_GetBits(&State, 1));
    for (int i = 0; i < ShieldPartsMax[1]; i++)
        SetInventory(StrParam("ShieldBattery%d\n", i + 1), BitIO_GetBits(&State, 1));
    for (int i = 0; i < ShieldPartsMax[2]; i++)
        SetInventory(StrParam("ShieldCapacitor%d\n", i + 1), BitIO_GetBits(&State, 1));
    for (int i = 0; i < ShieldPartsMax[3]; i++)
        SetInventory(StrParam("ShieldAccessory%d\n", i + 1), BitIO_GetBits(&State, 1));
    
    // 6. Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        Player.Stim.Vials[i] = BitIO_GetBits(&State, 15);
    
    ActivatorSound("misc/secret", 127);
    SetFont("BIGFONT");
    Print("\cd ===== Password Execution Complete =====\n");
};

acscript void PasswordDump()
{
    str Output;
    
    for (int i = 0; i < PW_SIZE; i++)
        Output = StrParam("%s %d\n", Output, Player.PasswordData[i]);
        
    Log("\cdPasswordData: \c-%s\n", Output);
};
