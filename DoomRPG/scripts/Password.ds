#include "AugData.dh"
#include "Globals.dh"
#include "Password.dh"
#include "Shield.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Utils.dh"

/*  
    
    --- Password Format ---
    
    1. Level / Rank Level
        -> Level
        -> Rank Level
    2. Stats
        -> Strength
        -> Defense
        -> Vitality
        -> Energy
        -> Regeneration
        -> Agility
        -> Capacity
        -> Luck
    3. Skills
        -> Healing/Support
            -> Heal
            -> Heal Summons
            -> Heal Team
            -> Life Leech
            -> Decontamination
            -> Repair Armor
            -> Player Teleport
        -> Powerups
            -> Invulnerability
            -> Invisibility
            -> Time Freeze
            -> Iron Feet
            -> Night Vision
            -> Berserk
            -> Mental Mapping
            -> Weapon Drop
            -> Ammo Drop
        -> Auras
            -> Red Aura
            -> Green Aura
            -> White Aura
            -> Pink Aura
            -> Blue Aura
            -> Purple Aura
            -> Orange Aura
            -> Dark Blue Aura
            -> Yellow Aura
        -> Attacks
            -> Weaken
            -> Translocate
            -> Repulsion
        -> Summoning
            -> Summon Marine
            -> Summon Zombieman/Former Human
            -> Summon Shotgun Guy/Former Sergeant
            -> Summon Chaingun Guy/Former Commando
            -> Summon Imp
            -> Summon Demon
            -> Summon Cacodemon
            -> Summon Hell Knight
            -> Summon Baron of Hell
            -> Summon Lost Soul
            -> Summon Pain Elemental
            -> Summon Revenant
            -> Summon Mancubus
            -> Summon Arachnotron
            -> Summon Arch-Vile
            -> Summon Cyberdemon
            -> Summon Spider Mastermind
        -> Utility
            -> Breakdown Armor
            -> Force Wall
            -> Rally
            -> Unsummon
            -> Recall
            -> Wireless Locker
            -> Transport
    4. Augmentations
        -> Strength Augmentation Level
        -> Defense Augmentation Level
        -> Vitality Augmentation Level
        -> Energy Augmentation Level
        -> Regeneration Augmentation Level
        -> Agility Augmentation Level
        -> Capacity Augmentation Level
        -> Luck Augmentation Level
        -> Battery Management Augmentation Level
    5. Shield Parts
        -> Body Parts
        -> Battery Parts
        -> Capacitor Parts
        -> Accessory Parts
    6. Stims
        -> Strength
        -> Defense
        -> Vitality
        -> Energy
        -> Regeneration
        -> Agility
        -> Capacity
        -> Luck
        -> Purifier
        -> Potency
        -> Indestructible
        -> Shadow
        -> Infinity
        -> Chrono
        -> Adrenaline
        -> Gravity
        -> Vampire
        -> Rage
        -> Magnetic
    7. Misc
        -> Toxicity
        -> Augmentation Battery
        -> Pay Bonus
    8. Inventory Items
        -> Credits
        -> Stat Tokens
        -> Stat Cap Tokens
        -> Skill Tokens
        -> Augmentation Canisters
        -> Augmentation Upgrade Canisters
        -> Augmentation Slot Upgrades
        -> Small Stims
        -> Medium Stims
        -> Large Stims
        -> Extra-Large Stims
        -> Shop Card
    9. DRLA Assemblies
        -> Basic Assemblies
        -> Advanced Assemblies
        -> Master Assemblies
    
    1. Level / Rank Level (12 Bits)
    
    AAAAAAABBBBB
    
    A - Level (100 Max)
    B - Rank Level (24 Max)
    
    2. Stats (64 Bits)
    
    AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHH
    
    A - Strength (200 Max)
    B - Defense (200 Max)
    C - Vitality (200 Max)
    D - Energy (200 Max)
    E - Regeneration (200 Max)
    F - Agility (200 Max)
    G - Capacity (200 Max)
    H - Luck (200 Max)
    
    3. Skills (94 Bits)
    
    [AAABCCCDDDEEEFFFG][AABBCCDEFGHHHIII][AABBCCCDDEEFFFGGHHHIII][AABCCC][AAAABBCCDDEEFFFGGHHIIJJKKLLMMNNOOPPQQ][AABBCDDEFFFFFG]
    
    Healing/Support
        A - Heal (4 Max)
        B - Heal Summons (1 Max)
        C - Heal Team (4 Max)
        D - Life Leech (4 Max)
        E - Decontamination (4 Max)
        F - Repair Armor (4 Max)
        G - Player Teleport (1 Max)
    Powerups
        A - Invulnerability (2 Max)
        B - Invisibility (2 Max)
        C - Time Freeze (2 Max)
        D - Iron Feet (1 Max)
        E - Night Vision (1 Max)
        F - Berserk (1 Max)
        G - Mental Mapping (1 Max)
        H - Weapon Drop (7 Max)
        I - Ammo Drop (4 Max)
    Auras
        A - Red Aura (3 Max)
        B - Green Aura (3 Max)
        C - White Aura (5 Max)
        D - Pink Aura (2 Max)
        E - Blue Aura (3 Max)
        F - Purple Aura (4 Max)
        G - Orange Aura (3 Max)
        H - Dark Blue Aura (6 Max)
        I - Yellow Aura (5 Max)
    Attacks
        A - Weaken (2 Max)
        B - Translocate (1 Max)
        C - Repulsion (4 Max)
    Summoning 
        A - Summon Marine (8 Max)
        B - Summon Zombieman/Former Human (3 Max)
        C - Summon Shotgun Guy/Former Sergeant (2 Max)
        D - Summon Chaingun Guy/Former Commando (3 Max)
        E - Summon Imp (3 Max)
        F - Summon Demon (6 Max)
        G - Summon Cacodemon (2 Max)
        H - Summon Hell Knight (3 Max)
        I - Summon Baron of Hell (3 Max)
        J - Summon Lost Soul (3 Max)
        K - Summon Pain Elemental (2 Max)
        L - Summon Revenant (3 Max)
        M - Summon Mancubus (3 Max)
        N - Summon Arachnotron (3 Max)
        O - Summon Arch-Vile (2 Max)
        P - Summon Cyberdemon (2 Max)
        Q - Summon Spider Mastermind (2 Max)
    Utility
        A - Breakdown Armor (2 Max)
        B - Force Wall (2 Max)
        C - Rally (1 Max)
        D - Unsummon (2 Max)
        E - Recall (1 Max)
        F - Wireless Locker (16 Max)
        G - Transport (1 Max)
    
    4. Augmentations (25 Bits)
    
    AAABBBCCDDDEEEFFFGGHHHIII
    
    A - Strength Augmentation Level (4 Max)
    B - Defense Augmentation Level (5 Max)
    C - Vitality Augmentation Level (2 Max)
    D - Energy Augmentation Level (5 Max)
    E - Regeneration Augmentation Level (5 Max)
    F - Agility Augmentation Level (4 Max)
    G - Capacity Augmentation Level (3 Max)
    H - Luck Augmentation Level (5 Max)
    I - Battery Management Augmentation Level (5 Max)
    
    5. Shield Parts (26 Bits)
    
    [ABCDEFG][ABCDEFG][ABCDE][ABCDEFG]
    
    A - Part 1 (1 Max)
    B - Part 2 (1 Max)
    C - Part 3 (1 Max)
    D - Part 4 (1 Max)
    E - Part 5 (1 Max)
    F - Part 6 (1 Max)
    G - Part 7 (1 Max)
    
    6. Stims (228 Bits)
    
    AAAAAAAAAAAABBBBBBBBBBBBCCCCCCCCCCCC
    
    A - Strength (4000 Max)
    B - Defense (4000 Max)
    C - Vitality (4000 Max)
    ...
    
    7. Misc (25 Bits)
    
    AAAAAAABBBBBBBBCCCCCCCCCC
    
    A - Toxicity (100 Max)
    B - Augmentation Battery (200 Max)
    C - Pay Bonus (1000 Max)
    
    8. Inventory Items (56 Bits)
    
    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBCCCCCCCDDDDDDDDDDDDDDEEEEEEEFFFFFFFGGGGGGGHHHHHHHHHHIIIIIIIIIIJJJJJJJJJJKKKKKKKKKKLLL
    
    A - Credits (1000000000 Max)
    B - Stat Tokens (10000 Max)
    C - Stat Cap Tokens (100 Max)
    D - Skill Tokens (10000 Max)
    E - Augmentation Canisters (100 Max)
    F - Augmentation Upgrade Canisters (100 Max)
    G - Augmentation Slot Upgrades (100 Max)
    H - Small Stims (1000 Max)
    I - Medium Stims (1000 Max)
    J - Large Stims (1000 Max)
    K - Extra-Large Stims (1000 Max)
    L - Shop Card (5 Max)
    
    9. DRLA Assemblies (11 Bits)
    
    AAAABBBBCCC
    
    A - Basic Assemblies (12 Max)
    B - Advanced Assemblies (15 Max)
    C - Master Assemblies (7 Max)
    
*/

str[PW_MAX_ASSEMBLIES] DRLAAssemblies =
{
    "RLChainswordAssemblyLearntToken";
    "RLPiercingBladeAssemblyLearntToken";
    "RLSilencedPistolAssemblyLearntToken";
    "RLShredderPistolAssemblyLearntToken";
    "RLSpeedloaderPistolAssemblyLearntToken";
    "RLHighPowerWeaponAssemblyLearntToken";
    "RLElephantGunAssemblyLearntToken";
    "RLHeavyShotgunAssemblyLearntToken";
    "RLPlasmaticShrapnelAssemblyLearntToken";
    "RLTacticalShotgunAssemblyLearntToken";
    "RLGatlingGunAssemblyLearntToken";
    "RLMicroLauncherAssemblyLearntToken";
    "RLDoubleChainsawAssemblyLearntToken";
    "RLStormPistolAssemblyLearntToken";
    "RLPlasmaPistolAssemblyLearntToken";
    "RLAutoshotgunAssemblyLearntToken";
    "RLNanoShrapnelAssemblyLearntToken";
    "RLFocusedDoubleShotgunAssemblyLearntToken";
    "RLBulletstormChaingunAssemblyLearntToken";
    "RLAssaultRifleAssemblyLearntToken";
    "RLBurstCannonAssemblyLearntToken";
    "RLTacticalRocketLauncherAssemblyLearntToken";
    "RLGrenadeLauncherAssemblyLearntToken";
    "RLHyperblasterAssemblyLearntToken";
    "RLPlasmaRifleMkIIAssemblyLearntToken";
    "RLVBFG9000AssemblyLearntToken";
    "RLMiniMissilePistolAssemblyLearntToken";
    "RLRipperAssemblyLearntToken";
    "RLDemolitionAmmoAssemblyLearntToken";
    "RLNanomanufactureAmmoAssemblyLearntToken";
    "RLMotherInLawAssemblyLearntToken";
    "RLPlasmaRefractorAssemblyLearntToken";
    "RLBiggestFuckingGunAssemblyLearntToken";
    "RLAutocannonAssemblyLearntToken";
};

acscript void SaveCharacter()
{
    // Init BitIO State
    BitIO_Open(&State, Player.PasswordData);
    
    // 1. Level / Rank Level
    BitIO_PutBits(&State, GetBitSize(100), Player.Level);
    BitIO_PutBits(&State, GetBitSize(24), Player.RankLevel);
    
    // 2. Stats
    BitIO_PutBits(&State, GetBitSize(200), Player.Strength);
    BitIO_PutBits(&State, GetBitSize(200), Player.Defense);
    BitIO_PutBits(&State, GetBitSize(200), Player.Vitality);
    BitIO_PutBits(&State, GetBitSize(200), Player.Energy);
    BitIO_PutBits(&State, GetBitSize(200), Player.Regeneration);
    BitIO_PutBits(&State, GetBitSize(200), Player.Agility);
    BitIO_PutBits(&State, GetBitSize(200), Player.Capacity);
    BitIO_PutBits(&State, GetBitSize(200), Player.Luck);
    
    // 3. Skills
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < SkillCategoryMax[i]; j++)
            BitIO_PutBits(&State, GetBitSize(Skills[i][j].MaxLevel), Skills[i][j].Level);
    
    // 4. Augmentations
    for (int i = 0; i < MAX_AUGS; i++)
        BitIO_PutBits(&State, GetBitSize(AugData[i].MaxLevel), Player.Augs.Level[i]);
    
    // 5. Shield Parts
    for (int i = 0; i < ShieldPartsMax[0]; i++)
        BitIO_PutBits(&State, 1, CheckInventory(StrParam("ShieldBody%d\n", i + 1)) == 1);
    for (int i = 0; i < ShieldPartsMax[1]; i++)
        BitIO_PutBits(&State, 1, CheckInventory(StrParam("ShieldBattery%d\n", i + 1)) == 1);
    for (int i = 0; i < ShieldPartsMax[2]; i++)
        BitIO_PutBits(&State, 1, CheckInventory(StrParam("ShieldCapacitor%d\n", i + 1)) == 1);
    for (int i = 0; i < ShieldPartsMax[3]; i++)
        BitIO_PutBits(&State, 1, CheckInventory(StrParam("ShieldAccessory%d\n", i + 1)) == 1);
    
    // 6. Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        BitIO_PutBits(&State, GetBitSize(4000), Player.Stim.Vials[i]);
    
    // 7. Misc
    BitIO_PutBits(&State, GetBitSize(100), Player.Toxicity);
    BitIO_PutBits(&State, GetBitSize(200), Player.Augs.Battery);
    BitIO_PutBits(&State, GetBitSize(1000), Player.PayBonus);
    
    // 8. Inventory Items
    BitIO_PutBits(&State, GetBitSize(1000000000), CheckInventory("Credits"));
    BitIO_PutBits(&State, GetBitSize(10000), CheckInventory("StatToken"));
    BitIO_PutBits(&State, GetBitSize(100), CheckInventory("StatCapToken"));
    BitIO_PutBits(&State, GetBitSize(10000), CheckInventory("SkillToken"));
    BitIO_PutBits(&State, GetBitSize(100), CheckInventory("AugCanister"));
    BitIO_PutBits(&State, GetBitSize(100), CheckInventory("AugUpgradeCanister"));
    BitIO_PutBits(&State, GetBitSize(100), CheckInventory("AugSlotUpgrade"));
    BitIO_PutBits(&State, GetBitSize(1000), CheckInventory("StimSmall"));
    BitIO_PutBits(&State, GetBitSize(1000), CheckInventory("StimMedium"));
    BitIO_PutBits(&State, GetBitSize(1000), CheckInventory("StimLarge"));
    BitIO_PutBits(&State, GetBitSize(1000), CheckInventory("StimXL"));
    BitIO_PutBits(&State, GetBitSize(5), CheckInventory("UACCard"));
    
    // 9. DRLA Assemblies
    for (int i = 0; i < PW_MAX_ASSEMBLIES; i++)
        BitIO_PutBits(&State, 1, CheckInventory(DRLAAssemblies[i]) == 1);
    
    // Debugging
    if (GetCVar("drpg_debug"))
        Log("\cdDEBUG: \c-Password Save - \caPassword Bits: %d\c-, \cdPassword Words: %d\n", BitIO_UsedB(&State), BitIO_UsedW(&State));
    
    // Write into CVARs
    for (int i = 0; i < PW_SIZE; i++)
        SetCVar(StrParam("drpg_char_%d\n", i), Player.PasswordData[i]);
    
    // Saving Successful
    ActivatorSound("password/save", 127);
    SetFont("BIGFONT");
    HudMessage("===== Character Saved =====\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 1.0, 2.0);
};

acscript void LoadCharacter()
{
    // Read from CVARs
    for (int i = 0; i < PW_SIZE; i++)
        Player.PasswordData[i] = GetCVar(StrParam("drpg_char_%d\n", i));
    
    // Password is invalid
    for (int i = 0; i <= PW_SIZE; i++)
    {
        if (i != PW_SIZE && Player.PasswordData[i] != 0)
            break;
        
        if (i == PW_SIZE)
        {
            ActivatorSound("password/fail", 127);
            SetFont("BIGFONT");
            HudMessage("===== Character Load Failed =====\n", HUDMSG_FADEOUT, 0, CR_BRICK, 0.5, 0.5, 1.0, 2.0);
            return;
        };
    };
    
    // Init BitIO State
    BitIO_Open(&State, Player.PasswordData);
    
    // 1. Level and Rank Level
    Player.Level = BitIO_GetBits(&State, GetBitSize(100));
    Player.XP = XPTable[Player.Level - 1];
    Player.RankLevel = BitIO_GetBits(&State, GetBitSize(24));
    Player.Rank = RankTable[Player.RankLevel - 1];
    
    // 2. Stats
    Player.Strength = BitIO_GetBits(&State, GetBitSize(200));
    Player.Defense = BitIO_GetBits(&State, GetBitSize(200));
    Player.Vitality = BitIO_GetBits(&State, GetBitSize(200));
    Player.Energy = BitIO_GetBits(&State, GetBitSize(200));
    Player.Regeneration = BitIO_GetBits(&State, GetBitSize(200));
    Player.Agility = BitIO_GetBits(&State, GetBitSize(200));
    Player.Capacity = BitIO_GetBits(&State, GetBitSize(200));
    Player.Luck = BitIO_GetBits(&State, GetBitSize(200));
    
    // 3. Skills
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < SkillCategoryMax[i]; j++)
        {
            Skills[i][j].Level = BitIO_GetBits(&State, GetBitSize(Skills[i][j].MaxLevel));
            Skills[i][j].CurrentLevel = Skills[i][j].Level;
        };
    
    // 4. Augmentations
    for (int i = 0; i < MAX_AUGS; i++)
        Player.Augs.Level[i] = BitIO_GetBits(&State, GetBitSize(AugData[i].MaxLevel));
    
    // 5. Shield Parts
    for (int i = 0; i < ShieldPartsMax[0]; i++)
        SetInventory(StrParam("ShieldBody%d\n", i + 1), BitIO_GetBits(&State, 1));
    for (int i = 0; i < ShieldPartsMax[1]; i++)
        SetInventory(StrParam("ShieldBattery%d\n", i + 1), BitIO_GetBits(&State, 1));
    for (int i = 0; i < ShieldPartsMax[2]; i++)
        SetInventory(StrParam("ShieldCapacitor%d\n", i + 1), BitIO_GetBits(&State, 1));
    for (int i = 0; i < ShieldPartsMax[3]; i++)
        SetInventory(StrParam("ShieldAccessory%d\n", i + 1), BitIO_GetBits(&State, 1));
    
    // 6. Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        Player.Stim.Vials[i] = BitIO_GetBits(&State, GetBitSize(4000));
    
    // 7. Misc
    Player.Toxicity = BitIO_GetBits(&State, GetBitSize(100));
    Player.Augs.Battery = BitIO_GetBits(&State, GetBitSize(200));
    Player.PayBonus = BitIO_GetBits(&State, GetBitSize(1000));
    
    // 8. Inventory Items
    SetInventory("Credits", BitIO_GetBits(&State, GetBitSize(1000000000)));
    SetInventory("StatToken", BitIO_GetBits(&State, GetBitSize(10000)));
    SetInventory("StatCapToken", BitIO_GetBits(&State, GetBitSize(100)));
    SetInventory("SkillToken", BitIO_GetBits(&State, GetBitSize(10000)));
    SetInventory("AugCanister", BitIO_GetBits(&State, GetBitSize(100)));
    SetInventory("AugUpgradeCanister", BitIO_GetBits(&State, GetBitSize(100)));
    SetInventory("AugSlotUpgrade", BitIO_GetBits(&State, GetBitSize(100)));
    SetInventory("StimSmall", BitIO_GetBits(&State, GetBitSize(1000)));
    SetInventory("StimMedium", BitIO_GetBits(&State, GetBitSize(1000)));
    SetInventory("StimLarge", BitIO_GetBits(&State, GetBitSize(1000)));
    SetInventory("StimXL", BitIO_GetBits(&State, GetBitSize(1000)));
    SetInventory("UACCard", BitIO_GetBits(&State, GetBitSize(5)));
    
    // 9. DRLA Assemblies
    for (int i = 0; i < PW_MAX_ASSEMBLIES; i++)
        SetInventory(DRLAAssemblies[i], BitIO_GetBits(&State, 1));
    
    // Debugging
    if (GetCVar("drpg_debug"))
        Log("\cdDEBUG: \c-Password Load - \caPassword Bits: %d\c-, \cdPassword Words: %d\n", BitIO_UsedB(&State), BitIO_UsedW(&State));
    
    ActivatorSound("password/accept", 127);
    SetFont("BIGFONT");
    HudMessage("===== Character Load Complete =====\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 1.0, 2.0);
};

acscript void DumpCharacter()
{
    str Output;
    
    // Read from CVARs
    for (int i = 0; i < PW_SIZE; i++)
        Player.PasswordData[i] = GetCVar(StrParam("drpg_char_%d\n", i));
    
    for (int i = 0; i < PW_SIZE; i++)
        Output = StrParam("%s %d\n", Output, Player.PasswordData[i]);
        
    Log("\cdPasswordData: \c-%s\n", Output);
};

// Return how many bits an int would require for storage
function int GetBitSize(int x)
{
    int Bits;
    
    while (x != 0)
    {
        x >>= 1;
        Bits++;
    };
    
    return Bits;
};
