#library "Stats"

#include "zcommon.acs"

#import "RPG.acs"
#import "Skills.acs"
#import "Augs.acs"
#import "Shop.acs"
#import "Menu.acs"
#import "Shield.acs"
#import "Utils.acs"

// CVARS/Options
global int 4 : RandomizedStartTokens;	// Whether the tokens given at the beginning of the game have been used

// Level & XP
global int 8 : Level;
global int 9 : XP;
global int 10 : XPNext;

// Rank
global int 11 : RankString;
global int 12 : RankLevel;
global int 13 : Rank;
global int 14 : RankNext;
global int 15 : PayTimer;

// HUD Stuff
global int 18 : Credits;
global int 19 : Continues;

// Combo System
global int 20 : Combo;
global int 21 : ComboTimer;
global int 22 : TotalGained;
global int 23 : XPGained;
global int 24 : RankGained;

// Primary Stats
global int 31 : Strength;		// Increases Damage
global int 32 : Defense;		// Reduces Damage taken
global int 33 : Vitality;		// Increases max Health and HP regen rate
global int 34 : Energy;			// Increases max EP and EP regen rate
global int 35 : Regeneration;	// Increases both HP/EP regen rate
global int 36 : Agility;		// Increases movement speed and jump height (and optionally weapon speed)
global int 37 : Capacity;		// Increases max ammo capacities
global int 38 : Luck;			// Increases Survivability bonus and drop chances
global int 39 : HealthMax;		// Max player Health
global int 40 : ArmorMax;		// Max Armor that the player's current armor can go up to

// Secondary Stats
int Damage;						// The player's DamageFactor against monsters
int DamageFactor;				// General damage the player will defend against
int Speed;						// Movement Speed
int JumpHeight;					// Jump Height
int WeaponSpeed;				// Weapon Speed Increase bsed on Agility
int SurvivalBonus;				// Chance that you will survive a fatal hit

// Misc stat/token stuff
int StatTokens;					// Current Stat Tokens
int SkillTokens;				// Current Skill Tokens
int StatCap;					// Current Stat Cap
int SoftStatCap = 100;			// Soft Stat Cap, this cannot be passed with tokens
int HardStatCap = 1000;			// Hard Stat Cap, this cap cannot be passed period

// 100% Bonuses
int Kills;
bool KillBonus;
int Items;
bool ItemsBonus;
int SecretsFound;
bool SecretsBonus;
bool AllBonus;

// HP/EP Regen Timers
int HPRate;
int EPRate;
int LowHealthTimer;
int RegenBoostTimer;

// XP & Rank Tables
int XPTable[1001];
int RankTable[25];

// Luck Chance Percentages
int MoneyChance;
int HealthChance;
int ArmorChance;
int PowerupChance;
int RuneChance;
int TokenChance;
int AugChance;
int ShieldChance;
int EPChance;

// Randomizer
int LevelTokens;

// Rank strings
str Ranks[25] = {
	"None",
	"Pvt", "Pvt +",
	"PFC", "PFC +",
	"LCpl", "LCpl +",
	"Cpl", "Cpl +",
	"Sgt", "Sgt +",
	"SSgt", "SSgt +",
	"GySgt", "GySgt +",
	"MSgt", "MSgt +",
	"1stSgt", "1stSgt +",
	"MGySgt", "MGySgt +",
	"SgtMaj", "SgtMaj +",
	"SgtMajMarCor", "MSgtMarCor"
};

str LongRanks[25] = {
	"None",
	"Private", "Private +",
	"Private First Class", "Private First Class +",
	"Lance Corporal", "Lance Corporal +",
	"Corporal", "Corporal +",
	"Seargent", "Seargent +",
	"Staff Seargent", "Staff Seargent +",
	"Gunnery Seargent", "Gunnery Seargent +",
	"Master Seargent", "Master Seargent +",
	"First Seargent", "First Seargent +",
	"Master Gunnery Seargent", "Master Gunnery Seargent +",
	"Seargent Major", "Seargent Major +",
	"Seargent Major of the Marine Corps", "Master Seargent Major of the Marine Corps"
};

function void CheckCombo(void)
{
	if (GetCVAR("drpg_combo"))
	{
		// Subtract the combo timer each tick
		if ((Combo > 0 || ComboTimer < 100) && !CheckInventory("PowerTimeFreezer") && !CheckInventory("MenuFreezer"))
			ComboTimer--;
		
		// Set your Inventory Combo Item to the current ComboTimer aunt
		if (ComboTimer < 100)
		{
			SetInventory("Combo", ComboTimer);
			SetInventory("Combo2", 0);
		}
		if (ComboTimer < 0)
		{
			SetInventory("Combo", 0);
			SetInventory("Combo2", ComboTimer + 100);
		}
		
		// Add up and randomize the XP and Rank gain
		if (ComboTimer == 0)
		{
			XPGained += TotalGained + Random(0, Combo + Combo);
			RankGained += TotalGained + Random(0, Combo + Combo * RankLevel);
			
			XP += XPGained;
			Rank += RankGained;
			
			TotalGained = 0;
			Combo = 0;
		}
		
		if (ComboTimer < -100)
		{
			TotalGained = 0;
			XPGained = 0;
			RankGained = 0;
			ComboTimer = 100;
		}
	}
	else
		ComboTimer = -100;
}

// Keeps current level and XP updated
function void CheckLevel(void)
{
	if (Level < 1000)
		XPNext = XPTable[Level];

	if (Level > 999)
	{
		XP = XPTable[Level - 1];
		XPNext = XPTable[Level - 1];
	}
	
	// Now check for a level up
	if (XP >= XPTable[Level] && Level < 1000)
	{
		int Tokens;
		
		switch (GameSkill())
		{
			case 1: Tokens = 10; 	break;
			case 2: Tokens = 5; 	break;
			case 3: Tokens = 5; 	break;
			case 4: Tokens = 3; 	break;
			case 5: Tokens = 1; 	break;
		}
		
		if (GetCVAR("drpg_autospend"))
			LevelTokens += Tokens;
		
		// Level Up
		ActivatorSound("misc/levelup", 127);
		
		Level++;
		
		GiveInventory("StatToken", Tokens);
		GiveInventory("SkillToken", 1);
		
		if (GetCVAR("drpg_levelup_heal"))
		{
			if (EP <= 0) EP = 0; else EP = GetEPMax();
			HealThing(1000000);
		}

		FadeRange(255, 255, 255, 0.5, 255, 255, 255, 0, 2.0);
		SetFont("BIGFONT");
		SetHUDSize(0, 0, false);
		HudMessage(s:"You have reached level ", d:Level;
				   HUDMSG_FADEOUT, 4999, CR_WHITE, 0.5, 0.5, 2.0, 2.0);
	}
}

// Keeps current Rank updated
function void CheckRank(void)
{
	RankString = Ranks[RankLevel];
	
	if (RankLevel < 25)
		RankNext = RankTable[RankLevel];
	
	if (RankLevel >= 24)
	{
		Rank = RankTable[RankLevel];
		RankNext = RankTable[RankLevel];
	}
		
	if (Rank >= RankTable[RankLevel] && RankLevel < 24)
	{
		ActivatorSound("misc/rankup", 127);
		RankLevel++;
		FadeRange(255, 255, 0, 0.5, 255, 255, 0, 0, 2.0);
		SetFont("BIGFONT");
		SetHUDSize(0, 0, false);
		HudMessage(s:"You have reached rank level ", d:RankLevel, s:": ", s:LongRanks[RankLevel];
				   HUDMSG_FADEOUT, 4999, CR_GOLD, 0.5, 0.5, 4.0, 2.0);
	}
	
	// Payment
	PayTimer++;
	if (PayTimer >= 35 * 60 * GetCVAR("drpg_pay_interval"))
	{
		PayTimer = 0;
		
		if (RankLevel > 0)
		{
			GiveInventory("Credits", 100 * RankLevel + 100);
			
			FadeRange(0, 255, 0, 0.1, 0, 255, 0, 0, 2.0);
			SetFont("BIGFONT");
			if (InMenu)
				HudMessage(s:"+", d:100 * RankLevel + 100, s:" Credits";
						   HUDMSG_FADEOUT, 0, CR_GOLD, 200.0, 234.0, 5.0, 5.0);
			else
			{
				if (InShop)
					SetHUDSize(0, 0, false);
				HudMessage(s:"+", d:100 * RankLevel + 100, s:" Credits";
						   HUDMSG_FADEOUT, 0, CR_GOLD, 0.025, 0.775, 5.0, 5.0);
			}
			ActivatorSound("credits/payout", 127);
			Log(s:"\cfYou have been paid ", d:100 * RankLevel + 100, s:" Credits by the UAC");
		}
	}
}

// Gives rewards for finding a secret and 100% Kills/Items/Secrets
function void CheckLevelInfo(void)
{
	int CurrentKills = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
	int CurrentItems = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
	int CurrentSecretsFound = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
	
	int XPBonus;
	int RankBonus;
	
	// Set HUD Size and Font
	SetHUDSize(0, 0, false);
	SetFont("SMALLFONT");
	
	// Check to see if any total stats are 0, if they are, silently flag them as received already
	if (GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) == 0)
		KillBonus = true;
	if (GetLevelInfo(LEVELINFO_TOTAL_ITEMS) == 0)
		ItemsBonus = true;
	if (GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == 0)
		SecretsBonus = true;
	
	// If all the total stats are 0, no bonuses at all
	if (GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) == 0 && GetLevelInfo(LEVELINFO_TOTAL_ITEMS) == 0 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == 0)
		AllBonus = true;
	
	// 100% Kills
	if (CurrentKills >= GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) && !KillBonus)
	{
		FadeRange(255, 0, 0, 0.25, 255, 0, 0, 0, 1.0);
		
		XPBonus = Random(Level * 10, Level * 100);
		XP += XPBonus;
		
		HudMessage(s:"100% Monsters Killed!\n", d:XPBonus, s:" XP Bonus";
				   HUDMSG_TYPEON, 0, CR_BRICK, 1.5, 0.4, 3.0, 0.1, 3.0);
		KillBonus = true;
	}
	
	// 100% Items
	if (CurrentItems >= GetLevelInfo(LEVELINFO_TOTAL_ITEMS) && !ItemsBonus)
	{
		FadeRange(0, 255, 255, 0.25, 0, 255, 255, 0, 1.0);
		
		EP = GetEPMax();
		HealThing(1000000);
		
		HudMessage(s:"100% Items Found!\nFull HP/EP Restore";
				   HUDMSG_TYPEON, 0, CR_LIGHTBLUE, 1.5, 0.6, 3.0, 0.1, 3.0);
		ItemsBonus = true;
	}

	// Secrets
	if (CurrentSecretsFound == SecretsFound + 1 && RankLevel < 25)
	{
		FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0, 1.0);
		
		RankBonus = Random(RankLevel * 1000, RankLevel * 1000 + Random(0, 1000));
		Rank += RankBonus;
		
		// 100% Secrets
		if (CurrentSecretsFound >= GetLevelInfo(LEVELINFO_TOTAL_SECRETS) && !SecretsBonus)
		{
			FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0, 1.0);
			
			RankBonus = Random(RankLevel * 1000, RankLevel * 1000 + Random(0, 1000));
			Rank += RankBonus;

			HudMessage(s:"100% Secrets Found!\n", d:RankBonus, s:" Rank Bonus";
					   HUDMSG_TYPEON, 0, CR_YELLOW, 1.5, 0.8, 3.0, 0.1, 3.0);
			SecretsBonus = true;
		}
	}
	
	// All Kills/Items/Secrets 100%
	if ((KillBonus && ItemsBonus && SecretsBonus) && !AllBonus)
	{
		FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 1.0);
		
		XPBonus = Random(Level * 100, Level * 1000);
		RankBonus = Random(RankLevel * 1000, RankLevel * 1000 + Random(0, 1000));
		
		XP += XPBonus;
		Rank += RankBonus;
		
		EP = GetEPMax();
		HealThing(1000000);
		
		HudMessage(s:"100% Monsters killed!\n100% Items Found!\n100% Secrets Found!\n\n",
				   d:XPBonus, s:" XP Bonus\n", d:RankBonus, s:" Rank Bonus\nFull HP/EP Restore";
				   HUDMSG_TYPEON, 0, CR_WHITE, 0.5, 0.2, 3.0, 0.1, 3.0);
		AllBonus = true;
	}
	
	
	CurrentKills = Kills;
	CurrentItems = Items;
	SecretsFound = CurrentSecretsFound;
}

function void CheckHealth(void)
{
	if (LowHealthTimer >= 100 && CheckInventory("Health") > 0)
	{
		ActivatorSound("health/low", 64);
		LowHealthTimer = 0;
	}
	
	if (CheckInventory("Health") <= GetActorProperty(0, APROP_SPAWNHEALTH) / 10 && CheckInventory("Health") > 0)
	{
		FadeRange(LowHealthTimer + 155, 0, 0, 0.25, LowHealthTimer + 155, 0, 0, 0.0, 1.0);
		LowHealthTimer++;
		
		// Halve Movement Speed and Jump Height
		Speed /= 2;
		JumpHeight /= 2;
		SetActorProperty(0, APROP_SPEED, Speed);
		SetActorProperty(0, APROP_JUMPZ, JumpHeight);
	}
}

function void CheckArmorMax(void)
{
	if (!GetArmorType("none", 0)) 					ArmorMax = 0;
	if (GetArmorType("ArmorBonus", 0) > 0) 			ArmorMax = 100;
	if (GetArmorType("UsedGreenArmor", 0) > 0) 		ArmorMax = 50;
	if (GetArmorType("GreenArmor", 0) > 0) 			ArmorMax = 100;
	if (GetArmorType("UsedBlueArmor", 0) > 0) 		ArmorMax = 125;
	if (GetArmorType("BlueArmor", 0) > 0) 			ArmorMax = 250;
	if (GetArmorType("UsedYellowArmor", 0) > 0) 	ArmorMax = 250;
	if (GetArmorType("YellowArmor", 0) > 0) 		ArmorMax = 500;
	if (GetArmorType("UsedRedArmor", 0) > 0) 		ArmorMax = 375;
	if (GetArmorType("RedArmor", 0) > 0) 			ArmorMax = 750;
	if (GetArmorType("UsedWhiteArmor", 0) > 0) 		ArmorMax = 500;
	if (GetArmorType("WhiteArmor", 0) > 0) 			ArmorMax = 1000;
	
	// DoomRL Compatibility
	if (GetCVAR("drpg_ext_doomrl"))
	{
		// Armors which have 100% Save Amount
		if ((GetArmorType("RLGreenArmor", 0) > 0) ||
			(GetArmorType("RLBlueArmor", 0) > 0) ||
			(GetArmorType("RLRedArmor", 0) > 0) ||
			(GetArmorType("RLCerberusArmor", 0) > 0) ||
			(GetArmorType("RLTacticalArmor", 0) > 0) ||
			(GetArmorType("RLBallisticGreenArmor", 0) > 0) ||
			(GetArmorType("RLBallisticBlueArmor", 0) > 0) ||
			(GetArmorType("RLBallisticRedArmor", 0) > 0) ||
			(GetArmorType("RLFireproofGreenArmor", 0) > 0) ||
			(GetArmorType("RLFireproofBlueArmor", 0) > 0) ||
			(GetArmorType("RLFireproofRedArmor", 0) > 0) ||
			(GetArmorType("RLPowerGreenArmor", 0) > 0) ||
			(GetArmorType("RLPowerBlueArmor", 0) > 0) ||
			(GetArmorType("RLPowerRedArmor", 0) > 0) ||
			(GetArmorType("RLBallisticShieldArmor", 0) > 0) ||
			(GetArmorType("RLBallisticVestArmor", 0) > 0) ||
			(GetArmorType("RLBulletProofVestArmor", 0) > 0) ||
			(GetArmorType("RLDuelistArmor", 0) > 0) ||
			(GetArmorType("RLEnergyShieldedVestArmor", 0) > 0) ||
			(GetArmorType("RLEnergyShieldArmor", 0) > 0) ||
			(GetArmorType("RLMedicalArmor", 0) > 0) ||
			(GetArmorType("RLPhaseshiftArmor", 0) > 0) ||
			(GetArmorType("RLPlasmaShieldArmor", 0) > 0) ||
			(GetArmorType("RLNecroArmor", 0) > 0) ||
			(GetArmorType("RLAngelicArmor", 0) > 0) ||
			(GetArmorType("RLOModDuelistArmor", 0) > 0))
			ArmorMax = 100;
		else // Armors which have differing Save Amounts
		{
			if (GetArmorType("RLTowerShieldArmor", 0) > 0)	ArmorMax = 150;
			if (GetArmorType("RLFireShieldArmor", 0) > 0)	ArmorMax = 200;
			if (GetArmorType("RLGothicArmor", 0) > 0) 		ArmorMax = 200;
		}
	}
}

function str CheckArmorType(void)
{
	if (GetArmorType("BasicArmorBonus", 0) > 0) 				return "BasicArmorBonus";
	if (GetArmorType("GreenArmor", 0) > 0) 						return "GreenArmor";
	if (GetArmorType("UsedGreenArmor", 0) > 0) 					return "UsedGreenArmor";
	if (GetArmorType("BlueArmor", 0) > 0) 						return "BlueArmor";
	if (GetArmorType("UsedBlueArmor", 0) > 0) 					return "UsedBlueArmor";
	if (GetArmorType("YellowArmor", 0) > 0) 					return "YellowArmor";
	if (GetArmorType("UsedYellowArmor", 0) > 0) 				return "UsedYellowArmor";
	if (GetArmorType("RedArmor", 0) > 0) 						return "RedArmor";
	if (GetArmorType("UsedRedArmor", 0) > 0) 					return "UsedRedArmor";
	if (GetArmorType("WhiteArmor", 0) > 0) 						return "WhiteArmor";
	if (GetArmorType("UsedWhiteArmor", 0) > 0) 					return "UsedWhiteArmor";
	if (GetArmorType("ShieldArmor", 0) > 0) 					return "ShieldArmor";
	if (GetArmorType("ShieldArmorEmpty", 0) > 0) 				return "ShieldArmorEmpty";
	
	// DoomRL Compatibility
	if (GetCVAR("drpg_ext_doomrl"))
	{
		if (GetArmorType("RLGreenArmor", 0) > 0)				return "RLGreenArmor";
		if (GetArmorType("RLBlueArmor", 0) > 0)					return "RLBlueArmor";
		if (GetArmorType("RLRedArmor", 0) > 0)					return "RLRedArmor";
		if (GetArmorType("RLCerberusArmor", 0) > 0)				return "RLCerberusArmor";
		if (GetArmorType("RLFireShieldArmor", 0) > 0)			return "RLFireShieldArmor";
		if (GetArmorType("RLTacticalArmor", 0) > 0)				return "RLTacticalArmor";
		if (GetArmorType("RLBallisticGreenArmor", 0) > 0)		return "RLBallisticGreenArmor";
		if (GetArmorType("RLBallisticBlueArmor", 0) > 0)		return "RLBallisticBlueArmor";
		if (GetArmorType("RLBallisticRedArmor", 0) > 0)			return "RLBallisticRedArmor";
		if (GetArmorType("RLFireproofGreenArmor", 0) > 0)		return "RLFireproofGreenArmor";
		if (GetArmorType("RLFireproofBlueArmor", 0) > 0)		return "RLFireproofBlueArmor";
		if (GetArmorType("RLFireproofRedArmor", 0) > 0)			return "RLFireproofRedArmor";
		if (GetArmorType("RLPowerGreenArmor", 0) > 0)			return "RLPowerGreenArmor";
		if (GetArmorType("RLPowerBlueArmor", 0) > 0)			return "RLPowerBlueArmor";
		if (GetArmorType("RLPowerRedArmor", 0) > 0)				return "RLPowerRedArmor";
		if (GetArmorType("RLBallisticShieldArmor", 0) > 0)		return "RLBallisticShieldArmor";
		if (GetArmorType("RLBallisticVestArmor", 0) > 0)		return "RLBallisticVestArmor";
		if (GetArmorType("RLBulletProofVestArmor", 0) > 0)		return "RLBulletProofVestArmor";
		if (GetArmorType("RLDuelistArmor", 0) > 0)				return "RLDuelistArmor";
		if (GetArmorType("RLEnergyShieldedVestArmor", 0) > 0)	return "RLEnergyShieldedVestArmor";
		if (GetArmorType("RLEnergyShieldArmor", 0) > 0)			return "RLEnergyShieldArmor";
		if (GetArmorType("RLMedicalArmor", 0) > 0)				return "RLMedicalArmor";
		if (GetArmorType("RLPhaseshiftArmor", 0) > 0)			return "RLPhaseshiftArmor";
		if (GetArmorType("RLPlasmaShieldArmor", 0) > 0)			return "RLPlasmaShieldArmor";
		if (GetArmorType("RLNecroArmor", 0) > 0)				return "RLNecroArmor";
		if (GetArmorType("RLAngelicArmor", 0) > 0)				return "RLAngelicArmor";
		if (GetArmorType("RLOModDuelistArmor", 0) > 0)			return "RLOModDuelistArmor";
		if (GetArmorType("RLTowerShieldArmor", 0) > 0)			return "RLTowerShieldArmor";
		if (GetArmorType("RLGothicArmor", 0) > 0)				return "RLGothicArmor";
	}
	
	return "";
}

function void CheckStats(void)
{
	// VERY IMPORTANT CODE RIGHT HERE
	// If you're reading this and you'd like to modify stat curves, this is where you'd do it
	Damage = Strength;
	DamageFactor = 1.0 - FixedMul(0.25, FixedDiv(Defense, 100));
	HealthMax = Vitality * 10;
	EPMax = Energy * 10;
	Speed = 1.0 + FixedMul(0.25, FixedDiv(Agility, 100));
	JumpHeight = 8.0 + FixedMul(8.0, FixedDiv(Agility, 100));
	WeaponSpeed = Agility;
	SetAmmoCapacity("Clip", Capacity * 20);
	SetAmmoCapacity("Shell", Capacity * 10);
	SetAmmoCapacity("RocketAmmo", Capacity * 5);
	SetAmmoCapacity("Cell", Capacity * 30);
	SurvivalBonus = Luck;

	// Keep misc counts handy for the SBARINFO HUD and such
	Credits = CheckInventory("Credits");
	Continues = CheckInventory("Continue");
	StatTokens = CheckInventory("StatToken");
	SkillTokens = CheckInventory("SkillToken");
	
	// Survival Bonus
	if (Random(1, 1000) <= SurvivalBonus)
		SetPlayerProperty(0, 1, PROP_BUDDHA);
	else
		SetPlayerProperty(0, 0, PROP_BUDDHA);
}

// Regeneration
function void DoRegen(void)
{
	// HP Regen
	if (HPRate >= 3500 && CheckInventory("Health") >= 0)
	{
		HealThing(1);
		HPRate = 0;
	}

	// EP Regen
	if (EPRate >= 3500 && EP <= EPMax)
	{
		EP++;
		if (EP > EPMax)
			EP = EPMax;
		
		EPRate = 0;
	}
	
	// If damaged, reset the Healing timer
	if (HealthLoss != 0)
		HPRate = 0;
	
	// Now increment the timers
	if (!CheckInventory("MenuFreezer"))
	{
		int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
		
		// Regen Boost
		if (RegenBoostTimer > 0)
		{
			HPRate += RegenBoostTimer;
			EPRate += RegenBoostTimer;
			RegenBoostTimer -= 10;
			FadeRange(255, 0, 128, 0.1, 255, 0, 128, 0.0, 1.0);
		}

		// Movement/Crouching/Idling mechanics
		if (GetCVAR("drpg_regen_movement"))
		{
			if (Buttons & BT_FORWARD || Buttons & BT_BACK ||	// Movement - 50% Regen Rate
				Buttons & BT_LEFT || Buttons & BT_MOVELEFT ||
				Buttons & BT_RIGHT || Buttons & BT_MOVERIGHT ||
				Buttons & BT_ATTACK || Buttons & BT_JUMP)
			{
				HPRate += FixedMul(FixedMul(Vitality, 1.25) + FixedMul(Regeneration, 1.25), 0.5);
				EPRate += FixedMul(FixedMul(Energy, 1.25) + FixedMul(Regeneration, 1.25), 0.5);
			}
			else if (Buttons & BT_CROUCH) // Crouch - 150% Regen Rate
			{
				HPRate += FixedMul(FixedMul(Vitality, 1.25) + FixedMul(Regeneration, 1.25), 1.5);
				EPRate += FixedMul(FixedMul(Energy, 1.25) + FixedMul(Regeneration, 1.25), 1.5);
			}
			else // Idle - 100% Regen Rate
			{
				HPRate += FixedMul(Vitality, 1.25) + FixedMul(Regeneration, 1.25);
				EPRate += FixedMul(Energy, 1.25) + FixedMul(Regeneration, 1.25);
			}
		}
		else
		{
			HPRate += FixedMul(Vitality, 1.25) + FixedMul(Regeneration, 1.25);
			EPRate += FixedMul(Energy, 1.25) + FixedMul(Regeneration, 1.25);
		}
	}
}

// Setup XP & Rank Tables
function void SetupTables(void)
{
	// XP Table
	for (int i = 0; i < 1000; i++)
		XPTable[i] = 1000 + (1000 * i * i);
	
	// Rank Table
	for (int j = 0; j < 25; j++)
		RankTable[j] = 100000 + (100000 * j * j);
}

// Keep stats capped at certain values
function void CheckStatCaps(void)
{
	StatCap = SoftStatCap + CheckInventory("StatCapToken");

	if (Strength < 0)			Strength = 0;
	if (Strength > StatCap)		Strength = StatCap;
	if (Defense < 0)			Defense = 0;
	if (Defense > StatCap)		Defense = StatCap;
	if (Vitality < 0)			Vitality = 0;
	if (Vitality > StatCap)		Vitality = StatCap;
	if (Energy < 0)				Energy = 0;
	if (Energy > StatCap)		Energy = StatCap;
	if (Regeneration < 0)		Regeneration = 0;
	if (Regeneration > StatCap)	Regeneration = StatCap;
	if (Agility < 0)			Agility = 0;
	if (Agility > StatCap)		Agility = StatCap;
	if (Capacity < 0)			Capacity = 0;
	if (Capacity > StatCap)		Capacity = StatCap;
	if (Luck < 0)				Luck = 0;
	if (Luck > StatCap)			Luck = StatCap;
}

// TODO: Recalculate stats after something (Aug, aura) has modified them
function void RecalculateStats(void)
{
	int HPRatio = (GetActorProperty(0, APROP_HEALTH) * 100) / GetActorProperty(0, APROP_SPAWNHEALTH);
	int CurrentHP = (HPRatio * GetActorProperty(0, APROP_SPAWNHEALTH)) / 100;
	int EPRatio = (EP * 100) / EPMax;
	int CurrentEP = (EPRatio * EPMax) / 100;
	
	// SetActorProperty(0, APROP_HEALTH, CurrentHP);
	// EP = CurrentEP;
}

function void CheckStatBounds(void)
{
	// Prevent Overflow of EP
	if (EP > EPMax)
		EP = EPMax;

	// Prevent Underflow of DamageFactor
	if (DamageFactor < 0.01)
		DamageFactor = 0.01;
	
	// Prevent Shield Capacity from under/overflowing
	if (Shield < 0)
		Shield = 0;
	if (Shield > ShieldCapacity)
		Shield = ShieldCapacity;
	
	// Cap Weapon Speed
	if (WeaponSpeed > 100)
		WeaponSpeed = 100;
	
	// Speed capping CVAR
	if (Speed > GetCVAR("drpg_maxspeed"))
		Speed = GetCVAR("drpg_maxspeed");
}

// Luck Chances
function void CheckLuck(void)
{
	MoneyChance = FixedMul(Luck, 0.25);
	HealthChance = FixedMul(Luck, 0.05);
	EPChance = FixedMul(Luck, 0.1);
	ArmorChance = FixedMul(Luck, 0.075);
	PowerupChance = FixedMul(Luck, 0.05);
	RuneChance = FixedMul(Luck, 0.025);
	TokenChance = FixedMul(Luck, 0.01);
	AugChance = FixedMul(Luck, 0.01);
	ShieldChance = FixedMul(Luck, 0.01);
}

function void CheckBurnout(void)
{
	// Energy Burnout Effect
	if (EP < 0)
	{
		// Dynamic Intensity
		int Intensity = Abs(FixedDiv(EP, EPMax));
		if (Intensity > 0.75) Intensity = 0.75;
		
		// Screen Effect
		FadeRange(0, 128, 255, Intensity, 0, 128, 255, 0, 0.25);
		
		// Penalties
		Damage /= 2;
		DamageFactor *= 2;
		HealthMax /= 2;
		EPMax /= 2;
		Speed /= 2;
		JumpHeight /= 2;
		SurvivalBonus /= 2;

		// Now apply the Stats
		SetActorProperty(0, APROP_SPAWNHEALTH, HealthMax);
		SetActorProperty(0, APROP_DAMAGEFACTOR, DamageFactor);
		SetActorProperty(0, APROP_SPEED, Speed);
		SetActorProperty(0, APROP_JUMPZ, JumpHeight);
	}
}
