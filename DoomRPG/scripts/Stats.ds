#include "Globals.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Stats.dh"
#include "Skills.dh"
#include "Utils.dh"

// Stat Caps
int SoftStatCap = 100;
int HardStatCap = 400;

// XP & Rank Tables
long int[MAX_LEVEL + 1] XPTable;
int[MAX_RANK + 1] RankTable;

// Rank strings
str[25] Ranks =
{
	"None";
	"Pvt"; "Pvt +";
	"PFC"; "PFC +";
	"LCpl"; "LCpl +";
	"Cpl"; "Cpl +";
	"Sgt"; "Sgt +";
	"SSgt"; "SSgt +";
	"GySgt"; "GySgt +";
	"MSgt"; "MSgt +";
	"1stSgt"; "1stSgt +";
	"MGySgt"; "MGySgt +";
	"SgtMaj"; "SgtMaj +";
	"SgtMajMarCor"; "MSgtMarCor";
};

str[25] LongRanks =
{
	"None";
	"Private"; "Private +";
	"Private First Class"; "Private First Class +";
	"Lance Corporal"; "Lance Corporal +";
	"Corporal"; "Corporal +";
	"Sergeant"; "Sergeant +";
	"Staff Sergeant"; "Staff Sergeant +";
	"Gunnery Sergeant"; "Gunnery Sergeant +";
	"Master Sergeant"; "Master Sergeant +";
	"First Sergeant"; "First Sergeant +";
	"Master Gunnery Sergeant"; "Master Gunnery Sergeant +";
	"Sergeant Major"; "Sergeant Major +";
	"Sergeant Major of the Marine Corps"; "Master Sergeant Major of the Marine Corps";
};

// Setup XP & Rank Tables
function void SetupTables()
{
	// XP Table
	for (int i = 0; i < MAX_LEVEL; i++)
		XPTable[i] = 2000 + XPTable[i - 1] * 9 / 8;
	
	// Rank Table
	RankTable =
	{
		10000; 25000; 50000; 75000; 100000;
		125000; 150000; 175000; 200000; 250000;
		500000; 1000000; 1250000; 1500000; 1750000;
		2000000; 2500000; 5000000; 10000000;
		25000000; 50000000; 100000000; 1000000000;
	};
};

// Add XP
script AddXP(int Amount, bool Reduced)
{
	// Scale XP/Rank Gains using the XP Scaling Option
	switch (GetCVar("drpg_scalexp"))
	{
		case 2: Amount *= 2;				break;	// 2x
		case 3: Amount *= 4;				break;	// 4x
		case 4: Amount *= 8;				break;	// 8x
		case 5: Amount = Amount * 3 / 4;	break;	// 0.75x
		case 6: Amount /= 2;				break;	// 0.5x
		case 7: Amount /= 4;				break;	// 0.25x
	};
	
	if (GetCVar("drpg_combo"))
	{
		Player.ComboTimer = COMBO_MAX;
		Player.Combo++;
		
		if (Reduced)
		{
			if (Amount > 0)
				Player.XPGained += Amount / 3;
		}
		else
		{
			if (Amount > 0)
				Player.XPGained += Amount;
			Player.RankGained += Amount;
		};
		
		if (Player.Aura == 3)
		{
			if (Player.AuraTimer > 0)
				Player.Combo++;
			if (Skills[2][2].CurrentLevel >= 3 && Amount > 0)
				Player.BonusGained += Amount;
		};
	}
	else
	{
		if (Reduced)
		{
			if (Amount > 0)
				Player.XP += Amount / 3;
			Player.Rank += Amount / 3;
		}
		else
		{
			if (Amount > 0)
				Player.XP += Amount;
			Player.Rank += Amount;
		};
	};
};

function void CheckCombo()
{
	if (GetCVar("drpg_combo"))
	{
		// Time Freeze special handling
		if (Player.Combo > 0 && CheckInventory("PowerTimeFreezer") && Player.ComboTimer >= COMBO_MAX)
			Player.ComboTimer = COMBO_MAX - 1;

		// Subtract the combo timer each tic
		if ((Player.Combo > 0 || Player.ComboTimer < COMBO_MAX) && !CheckInventory("PowerTimeFreezer") && !CheckInventory("MenuFreezer"))
			Player.ComboTimer--;
		
		// Reset values if you start the combo again while it was cooling down
		if (Player.ComboTimer == COMBO_MAX)
		{
			Player.BonusGained = 0;
			Player.XPGained = 0;
			Player.RankGained = 0;
		};
		
		// Add up and randomize the XP and Rank gain
		if (Player.ComboTimer == COMBO_STOP)
		{
			fixed ComboBonus = ((((fixed)Player.Combo / (fixed)GameSkill()) * (Player.XPGained + Player.RankGained)) / 10.0);
			if (ComboBonus < 0) ComboBonus = 0;
			
#if DEBUG
			Log("\cdDEBUG: ComboBonus: %k\n", ComboBonus);
#endif
			
			// You cannot gain Negative XP, but you can lose Rank
			if (Player.XPGained < 0) Player.XPGained = 0;
			
			if (Player.Combo > 1)
			{
				Player.BonusGained += (int)ComboBonus;
				Player.XP += Player.XPGained + (int)ComboBonus;
				Player.Rank += Player.RankGained + (int)ComboBonus;
			}
			else
			{
				Player.XP += Player.XPGained;
				Player.Rank += Player.RankGained;
			};
			
			Player.XPGained = 0;
			Player.RankGained = 0;
		};
		
		if (Player.ComboTimer < 0)
		{
			Player.Combo = 0;
			Player.ComboTimer = COMBO_MAX;
			Player.BonusGained = 0;
			Player.XPGained = 0;
			Player.RankGained = 0;
		};
	}
	else
		Player.ComboTimer = 0;
};

// Keeps current level and XP updated
function void CheckLevel()
{
	if (Player.Level < MAX_LEVEL)
		Player.XPNext = XPTable[Player.Level];
	
	if (Player.Level >= MAX_LEVEL)
	{
		Player.XP = XPTable[MAX_LEVEL - 1];
		Player.XPNext = XPTable[MAX_LEVEL - 1];
	};
	
	// Now check for a level up
	if (Player.XP >= XPTable[Player.Level] && Player.Level < MAX_LEVEL)
	{
		if (GetCVar("drpg_autospend"))
			Player.LevelTokens += 5;
		
		// Level Up
		ActivatorSound("misc/levelup", 127);
		
		Player.Level++;
		
		GiveInventory("StatToken", 5 + (Player.Level / 10));
		GiveInventory("SkillToken", 1);
		
		if (GetCVar("drpg_levelup_heal"))
		{
			if (Player.EP <= 0) Player.EP = 0 else Player.EP = Player.EPMax;
			HealThing(1000000);
		};

		FadeRange(255, 255, 255, 0.5, 255, 255, 255, 0, 2.0);
		SetFont("BIGFONT");
		SetHudSize(0, 0, false);
		HudMessage("You have reached level %d\n", Player.Level,
					HUDMSG_FADEOUT, 4999, CR_WHITE, 0.5, 0.5, 2.0, 2.0);
	};
};

// Keeps current Rank updated
function void CheckRank()
{
	Player.RankString = Ranks[Player.RankLevel];
	
	if (Player.RankLevel < MAX_RANK)
		Player.RankNext = RankTable[Player.RankLevel];
	
	if (Player.RankLevel >= MAX_RANK)
	{
		Player.Rank = RankTable[MAX_RANK - 1];
		Player.RankNext = RankTable[MAX_RANK - 1];
	};
	
	// Rank up
	if (Player.Rank >= RankTable[Player.RankLevel] && Player.RankLevel < MAX_RANK)
	{
		ActivatorSound("misc/rankup", 127);
		Player.RankLevel++;
		FadeRange(255, 255, 0, 0.5, 255, 255, 0, 0, 2.0);
		SetFont("BIGFONT");
		SetHudSize(0, 0, false);
		HudMessage("You have reached rank level %d: %s\n",
				   Player.RankLevel, LongRanks[Player.RankLevel],
				   HUDMSG_FADEOUT, 4999, CR_GOLD, 0.5, 0.5, 4.0, 2.0);
	};
	
	// Payment
	Player.PayTimer++;
	if (Player.PayTimer >= 35 * 60 * GetCVar("drpg_pay_interval"))
	{
		if (Player.RankLevel > 0)
		{
			int Pay = ((Player.RankLevel + 1) * 10) + (Player.PayKills * (Player.RankLevel + 1)) * (1 + (MapNumber / 6));
			
			GiveInventory("Credits", Pay);
			
			FadeRange(0, 255, 0, 0.1, 0, 255, 0, 0, 2.0);
			SetFont("BIGFONT");
			SetHudSize(0, 0, false);
			HudMessage("+%d Credits\n", Pay, HUDMSG_FADEOUT, 0, CR_GOLD, -0.025, 0.775, 4.0, 2.0);
			
			ActivatorSound("credits/payout", 127);
			Log("\cfYou have been paid %d Credits by the UAC\n", Pay);
		};
		
		Player.PayTimer = 0;
		Player.PayKills = 0;
	};
};

// Gives rewards for finding a secret and 100% Kills/Items/Secrets
function void CheckLevelInfo()
{
	int CurrentKills = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
	int CurrentItems = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
	int CurrentSecretsFound = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
	
	int XPBonus;
	int RankBonus;
	
	// Set HUD Size and Font
	SetHudSize(0, 0, false);
	SetFont("SMALLFONT");
	
	// Check to see if any total stats are 0, if they are, silently flag them as received already
	if (GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) == 0)
		Player.KillBonus = true;
	if (GetLevelInfo(LEVELINFO_TOTAL_ITEMS) == 0)
		Player.ItemsBonus = true;
	if (GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == 0)
		Player.SecretsBonus = true;
	
	// If all the total stats are 0, no bonuses at all
	if (GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) == 0 && GetLevelInfo(LEVELINFO_TOTAL_ITEMS) == 0 && GetLevelInfo(LEVELINFO_TOTAL_SECRETS) == 0)
		Player.AllBonus = true;
	
	// 100% Kills
	if (CurrentKills >= GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) && !Player.KillBonus)
	{
		FadeRange(255, 0, 0, 0.25, 255, 0, 0, 0, 1.0);
		
		XPBonus = Random(Player.Level * 10, Player.Level * 100);
		Player.XP += XPBonus;
		
		HudMessage("100%% Monsters Killed!\n%d XP Bonus\n", XPBonus,
				   HUDMSG_TYPEON, 0, CR_BRICK, 1.5, 0.4, 3.0, 0.1, 3.0);
		
		Player.KillBonus = true;
	};
	
	// 100% Items
	if (CurrentItems >= GetLevelInfo(LEVELINFO_TOTAL_ITEMS) && !Player.ItemsBonus)
	{
		FadeRange(0, 255, 255, 0.25, 0, 255, 255, 0, 1.0);
		
		Player.EP = GetEPMax();
		HealThing(1000000);
		
		HudMessage("100%% Items Found!\nFull HP/EP Restore\n",
				   HUDMSG_TYPEON, 0, CR_LIGHTBLUE, 1.5, 0.6, 3.0, 0.1, 3.0);
		
		Player.ItemsBonus = true;
	};

	// Secrets
	if (CurrentSecretsFound == Player.SecretsFound + 1)
	{
		FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0, 1.0);
		
		RankBonus = Random(Player.RankLevel * 1000, Player.RankLevel * 1000 + Random(0, 1000));
		Player.Rank += RankBonus;
		
		// 100% Secrets
		if (CurrentSecretsFound >= GetLevelInfo(LEVELINFO_TOTAL_SECRETS) && !Player.SecretsBonus)
		{
			FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0, 1.0);
			
			RankBonus = Random(Player.RankLevel * 1000, Player.RankLevel * 1000 + Random(0, 1000));
			Player.Rank += RankBonus;

			HudMessage("100%% Secrets Found!\n%d Rank Bonus\n", RankBonus,
					   HUDMSG_TYPEON, 0, CR_YELLOW, 1.5, 0.8, 3.0, 0.1, 3.0);
			
			Player.SecretsBonus = true;
		};
	};
	
	// All Kills/Items/Secrets 100%
	if ((Player.KillBonus && Player.ItemsBonus && Player.SecretsBonus) && !Player.AllBonus)
	{
		FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 1.0);
		
		XPBonus = Random(Player.Level * 100, Player.Level * 1000);
		RankBonus = Random(Player.RankLevel * 1000, Player.RankLevel * 1000 + Random(0, 1000));
		
		Player.XP += XPBonus;
		Player.Rank += RankBonus;
		
		Player.EP = GetEPMax();
		HealThing(1000000);
		
		HudMessage("100%% Monsters killed!\n100%% Items Found!\n100%% Secrets Found!\n\n%d XP Bonus\n%d Rank Bonus\n Full HP/EP Restore\n",
				   XPBonus, RankBonus,
				   HUDMSG_TYPEON, 0, CR_WHITE, 0.5, 0.2, 3.0, 0.1, 3.0);
		
		Player.AllBonus = true;
	};
	
	Player.Kills = CurrentKills;
	Player.Items = CurrentItems;
	Player.SecretsFound = CurrentSecretsFound;
};

function void CheckHealth()
{
	if (Player.LowHealthTimer >= 100 && GetActorProperty(PlayerTID, APROP_Health) > 0)
	{
		ActivatorSound("health/low", 64);
		Player.LowHealthTimer = 0;
	};
	
	if (GetActorProperty(PlayerTID, APROP_Health) <= GetActorProperty(PlayerTID, APROP_SpawnHealth) / 10 && GetActorProperty(PlayerTID, APROP_Health) > 0)
	{
		FadeRange(Player.LowHealthTimer + 155, 0, 0, 0.25, Player.LowHealthTimer + 155, 0, 0, 0.0, 1.0);
		Player.LowHealthTimer++;
		
		// Halve Movement Speed and Jump Height
		Player.Speed /= 2;
		Player.JumpHeight /= 2;
	};
};

function void CheckArmorMax()
{
	if (!GetArmorType("none", 0)) 					Player.ArmorMax = 0;
	if (GetArmorType("ArmorBonus", 0) > 0) 			Player.ArmorMax = 100;
	if (GetArmorType("UsedGreenArmor", 0) > 0) 		Player.ArmorMax = 50;
	if (GetArmorType("GreenArmor", 0) > 0) 			Player.ArmorMax = 100;
	if (GetArmorType("UsedBlueArmor", 0) > 0) 		Player.ArmorMax = 125;
	if (GetArmorType("BlueArmor", 0) > 0) 			Player.ArmorMax = 250;
	if (GetArmorType("UsedYellowArmor", 0) > 0) 	Player.ArmorMax = 250;
	if (GetArmorType("YellowArmor", 0) > 0) 		Player.ArmorMax = 500;
	if (GetArmorType("UsedRedArmor", 0) > 0) 		Player.ArmorMax = 375;
	if (GetArmorType("RedArmor", 0) > 0) 			Player.ArmorMax = 750;
	if (GetArmorType("UsedWhiteArmor", 0) > 0) 		Player.ArmorMax = 500;
	if (GetArmorType("WhiteArmor", 0) > 0) 			Player.ArmorMax = 1000;
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
	{
		// Armors which have ridiculous high save amounts to simulate it being indestructible, can I get a record for "most ridiculous if statement ever?"
		if ((GetArmorType("RLGreenArmor", 0) > 0) ||
			(GetArmorType("RLBlueArmor", 0) > 0) ||
			(GetArmorType("RLRedArmor", 0) > 0) ||
			(GetArmorType("RLCerberusArmor", 0) > 0) ||
			(GetArmorType("RLTacticalArmor", 0) > 0) ||
			(GetArmorType("RLBallisticGreenArmor", 0) > 0) ||
			(GetArmorType("RLBallisticBlueArmor", 0) > 0) ||
			(GetArmorType("RLBallisticRedArmor", 0) > 0) ||
			(GetArmorType("RLFireproofGreenArmor", 0) > 0) ||
			(GetArmorType("RLFireproofBlueArmor", 0) > 0) ||
			(GetArmorType("RLFireproofRedArmor", 0) > 0) ||
			(GetArmorType("RLPowerGreenArmor", 0) > 0) ||
			(GetArmorType("RLPowerBlueArmor", 0) > 0) ||
			(GetArmorType("RLPowerRedArmor", 0) > 0) ||
			(GetArmorType("RLBallisticShieldArmor", 0) > 0) ||
			(GetArmorType("RLBallisticVestArmor", 0) > 0) ||
			(GetArmorType("RLBulletProofVestArmor", 0) > 0) ||
			(GetArmorType("RLDuelistArmor", 0) > 0) ||
			(GetArmorType("RLEnergyShieldedVestArmor", 0) > 0) ||
			(GetArmorType("RLEnergyShieldArmor", 0) > 0) ||
			(GetArmorType("RLMedicalArmor", 0) > 0) ||
			(GetArmorType("RLPhaseshiftArmor", 0) > 0) ||
			(GetArmorType("RLPlasmaShieldArmor", 0) > 0) ||
			(GetArmorType("RLNecroArmor", 0) > 0) ||
			(GetArmorType("RLAngelicArmor", 0) > 0) ||
			(GetArmorType("RLGreenArmorRenegade", 0) > 0) ||
			(GetArmorType("RLBlueArmorRenegade", 0) > 0) ||
			(GetArmorType("RLRedArmorRenegade", 0) > 0) ||
			(GetArmorType("RLCerberusArmorRenegade", 0) > 0) ||
			(GetArmorType("RLTacticalArmorRenegade", 0) > 0) ||
			(GetArmorType("RLBallisticGreenArmorRenegade", 0) > 0) ||
			(GetArmorType("RLBallisticBlueArmorRenegade", 0) > 0) ||
			(GetArmorType("RLBallisticRedArmorRenegade", 0) > 0) ||
			(GetArmorType("RLFireproofGreenArmorRenegade", 0) > 0) ||
			(GetArmorType("RLFireproofBlueArmorRenegade", 0) > 0) ||
			(GetArmorType("RLFireproofRedArmorRenegade", 0) > 0) ||
			(GetArmorType("RLPowerGreenArmorRenegade", 0) > 0) ||
			(GetArmorType("RLPowerBlueArmorRenegade", 0) > 0) ||
			(GetArmorType("RLPowerRedArmorRenegade", 0) > 0) ||
			(GetArmorType("RLBallisticShieldArmorRenegade", 0) > 0) ||
			(GetArmorType("RLBallisticVestArmorRenegade", 0) > 0) ||
			(GetArmorType("RLBulletProofVestArmorRenegade", 0) > 0) ||
			(GetArmorType("RLDuelistArmorRenegade", 0) > 0) ||
			(GetArmorType("RLEnergyShieldedVestArmorRenegade", 0) > 0) ||
			(GetArmorType("RLEnergyShieldArmorRenegade", 0) > 0) ||
			(GetArmorType("RLMedicalArmorRenegade", 0) > 0) ||
			(GetArmorType("RLPhaseshiftArmorRenegade", 0) > 0) ||
			(GetArmorType("RLPlasmaShieldArmorRenegade", 0) > 0) ||
			(GetArmorType("RLNecroArmorRenegade", 0) > 0) ||
			(GetArmorType("RLAngelicArmorRenegade", 0) > 0))
				Player.ArmorMax = 100
		else // Armors which have differing Save Amounts
		{
			if (GetArmorType("RLTowerShieldArmor", 0) > 0)				Player.ArmorMax = 150;
			if (GetArmorType("RLFireShieldArmor", 0) > 0)				Player.ArmorMax = 200;
			if (GetArmorType("RLGothicArmor", 0) > 0) 					Player.ArmorMax = 200;
			if (GetArmorType("RLTowerShieldArmorRenegade", 0) > 0)		Player.ArmorMax = 150;
			if (GetArmorType("RLFireShieldArmorRenegade", 0) > 0)		Player.ArmorMax = 200;
			if (GetArmorType("RLGothicArmorRenegade", 0) > 0) 			Player.ArmorMax = 200;
		};
	};
};

function str CheckArmorType()
{
	if (GetArmorType("BasicArmorBonus", 0) > 0) 						return "BasicArmorBonus";
	if (GetArmorType("GreenArmor", 0) > 0) 								return "GreenArmor";
	if (GetArmorType("UsedGreenArmor", 0) > 0) 							return "UsedGreenArmor";
	if (GetArmorType("BlueArmor", 0) > 0) 								return "BlueArmor";
	if (GetArmorType("UsedBlueArmor", 0) > 0) 							return "UsedBlueArmor";
	if (GetArmorType("YellowArmor", 0) > 0) 							return "YellowArmor";
	if (GetArmorType("UsedYellowArmor", 0) > 0) 						return "UsedYellowArmor";
	if (GetArmorType("RedArmor", 0) > 0) 								return "RedArmor";
	if (GetArmorType("UsedRedArmor", 0) > 0) 							return "UsedRedArmor";
	if (GetArmorType("WhiteArmor", 0) > 0) 								return "WhiteArmor";
	if (GetArmorType("UsedWhiteArmor", 0) > 0) 							return "UsedWhiteArmor";
	if (GetArmorType("ShieldArmor", 0) > 0) 							return "ShieldArmor";
	if (GetArmorType("ShieldArmorEmpty", 0) > 0) 						return "ShieldArmorEmpty";
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
	{
		if (GetArmorType("RLGreenArmor", 0) > 0)						return "RLGreenArmor";
		if (GetArmorType("RLBlueArmor", 0) > 0)							return "RLBlueArmor";
		if (GetArmorType("RLRedArmor", 0) > 0)							return "RLRedArmor";
		if (GetArmorType("RLCerberusArmor", 0) > 0)						return "RLCerberusArmor";
		if (GetArmorType("RLFireShieldArmor", 0) > 0)					return "RLFireShieldArmor";
		if (GetArmorType("RLTacticalArmor", 0) > 0)						return "RLTacticalArmor";
		if (GetArmorType("RLBallisticGreenArmor", 0) > 0)				return "RLBallisticGreenArmor";
		if (GetArmorType("RLBallisticBlueArmor", 0) > 0)				return "RLBallisticBlueArmor";
		if (GetArmorType("RLBallisticRedArmor", 0) > 0)					return "RLBallisticRedArmor";
		if (GetArmorType("RLFireproofGreenArmor", 0) > 0)				return "RLFireproofGreenArmor";
		if (GetArmorType("RLFireproofBlueArmor", 0) > 0)				return "RLFireproofBlueArmor";
		if (GetArmorType("RLFireproofRedArmor", 0) > 0)					return "RLFireproofRedArmor";
		if (GetArmorType("RLPowerGreenArmor", 0) > 0)					return "RLPowerGreenArmor";
		if (GetArmorType("RLPowerBlueArmor", 0) > 0)					return "RLPowerBlueArmor";
		if (GetArmorType("RLPowerRedArmor", 0) > 0)						return "RLPowerRedArmor";
		if (GetArmorType("RLBallisticShieldArmor", 0) > 0)				return "RLBallisticShieldArmor";
		if (GetArmorType("RLBallisticVestArmor", 0) > 0)				return "RLBallisticVestArmor";
		if (GetArmorType("RLBulletProofVestArmor", 0) > 0)				return "RLBulletProofVestArmor";
		if (GetArmorType("RLDuelistArmor", 0) > 0)						return "RLDuelistArmor";
		if (GetArmorType("RLEnergyShieldedVestArmor", 0) > 0)			return "RLEnergyShieldedVestArmor";
		if (GetArmorType("RLEnergyShieldArmor", 0) > 0)					return "RLEnergyShieldArmor";
		if (GetArmorType("RLMedicalArmor", 0) > 0)						return "RLMedicalArmor";
		if (GetArmorType("RLPhaseshiftArmor", 0) > 0)					return "RLPhaseshiftArmor";
		if (GetArmorType("RLPlasmaShieldArmor", 0) > 0)					return "RLPlasmaShieldArmor";
		if (GetArmorType("RLNecroArmor", 0) > 0)						return "RLNecroArmor";
		if (GetArmorType("RLAngelicArmor", 0) > 0)						return "RLAngelicArmor";
		if (GetArmorType("RLOModDuelistArmor", 0) > 0)					return "RLOModDuelistArmor";
		if (GetArmorType("RLTowerShieldArmor", 0) > 0)					return "RLTowerShieldArmor";
		if (GetArmorType("RLGothicArmor", 0) > 0)						return "RLGothicArmor";
		if (GetArmorType("RLGreenArmorRenegade", 0) > 0)				return "RLGreenArmorRenegade";
		if (GetArmorType("RLBlueArmorRenegade", 0) > 0)					return "RLBlueArmorRenegade";
		if (GetArmorType("RLRedArmorRenegade", 0) > 0)					return "RLRedArmorRenegade";
		if (GetArmorType("RLCerberusArmorRenegade", 0) > 0)				return "RLCerberusArmorRenegade";
		if (GetArmorType("RLFireShieldArmorRenegade", 0) > 0)			return "RLFireShieldArmorRenegade";
		if (GetArmorType("RLTacticalArmorRenegade", 0) > 0)				return "RLTacticalArmorRenegade";
		if (GetArmorType("RLBallisticGreenArmorRenegade", 0) > 0)		return "RLBallisticGreenArmorRenegade";
		if (GetArmorType("RLBallisticBlueArmorRenegade", 0) > 0)		return "RLBallisticBlueArmorRenegade";
		if (GetArmorType("RLBallisticRedArmorRenegade", 0) > 0)			return "RLBallisticRedArmorRenegade";
		if (GetArmorType("RLFireproofGreenArmorRenegade", 0) > 0)		return "RLFireproofGreenArmorRenegade";
		if (GetArmorType("RLFireproofBlueArmorRenegade", 0) > 0)		return "RLFireproofBlueArmorRenegade";
		if (GetArmorType("RLFireproofRedArmorRenegade", 0) > 0)			return "RLFireproofRedArmorRenegade";
		if (GetArmorType("RLPowerGreenArmorRenegade", 0) > 0)			return "RLPowerGreenArmorRenegade";
		if (GetArmorType("RLPowerBlueArmorRenegade", 0) > 0)			return "RLPowerBlueArmorRenegade";
		if (GetArmorType("RLPowerRedArmorRenegade", 0) > 0)				return "RLPowerRedArmorRenegade";
		if (GetArmorType("RLBallisticShieldArmorRenegade", 0) > 0)		return "RLBallisticShieldArmorRenegade";
		if (GetArmorType("RLBallisticVestArmorRenegade", 0) > 0)		return "RLBallisticVestArmorRenegade";
		if (GetArmorType("RLBulletProofVestArmorRenegade", 0) > 0)		return "RLBulletProofVestArmorRenegade";
		if (GetArmorType("RLDuelistArmorRenegade", 0) > 0)				return "RLDuelistArmorRenegade";
		if (GetArmorType("RLEnergyShieldedVestArmorRenegade", 0) > 0)	return "RLEnergyShieldedVestArmorRenegade";
		if (GetArmorType("RLEnergyShieldArmorRenegade", 0) > 0)			return "RLEnergyShieldArmorRenegade";
		if (GetArmorType("RLMedicalArmorRenegade", 0) > 0)				return "RLMedicalArmorRenegade";
		if (GetArmorType("RLPhaseshiftArmorRenegade", 0) > 0)			return "RLPhaseshiftArmorRenegade";
		if (GetArmorType("RLPlasmaShieldArmorRenegade", 0) > 0)			return "RLPlasmaShieldArmorRenegade";
		if (GetArmorType("RLNecroArmorRenegade", 0) > 0)				return "RLNecroArmorRenegade";
		if (GetArmorType("RLAngelicArmorRenegade", 0) > 0)				return "RLAngelicArmorRenegade";
		if (GetArmorType("RLOModDuelistArmorRenegade", 0) > 0)			return "RLOModDuelistArmorRenegade";
		if (GetArmorType("RLTowerShieldArmorRenegade", 0) > 0)			return "RLTowerShieldArmorRenegade";
		if (GetArmorType("RLGothicArmorRenegade", 0) > 0)				return "RLGothicArmorRenegade";
	};
	
	return "";
};

function void CheckStats()
{
	// VERY IMPORTANT CODE RIGHT HERE
	// If you're reading this and you'd like to modify stat curves, this is where you'd do it
	Player.LevelDamage = Player.Level * (6 - GameSkill());
	Player.BonusDamage = Player.Strength;
	Player.TotalDamage = Player.LevelDamage + Player.BonusDamage;
	Player.DamageFactor = 1.0 - 0.25 * ((fixed)Player.Defense / 100);
	Player.Mass = 100 + (Player.Defense * 10);
	Player.HealthMax = Player.Vitality * 10;
	Player.EPMax = Player.Energy * 10;
	Player.Speed = 1.0 + 0.25 * ((fixed)Player.Agility / 100);
	Player.JumpHeight = 8.0 + (8.0 * ((fixed)Player.Agility / 100));
	Player.WeaponSpeed = Player.Agility;
	SetAmmoCapacity("Clip", Player.Capacity * 20);
	SetAmmoCapacity("Shell", Player.Capacity * 5);
	SetAmmoCapacity("RocketAmmo", Player.Capacity * 5);
	SetAmmoCapacity("Cell", Player.Capacity * 30);
	Player.Stim.VialMax = Player.Capacity * 10;
	Player.SurvivalBonus = (fixed)Player.Agility / 10.0;
	
	// Set mass stupid high when Invulnerable to prevent knockback
	if (CheckInventory("PowerInvulnerable"))
		Player.Mass *= 128;
	
	// Survival Bonus
	if (RandomFixed(0.0, 100.0) <= Player.SurvivalBonus)
	{
		SetPlayerProperty(0, 1, PROP_BUDDHA);
		
		if (GetActorProperty(PlayerIndex, APROP_Health) == 1)
		{
			HealThing(1);
			ActivatorSound("health/survive", 127);
		};
	}
	else
		SetPlayerProperty(0, 0, PROP_BUDDHA);
	
	// Continue check
	if (CheckInventory("Continue") > 0)
	{
		SetPlayerProperty(0, 1, PROP_BUDDHA);
		
		if (GetActorProperty(PlayerIndex, APROP_Health) <= 1)
		{
			HealThing(1000000);
			ActivatorSound("health/resurrect", 127);
			TakeInventory("Continue", 1);
		};
	}
	else
		SetPlayerProperty(0, 0, PROP_BUDDHA);
};

function void CheckStatBonus()
{
	Player.Strength += Player.StrengthBonus;
	Player.Defense += Player.DefenseBonus;
	Player.Vitality += Player.VitalityBonus;
	Player.Energy += Player.EnergyBonus;
	Player.Regeneration += Player.RegenerationBonus;
	Player.Agility += Player.AgilityBonus;
	Player.Capacity += Player.CapacityBonus;
	Player.Luck += Player.LuckBonus;
	
	Player.StrengthBonus = 0;
	Player.DefenseBonus = 0;
	Player.VitalityBonus = 0;
	Player.EnergyBonus = 0;
	Player.RegenerationBonus = 0;
	Player.AgilityBonus = 0;
	Player.CapacityBonus = 0;
	Player.LuckBonus = 0;
};

function void CheckRegen()
{
	// Determine the max timer amounts
	Player.HPTime = (700 - (Player.Regeneration * 3.325)) * 2;
	Player.EPTime = (700 - (Player.Regeneration * 3.325)) * 2;
	
	// Determine the max regen amounts
	Player.HPAmount = 1 + Player.Vitality / 50;
	Player.EPAmount = 1 + Player.Energy / 50;
};

// Regeneration
function void DoRegen()
{	
	// HP Regen
	if (Player.HPRate >= Player.HPTime && GetActorProperty(PlayerTID, APROP_Health) >= 0)
	{
		HealThing(Player.HPAmount);
		Player.HPRate = 0;
	};

	// EP Regen
	if (Player.EPRate >= Player.EPTime && Player.EP <= Player.EPMax)
	{
		Player.EP += Player.EPAmount;
		Player.EPRate = 0;
	};
	
	// If damaged, reset the Healing timer
	if (Player.HealthLoss != 0)
		Player.HPRate = 0;
	
	// Now increment the timers
	if (!CheckInventory("MenuFreezer"))
	{
		int Buttons = GetPlayerInput(PlayerNumber(), MODINPUT_BUTTONS);
		
		// Regen Boost
		if (Player.RegenBoostTimer > 0)
		{
			fixed X = GetActorX(0);
			fixed Y = GetActorY(0);
			fixed Z = GetActorZ(0);
			int Angle = GetActorAngle(0) * 256;
			SpawnForced("RegenSphereEffect", X, Y, Z + 32.0, 2300, Angle);
			
			Player.HPRate += Player.RegenBoostTimer;
			Player.EPRate += Player.RegenBoostTimer;
			Player.RegenBoostTimer--;
			FadeRange(255, 0, 128, 0.1, 255, 0, 128, 0.0, 1.0);
		};

		// Movement/Crouching/Idling mechanics
		if (GetCVar("drpg_regen_movement"))
		{
			if (GetPlayerInput(PlayerNumber(), MODINPUT_FORWARDMOVE) || // Movement - 50% Regen Rate
				GetPlayerInput(PlayerNumber(), MODINPUT_SIDEMOVE) ||
				GetPlayerInput(PlayerNumber(), MODINPUT_UPMOVE))
			{
				Player.HPRate++;
				Player.EPRate++;
			}
			else if (Buttons & BT_CROUCH) // Crouch - 150% Regen Rate
			{
				Player.HPRate += 3;
				Player.EPRate += 3;
			}
			else // Idle - 100% Regen Rate
			{
				Player.HPRate += 2;
				Player.EPRate += 2;
			};
		}
		else
		{
			Player.HPRate += 2;
			Player.EPRate += 2;
		};
	};
};

// Keep stats capped at certain values
function void CheckStatCaps()
{
	Player.StatCap = SoftStatCap + CheckInventory("StatCapToken");

	if (Player.Strength < 0)					Player.Strength = 0;
	if (Player.Strength > Player.StatCap)		Player.Strength = Player.StatCap;
	if (Player.Defense < 0)						Player.Defense = 0;
	if (Player.Defense > Player.StatCap)		Player.Defense = Player.StatCap;
	if (Player.Vitality < 0)					Player.Vitality = 0;
	if (Player.Vitality > Player.StatCap)		Player.Vitality = Player.StatCap;
	if (Player.Energy < 0)						Player.Energy = 0;
	if (Player.Energy > Player.StatCap)			Player.Energy = Player.StatCap;
	if (Player.Regeneration < 0)				Player.Regeneration = 0;
	if (Player.Regeneration > Player.StatCap)	Player.Regeneration = Player.StatCap;
	if (Player.Agility < 0)						Player.Agility = 0;
	if (Player.Agility > Player.StatCap)		Player.Agility = Player.StatCap;
	if (Player.Capacity < 0)					Player.Capacity = 0;
	if (Player.Capacity > Player.StatCap)		Player.Capacity = Player.StatCap;
	if (Player.Luck < 0)						Player.Luck = 0;
	if (Player.Luck > Player.StatCap)			Player.Luck = Player.StatCap;
};

// Keep stats capped at the hard value
function void CheckHardStatCaps()
{
	if (Player.Strength < 0)				Player.Strength = 0;
	if (Player.Strength > HardStatCap)		Player.Strength = HardStatCap;
	if (Player.Defense < 0)					Player.Defense = 0;
	if (Player.Defense > HardStatCap)		Player.Defense = HardStatCap;
	if (Player.Vitality < 0)				Player.Vitality = 0;
	if (Player.Vitality > HardStatCap)		Player.Vitality = HardStatCap;
	if (Player.Energy < 0)					Player.Energy = 0;
	if (Player.Energy > HardStatCap)		Player.Energy = HardStatCap;
	if (Player.Regeneration < 0)			Player.Regeneration = 0;
	if (Player.Regeneration > HardStatCap)	Player.Regeneration = HardStatCap;
	if (Player.Agility < 0)					Player.Agility = 0;
	if (Player.Agility > HardStatCap)		Player.Agility = HardStatCap;
	if (Player.Capacity < 0)				Player.Capacity = 0;
	if (Player.Capacity > HardStatCap)		Player.Capacity = HardStatCap;
	if (Player.Luck < 0)					Player.Luck = 0;
	if (Player.Luck > HardStatCap)			Player.Luck = HardStatCap;
};

function void CheckStatBounds()
{
	// Prevent Overflow of EP
	if (Player.EP > Player.EPMax)
		Player.EP = Player.EPMax;

	// Cap the max regen timer amounts to 1 second
	if (Player.HPTime < 35)
		Player.HPTime = 35;
	if (Player.EPTime < 35)
		Player.EPTime = 35;
	
	// Prevent Underflow of DamageFactor
	if (Player.DamageFactor < 0.01)
		Player.DamageFactor = 0.01;
	
	// Prevent Shield Capacity from under/overflowing
	if (Player.Shield.Charge < 0)
		Player.Shield.Charge = 0;
	if (Player.Shield.Charge > Player.Shield.Capacity)
		Player.Shield.Charge = Player.Shield.Capacity;
	
	// Cap Weapon Speed
	if (Player.WeaponSpeed > 100)
		Player.WeaponSpeed = 100;
	
	// Cap chances at 100%
	if (Player.CreditChance > 100) 	Player.CreditChance = 100;
	if (Player.HealthChance > 100) 	Player.HealthChance = 100;
	if (Player.EPChance > 100) 		Player.EPChance = 100;
	if (Player.ArmorChance > 100) 	Player.ArmorChance = 100;
	if (Player.PowerupChance > 100) Player.PowerupChance = 100;
	if (Player.RuneChance > 100) 	Player.RuneChance = 100;
	if (Player.TokenChance > 100) 	Player.TokenChance = 100;
	if (Player.AugChance > 100) 	Player.AugChance = 100;
	if (Player.ShieldChance > 100) 	Player.ShieldChance = 100;

	// Speed capping CVAR
	if (Player.Speed > GetCVarFixed("drpg_maxspeed"))
		Player.Speed = GetCVarFixed("drpg_maxspeed");
		
	// Jump Height capping CVAR
	if (Player.JumpHeight > GetCVarFixed("drpg_maxjump"))
		Player.JumpHeight = GetCVarFixed("drpg_maxjump");
};

// Luck Chances
function void CheckLuck()
{
	Player.CreditChance = 10 + Player.Luck * 0.9;
	Player.HealthChance = Player.Luck * 0.05;
	Player.EPChance = Player.Luck * 0.05;
	Player.ArmorChance = Player.Luck * 0.05;
	Player.PowerupChance = Player.Luck * 0.05;
	Player.RuneChance = Player.Luck * 0.025;
	Player.TokenChance = Player.Luck * 0.01;
	Player.AugChance = Player.Luck * 0.0025;
	Player.ShieldChance = Player.Luck * 0.0075;
	Player.StimChance = Player.Luck * 0.0125;
};

function void CheckBurnout()
{
	// Energy Burnout Effect
	if (Player.EP < 0)
	{
		// Dynamic Intensity
		fixed Intensity = -((fixed)Player.EP / (fixed)Player.EPMax);
		if (Intensity > 0.75) Intensity = 0.75;
		
		// Screen Effect
		FadeRange(0, 128, 255, Intensity, 0, 128, 255, 0, 0.25);
		
		// Penalties
		Player.TotalDamage /= 2;
		Player.DamageFactor *= 2;
		Player.Mass /= 2;
		Player.HealthMax /= 2;
		Player.EPMax /= 2;
		Player.Speed /= 2;
		Player.JumpHeight /= 2;
		Player.SurvivalBonus /= 2;
	};
};
