#include "Augs.dh"
#include "Defs.dh"
#include "Globals.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Utils.dh"

int MapNumber;
int ItemID = 5000;

// Skill Level Names
str[5] SkillLevels =
{
	"Easy";
	"Normal";
	"Hard";
	"Nightmare";
	"Hell";
};

// Return Timer() for DECORATE
script int GetTimer()
{
	return Timer();
};

// Set Skill Level during the game
script SetSkill(int NewSkill)
{
	SetFont("BIGFONT");
	
	if (NewSkill < 0 || NewSkill > 4)
	{
		Print("\cgInvalid Skill Level\n");
		return;
	};
	
	FadeRange(255, 255, 255, 0.5, 255, 255, 255, 0.0, 0.5);
	ChangeSkill(NewSkill);
	ActivatorSound("misc/secret", 127);
	Print("\cjSkill Level has been changed to\n\cg%d - %s\n", NewSkill + 1, SkillLevels[NewSkill]);
};

// Respec - Respecialize your Player
script Respec(bool DoStats, bool DoSkills)
{
	// Vars
	int StatPoints;
	int SkillPoints;
	int OldCredits;
	
	// Respec Stats
	if (DoStats)
	{
		// Add stats into a pool of tokens to give back to the player
		StatPoints += Player.Strength;
		StatPoints += Player.Defense;
		StatPoints += Player.Vitality - 10;
		StatPoints += Player.Energy - 10;
		StatPoints += Player.Regeneration;
		StatPoints += Player.Agility;
		StatPoints += Player.Capacity - 10;
		StatPoints += Player.Luck;
		
		// Reset Stats
		Player.Strength = 0;
		Player.Defense = 0;
		Player.Vitality = 10;
		Player.Energy = 10;
		Player.Regeneration = 0;
		Player.Agility = 0;
		Player.Capacity = 10;
		Player.Luck = 0;

		// Give Respecced Stat Tokens back
		GiveInventory("StatToken", StatPoints);

		// Reset HP and EP
		SetActorProperty(PlayerTID, APROP_Health, 100);
		Player.EPMax = 100;
		Player.EP = Player.EPMax;
		
		// Reset Shield
		Player.Shield.Charge = 0;
		Player.Shield.Timer = 375;
	};
	
	// Respec Skills
	if (DoSkills)
	{
		// Reset skills, add skill levels together into a pool of tokens to give back to the player
		for (int i = 0; i < MAX_CATEGORIES; i++)
			for (int j = 0; j < MAX_SKILLS; j++)
			{
				SkillPoints += Skills[i][j].Level;
				Skills[i][j].Level = 0;
				Skills[i][j].CurrentLevel = 0;
			};

		// Give Respecced Skill Tokens back
		GiveInventory("SkillToken", SkillPoints);

		// Remove Auras
		Player.Aura = 0;
		Player.AuraTimer = 0;
	};
	
	// Take 1/2 Credits
	GiveInventory("Credits", OldCredits);
	TakeInventory("Credits", CheckInventory("Credits") / 2);
	
	// FX
	FadeRange(255, 255, 255, 0.75, 0, 0, 0, 0.0, 2.5);
	HudMessage("Respec Complete\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 2.5, 2.5);
	ActivatorSound("misc/secret", 127);
};

script AddEP(int Amount)
{
	FadeRange(0, 255, 255, 0.25, 0, 255, 255, 0, 0.25);

	Player.EP += Amount;

	if (Player.EP > Player.EPMax)
		Player.EP = Player.EPMax;
};

// Returns your current EP (for DECORATE)
script int GetEP()
{
	return Player.EP;
};

// Gets Max EP after all bonuses are applied to it
script int GetEPMax()
{
	int MaxEP = Player.EPMax;
	
	// Max EP Checks for Augs
	if (Player.Augs.Active[AUG_ENERGY])
		MaxEP *= 2;
	
	return MaxEP;
};

// Returns the amount to heal given the percentage out of max HP (for DECORATE)
script int GetHealPercent(int Percent)
{
	int Amount = HealthMax * Percent / 100;
	return Amount;
};

// Returns your max Health (for DECORATE)
script int GetHealthMax()
{
	return Player.HealthMax;
};

// Returns the Agility for A_SetTics calls in DECORATE
script int GetSpeed(int Tics)
{
	return Tics - ((Tics - 1) / 100) * Player.Agility;
};

// Used by DECORATE to check if both your Health and EP are at max
script bool HPEPMax()
{
	return (GetActorProperty(PlayerTID, APROP_Health) >= GetActorProperty(PlayerTID, APROP_SpawnHealth) && Player.EP >= Player.EPMax);
};

// Used by the RegenSphere to temporarily increase regen rates
script RegenBoost()
{
	Player.RegenBoostTimer += Random(35 * 5, 35 * 10 + (Player.Regeneration / 20));
};

// HAAAAAAAAAAAAAAAX
script Cheat(int StatBoost)
{
	int ItemMax = 1000;
	
	// Max Level/Rank
	Player.XP = XPTable[MAX_LEVEL - 1];
	Player.Rank = RankTable[MAX_RANK - 1];
	
	// Stats
	Player.Strength += StatBoost;
	Player.Defense += StatBoost;
	Player.Vitality += StatBoost;
	Player.Energy += StatBoost;
	Player.Regeneration += StatBoost;
	Player.Agility += StatBoost;
	Player.Capacity += StatBoost;
	Player.Luck += StatBoost;
	
	// Max out all Skills
	for (int i = 0; i < MAX_CATEGORIES; i++)
		for (int j = 0; j < MAX_SKILLS; j++)
		{
			Skills[i][j].Level = Skills[i][j].MaxLevel;
			Skills[i][j].CurrentLevel = Skills[i][j].MaxLevel;
		};
	
	// Items - Tokens
	GiveInventory("StatToken", 10000);
	GiveInventory("StatCapToken", 100);
	GiveInventory("SkillToken", 10000);
	
	// Checck Stat Caps
	CheckStatCaps();

	// Items - Health
	GiveInventory("StimPack", ItemMax);
	GiveInventory("Medikit", ItemMax);
	GiveInventory("LargeMedikit", ItemMax);
	GiveInventory("XLMedikit", ItemMax);
	GiveInventory("MedPack", ItemMax);
	GiveInventory("SurgeryKit", ItemMax);
	GiveInventory("Continue", ItemMax);
	
	// Items - Armor
	if (!GetCVar("drpg_ext_doomrl"))
	{
		TakeInventory("BasicArmor", 10000000);
		GiveInventory("WhiteArmor", 1);
		Delay(1);
		for (int k = 0; k < ItemMax; k++)
		{
			GiveInventory("UsedGreenArmor", ItemMax);
			GiveInventory("GreenArmor", ItemMax);
			GiveInventory("UsedBlueArmor", ItemMax);
			GiveInventory("BlueArmor", ItemMax);
			GiveInventory("UsedYellowArmor", ItemMax);
			GiveInventory("YellowArmor", ItemMax);
			GiveInventory("UsedRedArmor", ItemMax);
			GiveInventory("RedArmor", ItemMax);
			GiveInventory("UsedWhiteArmor", ItemMax);
			GiveInventory("WhiteArmor", ItemMax);
		};
	};
	
	// Items - Powerups
	GiveInventory("InvulnerabilitySphere", ItemMax);
	GiveInventory("InvulnerabilityCharge", ItemMax);
	GiveInventory("BlurSphere", ItemMax);
	GiveInventory("InvisibilityCharge", ItemMax);
	GiveInventory("RadSuit", ItemMax);
	GiveInventory("Infrared", ItemMax);
	GiveInventory("Berserk", ItemMax);
	GiveInventory("AllMap", ItemMax);
	
	// Items - Ammo
	GiveInventory("Clip", GetAmmoCapacity("Clip"));
	GiveInventory("Shell", GetAmmoCapacity("Shell"));
	GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo"));
	GiveInventory("Cell", GetAmmoCapacity("Cell"));
	
	// Items - Misc
	AllRunes();
	GiveAugs(100, 100, 100);
	GiveCredits(0);
	FullShield();
	GiveInventory("RedCard", 1);
	GiveInventory("YellowCard", 1);
	GiveInventory("BlueCard", 1);
	GiveInventory("RedSkull", 1);
	GiveInventory("YellowSkull", 1);
	GiveInventory("BlueSkull", 1);
	GiveInventory("PowerInvulnerable", 1);
	GiveInventory("PowerShadow", 1);
	GiveInventory("PowerIronFeet", 1);
	GiveInventory("PowerLightAmp", 1);
	
	// Stims
	GiveInventory("StimSmall", ItemMax);
	GiveInventory("StimMedium", ItemMax);
	GiveInventory("StimLarge", ItemMax);
	for (int i = 0; i < MAX_COMPONENTS; i++)
		Player.Stim.Vials[i] = 100;
	
	// Restore HP/EP/Shields
	HealThing(1000000);
	Player.EP = Player.EPMax;
	Player.Shield.Charge = Player.Shield.Capacity;
	Player.Shield.Timer = 0;
};

// For testing different stats and their effects
script ModStat(int Stat, int Value)
{
	switch (Stat)
	{
		case 1:	Player.Strength = Value;		break;
		case 2:	Player.Defense = Value;			break;
		case 3:	Player.Vitality = Value;		break;
		case 4:	Player.Energy = Value;			break;
		case 5:	Player.Regeneration = Value;	break;
		case 6:	Player.Agility = Value;			break;
		case 7:	Player.Capacity = Value;		break;
		case 8:	Player.Luck = Value;			break;
	};
};

// Give Credits
script GiveCredits(int Amount)
{
	if (Amount == 0) Amount = 1000000000;
	GiveInventory("Credits", Amount);
	ActivatorSound("credits/payout", 127);
};

// Instant payout
script Payout(int Time)
{
	if (Time > 0)
		Player.PayTimer = Time
	else
		Player.PayTimer = 35 * 60 * GetCVar("drpg_pay_interval");
};

// Give all Runes
script AllRunes()
{
	ActivatorSound("misc/secret", 127);
	GiveInventory("StrengthRune", 1);
	GiveInventory("DrainRune", 1);
	GiveInventory("EndlessRune", 1);
	GiveInventory("ResistanceRune", 1);
	GiveInventory("RegenerationRune", 1);
	GiveInventory("FrightRune", 1);
	GiveInventory("GhostRune", 1);
	GiveInventory("HighJumpRune", 1);
	GiveInventory("HasteRune", 1);
};

// Give all Augs
script GiveAugs(int Canisters, int Upgrades, int Slots)
{
	if (Canisters)
	{
		GiveInventory("AugCanister", Canisters);
		GiveInventory("AugUpgradeCanister", Upgrades);
		GiveInventory("AugSlotUpgrade", Slots);
	};
	
	for (int i = 0; i < MAX_AUGS; i++)
		Player.Augs.Level[i] = AugLevelMax[i];
};

// Give all Shield Components
script FullShield()
{
	// Bodies
	GiveInventory("ShieldBody1", 1);
	GiveInventory("ShieldBody2", 1);
	GiveInventory("ShieldBody3", 1);
	GiveInventory("ShieldBody4", 1);
	GiveInventory("ShieldBody5", 1);
	GiveInventory("ShieldBody6", 1);
	GiveInventory("ShieldBody7", 1);
	
	// Batteries
	GiveInventory("ShieldBattery1", 1);
	GiveInventory("ShieldBattery2", 1);
	GiveInventory("ShieldBattery3", 1);
	GiveInventory("ShieldBattery4", 1);
	GiveInventory("ShieldBattery5", 1);
	GiveInventory("ShieldBattery6", 1);
	GiveInventory("ShieldBattery7", 1);

	// Capacitors
	GiveInventory("ShieldCapacitor1", 1);
	GiveInventory("ShieldCapacitor2", 1);
	GiveInventory("ShieldCapacitor3", 1);
	GiveInventory("ShieldCapacitor4", 1);
	GiveInventory("ShieldCapacitor5", 1);
	
	// Accessories
	GiveInventory("ShieldAccessory1", 1);
	GiveInventory("ShieldAccessory2", 1);
	GiveInventory("ShieldAccessory3", 1);
	GiveInventory("ShieldAccessory4", 1);
	GiveInventory("ShieldAccessory5", 1);
	GiveInventory("ShieldAccessory6", 1);
	GiveInventory("ShieldAccessory7", 1);
};

function void CreateTranslations()
{
	// Damage Numbers - Overkill
	CreateTranslationStart(1);
	CreateTranslationPalette(81, 111, 176, 176);
	CreateTranslationEnd();
	
	// Damage Numbers - Healed
	CreateTranslationStart(2);
	CreateTranslationPalette(81, 111, 112, 112);
	CreateTranslationEnd();

	// Damage Numbers - Scratch
	CreateTranslationStart(3);
	CreateTranslationPalette(81, 111, 100, 100);
	CreateTranslationEnd();
};

// PrintSprite Utility Function
function void PrintSprite(str sprite, int id, fixed x, fixed y, fixed d)
{
    SetFont(sprite);
    HudMessage("A\n", HUDMSG_PLAIN, id, CR_UNTRANSLATED, x, y, d);
};

function void PrintSpriteFade(str sprite, int id, fixed x, fixed y, fixed d, fixed h)
{
    SetFont(sprite);
    HudMessage("A\n", HUDMSG_FADEOUT, id, CR_UNTRANSLATED, x, y, d, h);
};

function int SetInventory(str Item, int Count)
{
	int n = Count - CheckInventory(Item);
	
	if (n > 0)
		GiveInventory(Item, n)
	else if (n < 0)
		TakeInventory(Item, -n);
	
	return n;
};

function int SetActorInventory(int tid, str item, int count)
{
	int n = count - CheckActorInventory (tid, item);
	
	if (n > 0)
		GiveActorInventory(tid, item, n)
	else if (n < 0)
		TakeActorInventory(tid, item, -1 * n);
	
	return n;
};

// For Damage Digits
function int GetDigit(int Num, int Digit)
{
	return (Num / Pow(10, Digit)) % 10;
};

// This function computes n-th power of x.
function int Pow(int x, int n)
{
	int y = 1;
	while (n-- > 0) y *= x;
	return y;
};

// This function can be used to return the absolute value of a negative integer. 
function int Abs(int x)
{
    if (x < 0)
        return -x;

    return x;
};

// Returns integer value
function int Round(fixed fixedNumber)
{
	return (int)(fixedNumber += 0.5);
};
