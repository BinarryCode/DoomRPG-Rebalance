#include "RPG.dh"

#include "HealthBars.dh"
#include "Monsters.dh"
#include "Utils.dh"

fixed HealthBarX;
fixed HealthBarY;

// Handles HUD Health Bars
script void HealthBars()
{
    int PlayerNum = PlayerNumber();
    
    Start:
    
    while (GetUserCVar(PlayerNum, "drpg_healthbars"))
    {
        SetActivatorToTarget(Players(PlayerNum).TID);
        
        Delay(1);
        
        // Don't continue if you're in a menu
        if (Players(PlayerNum).InMenu || Players(PlayerNum).InShop || Players(PlayerNum).OutpostMenu > 0)
        {
            SetActivator(Players(PlayerNum).TID);
            goto Start;
        };
        
        HealthBarX = GetUserCVar(PlayerNum, "drpg_healthbars_x");
        HealthBarY = GetUserCVar(PlayerNum, "drpg_healthbars_y");
        
        bool HideBar = false;
        bool DrawStats = true;
        
        // Initialize HUD information struct
        HUDBarInfo Info =
        {
            false; false;               // Is Player? / Is Friendly?
            ""; "";                     // Name
            0; 0; {};                   // Level/Rank/Auras
            0; 0; 0; 0; 0; false; 0; 0; // Health/Armor/Shield
            0; 0; 0; 0; 0; 0; 0; 0;     // Stats
        };
        
        // Friendly
        if (GetActorProperty(0, APROP_Friendly))
            Info.Friendly = true;
        
        // Populate Stats
        if (ClassifyActor(0) & ACTOR_PLAYER)
        {
            int ID = FindPlayerID(ActivatorTID());
            
            Info.IsPlayer = true;
            
            Info.NameColor = "";
            Info.Name = StrParam("%N\n", ID + 1);
            Info.Level = Players(ID).Level;
            Info.Rank = Players(ID).RankLevel;
            Info.Aura = Players(ID).Aura;
            
            Info.Health = Players(ID).ActualHealth;
            Info.HealthMax = Players(ID).HealthMax;
            Info.SpawnHealth = 100;
            Info.Armor = CheckInventory("Armor");
            Info.ArmorMax = GetArmorInfo(ARMORINFO_SAVEAMOUNT);
            Info.ShieldActive = Players(ID).Shield.Active;
            Info.Shield = Players(ID).Shield.Charge;
            Info.ShieldMax = Players(ID).Shield.Capacity;
            
            Info.Strength = Players(ID).Strength;
            Info.Defense = Players(ID).Defense;
            Info.Vitality = Players(ID).Vitality;
            Info.Energy = Players(ID).Energy;
            Info.Regeneration = Players(ID).Regeneration;
            Info.Agility = Players(ID).Agility;
            Info.Capacity = Players(ID).Capacity;
            Info.Luck = Players(ID).Luck;
        }
        else
        {
            MonsterStatsPtr MonStats = &Monsters[GetMonsterID(0)];
            
            // Conditions to not do things
            if (!MonStats->HealthBar)
                goto Start;
            if (MonStats->Flags & MF_NOSTATS || GetCVar("drpg_monster_levels") == 0)
                DrawStats = false;
            
            Info.IsPlayer = false;
            
            Info.NameColor = DetermineBestStatColor(MonStats);
            Info.Name = GetActorPropertyString(0, APROP_Nametag);
            Info.Level = MonStats->Level;
            Info.Rank = MonStats->Threat;
            Info.Aura = MonStats->Aura;
            
            Info.Health = GetActorProperty(0, APROP_Health);
            Info.HealthMax = MonStats->HealthMax;
            Info.SpawnHealth = MonStats->SpawnHealth;
            Info.Armor = 0;
            Info.ArmorMax = 0;
            Info.ShieldActive = false;
            Info.Shield = 0;
            Info.ShieldMax = 0;
            
            Info.Strength = MonStats->Strength;
            Info.Defense = MonStats->Defense;
            Info.Vitality = MonStats->Vitality;
            Info.Energy = MonStats->Energy;
            Info.Regeneration = MonStats->Regeneration;
            Info.Agility = MonStats->Agility;
            Info.Capacity = MonStats->Capacity;
            Info.Luck = MonStats->Luck;
        };
        
        // Valid target
        if (ActivatorTID() != Players(PlayerNum).TID && ClassifyActor(0) & ACTOR_ALIVE && !(ClassifyActor(0) & ACTOR_WORLD))
        {
            SetActivator(Players(PlayerNum).TID);
            
            SetHudSize(800, 600, false);
            
            // Draw the bar's components
            DrawBarBase(Info);
            DrawBarFill(Info);
            DrawBarEmblems(Info);
            if (DrawStats)
                DrawBarStats(Info);
            DrawBarAuras(Info);
        };
        
        // Terminate if the player is dead
        if (GetActorProperty(Players(PlayerNum).TID, APROP_Health) <= 0) return;
    };
    
    Delay(1);
    goto Start;
};

function void DrawBarBase(HUDBarInfo Info)
{
    // Bar Type
    if (GetCVar("screenblocks") == 10)
        PrintSprite("HPBarSS", 0, HealthBarX, HealthBarY, 0.05)
    else if (Info.Friendly)
        PrintSprite("HPBar2", 0, HealthBarX, HealthBarY, 0.05)
    else
        PrintSprite("HPBar", 0, HealthBarX, HealthBarY, 0.05);
    
    // Name
    if (GetCVar("drpg_healthbars_names"))
    {
        SetFont("BIGFONT");
        HudMessage("%s%s\n", Info.NameColor, Info.Name, HUDMSG_PLAIN, 0, CR_GRAY, HealthBarX, HealthBarY - 24.0, 0.05);
    };
    
    // HP/Max HP and Armor
    // TODO: Do this better? It's kinda shit atm, build up a string instead maybe?
    SetFont("SMALLFONT");
    if (Info.ShieldActive)
    {
        if (Info.IsPlayer && Info.Armor > 0)
            if (Info.ArmorMax >= 10000) // Indestructible Armor
                HudMessage("%d/%d \ca[Indestructible]\n", Info.Shield, Info.ShieldMax, HUDMSG_PLAIN, 0, CR_CYAN, HealthBarX, HealthBarY, 0.05)
            else
                HudMessage("%d/%d \cd[%d/%d]\n", Info.Shield, Info.ShieldMax, Info.Armor, Info.ArmorMax, HUDMSG_PLAIN, 0, CR_CYAN, HealthBarX, HealthBarY, 0.05)
        else
            HudMessage("%d/%d\n", Info.Shield, Info.ShieldMax, HUDMSG_PLAIN, 0, CR_CYAN, HealthBarX, HealthBarY, 0.05);
    }
    else
    {
        if (Info.IsPlayer && Info.Armor > 0)
            if (Info.ArmorMax >= 10000) // Indestructible Armor
                HudMessage("%d/%d \ca[Indestructible]\n", Info.Health, Info.HealthMax, HUDMSG_PLAIN, 0, CR_GREEN, HealthBarX, HealthBarY, 0.05)
            else
                HudMessage("%d/%d \cd[%d/%d]\n", Info.Health, Info.HealthMax, Info.Armor, Info.ArmorMax, HUDMSG_PLAIN, 0, CR_GREEN, HealthBarX, HealthBarY, 0.05)
        else
            HudMessage("%d/%d\n", Info.Health, Info.HealthMax, HUDMSG_PLAIN, 0, CR_GREEN, HealthBarX, HealthBarY, 0.05);
    };
};

function void DrawBarEmblems(HUDBarInfo Info)
{
    if (Info.IsPlayer)
    {
        for (int i = 0; i < Info.Rank; i++)
            PrintSprite("RankEmb", 0, HealthBarX - 55.0 + (i * 7.0), HealthBarY + 22.0, 0.05);
    }
    else
    {
        for (int i = 1; i <= Info.Rank; i++)
        {
            if (i == 1)
                PrintSprite("RankEmb1", 0, HealthBarX + 36.0 + (i * 7.0), HealthBarY + 22.0, 0.05)
            else if (i >= 2 && i <= 4)
                PrintSprite("RankEmb2", 0, HealthBarX + 36.0 + (i * 7.0), HealthBarY + 22.0, 0.05)
            else if (i == 5 || i == 6)
                PrintSprite("RankEmb3", 0, HealthBarX + 36.0 + (i * 7.0), HealthBarY + 22.0, 0.05)
            else if (i == 7 || i == 8)
                PrintSprite("RankEmb4", 0, HealthBarX + 36.0 + (i * 7.0), HealthBarY + 22.0, 0.05)
            else if (i == 9)
                PrintSprite("RankEmb5", 0, HealthBarX + 36.0 + (i * 7.0), HealthBarY + 22.0, 0.05)
            else if (i == 10)
                PrintSprite("RankEmb6", 0, HealthBarX + 36.0 + (i * 7.0), HealthBarY + 22.0, 0.05);
        };
    };
};

function void DrawBarFill(HUDBarInfo Info)
{
    int HealthPercent = 0;
    
    // Divide-by-zero check
    if (Info.HealthMax <= 0)
        HealthPercent = 0
    else if (Info.IsPlayer)
        HealthPercent = (Info.Health * 100) / 100
    else
        HealthPercent = (Info.Health * 100) / Info.SpawnHealth;
    
    // Prevent bar Underflow/overflow
    if (HealthPercent < 0)
        HealthPercent = 0;
    if (HealthPercent > 1000)
        HealthPercent = 1000;
    
    // Shield Fill
    if (Info.ShieldActive)
    {
        int ShieldPercent = (Info.Shield * 100) / Info.ShieldMax;
        SetHudClipRect((int)HealthBarX - 98, (int)(HealthBarY - 6), (int)((fixed)ShieldPercent * 2.03), (int)(HealthBarY + 6));
        PrintSprite("FillShld", 0, HealthBarX - 98.0 + 0.1, HealthBarY, 0.05);
    };
    
    // Health fills
    for (int i = 9; i >= 0; i--)
        if (HealthPercent > 100 * i)
        {
            SetHudClipRect((int)HealthBarX - 98, (int)(HealthBarY - 6), (int)(((fixed)HealthPercent - (100.0 * (fixed)i)) * 2.03), (int)(HealthBarY + 6));
            PrintSprite(StrParam("Fill%d\n", i + 1), 0, HealthBarX - 98.0 + 0.1, HealthBarY, 0.05);
        };
    
    // Reset Clipping Rectangle
    SetHudClipRect(0, 0, 0, 0);
};

function void DrawBarStats(HUDBarInfo Info)
{
    // Stat Amounts
    SetFont("BIGFONT");
    HudMessage("%d\n", Info.Level, HUDMSG_PLAIN, 0, CR_WHITE, HealthBarX - 96.1, HealthBarY + 21.0, 0.05);
    HudMessage("%d\n", Info.Strength, HUDMSG_PLAIN, 0, CR_RED, HealthBarX - 96.1, HealthBarY + 39.0, 0.05);
    HudMessage("%d\n", Info.Defense, HUDMSG_PLAIN, 0, CR_GREEN, HealthBarX - 40.1, HealthBarY + 39.0, 0.05);
    HudMessage("%d\n", Info.Vitality, HUDMSG_PLAIN, 0, CR_BRICK, HealthBarX + 16.1, HealthBarY + 39.0, 0.05);
    HudMessage("%d\n", Info.Energy, HUDMSG_PLAIN, 0, CR_LIGHTBLUE, HealthBarX + 72.1, HealthBarY + 39.0, 0.05);
    HudMessage("%d\n", Info.Regeneration, HUDMSG_PLAIN, 0, CR_PURPLE, HealthBarX - 96.1, HealthBarY + 58.0, 0.05);
    HudMessage("%d\n", Info.Agility, HUDMSG_PLAIN, 0, CR_ORANGE, HealthBarX - 40.1, HealthBarY + 58.0, 0.05);
    HudMessage("%d\n", Info.Capacity, HUDMSG_PLAIN, 0, CR_BLUE, HealthBarX + 16.1, HealthBarY + 58.0, 0.05);
    HudMessage("%d\n", Info.Luck, HUDMSG_PLAIN, 0, CR_YELLOW, HealthBarX + 72.1, HealthBarY + 58.0, 0.05);
    
    // Stat Icons
    PrintSprite("MonLevel", 0, HealthBarX - 107.0, HealthBarY + 21.0, 0.05);
    PrintSprite("STAT1S", 0, HealthBarX - 96.0, HealthBarY + 54.0, 0.05);
    PrintSprite("STAT2S", 0, HealthBarX - 40.0, HealthBarY + 54.0, 0.05);
    PrintSprite("STAT3S", 0, HealthBarX + 16.0, HealthBarY + 54.0, 0.05);
    PrintSprite("STAT4S", 0, HealthBarX + 72.0, HealthBarY + 54.0, 0.05);
    PrintSprite("STAT5S", 0, HealthBarX - 96.0, HealthBarY + 74.0, 0.05);
    PrintSprite("STAT6S", 0, HealthBarX - 40.0, HealthBarY + 74.0, 0.05);
    PrintSprite("STAT7S", 0, HealthBarX + 16.0, HealthBarY + 74.0, 0.05);
    PrintSprite("STAT8S", 0, HealthBarX + 71.0, HealthBarY + 74.0, 0.05);
};

function void DrawBarAuras(HUDBarInfo auto Info)
{
    int AuraOffset = 0;
    
    for (int i = 0; i < AURA_MAX; i++)
        if (Info.Aura.Type[i].Active) // TODO: BROKEN! Wants a constant?
        {
            PrintSpritePulse(AuraIcons[i], 0, HealthBarX - 136 - ((AuraOffset % 3) * 32), HealthBarY + 30.0 + ((AuraOffset / 3) * 32), 0.75, 64.0, 0.25);
            AuraOffset++;
        };
};
