#library "Utils"

#include "zcommon.acs"

#import "RPG.acs"
#import "Stats.acs"
#import "Skills.acs"
#import "Augs.acs"
#import "Shop.acs"
#import "Menu.acs"
#import "Shield.acs"

// Level and Flags
global int 61 : LevelNum;				// Used to keep track of the level number for the transport system and monster difficulty scaling
global int 62 : InBase;					// Whether you are at the UAC Outpost or not
global int 63 : Transported;			// True if you are using the Transportation System

// Skill Level Names
str SkillLevels[5] =
{
	"Easy",
	"Normal",
	"Hard",
	"Nightmare",
	"Hell"
};

// Utility Scripts
// --------------------------------------------------

// Set Skill Level during the game
script "SetSkill" (int NewSkill)
{
	SetFont("BIGFONT");
	
	if (NewSkill < 0 || NewSkill > 4)
	{
		Print(s:"\cgInvalid Skill Level");
		terminate;
	}
	
	FadeRange(255, 255, 255, 0.5, 255, 255, 255, 0.0, 0.5);
	ChangeSkill(NewSkill);
	ActivatorSound("misc/secret", 127);
	Print(s:"\cjSkill Level has been changed to\n\cg", d:NewSkill + 1, s:" - ", s:SkillLevels[NewSkill]);
}

// Respec - Respecialize your Player
script "Respec" (int Stats, int Skills, int Inventory)
{
	// Vars
	int StatPoints;
	int SkillPoints;
	int OldCredits;
	
	// Respec Stats
	if (Stats)
	{
		// Add stats into a pool of tokens to give back to the player
		StatPoints += Strength;
		StatPoints += Defense;
		StatPoints += Vitality - 10;
		StatPoints += Energy - 10;
		StatPoints += Regeneration;
		StatPoints += Agility;
		StatPoints += Capacity - 10;
		StatPoints += Luck;
		
		// Reset Stats
		Strength = 0;
		Defense = 0;
		Vitality = 10;
		Energy = 10;
		Regeneration = 0;
		Agility = 0;
		Capacity = 10;
		Luck = 0;

		// Give Respecced Stat Tokens back
		GiveInventory("StatToken", StatPoints);

		// Reset HP and EP
		SetActorProperty(0, APROP_HEALTH, 100);
		EP = 100;
		EPMax = 100;
		
		// Reset Shield
		Shield = 0;
		ShieldTimer = 375;
	}
	
	// Respec Skills
	if (Skills)
	{
		// Reset skills, add skill levels together into a pool of tokens to give back to the player
		for (int i = 0; i < MAX_CATEGORIES; i++)
			for (int j = 0; j < MAX_SKILLS; j++)
			{
				SkillPoints += SkillLevel[(i * MAX_SKILLS) + j];
				SkillLevel[(i * MAX_SKILLS) + j] = 0;
			}

		// Give Respecced Skill Tokens back
		GiveInventory("StatToken", SkillPoints);

		// Remove Auras
		Aura = 0;
		AuraTimer = 0;
	}
	
	// Clear and Sell Inventory
	if (Inventory)
	{
		// Run through the shop catagories and sell everything using the utility SellAll script
		for (int k = 1; k < SHOP_CATEGORIES - 1; k++)
		{
			ACS_NamedExecuteAlways("SellAll", 0, k, 1);
			Delay(1);
		}
		OldCredits = CheckInventory("Credits");
		
		// Remove Augs
		for (int l = 0; l < MAX_AUGS; l++)
			Augs[l] = false;
		AugSlotsUsed = 0;

		// Clear out everything else that isn't sellable or can't be sold
		ClearInventory();
		
		// Restore the default item loadout
		DefaultLoadout();
		
		// Restore default Shield Parts
		ShieldBody = 1;
		ShieldBattery = 1;
		ShieldCapacitor = 1;
		ShieldAccessory = 0;
	}
		
	// Take 1/2 Credits
	GiveInventory("Credits", OldCredits);
	TakeInventory("Credits", CheckInventory("Credits") / 2);
	
	// FX
	FadeRange(255, 255, 255, 0.75, 0, 0, 0, 0.0, 2.5);
	HudMessage(s:"Respec Complete"; HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 2.5, 2.5);
	ActivatorSound("misc/secret", 127);
}

// Add XP, Rank or Combo
script "AddXP" (int addTotal, int AddXP, int AddRank, int AddCombo)
{
	if (GetCVAR("drpg_combo"))
	{
		if (Combo == 0)
			Combo = 1;
		
		ComboTimer = 100;
		TotalGained += AddTotal;
		XPGained += AddXP;
		RankGained += AddRank;
		Combo += AddCombo;
	}
	else
	{
		XP += AddXP;
		Rank += AddRank;
	}
}

// For items or other things to add EP
script "AddEP" (int Amount)
{
	FadeRange(0, 255, 255, 0.25, 0, 255, 255, 0, 0.25);
	
	EP += amount;
	
	if (EP > EPMax)
		EP = EPMax;
}

// Returns your current EP (for DECORATE)
script "GetEP" (void)
{
	SetResultValue(EP);
}

// Returns your max EP (for DECORATE)
script "GetEPMax" (void)
{
	SetResultValue(EPMax);
}

// Returns the amount to heal given the percentage out of max HP (for DECORATE)
script "GetHealPercent" (int Percent)
{
	int Amount = HealthMax * Percent / 100;
	SetResultValue(Amount);
}

// Returns your max Health (for DECORATE)
script "GetHealthMax" (void)
{
	SetResultValue(HealthMax);
}

// Returns the Agility for A_SetTics calls in DECORATE
script "GetSpeed" (int Tics)
{
	int TicSpeed = Tics - FixedMul(((Tics - 1) / 100), Agility);
	SetResultValue(TicSpeed);
}

// Used by the RegenSphere to temporarily increase regen rates
script "RegenBoost" (void)
{
	RegenBoostTimer += Random(1000, 3000);
}

// HAAAAAAAAAAAAAAAX
script "Cheat" (int StatBoost)
{
	int ItemMax = 1000;
	
	// Max Level/Rank
	XP = 1000000000;
	Rank = 1000000000;
	
	// Stats
	Strength += statboost;
	Defense += statboost;
	Vitality += statboost;
	Energy += statboost;
	Regeneration += statboost;
	Agility += statboost;
	Capacity += statboost;
	Luck += statboost;
	
	// Max out all Skills
	for (int i = 0; i < MAX_CATEGORIES; i++)
		for (int j = 0; j < MAX_SKILLS; j++)
		{
			SkillLevel[(i * MAX_SKILLS) + j] = SkillLevelMax[i][j];
			CurrentSkillLevel[(i * MAX_SKILLS) + j] = SkillLevelMax[i][j];
		}
	
	// Items - Tokens
	GiveInventory("StatToken", 10000);
	GiveInventory("StatCapToken", 100);
	GiveInventory("SkillToken", 10000);
	
	// Items - Health
	GiveInventory("StimPack", ItemMax);
	GiveInventory("SmallMedikit", ItemMax);
	GiveInventory("Medikit", ItemMax);
	GiveInventory("LargeMedikit", ItemMax);
	GiveInventory("XLMedikit", ItemMax);
	GiveInventory("MedPack", ItemMax);
	GiveInventory("SurgeryKit", ItemMax);
	GiveInventory("Continue", ItemMax);
	
	// Items - Armor
	TakeInventory("BasicArmor", 10000000);
	GiveInventory("WhiteArmor", 1);
	Delay(1);
	for (int k = 0; k < ItemMax; k++)
	{
		GiveInventory("UsedGreenArmor", ItemMax);
		GiveInventory("GreenArmor", ItemMax);
		GiveInventory("UsedBlueArmor", ItemMax);
		GiveInventory("BlueArmor", ItemMax);
		GiveInventory("UsedYellowArmor", ItemMax);
		GiveInventory("YellowArmor", ItemMax);
		GiveInventory("UsedRedArmor", ItemMax);
		GiveInventory("RedArmor", ItemMax);
		GiveInventory("UsedWhiteArmor", ItemMax);
		GiveInventory("WhiteArmor", ItemMax);
	}
	
	// Items - Powerups
	GiveInventory("InvulnerabilitySphere", ItemMax);
	GiveInventory("InvulnerabilityCharge", ItemMax);
	GiveInventory("BlurSphere", ItemMax);
	GiveInventory("InvisibilityCharge", ItemMax);
	GiveInventory("RadSuit", ItemMax);
	GiveInventory("Infrared", ItemMax);
	GiveInventory("Berserk", ItemMax);
	GiveInventory("AllMap", ItemMax);
	
	// Items - Ammo
	GiveInventory("Clip", GetAmmoCapacity("Clip"));
	GiveInventory("Shell", GetAmmoCapacity("Shell"));
	GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo"));
	GiveInventory("Cell", GetAmmoCapacity("Cell"));
	
	// Items - Misc
	ACS_NamedExecute("AllRunes", 0);
	ACS_NamedExecute("GiveAugs", 0, 100, 100, 100);
	ACS_NamedExecute("GiveCredits", 0);
	ACS_NamedExecute("FullShield", 0);
	GiveInventory("RedCard", 1);
	GiveInventory("YellowCard", 1);
	GiveInventory("BlueCard", 1);
	GiveInventory("RedSkull", 1);
	GiveInventory("YellowSkull", 1);
	GiveInventory("BlueSkull", 1);
	GiveInventory("PowerInvulnerable", 1);
	GiveInventory("PowerShadow", 1);
	GiveInventory("PowerIronFeet", 1);
	GiveInventory("PowerLightAmp", 1);
	
	// Restore HP/EP/Shields
	HealThing(1000000);
	EP = EPMax;
	Shield = ShieldCapacity;
	ShieldTimer = 0;
}

// For testing different stats and their effects
script "ModStat" (int stat, int value)
{
	switch (stat)
	{
		case 1:	strength = value;		break;
		case 2:	Defense = value;		break;
		case 3:	Vitality = value;		break;
		case 4:	Energy = value;			break;
		case 5:	Regeneration = value;	break;
		case 6:	Agility = value;		break;
		case 7:	Capacity = value;		break;
		case 8:	Luck = value;			break;
	}
}

// Give Credits
script "GiveCredits" (int Amount)
{
	if (Amount == 0) Amount = 1000000000;
	GiveInventory("Credits", Amount);
	ActivatorSound("credits/payout", 127);
}

// Instant payout
script "Payout" (int Time)
{
	if (Time > 0)
		PayTimer = Time;
	else
		PayTimer = 35 * 60 * GetCVAR("drpg_pay_interval");
}

// Give all Runes
script "AllRunes" (void)
{
	ActivatorSound("misc/secret", 127);
	GiveInventory("StrengthRune", 1);
	GiveInventory("DrainRune", 1);
	GiveInventory("EndlessRune", 1);
	GiveInventory("ResistanceRune", 1);
	GiveInventory("RegenerationRune", 1);
	GiveInventory("FrightRune", 1);
	GiveInventory("GhostRune", 1);
	GiveInventory("HighJumpRune", 1);
	GiveInventory("HasteRune", 1);
}

// Give all Augs
script "GiveAugs" (int Canisters, int Upgrades, int Slots)
{
	if (Canisters)
	{
		GiveInventory("AugCanister", Canisters);
		GiveInventory("AugUpgradeCanister", Upgrades);
		GiveInventory("AugSlotUpgrade", Slots);
	}
	
	for (int i = 0; i < MAX_AUGS; i++)
		AugLevels[i] = AugLevelMax[i];
}

// Give all Shield Components
script "FullShield" (void)
{
	// Bodies
	GiveInventory("ShieldBody2", 1);
	GiveInventory("ShieldBody3", 1);
	GiveInventory("ShieldBody4", 1);
	GiveInventory("ShieldBody5", 1);
	GiveInventory("ShieldBody6", 1);
	GiveInventory("ShieldBody7", 1);
	
	// Batteries
	GiveInventory("ShieldBattery2", 1);
	GiveInventory("ShieldBattery3", 1);
	GiveInventory("ShieldBattery4", 1);
	GiveInventory("ShieldBattery5", 1);
	GiveInventory("ShieldBattery6", 1);
	GiveInventory("ShieldBattery7", 1);

	// Capacitors
	GiveInventory("ShieldCapacitor2", 1);
	GiveInventory("ShieldCapacitor3", 1);
	GiveInventory("ShieldCapacitor4", 1);
	GiveInventory("ShieldCapacitor5", 1);
	
	// Accessories
	GiveInventory("ShieldAccessory1", 1);
	GiveInventory("ShieldAccessory2", 1);
	GiveInventory("ShieldAccessory3", 1);
	GiveInventory("ShieldAccessory4", 1);
	GiveInventory("ShieldAccessory5", 1);
	GiveInventory("ShieldAccessory6", 1);
	GiveInventory("ShieldAccessory7", 1);
}

// Utility Functions
// --------------------------------------------------

// Gets Max EP after all bonuses are applied to it
function int GetEPMax(void)
{
	int MaxEP = EPMax;
	
	// Max EP Checks for Augs
	if (Augs[AUG_ENERGY])
		MaxEP *= 2;
	
	return MaxEP;
}

// PrintSprite Utility Function
function void PrintSprite(str sprite, int id, int x, int y, int d)
{
    SetFont(sprite);
    HudMessage(s:"A"; HUDMSG_PLAIN, id, CR_UNTRANSLATED, x, y, d);
}

function void PrintSpriteFade(str sprite, int id, int x, int y, int d, int h)
{
    SetFont(sprite);
    HudMessage(s:"A"; HUDMSG_FADEOUT, id, CR_UNTRANSLATED, x, y, d, h);
}

function int SetInventory(str Item, int Count)
{
	int n = Count - CheckInventory(Item);
	
	if (n > 0)
		GiveInventory(Item, n);
	else if (n < 0)
		TakeInventory(Item, -n);
	
	return n;
}

function int SetActorInventory (int tid, str item, int count)
{
	int n = count - CheckActorInventory (tid, item);
	
	if (n > 0)
		GiveActorInventory(tid, item, n);
	else if (n < 0)
		TakeActorInventory(tid, item, -1 * n);
	
	return n;
}

// For Damage Digits
function int GetDigit(int Num, int Digit)
{
	return (Num / Pow(10, Digit)) % 10;
}

// Returns integer value
function int Round(int fixedNumber)
{
	return (fixedNumber + 0.5) >> 16;
}

// Returns fixed point value
function int Floor(int fixedNumber)
{
	return fixedNumber & 0xFFFF0000;
}

// This function computes n-th power of x.
function int Pow(int x, int n)
{
	int y = 1;
	while (n-- > 0) y *= x;
	return y;
}

// This function can be used to return the absolute value of a negative integer. 
function int Abs(int x)
{
    if (x < 0)
        return -x;

    return x;
}

// Gets the distance between two points
function int Distance(int x, int y, int z, int x2, int y2, int z2)
{
	int x3, y3, z3, d;
	x3 = x - x2 >> 16;
	y3 = y - y2 >> 16;
	z3 = z - z2 >> 16;
	d = sqrt(x3 * x3 + y3 * y3 + z3 * z3);
	return d;
}
