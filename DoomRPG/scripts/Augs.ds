#include "Augs.dh"
#include "Globals.dh"
#include "RPG.dh"
#include "Stats.dh"
#include "Skills.dh"
#include "Utils.dh"

str[MAX_AUGS][AUG_LEVELS + 1] AugData =
{
	// Name, Icon, Description...
	
	// Augs
	{
		"Muscle Replacer";
		"1.25x Damage";
		"1.5x Damage";
		"2x Damage";
		"4x Damage";
	};
	{
		"Dermal Armor";
		"-10x Damage Taken";
		"-20x Damage Taken";
		"-30x Damage Taken";
		"-40x Damage Taken";
		"-50x Damage Taken";
	};
	{
		"Pain Inhibitor";
		"2x Max Health";
		"2x Health Regen";
	};
	{
		"Psi Projector";
		"2x Max EP";
		"2x EP Regen";
		"2x Aura Timer";
	};
	{
		"Adrenaline Booster";
		"2x HP/EP Regen Amounts";
		"-2x HP/EP Regen Timers";
		"2x Shield Charge Rate";
		"-2x Shield Delay Rate";
		"-2x Shield Charge Interval";
	};
	{
		"Wired Reflexes";
		"2x Movement Speed";
		"2x Jump Height";
		"Double Weapon Speed";
		"2x Survival Chance";
	};
	{
		"Weight Distributor";
		"2x Ammo Limits";
		"4x Ammo Limits";
	};
	{
		"Precognition Unit";
		"1.25x Luck Drop Chances";
		"1.5x Luck Drop Chances";
		"2x Luck Drop Chances";
		"3x Luck Drop Chances";
		"4x Luck Drop Chances";
	};
};

int[MAX_AUGS] AugLevelMax =
{
	4; 5; 2; 3; 5; 4; 2; 5;
};

function void CheckAugSlots()
{
	Player.Augs.Slots = (6 - GameSkill()) + CheckInventory("AugSlotUpgrade");
	
	// Cap max Aug slots at 8
	if (Player.Augs.Slots > 8) Player.Augs.Slots = 8;
	
	// Unequip Augs if you pass the limit (sell a slot upgrade, change difficulty, etc)
	while (Player.Augs.SlotsUsed > Player.Augs.Slots)
		for (int i = 0; i < MAX_AUGS - 1; i++)
			if (Player.Augs.Active[i])
			{
				EquipAug(i);
				break;
			};
};

function void CheckAugs()
{
	// Sanity check to prevent negative slots used
	if (Player.Augs.SlotsUsed < 0)
		Player.Augs.SlotsUsed = 0;

	// Strength Aug
	if (Player.Augs.Active[AUG_STRENGTH])
	{
		if (Player.Augs.Level[AUG_STRENGTH] == 1)
			Player.TotalDamage = Round(Player.TotalDamage * 1.25);
		if (Player.Augs.Level[AUG_STRENGTH] == 2)
			Player.TotalDamage = Round(Player.TotalDamage * 1.5);
		if (Player.Augs.Level[AUG_STRENGTH] == 3)
			Player.TotalDamage *= 2.0;
		if (Player.Augs.Level[AUG_STRENGTH] >= 4)
			Player.TotalDamage *= 4.0;
	};
	
	// Defense Aug
	if (Player.Augs.Active[AUG_DEFENSE])
	{
		if (Player.Augs.Level[AUG_DEFENSE] == 1)
			Player.DamageFactor -= 0.1;
		if (Player.Augs.Level[AUG_DEFENSE] == 2)
			Player.DamageFactor -= 0.2;
		if (Player.Augs.Level[AUG_DEFENSE] == 3)
			Player.DamageFactor -= 0.3;
		if (Player.Augs.Level[AUG_DEFENSE] == 4)
			Player.DamageFactor -= 0.4;
		if (Player.Augs.Level[AUG_DEFENSE] >= 5)
			Player.DamageFactor -= 0.5;
	};
	
	// Vitality Aug
	if (Player.Augs.Active[AUG_VITALITY])
	{
		if (Player.Augs.Level[AUG_VITALITY] >= 1)
			Player.HealthMax *= 2;
		if (Player.Augs.Level[AUG_VITALITY] >= 2)
			Player.HPAmount *= 2;
	};
	
	// Energy Aug
	if (Player.Augs.Active[AUG_ENERGY])
	{
		if (Player.Augs.Level[AUG_ENERGY] >= 1)
			Player.EPMax *= 2;
		if (Player.Augs.Level[AUG_ENERGY] >= 2)
			Player.EPAmount *= 2;
		if (Player.Augs.Level[AUG_ENERGY] >= 3)
			Player.AuraBonus = true
		else
			Player.AuraBonus = false;
	};
	
	// Regeneration Aug
	if (Player.Augs.Active[AUG_REGENERATION])
	{
		if (Player.Augs.Level[AUG_REGENERATION] >= 1)
		{
			Player.HPAmount *= 2;
			Player.EPAmount *= 2;
		};
		if (Player.Augs.Level[AUG_REGENERATION] >= 2)
		{
			Player.HPTime /= 2;
			Player.EPTime /= 2;
		};
	};

	// Agility Aug
	if (Player.Augs.Active[AUG_AGILITY])
	{
		if (Player.Augs.Level[AUG_AGILITY] >= 1)
			Player.Speed *= 2;
		if (Player.Augs.Level[AUG_AGILITY] >= 2)
			Player.JumpHeight *= 2;
		if (Player.Augs.Level[AUG_AGILITY] >= 3)
			Player.WeaponSpeed = 100;
		if (Player.Augs.Level[AUG_AGILITY] >= 4)
			Player.SurvivalBonus *= 2;
	};
	
	// Capacity Aug
	if (Player.Augs.Active[AUG_CAPACITY])
	{
		fixed AmmoMult;
		
		if (Player.Augs.Level[AUG_CAPACITY] == 1)
			AmmoMult = 2;
		if (Player.Augs.Level[AUG_CAPACITY] == 2)
			AmmoMult = 4;
		
		SetAmmoCapacity("Clip", Player.Capacity * 20 * AmmoMult);
		SetAmmoCapacity("Shell", Player.Capacity * 10 * AmmoMult);
		SetAmmoCapacity("RocketAmmo", Player.Capacity * 5 * AmmoMult);
		SetAmmoCapacity("Cell", Player.Capacity * 30 * AmmoMult);
	};

	// Luck Aug
	if (Player.Augs.Active[AUG_LUCK])
	{
		fixed LuckMult;
		
		if (Player.Augs.Level[AUG_LUCK] == 1)
			LuckMult = 1.25;
		if (Player.Augs.Level[AUG_LUCK] == 2)
			LuckMult = 1.5;
		if (Player.Augs.Level[AUG_LUCK] == 3)
			LuckMult = 2.0;
		if (Player.Augs.Level[AUG_LUCK] == 4)
			LuckMult = 3.0;
		if (Player.Augs.Level[AUG_LUCK] == 5)
			LuckMult = 4.0;
		
		Player.CreditChance *= LuckMult;
		Player.HealthChance *= LuckMult;
		Player.EPChance *= LuckMult;
		Player.ArmorChance *= LuckMult;
		Player.PowerupChance *= LuckMult;
		Player.RuneChance *= LuckMult;
		Player.TokenChance *= LuckMult;
		Player.AugChance *= LuckMult;
		Player.ShieldChance *= LuckMult;
	};

	// Keep adding more
	// ...
};

function void EquipAug(int Aug)
{
	if (Player.Augs.Level[Aug] > 0)
	{
		if (Player.Augs.Active[Aug])
		{
			ActivatorSound("aug/equip", 127);
			Player.Augs.SlotsUsed--;
			Player.Augs.Active[Aug] = false;
		}
		else
		{
			Player.Augs.SlotsUsed++;
			
			if (Player.Augs.SlotsUsed > Player.Augs.Slots)
			{
				ActivatorSound("menu/error", 127);
				SetFont("BIGFONT");
				Print("\cgYou don't have a free Augmentation slot!\n");
				Player.Augs.SlotsUsed--;
			}
			else
			{
				ActivatorSound("aug/equip", 127);
				Player.Augs.Active[Aug] = true;
			};
		};
	};
};

function void LevelUpAug(int Aug)
{
	if (Player.Augs.Level[Aug] < AugLevelMax[Aug])
	{
		if (Player.Augs.Level[Aug] == 0)
		{
			if (CheckInventory("AugCanister"))
			{
				ActivatorSound("aug/levelup", 127);
				TakeInventory("AugCanister", 1);
				Player.Augs.Level[Aug]++;
			}
			else
				ActivatorSound("menu/error", 127);
		}
		else
		{
			if (CheckInventory("AugUpgradeCanister"))
			{
				ActivatorSound("aug/levelup", 127);
				TakeInventory("AugUpgradeCanister", 1);
				Player.Augs.Level[Aug]++;
			}
			else
				ActivatorSound("menu/error", 127);
		};
	};
};
