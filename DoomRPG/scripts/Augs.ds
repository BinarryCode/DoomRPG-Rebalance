#include "AugData.dh"
#include "Augs.dh"
#include "Globals.dh"
#include "RPG.dh"
#include "Stats.dh"
#include "Skills.dh"
#include "Utils.dh"

acscript DisableAugs()
{
    str[MAX_AUGS] AugTokens =
    {
        "AugTokenStrength";
        "AugTokenDefense";
        "AugTokenVitality";
        "AugTokenEnergy";
        "AugTokenRegen";
        "AugTokenAgility";
        "AugTokenCapacity";
        "AugTokenLuck";
    };
    
    // Disable Augs and give tokens designating which Augs were disabled
	for (int i = 0; i < MAX_AUGS; i++)
    {
        if (Player.Augs.Active[i])
        {
            // Disable Aug
            Player.Augs.Active[i] = false;
            
            // Screen fuckery
            SetHudSize(640, 480, false);
            SetFont("AugDView");
            HudMessage("A\n", HUDMSG_FADEOUT | HUDMSG_ADDBLEND, 0, CR_UNTRANSLATED, 320.0, 240.0, 3.0, 0.5);
        };
        
        SetInventory(AugTokens[i], Player.Augs.Level[i]);
    };
	
    // Reset Aug slots
	Player.Augs.SlotsUsed = 0;
	
    // Halve your current battery amount
    Player.Augs.Battery /= 2;
    
    // Disabled sound
	ActivatorSound("aug/disable", 127);
};

acscript AddBattery(int Amount)
{
    Player.Augs.Battery += Amount;
    
    if (Player.Augs.Battery > Player.Augs.BatteryMax)
        Player.Augs.Battery = Player.Augs.BatteryMax;
    
    DrawBattery();
};

function void CheckAugSlots()
{
	Player.Augs.Slots = (6 - GameSkill()) + CheckInventory("AugSlotUpgrade");
	
	// Cap max Aug slots at the max amount of available Augs
	if (Player.Augs.Slots > MAX_AUGS) Player.Augs.Slots = MAX_AUGS;
	
	// Unequip Augs if you pass the limit (sell a slot upgrade, change difficulty, etc)
	while (Player.Augs.SlotsUsed > Player.Augs.Slots)
		for (int i = MAX_AUGS; i >= 0; i--)
			if (Player.Augs.Active[i])
			{
				EquipAug(i);
				break;
			};
};

function void CheckAugs()
{
	// Sanity check to prevent negative slots used
	if (Player.Augs.SlotsUsed < 0)
		Player.Augs.SlotsUsed = 0;
    
    // Determine max Battery
    if (Player.Augs.Active[AUG_BATTERY])
    {
        if (Player.Augs.Level[AUG_BATTERY] == 1)
            Player.Augs.BatteryMax = 150;
        if (Player.Augs.Level[AUG_BATTERY] >= 2)
            Player.Augs.BatteryMax = 200;
    }
    else
        Player.Augs.BatteryMax = 100;
    
    // Play energy drained sound
    if (Player.Augs.Battery <= 0 && Player.Augs.SlotsUsed > 0)
        ActivatorSound("aug/dead", 127);
    
    // Disable Augs if your battery is dead
    if (Player.Augs.Battery <= 0)
    {
        for (int i = 0; i < MAX_AUGS; i++)
            if (Player.Augs.Active[i])
                Player.Augs.Active[i] = false;
        
        // Reset the amount of slots used
        Player.Augs.SlotsUsed = 0;
    };
    
    if (!Player.InMenu && !Player.InShop && !Player.OutpostMenu && !CheckInventory("PowerTimeFreezer") && !CheckInventory("MenuFreezer"))
    {
        int Drain;
        
        // Calculate Battery Drain
        for (int i = 0; i < MAX_AUGS; i++)
            if (Player.Augs.Active[i] && (Timer() % (35 * 30)) == 0)
                Drain += Player.Augs.Level[i];
        
        // Battery Management checks
        if (Player.Augs.Active[AUG_BATTERY])
        {
            if (Player.Augs.Level[AUG_BATTERY] == 3)
                Drain = Drain / 1.33;
            if (Player.Augs.Level[AUG_BATTERY] >= 4)
                Drain /= 2;
        };
        
        // Decrease Battery
        Player.Augs.Battery -= (int)Drain;
        
        // Sanity check to prevent battery from going negative
        if (Player.Augs.Battery < 0)
            Player.Augs.Battery = 0;
        
        // Display new battery amount on the HUD
        if (Player.Augs.SlotsUsed > 0 && (((Timer() % (35 * 30)) == 0) || GetCVar("drpg_aug_showbattery")))
            DrawBattery();
    };
    
    // Battery Management Recharging
    if (Player.Augs.Active[AUG_BATTERY] && Player.Augs.Level[AUG_BATTERY] >= 5 && ((Timer() % (35 * 10)) == 0))
        if (!GetPlayerInput(PlayerNumber(), MODINPUT_FORWARDMOVE) &&
            !GetPlayerInput(PlayerNumber(), MODINPUT_SIDEMOVE) &&
            !GetPlayerInput(PlayerNumber(), MODINPUT_UPMOVE))
        {
            Player.Augs.Battery++;
            DrawBattery();
        };
    
    // Strength Aug
	if (Player.Augs.Active[AUG_STRENGTH])
	{
		if (Player.Augs.Level[AUG_STRENGTH] == 1)
			Player.TotalDamage = Round(Player.TotalDamage * 1.25);
		if (Player.Augs.Level[AUG_STRENGTH] == 2)
			Player.TotalDamage = Round(Player.TotalDamage * 1.5);
		if (Player.Augs.Level[AUG_STRENGTH] == 3)
			Player.TotalDamage *= 2.0;
		if (Player.Augs.Level[AUG_STRENGTH] >= 4)
			Player.TotalDamage *= 4.0;
	};
	
	// Defense Aug
	if (Player.Augs.Active[AUG_DEFENSE])
	{
		if (Player.Augs.Level[AUG_DEFENSE] == 1)
			Player.DamageFactor -= 0.1;
		if (Player.Augs.Level[AUG_DEFENSE] == 2)
			Player.DamageFactor -= 0.2;
		if (Player.Augs.Level[AUG_DEFENSE] == 3)
			Player.DamageFactor -= 0.3;
		if (Player.Augs.Level[AUG_DEFENSE] == 4)
			Player.DamageFactor -= 0.4;
		if (Player.Augs.Level[AUG_DEFENSE] >= 5)
			Player.DamageFactor -= 0.5;
	};
	
	// Vitality Aug
	if (Player.Augs.Active[AUG_VITALITY])
	{
		if (Player.Augs.Level[AUG_VITALITY] >= 1)
			Player.HealthMax *= 2;
		if (Player.Augs.Level[AUG_VITALITY] >= 2)
			Player.HPAmount *= 2;
	};
	
	// Energy Aug
	if (Player.Augs.Active[AUG_ENERGY])
	{
		if (Player.Augs.Level[AUG_ENERGY] >= 1)
			Player.EPMax *= 2;
		if (Player.Augs.Level[AUG_ENERGY] >= 2)
			Player.EPAmount *= 2;
		if (Player.Augs.Level[AUG_ENERGY] >= 3)
			Player.AuraBonus = true
		else
			Player.AuraBonus = false;
	};
	
	// Regeneration Aug
	if (Player.Augs.Active[AUG_REGENERATION])
	{
		if (Player.Augs.Level[AUG_REGENERATION] >= 1)
		{
			Player.HPAmount *= 2;
			Player.EPAmount *= 2;
		};
		if (Player.Augs.Level[AUG_REGENERATION] >= 2)
		{
			Player.HPTime /= 2;
			Player.EPTime /= 2;
		};
	};

	// Agility Aug
	if (Player.Augs.Active[AUG_AGILITY])
	{
		if (Player.Augs.Level[AUG_AGILITY] >= 1)
			Player.Speed *= 2;
		if (Player.Augs.Level[AUG_AGILITY] >= 2)
			Player.JumpHeight *= 2;
		if (Player.Augs.Level[AUG_AGILITY] >= 3)
			Player.WeaponSpeed = 100;
		if (Player.Augs.Level[AUG_AGILITY] >= 4)
			Player.SurvivalBonus *= 2;
	};
	
	// Capacity Aug
	if (Player.Augs.Active[AUG_CAPACITY])
	{
		int AmmoMult;
		
		if (Player.Augs.Level[AUG_CAPACITY] == 1)
			AmmoMult = 2;
		if (Player.Augs.Level[AUG_CAPACITY] >= 2)
			AmmoMult = 4;
		if (Player.Augs.Level[AUG_CAPACITY] >= 3)
			Player.Stim.VialMax *= 2;
		
		SetAmmoCapacity("Clip", Player.Capacity * 20 * AmmoMult);
		SetAmmoCapacity("Shell", Player.Capacity * 5 * AmmoMult);
		SetAmmoCapacity("RocketAmmo", Player.Capacity * 5 * AmmoMult);
		SetAmmoCapacity("Cell", Player.Capacity * 30 * AmmoMult);
	};

	// Luck Aug
	if (Player.Augs.Active[AUG_LUCK])
	{
		fixed LuckMult;
		
		if (Player.Augs.Level[AUG_LUCK] == 1)
			LuckMult = 1.25;
		if (Player.Augs.Level[AUG_LUCK] == 2)
			LuckMult = 1.5;
		if (Player.Augs.Level[AUG_LUCK] == 3)
			LuckMult = 2.0;
		if (Player.Augs.Level[AUG_LUCK] == 4)
			LuckMult = 3.0;
		if (Player.Augs.Level[AUG_LUCK] == 5)
			LuckMult = 4.0;
		
		Player.CreditChance *= LuckMult;
		Player.HealthChance *= LuckMult;
		Player.EPChance *= LuckMult;
		Player.ArmorChance *= LuckMult;
		Player.PowerupChance *= LuckMult;
		Player.WeaponChance *= LuckMult;
		Player.TokenChance *= LuckMult;
		Player.AugChance *= LuckMult;
		Player.ShieldChance *= LuckMult;
		Player.StimChance *= LuckMult;
	};
};

function void EquipAug(int Aug)
{
    // If battery is dead, return
    if (Player.Augs.Battery <= 0)
    {
        ActivatorSound("menu/error", 127);
        return;
    };
	
    if (Player.Augs.Level[Aug] > 0)
	{
		if (Player.Augs.Active[Aug])
		{
			ActivatorSound("aug/equip", 127);
			Player.Augs.SlotsUsed--;
			Player.Augs.Active[Aug] = false;
		}
		else
		{
			Player.Augs.SlotsUsed++;
			
			if (Player.Augs.SlotsUsed > Player.Augs.Slots)
			{
				ActivatorSound("menu/error", 127);
				Player.Augs.SlotsUsed--;
			}
			else
			{
				ActivatorSound("aug/equip", 127);
				Player.Augs.Active[Aug] = true;
			};
		};
	};
};

function void LevelUpAug(int Aug)
{
	if (Player.Augs.Level[Aug] < AugData[Aug].MaxLevel)
	{
		if (Player.Augs.Level[Aug] == 0)
		{
			if (CheckInventory("AugCanister"))
			{
				ActivatorSound("aug/levelup", 127);
				TakeInventory("AugCanister", 1);
				Player.Augs.Level[Aug]++;
			}
			else
				ActivatorSound("menu/error", 127);
		}
		else
		{
			if (CheckInventory("AugUpgradeCanister"))
			{
				ActivatorSound("aug/levelup", 127);
				TakeInventory("AugUpgradeCanister", 1);
				Player.Augs.Level[Aug]++;
			}
			else
				ActivatorSound("menu/error", 127);
		};
	};
};
