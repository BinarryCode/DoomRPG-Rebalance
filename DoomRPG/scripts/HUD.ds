#include "Globals.dh"
#include "HUD.dh"
#include "Skills.dh"
#include "Utils.dh"

// Stat HUD Script
script DrawStatHUD() enter
{
    Start:
    
    int StatTokens = CheckInventory("StatToken");
    fixed X = 640.0;
    fixed Y = 280.0;
    fixed Offset = 11.0;
    
    SetHudSize(640, 480, false);
    
    if (GetCVar("drpg_auto_spend") && StatTokens > 0)
    {
        // Stat Amounts
        SetFont("BIGFONT");
        HudMessage("%d\n", Player.Strength, HUDMSG_FADEOUT, STAT_ID, CR_RED, X - 96.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Defense, HUDMSG_FADEOUT, STAT_ID + 1, CR_GREEN, X - 64.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Vitality, HUDMSG_FADEOUT, STAT_ID + 2, CR_BRICK, X - 32.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Energy, HUDMSG_FADEOUT, STAT_ID + 3, CR_LIGHTBLUE, X - 0.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Regeneration, HUDMSG_FADEOUT, STAT_ID + 4, CR_PURPLE, X - 96.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Agility, HUDMSG_FADEOUT, STAT_ID + 5, CR_ORANGE, X - 64.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Capacity, HUDMSG_FADEOUT, STAT_ID + 6, CR_BLUE, X - 32.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Luck, HUDMSG_FADEOUT, STAT_ID + 7, CR_YELLOW, X - 0.0 - Offset, Y + 58.0, 5.0, 5.0);
        
        // Stat Icons
        PrintSpriteFade("STAT1S", STAT_ID + 8, X - 96.0, Y + 56.0, 5.0, 5.0);
        PrintSpriteFade("STAT2S", STAT_ID + 9, X - 64.0, Y + 54.0, 5.0, 5.0);
        PrintSpriteFade("STAT3S", STAT_ID + 10, X - 32.0, Y + 54.0, 5.0, 5.0);
        PrintSpriteFade("STAT4S", STAT_ID + 11, X - 0.0, Y + 56.0, 5.0, 5.0);
        PrintSpriteFade("STAT5S", STAT_ID + 12, X - 96.0, Y + 74.0, 5.0, 5.0);
        PrintSpriteFade("STAT6S", STAT_ID + 13, X - 64.0, Y + 75.0, 5.0, 5.0);
        PrintSpriteFade("STAT7S", STAT_ID + 14, X - 32.0, Y + 74.0, 5.0, 5.0);
        PrintSpriteFade("STAT8S", STAT_ID + 15, X - 0.0, Y + 73.0, 5.0, 5.0);
    };
    
    Delay(1);
    goto Start;
};

// Skill HUD Script
script DrawSkillHUD() enter
{
    Start:
    
	while (true)
	{
        // Don't draw if the hide skills while menu is open option is enabled
        if (GetCVar("drpg_menu_hideskills") && (Player.InMenu || Player.InShop || Player.OutpostMenu))
        {
            Delay(1);
            goto Start;
        };
        
        SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
		fixed X = GetCVarFixed("drpg_skill_x");
		fixed Y = GetCVarFixed("drpg_skill_y");
        
        // Current Skill
        if (Player.SkillCatagory[Player.SkillSelected] != -1 && Player.SkillIndex[Player.SkillSelected] != -1)
        {
            Skill *CurrentSkill = &Skills[Player.SkillCatagory[Player.SkillSelected]][Player.SkillIndex[Player.SkillSelected]];
            
            int Cost = ScaleEPCost(CurrentSkill->Cost * CurrentSkill->CurrentLevel * Player.SkillCostMult);
            int Color = CR_LIGHTBLUE;
            
            if (Player.EP < Cost)
                Color = CR_RED;
            
            // Cost
            SetFont("SMALLFONT");
            HudMessage("%d\n", Cost, HUDMSG_PLAIN, 0, Color, X, Y - 16.0, 0.05);
            
            // Level
            HudMessage("%d/%d\n", CurrentSkill->CurrentLevel, CurrentSkill->Level, HUDMSG_PLAIN, 0, CR_GREEN, X, Y + 16.0, 0.05);
            
            // Icon
            if (StrLen(CurrentSkill->Icon) == 0)
                PrintSprite("S_None", 0, X, Y, 0.05)
            else
                PrintSprite(CurrentSkill->Icon, 0, X, Y, 0.05);
        };
        
		Delay(1);
	};
};

// Psuedo Damage Numbers on the HUD
script DamageNumbersHUD()
{
	int Before = GetActorProperty(Player.TID, APROP_Health);
	Delay(1);
	
	int After = GetActorProperty(Player.TID, APROP_Health);
	int Loss = Before - After;
	int Color = CR_WHITE;
	
    // Size
	if (Loss == 1)
		SetFont("SMALLFONT")
	else
		SetFont("BIGFONT");
	
    // Color
    switch (Player.DamageType)
    {
        case DT_NORMAL:                     Color = CR_WHITE;       break;
        case DT_TOXIC:                      Color = CR_GREEN;       break;
        case DT_MELEE:                      Color = CR_GREY;        break;
        case DT_FIRE:                       Color = CR_RED;         break;
        case DT_PLASMA: case DT_LIGHTNING:  Color = CR_LIGHTBLUE;   break;
    };
    
	if (Before > After)
		HudMessage("%d\n", Loss, HUDMSG_FADEOUT, 0, Color, 0.4 + RandomFixed(0.0, 0.4), 0.6 + RandomFixed(0.0, 0.3), 0.5, 1.0);
};
