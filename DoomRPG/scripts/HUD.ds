#include "RPG.dh"

#include "HUD.dh"
#include "Shield.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Utils.dh"

str[SE_MAX] StatusEffects =
{
    "\ccBlind";
    "\cfConfusion";
    "\cqPoison";
    "\cdCorrosion";
    "\ciFatigue";
    "\ctVirus";
    "\cnSilence";
    "\cvEMP";
};

// Status Effect HUD script
script void DrawStatusEffectHUD() enter
{
    Start:
    
    fixed X = GetCVarFixed("drpg_stateffect_x");
    fixed Y = GetCVarFixed("drpg_stateffect_y");
    
    for (int i = 0; i < SE_MAX; i++)
    {
        str Icon;
        str Fill;
        int TimerPercent;
        
        switch (i)
        {
            case SE_BLIND:      Icon = "SE_Blnd";   Fill = "BarSBlnd";    break;
            case SE_CONFUSION:  Icon = "SE_Conf";   Fill = "BarSConf";    break;
            case SE_POISON:     Icon = "SE_Pois";   Fill = "BarSPois";    break;
            case SE_CORROSION:  Icon = "SE_Corr";   Fill = "BarSCorr";    break;
            case SE_FATIGUE:    Icon = "SE_Fati";   Fill = "BarSFati";    break;
            case SE_VIRUS:      Icon = "SE_Viru";   Fill = "BarSViru";    break;
            case SE_SILENCE:    Icon = "SE_Sile";   Fill = "BarSSile";    break;
            case SE_EMP:        Icon = "SE_EMP";    Fill = "BARSEmp";     break;
        };
        
        if (Player.StatusType[i])
        {
            TimerPercent = (int)(((fixed)Player.StatusTimer[i] / (fixed)Player.StatusTimerMax[i]) * 100.0);
            
            SetHudSize(640, 480, false);
            
            // Text
            SetFont("SMALLFONT");
            HudMessage("%s\n", StatusEffects[i], HUDMSG_PLAIN | HUDMSG_ALPHA, 0, CR_WHITE, X + 50.0, Y, 0.05, 0.75);
            
            // Bar
            SetHudClipRect((int)X, (int)(Y - 6), TimerPercent, (int)(Y + 6));
            PrintSpriteAlpha(Fill, 0, X + 0.1, Y, 0.05, 0.75);
            SetHudClipRect(0, 0, 0, 0);
            
            // Increment Y
            Y += 16.0;
        };
    };
    
    Delay(1);
    goto Start;
};

// Stat HUD Script
script void DrawStatHUD() enter
{
    Start:
    
    int StatTokens = CheckInventory("DRPGStatToken");
    fixed X = 640.0;
    fixed Y = 280.0;
    fixed Offset = 11.0;
    
    SetHudSize(640, 480, false);
    
    if (GetCVar("drpg_auto_spend") && StatTokens > 0)
    {
        // Stat Amounts
        SetFont("BIGFONT");
        HudMessage("%d\n", Player.Strength, HUDMSG_FADEOUT, STAT_ID, CR_RED, X - 96.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Defense, HUDMSG_FADEOUT, STAT_ID + 1, CR_GREEN, X - 64.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Vitality, HUDMSG_FADEOUT, STAT_ID + 2, CR_BRICK, X - 32.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Energy, HUDMSG_FADEOUT, STAT_ID + 3, CR_LIGHTBLUE, X - 0.0 - Offset, Y + 39.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Regeneration, HUDMSG_FADEOUT, STAT_ID + 4, CR_PURPLE, X - 96.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Agility, HUDMSG_FADEOUT, STAT_ID + 5, CR_ORANGE, X - 64.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Capacity, HUDMSG_FADEOUT, STAT_ID + 6, CR_BLUE, X - 32.0 - Offset, Y + 58.0, 5.0, 5.0);
        HudMessage("%d\n", Player.Luck, HUDMSG_FADEOUT, STAT_ID + 7, CR_YELLOW, X - 0.0 - Offset, Y + 58.0, 5.0, 5.0);
        
        // Stat Icons
        PrintSpriteFade("STAT1S", STAT_ID + 8, X - 96.0, Y + 56.0, 5.0, 5.0);
        PrintSpriteFade("STAT2S", STAT_ID + 9, X - 64.0, Y + 54.0, 5.0, 5.0);
        PrintSpriteFade("STAT3S", STAT_ID + 10, X - 32.0, Y + 54.0, 5.0, 5.0);
        PrintSpriteFade("STAT4S", STAT_ID + 11, X - 0.0, Y + 56.0, 5.0, 5.0);
        PrintSpriteFade("STAT5S", STAT_ID + 12, X - 96.0, Y + 74.0, 5.0, 5.0);
        PrintSpriteFade("STAT6S", STAT_ID + 13, X - 64.0, Y + 75.0, 5.0, 5.0);
        PrintSpriteFade("STAT7S", STAT_ID + 14, X - 32.0, Y + 74.0, 5.0, 5.0);
        PrintSpriteFade("STAT8S", STAT_ID + 15, X - 0.0, Y + 73.0, 5.0, 5.0);
    };
    
    Delay(1);
    goto Start;
};

// Skill HUD Script
script void DrawSkillHUD() enter
{
    Start:
    
    while (true)
    {
        // Don't draw if the hide skills while menu is open option is enabled
        if (GetCVar("drpg_menu_hideskills") && (Player.InMenu || Player.InShop || Player.OutpostMenu > 0))
        {
            Delay(1);
            goto Start;
        };
        
        SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
        fixed X = GetCVarFixed("drpg_skill_x");
        fixed Y = GetCVarFixed("drpg_skill_y");
        
        // Current Skill
        if (Player.SkillCategory[Player.SkillSelected] != -1 && Player.SkillIndex[Player.SkillSelected] != -1)
        {
            Skill *CurrentSkill = &Skills[Player.SkillCategory[Player.SkillSelected]][Player.SkillIndex[Player.SkillSelected]];
            
            int Cost = ScaleEPCost(CurrentSkill->Cost * CurrentSkill->CurrentLevel * Player.SkillCostMult);
            int Color = CR_LIGHTBLUE;
            
            if (Player.EP < Cost)
                Color = CR_RED;
            
            // Cost
            SetFont("SMALLFONT");
            HudMessage("%d\n", Cost, HUDMSG_PLAIN, 0, Color, X, Y - 16.0, 0.05);
            
            // Level
            HudMessage("%d/%d\n", CurrentSkill->CurrentLevel, CurrentSkill->Level, HUDMSG_PLAIN, 0, CR_GREEN, X, Y + 16.0, 0.05);
            
            // Icon
            if (StrLen(CurrentSkill->Icon) == 0)
                PrintSprite("S_None", 0, X, Y, 0.05)
            else
                PrintSprite(CurrentSkill->Icon, 0, X, Y, 0.05);
        };
        
        Delay(1);
    };
};

// Psuedo Damage Numbers on the HUD
script void DamageNumbersHUD()
{
    int Color = CR_WHITE;
    str Text = "";
    int Loss;
    
    // Shield or Health?
    if (Player.Shield.Active)
        Loss = Player.ShieldLoss
    else
        Loss = Player.HealthLoss;
    
    // Return if a hit breaks the Shield, we don't want to show the ludicrous loss this would incur
    if (Loss > 0 && (Player.BeforeShield >= 0 && Player.AfterShield <= 0) && Player.Shield.Active)
        return;
    
    // Size
    if (Loss == 1)
        SetFont("SMALLFONT")
    else
        SetFont("BIGFONT");
    
    // Color
    switch (Player.DamageType)
    {
        case DT_NORMAL:                     Color = CR_WHITE;       break;
        case DT_TOXIC:                      Color = CR_GREEN;       break;
        case DT_MELEE:                      Color = CR_GREY;        break;
        case DT_FIRE:                       Color = CR_RED;         break;
        case DT_PLASMA: case DT_LIGHTNING:  Color = CR_LIGHTBLUE;   break;
    };
    
    if (Loss > 0 && Loss < SHIELD_HEALTH - Player.HealthMax - Loss)
    {
        if (Loss >= Player.HealthMax / 2) // Critical
            Text = StrParam("%s\cgCRITICAL\n\n", Text);
        
        // Status Effect
        for (int i = 0; i < SE_MAX; i++)
            if (Player.StatusType[i] != Player.StatusTypeTemp[i])
            {
                Text = StrParam("%s%s\n\n", Text, StatusEffects[i]);
                Player.StatusTypeTemp[i] = Player.StatusType[i];
            };
        
        // Loss
        Text = StrParam("%s%d\n", Text, Loss);
        
        // Display
        HudMessage("%s\n", Text, HUDMSG_FADEOUT, 0, Color, 1.4 + RandomFixed(0.0, 0.4), 0.6 + RandomFixed(0.0, 0.3), 0.5, 1.0);
    };
};
