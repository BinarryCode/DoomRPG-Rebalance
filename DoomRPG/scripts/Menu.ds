#include "Augs.dh"
#include "Globals.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

str[MAX_MENU] MainMenu =
{
	"Stats"; "Augmentations"; "Skills"; "Shield"; "Stims"; "Shop";
};

int[MAX_MENU] MainMenuColor =
{
	CR_RED; CR_GREEN; CR_LIGHTBLUE; CR_CYAN; CR_GRAY; CR_GOLD;
};

int[MAX_CATEGORIES] SkillCategoryMax =
{
	3; 9; 9; 4; 17; 6;
};

int[6] CursorColors =
{
	CR_BLUE; CR_LIGHTBLUE; CR_CYAN; CR_WHITE; CR_CYAN; CR_LIGHTBLUE;
};

int MenuCursorColor;

script OpenMenu() net
{
	// If you're dead, terminate
	if (GetActorProperty(PlayerTID, APROP_Health) <= 0) return;
	
	// If you're in any minigames, terminate
	if (Player.InMinigame) return;
	
	if (Player.InShop && InBase)
	{
		ActivatorSound("menu/leave", 127);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		Player.InMenu = false;
		Player.InShop = false;
		return;
	}
	else if (Player.InShop)
		Player.InShop = false;
	
	if (Player.InMenu)
	{
		if (Player.Menu > 0) 
		{
			Player.Menu = 0;
			Player.MenuIndex = 0;
			return;
		}
		else
		{
			ActivatorSound("menu/leave", 127);
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			Player.InMenu = false;
			Player.MenuIndex = 0;
			Player.Menu = 0;
		};
	}
	else
	{
		ActivatorSound("menu/enter", 127);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		Player.InMenu = true;
	};
};

function void MenuLoop()
{
	// Freeze the game if the option is active
	if (GetCVar("drpg_menufreeze"))
		GiveInventory("MenuFreezer", 1);
	
	// Handle the cursor color
	MenuCursorColor = CursorColors[(Timer() / 3) % 6];
	
	// Set the HUD Size
	SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
	
	// Draw the background
	if (GetCVar("drpg_menudim"))
		FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);

	// Draw current menu
	if (Player.Menu == 0)	DrawMainMenu();
	if (Player.Menu == 1)	DrawStatsMenu();
	if (Player.Menu == 2)	DrawAugsMenu();
	if (Player.Menu == 3)	DrawSkillMenu();
	if (Player.Menu == 4)	DrawShieldMenu();
	if (Player.Menu == 5)	DrawStimsMenu();
	
	// Handle menu input
	MenuInput();
};

function void DrawMainMenu()
{
	fixed X = 0.0;
	fixed Y = 10.0;
	int CurrentKills = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
	int CurrentItems = GetLevelInfo(LEVELINFO_FOUND_ITEMS);
	int CurrentSecretsFound = GetLevelInfo(LEVELINFO_FOUND_SECRETS);
	int TotalKills = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
	int TotalItems = GetLevelInfo(LEVELINFO_TOTAL_ITEMS);
	int TotalSecretsFound = GetLevelInfo(LEVELINFO_TOTAL_SECRETS);
	
	SetFont("BIGFONT");
	
	// Draw Menu
	for (int i = 0; i < MAX_MENU; i++)
	{
		// Shop menu check
		if (i == 5 && !GetCVar("drpg_shoptype")) continue;
		
		// Items
		HudMessage("%s\n", MainMenu[i], 	HUDMSG_PLAIN, 5000 + i, MainMenuColor[i], 	0.1, Y, 0.05);
		
		// Highlighted Item
		if (i == Player.MenuIndex)
			HudMessage("%s\n", MainMenu[i], HUDMSG_PLAIN, 5000 + i, MenuCursorColor, 	0.1, Y, 0.05);
		
		Y += 15.0;
	};
	
	// Player Icon
	if (GetCVar("drpg_ext_doomrl"))
	{
		if (PlayerClass(PlayerIndex) == 0) // Marine
			PrintSprite("PMARA1", 0, 16.1, 150.1, 0.05);
		if (PlayerClass(PlayerIndex) == 1) // Scout
			PrintSprite("PSCOA1", 0, 20.1, 148.1, 0.05);
		if (PlayerClass(PlayerIndex) == 2) // Technician
			PrintSprite("PTECA1", 0, 18.1, 148.1, 0.05);
		if (PlayerClass(PlayerIndex) == 3) // Renegade
			PrintSprite("PRENA1", 0, 20.1, 148.1, 0.05);
	}
	else
		PrintSprite("PLAYA1", 0, 16.1, 148.1, 0.05);

	// XP/Rank Display
	SetFont("BIGFONT");
	HudMessage("Level: %d\n", Player.Level, 											HUDMSG_PLAIN, 0, CR_WHITE,  		40.1, 100.0, 0.05);
	HudMessage("XP: %d / %d\n", Player.XP, Player.XPNext, 								HUDMSG_PLAIN, 0, CR_WHITE,  		40.1, 112.0, 0.05);
	HudMessage("Title: %s (%d/%d)\n", Ranks[Player.RankLevel], Player.RankLevel, 24,	HUDMSG_PLAIN, 0, CR_YELLOW, 		40.1, 124.0, 0.05);
	HudMessage("Rank: %d / %d\n", Player.Rank, Player.RankNext, 						HUDMSG_PLAIN, 0, CR_YELLOW, 		40.1, 136.0, 0.05);
	HudMessage("%s\n", LongRanks[Player.RankLevel], 									HUDMSG_PLAIN, 0, CR_YELLOW, 		40.1, 142.1, 0.05);
	
	// Quick Reference
	int StatTokens = CheckInventory("StatToken");
	int StatCapTokens = CheckInventory("StatCapToken");
	int SkillTokens = CheckInventory("SkillToken");
	int AugCanisters = CheckInventory("AugCanister");
	int AugUpgradeCanisters = CheckInventory("AugUpgradeCanister");
	int SmallStims = CheckInventory("StimSmall");
	int MediumStims = CheckInventory("StimMedium");
	int LargeStims = CheckInventory("StimLarge");
	PrintSprite("TOKAD0", 0, 16.1, 188.1, 0.05);
	PrintSprite("TOKBD0", 0, 16.1, 208.1, 0.05);
	PrintSprite("TOKCD0", 0, 16.1, 228.1, 0.05);
	PrintSprite("AUGCA0", 0, 16.1, 252.1, 0.05);
	PrintSprite("AUGUA0", 0, 16.1, 264.1, 0.05);
	PrintSprite("AUGUB0", 0, 16.1, 284.1, 0.05);
	PrintSprite("STIMB0", 0, 16.1, 320.1, 0.05);
	SetFont("BIGFONT");
	HudMessage("%d\n", StatTokens, 														HUDMSG_PLAIN, 0, CR_RED,  			40.1, 178.0, 0.05);
	HudMessage("%d / %d\n", StatCapTokens, 100, 										HUDMSG_PLAIN, 0, CR_YELLOW,  		40.1, 198.0, 0.05);
	HudMessage("%d\n", SkillTokens, 													HUDMSG_PLAIN, 0, CR_DARKGREEN,		40.1, 218.0, 0.05);
	HudMessage("%d\n", AugCanisters, 													HUDMSG_PLAIN, 0, CR_GREEN,  		40.1, 240.0, 0.05);
	HudMessage("%d\n", AugUpgradeCanisters, 											HUDMSG_PLAIN, 0, CR_GREEN,  		40.1, 257.0, 0.05);
	HudMessage("%d / %d\n", Player.Augs.SlotsUsed, Player.Augs.Slots, 					HUDMSG_PLAIN, 0, CR_GREEN,  		40.1, 274.0, 0.05);
	HudMessage("Small: %d\nMedium: %d\nLarge: %d\n", SmallStims, MediumStims, LargeStims,					HUDMSG_PLAIN, 0, CR_WHITE,  		40.1, 304.0, 0.05);
	
	// Level Stats
	if (Player.KillBonus)
		HudMessage("Monsters: %d / %d\n", CurrentKills, TotalKills, 					HUDMSG_PLAIN, 0, MenuCursorColor,	140.1, 178.0, 0.05)
	else
		HudMessage("Monsters: %d / %d\n", CurrentKills, TotalKills, 					HUDMSG_PLAIN, 0, CR_BRICK,  		140.1, 178.0, 0.05);
	if (Player.ItemsBonus)
		HudMessage("Items: %d / %d\n", CurrentItems, TotalItems, 						HUDMSG_PLAIN, 0, MenuCursorColor,  	140.1, 193.0, 0.05)
	else
		HudMessage("Items: %d / %d\n", CurrentItems, TotalItems, 						HUDMSG_PLAIN, 0, CR_LIGHTBLUE,  	140.1, 193.0, 0.05);
	if (Player.SecretsBonus)
		HudMessage("Secrets: %d / %d\n", CurrentSecretsFound, TotalSecretsFound, 		HUDMSG_PLAIN, 0, MenuCursorColor,  	140.1, 207.0, 0.05)
	else
		HudMessage("Secrets: %d / %d\n", CurrentSecretsFound, TotalSecretsFound, 		HUDMSG_PLAIN, 0, CR_GOLD,  			140.1, 207.0, 0.05);
	
	// Shield
	if (Player.Shield.Body != 0 || Player.Shield.Battery != 0 || Player.Shield.Capacitor != 0)
	{
		SetFont("SMALLFONT");
		
		// Epic Shield Name
		str ShieldName = "";
		if (Player.Shield.Capacitor > 0) 	ShieldName = StrParam("%s %s\n", ShieldName, ShieldData[2][Player.Shield.Capacitor - 1][1]);
		if (Player.Shield.Battery > 0) 		ShieldName = StrParam("%s \c-%s\n", ShieldName, ShieldData[1][Player.Shield.Battery - 1][1]);
		if (Player.Shield.Body > 0) 		ShieldName = StrParam("%s \c-%s\n", ShieldName, ShieldData[0][Player.Shield.Body - 1][1]);
		if (Player.Shield.Accessory > 0) 	ShieldName = StrParam("%s \c-%s\n", ShieldName, ShieldData[3][Player.Shield.Accessory - 1][1]);
		ShieldName = StrParam("%s\c- Shield\n", ShieldName);
		HudMessage("%s\n", ShieldName, HUDMSG_PLAIN, 0, CR_WHITE, 173.1, 226.1, 0.05);

		// Shield Stats
		HudMessage("\cvCapacity: %d / %d\n", Player.Shield.Charge, Player.Shield.Capacity, 	HUDMSG_PLAIN, 0, CR_WHITE, 			176.1, 238.0, 0.05);
		HudMessage("\cdCharge: %d\n", Player.Shield.ChargeRate, 							HUDMSG_PLAIN, 0, CR_WHITE, 			176.1, 246.0, 0.05);
		HudMessage("\caDelay: %k\n", Player.Shield.DelayRate,			 					HUDMSG_PLAIN, 0, CR_WHITE, 			176.1, 254.0, 0.05);
		
		// Build Shield Model
		if (Player.Shield.Capacitor > 0) 	PrintSprite(ShieldData[2][Player.Shield.Capacitor - 1][3], 	0, 158.1, 258.1, 0.05);
		if (Player.Shield.Battery > 0) 		PrintSprite(ShieldData[1][Player.Shield.Battery - 1][3],	0, 158.1, 258.1, 0.05);
		if (Player.Shield.Body > 0) 		PrintSprite(ShieldData[0][Player.Shield.Body - 1][3],		0, 158.1, 258.1, 0.05);
		if (Player.Shield.Accessory > 0) 	PrintSprite(ShieldData[3][Player.Shield.Accessory - 1][3], 	0, 158.1, 258.1, 0.05);
	};
	
	// Current Stim
	if (Player.Stim.Size > 0)
	{
		SetFont("BIGFONT");
		
		// Draw Stim selection
		if (Player.Stim.Size == 1)
			HudMessage("Small Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 176.1, 290.0, 0.05)
		else if (Player.Stim.Size == 2)
			HudMessage("Medium Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 176.1, 290.0, 0.05)
		else if (Player.Stim.Size == 3)
			HudMessage("Large Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 176.1, 290.0, 0.05);

		// Stim Compound Bar
		if (Player.Stim.Size > 0)
			for (int i = 0; i < MAX_COMPONENTS; i++)
				for (int j = 0; j < Player.Stim.Current[i]; j++)
				{
					PrintSprite(StrParam("Stim%d\n", i + 1), 0, 178.0 + X, 304.0, 0.05);
					X += 1.0;
				};
	};
};

function void DrawStatsMenu()
{
	// Title
	SetFont("BIGFONT");
	HudMessage("Stats\n", HUDMSG_PLAIN, 5000, CR_GREEN, 0.1, 10.0, 0.05);

	// Stat Tokens
	if (GetCVar("drpg_randomstatgrowth") < 2)
	{
		PrintSprite("TOKAE0", 0, 16.1, 240.1, 0.05);
		SetFont("BIGFONT");
		HudMessage("%d\n", CheckInventory("StatToken"), HUDMSG_PLAIN, 0, CR_RED, 32.1, 224.1, 0.05);
	};
	
	// Stat Cap Tokens
	PrintSprite("TOKBE0", 0, 16.1, 260.1, 0.05);
	SetFont("BIGFONT");
	HudMessage("%d / %d\n", CheckInventory("StatCapToken"), 100, HUDMSG_PLAIN, 0, CR_YELLOW, 32.1, 244.1, 0.05);

	// Primary Stats
	SetFont("BIGFONT");
	HudMessage("Strength: %d\n", Player.Strength, 		HUDMSG_PLAIN, 5001, CR_RED, 		0.1, 	25.0, 	0.05);
	HudMessage("Defense: %d\n", Player.Defense,			HUDMSG_PLAIN, 5002, CR_GREEN, 		200.1, 	25.0, 	0.05);
	HudMessage("Vitality: %d\n", Player.Vitality, 		HUDMSG_PLAIN, 5005, CR_BRICK, 		0.1, 	75.0, 	0.05);
	HudMessage("Energy: %d\n", Player.Energy,			HUDMSG_PLAIN, 5006, CR_LIGHTBLUE, 	200.1, 	75.0, 	0.05);
	HudMessage("Regen: %d\n", Player.Regeneration, 		HUDMSG_PLAIN, 5007, CR_PURPLE, 		0.1, 	125.0, 	0.05);
	HudMessage("Agility: %d\n", Player.Agility,			HUDMSG_PLAIN, 5004, CR_ORANGE, 		200.1, 	125.0, 	0.05);
	HudMessage("Capacity: %d\n", Player.Capacity,		HUDMSG_PLAIN, 5008, CR_BLUE, 		0.1, 	175.0, 	0.05);
	HudMessage("Luck: %d\n", Player.Luck, 				HUDMSG_PLAIN, 5009, CR_GOLD, 		200.1, 	175.0, 	0.05);
	
	// Secondary Stats
	SetFont("SMALLFONT");
	HudMessage("+%d%% Base Damage\n", Player.LevelDamage, 												HUDMSG_PLAIN, 0, CR_RED, 				30.1, 	36.0, 	0.05);
	HudMessage("+%d%% Bonus Damage\n", Player.BonusDamage, 												HUDMSG_PLAIN, 0, CR_RED, 				30.1, 	44.0, 	0.05);
	HudMessage("+%d%% Total Damage\n", Player.TotalDamage, 												HUDMSG_PLAIN, 0, CR_RED, 				30.1, 	52.0, 	0.05);
	HudMessage("%k%% Damage Taken\n", Player.DamageFactor * 100.0,		 								HUDMSG_PLAIN, 0, CR_GREEN,				230.1, 	36.0, 	0.05);
	HudMessage("%d Mass\n", Player.Mass, 																HUDMSG_PLAIN, 0, CR_GREEN,				230.1, 	44.0, 	0.05);
	HudMessage("%d Max HP\n", Player.HealthMax,															HUDMSG_PLAIN, 0, CR_BRICK,				30.1, 	86.0, 	0.05);
	HudMessage("%d HP Regen\n", Player.HPAmount,														HUDMSG_PLAIN, 0, CR_BRICK,				30.1, 	94.0, 	0.05);
	HudMessage("%d Max EP\n", Player.EPMax,																HUDMSG_PLAIN, 0, CR_LIGHTBLUE,			230.1, 	86.0, 	0.05);
	HudMessage("%d EP Regen\n", Player.EPAmount,														HUDMSG_PLAIN, 0, CR_LIGHTBLUE,			230.1, 	94.0, 	0.05);
	HudMessage("%d Sec Aura Time\n", ((1050 + (Player.Energy * 5.25)) * (Player.AuraBonus + 1)) / 35,	HUDMSG_PLAIN, 0, CR_LIGHTBLUE,			230.1, 	102.0, 	0.05);
	HudMessage("HP Timer: %d Seconds\n", Player.HPTime / (35 * 2),										HUDMSG_PLAIN, 0, CR_BRICK,				30.1, 	136.0, 	0.05);
	HudMessage("EP Timer: %d Seconds\n", Player.EPTime / (35 * 2),										HUDMSG_PLAIN, 0, CR_LIGHTBLUE,			30.1, 	144.0, 	0.05);
	HudMessage("Regen Bonus: %d\n", Player.RegenBoostTimer / 35,										HUDMSG_PLAIN, 0, CR_PURPLE,				30.1, 	152.0, 	0.05);
	HudMessage("Speed: %k\n", Player.Speed,			 													HUDMSG_PLAIN, 0, CR_ORANGE, 			230.1, 	136.0, 	0.05);
	HudMessage("Jump Height: %k\n", Player.JumpHeight, 													HUDMSG_PLAIN, 0, CR_ORANGE, 			230.1, 	144.0, 	0.05);
	HudMessage("%d%% Weapon Speed\n", Player.WeaponSpeed, 												HUDMSG_PLAIN, 0, CR_ORANGE, 			230.1, 	152.0, 	0.05);
	HudMessage("%k%% Survival Bonus\n", Player.SurvivalBonus, 											HUDMSG_PLAIN, 0, CR_ORANGE, 			230.1, 	160.0, 	0.05);
	HudMessage("Bullets: %d/%d\n", CheckInventory("Clip"), GetAmmoCapacity("Clip"), 					HUDMSG_PLAIN, 0, CR_BRICK, 	 			30.1, 	186.0, 	0.05);
	HudMessage("Shells: %d/%d\n", CheckInventory("Shell"), GetAmmoCapacity("Shell"), 					HUDMSG_PLAIN, 0, CR_ORANGE,  			30.1, 	194.0, 	0.05);
	HudMessage("Rockets: %d/%d\n", CheckInventory("RocketAmmo"), GetAmmoCapacity("RocketAmmo"),			HUDMSG_PLAIN, 0, CR_GREY, 	 			30.1, 	202.0, 	0.05);
	HudMessage("Cells: %d/%d\n", CheckInventory("Cell"), GetAmmoCapacity("Cell"), 						HUDMSG_PLAIN, 0, CR_GREEN, 	 			30.1, 	210.0, 	0.05);
	HudMessage("Stim Vial Max: %d\n", Player.Stim.VialMax, 												HUDMSG_PLAIN, 0, CR_CYAN, 	 			30.1, 	218.0, 	0.05);
	HudMessage("%k%% Credit Drop Chance\n", Player.CreditChance, 										HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	186.0, 	0.05);
	HudMessage("%k%% Health Drop Chance\n", Player.HealthChance, 										HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	194.0, 	0.05);
	HudMessage("%k%% EP Capsule Drop Chance\n", Player.EPChance, 										HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	202.0, 	0.05);
	HudMessage("%k%% Armor Drop Chance\n", Player.ArmorChance,											HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	210.0, 	0.05);
	HudMessage("%k%% Powerup Drop Chance\n", Player.PowerupChance, 										HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	218.0, 	0.05);
	HudMessage("%k%% Rune Drop Chance\n", Player.RuneChance,											HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	226.0, 	0.05);
	HudMessage("%k%% Token Drop Chance\n", Player.TokenChance, 											HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	234.0, 	0.05);
	HudMessage("%k%% Aug Drop Chance\n", Player.AugChance,												HUDMSG_PLAIN, 0, CR_GOLD, 				230.1, 	242.0, 	0.05);
	HudMessage("%k%% Shield Part Drop Chance\n", Player.ShieldChance, 									HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	250.0, 	0.05);
	HudMessage("%k%% Stim Drop Chance\n", Player.StimChance, 											HUDMSG_PLAIN, 0, CR_GOLD, 	 			230.1, 	258.0, 	0.05);
	
	// Stat Upgrade Cursor
	if (CheckInventory("StatToken") > 0)
	{
		SetFont("BIGFONT");
		if (Player.MenuIndex == 0)	HudMessage("Strength: %d\n", Player.Strength, 						HUDMSG_PLAIN, 5001, MenuCursorColor, 	0.1, 	25.0, 	0.05);
		if (Player.MenuIndex == 1)	HudMessage("Defense: %d\n", Player.Defense,							HUDMSG_PLAIN, 5002, MenuCursorColor, 	200.1, 	25.0, 	0.05);
		if (Player.MenuIndex == 2)	HudMessage("Vitality: %d\n", Player.Vitality, 						HUDMSG_PLAIN, 5005, MenuCursorColor, 	0.1, 	75.0, 	0.05);
		if (Player.MenuIndex == 3)	HudMessage("Energy: %d\n", Player.Energy,							HUDMSG_PLAIN, 5006, MenuCursorColor, 	200.1, 	75.0, 	0.05);
		if (Player.MenuIndex == 4)	HudMessage("Regen: %d\n", Player.Regeneration, 						HUDMSG_PLAIN, 5007, MenuCursorColor, 	0.1, 	125.0, 	0.05);
		if (Player.MenuIndex == 5)	HudMessage("Agility: %d\n", Player.Agility,							HUDMSG_PLAIN, 5004, MenuCursorColor, 	200.1, 	125.0, 	0.05);
		if (Player.MenuIndex == 6)	HudMessage("Capacity: %d\n", Player.Capacity,						HUDMSG_PLAIN, 5008, MenuCursorColor, 	0.1, 	175.0, 	0.05);
		if (Player.MenuIndex == 7)	HudMessage("Luck: %d\n", Player.Luck,								HUDMSG_PLAIN, 5009, MenuCursorColor, 	200.1, 	175.0, 	0.05);
	};

	// Icons
	PrintSprite("Attack", 0, 6.1, 35.1, 0.05);
	PrintSprite("Defense", 0, 200.1, 35.1, 0.05);
	PrintSprite("Vitality", 0, 10.1, 85.1, 0.05);
	PrintSprite("Energy", 0, 205.1, 84.1, 0.05);
	PrintSprite("Regen", 0, 6.1, 132.1, 0.05);
	PrintSprite("Agility", 0, 202.1, 132.1, 0.05);
	PrintSprite("Capacity", 0, 14.1, 192.1, 0.05);
	PrintSprite("Luck", 0, 202.1, 185.1, 0.05);
};

function void DrawAugsMenu()
{
	// Titles
	SetFont("BIGFONT");
	HudMessage("Augmentations\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 10.0, 0.05);
	
	// Aug Canisters
	PrintSprite("AUGCA0", 0, 200.0, 54.0, 0.05);
	SetFont("BIGFONT");
	HudMessage("%d\n", CheckInventory("AugCanister"), HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 30.0, 0.05);
	
	// Aug Upgrade Canisters
	PrintSprite("AUGUA0", 0, 200.0, 72.0, 0.05);
	SetFont("BIGFONT");
	HudMessage("%d\n", CheckInventory("AugUpgradeCanister"), HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 53.0, 0.05);
	
	// Aug Slots
	PrintSprite("AUGUB0", 0, 204.0, 102.0, 0.05);
	SetFont("BIGFONT");
	HudMessage("%d / %d\n", Player.Augs.SlotsUsed, Player.Augs.Slots, HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 76.0, 0.05);
	
	// Draw Aug slots
	for (int i = 0; i < 2; i++)
		for (int j = 0; j < 5; j++)
		{
			int Index = j + (i * 5);
			
			// Catch to make sure unimplemented stuff isn't drawn
			if (Index > MAX_AUGS - 1) continue;
			
			// Draw the augs that we have
			SetFont("SMALLFONT");
			
			// Draw the E if it's equipped
			if (Player.Augs.Active[Index])
				HudMessage("E\n", HUDMSG_PLAIN, 0, CR_GREEN, 0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
			
			// Draw the level and max level
			HudMessage("%d/%d\n", Player.Augs.Level[Index], AugLevelMax[Index], HUDMSG_PLAIN, 0, CR_WHITE, 32.2 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
			
			// Icon
			if (Player.Augs.Active[Index])
				PrintSprite(StrParam("Aug%dE\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.05)
			else if (Player.Augs.Level[Index] > 0)
				PrintSprite(StrParam("Aug%dB\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.05)
			else
				PrintSprite(StrParam("Aug%d\n", Index + 1), 0, 9.1 + (j * 34.0), 28.1 + (i * 34.0), 0.05);
			
			// Currently highlighted Aug's name/description
			SetFont("SMALLFONT");
			if (Player.MenuIndex == Index)
			{
				HudMessage("\ca%s\n", AugData[Player.MenuIndex][0],
						   HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 128.1, 0.05);
				
				for (int k = 0; k < AugLevelMax[Index]; k++)
					if (Player.Augs.Level[Index] < k + 1)
						HudMessage("\cu%s\n", AugData[Player.MenuIndex][1 + k],
								   HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 136.1 + (k * 8.0), 0.05)
					else
						HudMessage("\cd%s\n", AugData[Player.MenuIndex][1 + k],
								   HUDMSG_PLAIN, 0, CR_GREEN, 0.1, 136.1 + (k * 8.0), 0.05);
			};

			// Draw the cursor
			if (Player.MenuIndex == Index)
				PrintSprite("SelectBo", 0, 2.1 + (j * 34.0), 36.0 + (i * 34.0), 0.05);

			// Boxes
			PrintSprite("ItemBox", 0, 0.1 + (j * 34.0), 36.0 + (i * 34.0), 0.05);
		};
};

function void DrawSkillMenu()
{
	// Skill Catagories
	str[MAX_CATEGORIES] SkillCategories =
	{
		"Healing";
		"Powerups";
		"Auras";
		"Attacks";
		"Summoning";
		"Utility";
	};
	
	// Title
	SetFont("BIGFONT");
	HudMessage("Skills\n", HUDMSG_PLAIN, 5000, CR_GREEN, 0.1, 10.0, 0.05);
	
	// Current Skill
	Skill *CurrentSkill = &Skills[Player.SkillPage][Player.MenuIndex];

	// Skill Tokens
	PrintSprite("TOKCE0", 0, 252.1, 56.1, 0.05);
	SetFont("BIGFONT");
	HudMessage("%d\n", CheckInventory("SkillToken"), HUDMSG_PLAIN, 0, CR_DARKGREEN, 278.1, 46.0, 0.05);
	
	// Skill Buy Cost
	HudMessage("-%d\n", CurrentSkill->Level + 1,
			   HUDMSG_PLAIN, 5001, CR_RED, 278.1, 56.1, 0.05);
	if (CurrentSkill->Level == CurrentSkill->MaxLevel)
		HudMessage("\n", HUDMSG_PLAIN, 5001, CR_RED, 278.1, 56.1, 0.05);

	// Skill Category
	HudMessage("%s\n", SkillCategories[Player.SkillPage],
			   HUDMSG_PLAIN, 5002, CR_WHITE,
			   0.1, 25.0, 0.05);
	
	// Scale EP Costs to Skill Level
	int SkillCost = ScaleEPCost(CurrentSkill->Cost * CurrentSkill->CurrentLevel * Player.SkillCostMult);
	int SkillCostNext = ScaleEPCost(CurrentSkill->Cost * (CurrentSkill->CurrentLevel + 1) * Player.SkillCostMult);

	// Skill Cost/Next Level Cost
	HudMessage("EP: %d (%d)\n", SkillCost, SkillCostNext,
			   HUDMSG_PLAIN, 5003, CR_LIGHTBLUE, 240.1, 25.0, 0.05);
	if (CurrentSkill->Level == CurrentSkill->MaxLevel)
		HudMessage("EP: %d\n", SkillCost,
				   HUDMSG_PLAIN, 5003, CR_LIGHTBLUE, 240.1, 25.0, 0.05);

	// Skill List
	SetFont("SMALLFONT");
	for (int i = 0; i < SkillCategoryMax[Player.SkillPage]; i++)
	{
		int Color = CR_WHITE;
				
		if (i == Player.MenuIndex)
			Color = CR_GREEN
		else if (Skills[Player.SkillPage][i].Level == 0)
			Color = CR_RED;
		
		if (Skills[Player.SkillPage][i].Level > 0)
			HudMessage("%s (%d / %d) [%d]\n",
					   Skills[Player.SkillPage][i].Name,
					   Skills[Player.SkillPage][i].Level,
					   Skills[Player.SkillPage][i].MaxLevel,
					   Skills[Player.SkillPage][i].CurrentLevel,
					   HUDMSG_PLAIN, 5006 + i, Color,
				       20.1, 40.0 + (8.0 * i), 0.05)
		else
			HudMessage("%s (%d / %d)\n",
					   Skills[Player.SkillPage][i].Name,
					   Skills[Player.SkillPage][i].Level,
					   Skills[Player.SkillPage][i].MaxLevel,
					   HUDMSG_PLAIN, 5006 + i, Color,
					   20.1, 40.0 + (8.0 * i), 0.05);

		// If a skill key is assigned to this skill, draw an indicator
		for (int j = 0; j < 5; j++)
				if (Player.SkillCatagory[j] == Player.SkillPage && Player.SkillIndex[j] == i)
					HudMessage("%d->\n", j + 1,
							   HUDMSG_PLAIN, 5050 + MAX_SKILLS + j, CR_CYAN,
							   0.1, 40.0 + (8.0 * i), 0.05);
	};

	// Skill Description
	SetFont("SMALLFONT");
	if (CurrentSkill->Level > 0)
		HudMessage("%s\n", CurrentSkill->Description[CurrentSkill->CurrentLevel - 1],
				   HUDMSG_PLAIN, 5005, CR_YELLOW,
				   20.1, 183.1, 0.05)
	else
		HudMessage("%s\n", CurrentSkill->Description[0],
				   HUDMSG_PLAIN, 5005, CR_YELLOW,
				   20.1, 183.1, 0.05);
	
	/* Help Text
	SetFont("SMALLFONT");
	HudMessage(s:"Up/Down to select\nLeft/Right to switch Category\nUse to Increase Skill Level\nUse Skill to Select Current Skill";
			   HUDMSG_PLAIN, 5004, CR_RED,
			   0.1, 204.1, 0.05);
	*/
};

function void DrawShieldMenu()
{
	str Description = "";
	int Amount;
	
	// Title
	SetFont("BIGFONT");
	HudMessage("Shield\n", HUDMSG_PLAIN, 5000, CR_GREEN, 0.1, 10.0, 0.05);
	
	// Page
	if (Player.ShieldPage == 0) HudMessage("Bodies\n", 		HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 10.0, 0.05);
	if (Player.ShieldPage == 1) HudMessage("Batteries\n", 	HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 10.0, 0.05);
	if (Player.ShieldPage == 2) HudMessage("Capacitors\n", 	HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 10.0, 0.05);
	if (Player.ShieldPage == 3) HudMessage("Accessories\n", HUDMSG_PLAIN, 0, CR_GREEN, 208.1, 10.0, 0.05);
	
	// Draw Components
	for (int i = 0; i < 2; i++)
	{
		for (int j = 0; j < 6; j++)
		{
			int Index = j + (i * 6);
			
			// Draw Available Components
			for (int k = 0; k < 4; k++)
			{
				if (Index < ShieldPartsMax[Player.ShieldPage])
				{
					// Draw Equipped Status
					SetFont("SMALLFONT");
					if (Player.ShieldPage == 0 && Player.Shield.Body == Index + 1) 				HudMessage("E\n", HUDMSG_PLAIN, 0, CR_WHITE, 		0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
					if (Player.ShieldPage == 1 && Player.Shield.Battery == Index + 1) 			HudMessage("E\n", HUDMSG_PLAIN, 0, CR_GOLD, 		0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
					if (Player.ShieldPage == 2 && Player.Shield.Capacitor == Index + 1) 		HudMessage("E\n", HUDMSG_PLAIN, 0, CR_LIGHTBLUE,	0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
					if (Player.ShieldPage == 3 && Player.Shield.Accessory == Index + 1) 		HudMessage("E\n", HUDMSG_PLAIN, 0, CR_GREEN, 		0.1 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
					
					// Draw Quantity if you have more then one
					if (Player.ShieldPage == 0 && CheckInventory(ShieldData[0][Index][0]) > 1) 	HudMessage("%d\n", CheckInventory(ShieldData[0][Index][0]), 	HUDMSG_PLAIN, 0, CR_WHITE, 32.2 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
					if (Player.ShieldPage == 1 && CheckInventory(ShieldData[1][Index][0]) > 1) 	HudMessage("%d\n", CheckInventory(ShieldData[1][Index][0]), 	HUDMSG_PLAIN, 0, CR_WHITE, 32.2 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
					if (Player.ShieldPage == 2 && CheckInventory(ShieldData[2][Index][0]) > 1) 	HudMessage("%d\n", CheckInventory(ShieldData[2][Index][0]), 	HUDMSG_PLAIN, 0, CR_WHITE, 32.2 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
					if (Player.ShieldPage == 3 && CheckInventory(ShieldData[3][Index][0]) > 1) 	HudMessage("%d\n", CheckInventory(ShieldData[3][Index][0]), 	HUDMSG_PLAIN, 0, CR_WHITE, 32.2 + (j * 34.0), 48.0 + (i * 34.0), 0.05);
				};

				// Draw Components and set Description
				if (Player.ShieldPage == k)
				{
					if (Index < ShieldPartsMax[Player.ShieldPage] && CheckInventory(ShieldData[k][Index][0]))
					{
						// Draw Component
						PrintSprite(ShieldData[k][Index][3], 0, 17.1 + (j * 34.0), 52.1 + (i * 34.0), 0.05);
						
						// Set Description
						if (Index == Player.MenuIndex)
						{
							// Name
							Description = StrParam("%s\n", ShieldData[Player.ShieldPage][Index][1]);
							
							// Capacity
							if (ShieldStats[Player.ShieldPage][Index][0] > 0)
								Description = StrParam("%s\n\cv+%d Capacity\n", Description, ShieldStats[Player.ShieldPage][Index][0]);
							
							// Charge Rate
							if (ShieldStats[Player.ShieldPage][Index][1] > 0)
								Description = StrParam("%s\n\cd+%d Charge Rate/Sec\n", Description, ShieldStats[Player.ShieldPage][Index][1]);
							
							// Delay Rate
							if (ShieldStats[Player.ShieldPage][Index][2] < 0)
								Description = StrParam("%s\n\ca%k Delay Rate/Sec\n", Description, ShieldStats[Player.ShieldPage][Index][2]);
							
							// Extra Description
							if (ShieldData[Player.ShieldPage][Index][2] != "")
								Description = StrParam("%s\n%s\n", Description, ShieldData[Player.ShieldPage][Index][2]);
						};
					};
				};
			};

			// Draw the cursor
			if (Player.MenuIndex == Index)
				PrintSprite("SelectBo", 0, 2.1 + (j * 34.0), 36.0 + (i * 34.0), 0.05);

			// Boxes
			PrintSprite("ItemBox", 0, 0.1 + (j * 34.0), 36.0 + (i * 34.0), 0.05);
		};
	};
	
	SetFont("SMALLFONT");
	
	// Epic Shield Name
	if (Player.Shield.Body != 0 || Player.Shield.Battery != 0 || Player.Shield.Capacitor != 0)
	{
		str ShieldName = "";
		if (Player.Shield.Capacitor > 0) 	ShieldName = StrParam("%s %s\n", ShieldName, ShieldData[2][Player.Shield.Capacitor - 1][1]);
		if (Player.Shield.Battery > 0) 		ShieldName = StrParam("%s \c-%s\n", ShieldName, ShieldData[1][Player.Shield.Battery - 1][1]);
		if (Player.Shield.Body > 0) 		ShieldName = StrParam("%s \c-%s\n", ShieldName, ShieldData[0][Player.Shield.Body - 1][1]);
		if (Player.Shield.Accessory > 0) 	ShieldName = StrParam("%s \c-%s\n", ShieldName, ShieldData[3][Player.Shield.Accessory - 1][1]);
		ShieldName = StrParam("%s\c- Shield\n", ShieldName);
		HudMessage("%s\n", ShieldName, HUDMSG_PLAIN, 0, CR_WHITE, 0.1, 124.1, 0.05);
	};
	
	// Component Description
	SetFont("SMALLFONT");
	HudMessage("%s\n", Description, HUDMSG_PLAIN, 0, CR_WHITE, 0.1, 144.1, 0.05);

	// Shield Stats
	HudMessage("\cvCapacity: %d / %d\n", Player.Shield.Charge, Player.Shield.Capacity, 	HUDMSG_PLAIN, 0, CR_WHITE, 36.1, 98.0, 0.05);
	HudMessage("\cdCharge: %d\n", Player.Shield.ChargeRate, 							HUDMSG_PLAIN, 0, CR_WHITE, 36.1, 106.0, 0.05);
	HudMessage("\caDelay: %k\n", Player.Shield.DelayRate,			 					HUDMSG_PLAIN, 0, CR_WHITE, 36.1, 114.0, 0.05);
	
	// Build Shield Model
	if (Player.Shield.Capacitor > 0) 	PrintSprite(ShieldData[2][Player.Shield.Capacitor - 1][3], 	0, 18.1, 120.1, 0.05);
	if (Player.Shield.Battery > 0) 		PrintSprite(ShieldData[1][Player.Shield.Battery - 1][3],	0, 18.1, 120.1, 0.05);
	if (Player.Shield.Body > 0) 		PrintSprite(ShieldData[0][Player.Shield.Body - 1][3],		0, 18.1, 120.1, 0.05);
	if (Player.Shield.Accessory > 0) 	PrintSprite(ShieldData[3][Player.Shield.Accessory - 1][3], 	0, 18.1, 120.1, 0.05);
};

function void DrawStimsMenu()
{
	int X = 32.0;
	
	// Title
	SetFont("BIGFONT");
	HudMessage("Stims\n", HUDMSG_PLAIN, 5000, CR_GREEN, 0.1, 10.0, 0.05);
	
	for (int i = 0; i < MAX_COMPONENTS; i++)
	{
		// Selection Cursor
		if (i == Player.MenuIndex)
			HudMessage("-->\n", HUDMSG_PLAIN, 0, MenuCursorColor, 8.1, 32.0 + (15.0 * i), 0.05);
		
		// Compound Bar
		for (int j = 0; j < (int)(((fixed)Player.Stim.Vials[i] / (fixed)(Player.Stim.VialMax + 1)) * 100.0); j++)
		{
			if (j > 100) break; // Prevent overflow
			PrintSprite(StrParam("Stim%d\n", i + 1), 0, 32.0 + (1.0 * j), 32.0 + (15.0 * i), 0.05);
		};
		
		// Compound Amount
		SetFont("BIGFONT");
		HudMessage("%s: %d/%d\n", CompoundNames[i], Player.Stim.Vials[i], Player.Stim.VialMax, HUDMSG_PLAIN, 0, CompoundColors[i], 160.1, 32.0 + (15.0 * i), 0.05);
	};
	
	// Draw Stim selection
	if (Player.Stim.Size == 1)
		HudMessage("Small Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 32.1, 200.0, 0.05)
	else if (Player.Stim.Size == 2)
		HudMessage("Medium Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 32.1, 200.0, 0.05)
	else if (Player.Stim.Size == 3)
		HudMessage("Large Stim: %d/%d\n", Player.Stim.Amount, Player.Stim.Capacity, HUDMSG_PLAIN, 0, CR_GREEN, 32.1, 200.0, 0.05)
	else
	{
		if (Player.StimSelected == 0)
			HudMessage("Small Stim: %d\n", CheckInventory("StimSmall"), HUDMSG_PLAIN, 0, CR_WHITE, 32.1, 200.0, 0.05)
		else if (Player.StimSelected == 1)
			HudMessage("Medium Stim: %d\n", CheckInventory("StimMedium"), HUDMSG_PLAIN, 0, CR_WHITE, 32.1, 200.0, 0.05)
		else if (Player.StimSelected == 2)
			HudMessage("Large Stim: %d\n", CheckInventory("StimLarge"), HUDMSG_PLAIN, 0, CR_WHITE, 32.1, 200.0, 0.05);
	};

	// Stim selected
	if (Player.MenuIndex == 10)
		HudMessage("-->\n", HUDMSG_PLAIN, 0, MenuCursorColor, 8.1, 200.0, 0.05);
	
	// Stim Compound Bar
	if (Player.Stim.Size > 0)
		for (int i = 0; i < MAX_COMPONENTS; i++)
			for (int j = 0; j < Player.Stim.Current[i]; j++)
			{
				PrintSprite(StrParam("Stim%d\n", i + 1), 0, 2.0 + X, 213.0, 0.05);
				X += 1.0;
			};
};

function void MenuInput()
{
	int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

	// Reset the menu block
	Player.MenuBlock = false;
	
	// Main Menu
	if (Player.Menu == 0)
	{
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Player.MenuIndex > 0)
		{
			ActivatorSound("menu/move", 127);
			Player.MenuIndex--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Player.MenuIndex < MAX_MENU - 1)
		{
			if (!GetCVar("drpg_shoptype") && Player.MenuIndex == 4)
				return;
			
			ActivatorSound("menu/move", 127);
			Player.MenuIndex++;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			Player.MenuBlock = true;
			
			if (Player.MenuIndex == 5)
				OpenShop(true)
			else
			{
				ActivatorSound("menu/move", 127);
				Player.Menu = Player.MenuIndex + 1;
				Player.MenuIndex = 0;
				Player.DelayTimer = 0;
			};
		};
	};
	
	// Status menu
	if (Player.Menu == 1 && CheckInventory("StatToken") > 0 && !Player.MenuBlock)
	{
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Player.MenuIndex > 1)
		{
			ActivatorSound("menu/move", 127);
			Player.MenuIndex -= 2;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Player.MenuIndex < 7 - 1)
		{
			ActivatorSound("menu/move", 127);
			Player.MenuIndex += 2;
		};
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT)
		    && Player.MenuIndex > 0)
        {
			ActivatorSound("menu/move", 127);
			Player.MenuIndex--;
        };
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT)
		    && Player.MenuIndex < 8 - 1)
        {
			ActivatorSound("menu/move", 127);
			Player.MenuIndex++;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
			IncreaseStat(0);
		if (Buttons & BT_USE)
		{
			Player.DelayTimer++;
			
			if (Player.DelayTimer > 35 * 2)
				IncreaseStat(0);
		}
		else
			Player.DelayTimer = 0;
	};
	
	// Accessories menu
	if (Player.Menu == 2 && !Player.MenuBlock)
	{
		// Stop under/overflow
		if (Player.MenuIndex <= 0) 				Player.MenuIndex = 0;
		if (Player.MenuIndex > MAX_AUGS - 1) 	Player.MenuIndex = MAX_AUGS - 1;
		
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Player.MenuIndex > 0)
		{
            ActivatorSound("menu/move", 127);
			Player.MenuIndex -= 5;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Player.MenuIndex < MAX_AUGS - 1)
		{
            ActivatorSound("menu/move", 127);
			Player.MenuIndex += 5;
		};
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT)
		    && Player.MenuIndex > 0)
        {
			ActivatorSound("menu/move", 127);
			Player.MenuIndex--;
        };
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT)
		    && Player.MenuIndex < MAX_AUGS - 1)
        {
			ActivatorSound("menu/move", 127);
			Player.MenuIndex++;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			if (Player.Augs.Level[Player.MenuIndex] == 0)
				LevelUpAug(Player.MenuIndex)
			else
				EquipAug(Player.MenuIndex);
		};
		if (Buttons & BT_USE && !(OldButtons & BT_USE) && Buttons & BT_SPEED)
			LevelUpAug(Player.MenuIndex);
	};
	
	// Skills Menu
	if (Player.Menu == 3 && !Player.MenuBlock)
	{
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Player.MenuIndex >= 0)
		{
			if (Player.MenuIndex <= 0) Player.MenuIndex = SkillCategoryMax[Player.SkillPage];
            ActivatorSound("menu/move", 127);
			Player.MenuIndex--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Player.MenuIndex < SkillCategoryMax[Player.SkillPage])
		{
			if (Player.MenuIndex >= SkillCategoryMax[Player.SkillPage] - 1) Player.MenuIndex = -1;
            ActivatorSound("menu/move", 127);
			Player.MenuIndex++;
		};
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT && Player.SkillPage >= 0) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT && Player.SkillPage >= 0))
        {
			if (Player.SkillPage <= 0) Player.SkillPage = MAX_CATEGORIES;
			ActivatorSound("menu/move", 127);
			Player.MenuIndex = 0;
			Player.SkillPage--;
		};
        if ((Buttons & BT_LEFT && !(OldButtons & BT_LEFT) && Buttons & BT_SPEED && Player.SkillPage >= 0) ||
			(Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT) && Buttons & BT_SPEED && Player.SkillPage >= 0))
			if (Skills[Player.SkillPage][Player.MenuIndex].CurrentLevel > 1)
			{
				Skills[Player.SkillPage][Player.MenuIndex].CurrentLevel--;
				ActivatorSound("menu/move", 127);
			};
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT && Player.SkillPage < MAX_CATEGORIES) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT && Player.SkillPage < MAX_CATEGORIES))
        {
			if (Player.SkillPage >= MAX_CATEGORIES - 1) Player.SkillPage = -1;
			ActivatorSound("menu/move", 127);
			Player.MenuIndex = 0;
			Player.SkillPage++;
		};
        if ((Buttons & BT_RIGHT && !(OldButtons & BT_RIGHT) && Buttons & BT_SPEED && Player.SkillPage < MAX_CATEGORIES) ||
			(Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT) && Buttons & BT_SPEED && Player.SkillPage < MAX_CATEGORIES))
			if (Skills[Player.SkillPage][Player.MenuIndex].CurrentLevel < Skills[Player.SkillPage][Player.MenuIndex].Level)
			{
				Skills[Player.SkillPage][Player.MenuIndex].CurrentLevel++;
				ActivatorSound("menu/move", 127);
			};
		if (Buttons == BT_USE && OldButtons != BT_USE)
			IncreaseSkill();
		if (Buttons & BT_USE && !(OldButtons & BT_USE) && Buttons & BT_SPEED)
		{
			Player.SkillCatagory[5] = Player.SkillPage;
			Player.SkillIndex[5] = Player.MenuIndex;
			UseSkill(5);
		};
	};
	
	// Shield Menu
	if (Player.Menu == 4 && !Player.MenuBlock)
	{
		// Stop under/overflow
		if (Player.MenuIndex <= 0) 	Player.MenuIndex = 0;
		if (Player.MenuIndex > 12 - 1) Player.MenuIndex = 12 - 1;
		
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Player.MenuIndex > 0)
		{
            ActivatorSound("menu/move", 127);
			Player.MenuIndex -= 6;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Player.MenuIndex < 30 - 1)
		{
            ActivatorSound("menu/move", 127);
			Player.MenuIndex += 6;
		};
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
        {
			ActivatorSound("menu/move", 127);
			Player.MenuIndex--;
			
			if (Player.ShieldPage > 0 && (Player.MenuIndex == -1 || Player.MenuIndex == 5 || Player.MenuIndex == 11 || Player.MenuIndex == 17 || Player.MenuIndex == 23 || Player.MenuIndex == 30))
			{
				Player.ShieldPage--;
				Player.MenuIndex += 6;
			};
        };
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
        {
			ActivatorSound("menu/move", 127);
			Player.MenuIndex++;
			
			if (Player.ShieldPage < 3 && (Player.MenuIndex == 6 || Player.MenuIndex == 12 || Player.MenuIndex == 18 || Player.MenuIndex == 24 || Player.MenuIndex == 30))
			{
				Player.ShieldPage++;
				Player.MenuIndex -= 6;
			};
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			if (Player.MenuIndex < ShieldPartsMax[Player.ShieldPage])
				for (int i = 0; i < 4; i++)
					if (i == Player.ShieldPage)
						if (CheckInventory(ShieldData[i][Player.MenuIndex][0]))
						{
							if (i == 0)	Player.Shield.Body = Player.MenuIndex + 1;
							if (i == 1)	Player.Shield.Battery = Player.MenuIndex + 1;
							if (i == 2)	Player.Shield.Capacitor = Player.MenuIndex + 1;
							if (i == 3)	Player.Shield.Accessory = Player.MenuIndex + 1;
							
							ActivatorSound("shield/equip", 127);
						};
		};
        if (Buttons & BT_USE && !(OldButtons & BT_USE) && Buttons & BT_SPEED)
		{
			if (Player.MenuIndex < ShieldPartsMax[Player.ShieldPage])
				for (int i = 0; i < 4; i++)
					if (i == Player.ShieldPage)
					{
						if (i == 0) Player.Shield.Body = 0;
						if (i == 1) Player.Shield.Battery = 0;
						if (i == 2) Player.Shield.Capacitor = 0;
						if (i == 3) Player.Shield.Accessory = 0;
						
						ActivatorSound("shield/unequip", 127);
					};
		};
	};
	
	// Stims Menu
	if (Player.Menu == 5 && !Player.MenuBlock)
	{
		// Keep te cursor focused on the Stim selection if no Stim is active yet
		if (Player.Stim.Size == 0) Player.MenuIndex = 10;
		
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Player.MenuIndex > 0)
		{
			if (Player.Stim.Size == 0) return;
			
			Player.MenuIndex--;
            ActivatorSound("menu/move", 127);
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Player.MenuIndex < 11 - 1)
		{
			if (Player.Stim.Size == 0) return;

			Player.MenuIndex++;
            ActivatorSound("menu/move", 127);
		};
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT) && Player.StimSelected > 0)
		{
			if (Player.Stim.Size > 0) return;
			
			Player.StimSelected--;
            ActivatorSound("menu/move", 127);
		};
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT) && Player.StimSelected < 3 - 1)
		{
			if (Player.Stim.Size > 0) return;
			
			Player.StimSelected++;
            ActivatorSound("menu/move", 127);
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			if (Player.MenuIndex == 10)
				SetStim(Player.StimSelected)
			else
				MixStim(Player.MenuIndex);
		};
	};
};

function void IncreaseStat(int Stat)
{
	// Determine which Stat we're working with for Stat amount calculation on upgrade
	if (Stat > 0)
	{
		switch (Stat)
		{
			case 1: Player.StatAmount = Player.Strength; 		break;
			case 2: Player.StatAmount = Player.Defense; 		break;
			case 3: Player.StatAmount = Player.Vitality; 		break;
			case 4: Player.StatAmount = Player.Energy; 			break;
			case 5: Player.StatAmount = Player.Regeneration; 	break;
			case 6: Player.StatAmount = Player.Agility; 		break;
			case 7: Player.StatAmount = Player.Capacity; 		break;
			case 8: Player.StatAmount = Player.Luck; 			break;
		};
	}
	else
	{
		switch (Player.MenuIndex)
		{
			case 0: Player.StatAmount = Player.Strength; 		break;
			case 1: Player.StatAmount = Player.Defense; 		break;
			case 2: Player.StatAmount = Player.Vitality; 		break;
			case 3: Player.StatAmount = Player.Energy; 			break;
			case 4: Player.StatAmount = Player.Regeneration; 	break;
			case 5: Player.StatAmount = Player.Agility; 		break;
			case 6: Player.StatAmount = Player.Capacity; 		break;
			case 7: Player.StatAmount = Player.Luck; 			break;
		};
	};
	
	if (GetCVar("drpg_statcost") == 0) // Normal Costs
		Player.StatAmount = 1;
	if (GetCVar("drpg_statcost") == 1) // Progressive Costs
		Player.StatAmount = Player.StatAmount + 1;
	if (GetCVar("drpg_statcost") == 2) // Tiered Costs
		Player.StatAmount = (Player.StatAmount / 10) + 1;

	// Make sure you have enough Stat Tokens
	if (CheckInventory("StatToken") < Player.StatAmount && Stat == 0)
	{
		ActivatorSound("menu/error", 127);
		SetFont("BIGFONT");
		Print("\cgYou don't have enough Stat Tokens\n");
		return;
	};
	
	// Check Stat Caps
	CheckStatCaps();
	
	// Upgrade the Stat
	if (Stat > 0)
	{
		switch (Stat)
		{
			case 1: if (Player.Strength >= Player.StatCap) 		{ return; }	else Player.Strength++; 	break;
			case 2: if (Player.Defense >= Player.StatCap) 		{ return; }	else Player.Defense++; 		break;
			case 3: if (Player.Vitality >= Player.StatCap) 		{ return; }	else Player.Vitality++; 	break;
			case 4: if (Player.Energy >= Player.StatCap) 		{ return; }	else Player.Energy++; 		break;
			case 5: if (Player.Regeneration >= Player.StatCap) 	{ return; }	else Player.Regeneration++; break;
			case 6: if (Player.Agility >= Player.StatCap) 		{ return; }	else Player.Agility++; 		break;
			case 7: if (Player.Capacity >= Player.StatCap) 		{ return; }	else Player.Capacity++; 	break;
			case 8: if (Player.Luck >= Player.StatCap) 			{ return; }	else Player.Luck++; 		break;
		};
	}
	else
	{
		switch (Player.MenuIndex)
		{
			case 0: if (Player.Strength >= Player.StatCap) 		{ PrintStatError();		return; }	else Player.Strength++; 	break;
			case 1: if (Player.Defense >= Player.StatCap) 		{ PrintStatError(); 	return; }	else Player.Defense++; 		break;
			case 2: if (Player.Vitality >= Player.StatCap) 		{ PrintStatError();		return; }	else Player.Vitality++; 	break;
			case 3: if (Player.Energy >= Player.StatCap) 		{ PrintStatError();		return; }	else Player.Energy++; 		break;
			case 4: if (Player.Regeneration >= Player.StatCap)	{ PrintStatError();		return; }	else Player.Regeneration++; break;
			case 5: if (Player.Agility >= Player.StatCap) 		{ PrintStatError();		return; }	else Player.Agility++; 		break;
			case 6: if (Player.Capacity >= Player.StatCap) 		{ PrintStatError();		return; }	else Player.Capacity++; 	break;
			case 7: if (Player.Luck >= Player.StatCap) 			{ PrintStatError();		return; }	else Player.Luck++; 		break;
		};
	};
	
	if (Stat == 0)
		ActivatorSound("menu/move", 127);
		
	// Spend Tokens only on level up
	if (GetCVar("drpg_autospend"))
		Player.LevelTokens -= Player.StatAmount;

	TakeInventory("StatToken", Player.StatAmount);
};

function void IncreaseSkill()
{
	Skill *CurrentSkill = &Skills[Player.SkillPage][Player.MenuIndex];
	
	if (CheckInventory("SkillToken") > 0)
	{
		if (CurrentSkill->Level < CurrentSkill->MaxLevel && CheckInventory("SkillToken") > CurrentSkill->Level)
		{
			// If you are upgrading an aura, and it's the same one as you've got active, kill it
			if (Player.Aura == Player.MenuIndex + 1)
				Player.AuraTimer = 0;
			
			CurrentSkill->Level++;
			CurrentSkill->CurrentLevel++;
			TakeInventory("SkillToken", CurrentSkill->Level);
			ActivatorSound("menu/move", 127);
		};
	}
	else
		ActivatorSound("menu/error", 127);
};

function void PrintStatError()
{
	if (Player.DelayTimer > 0) return;
	
	ActivatorSound("menu/error", 127);
	SetFont("BIGFONT");
	Print("\cjYou cannot increase stats past %d!\n", Player.StatCap);
};
