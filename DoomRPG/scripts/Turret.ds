#include "RPG.dh"

#include "Turret.dh"
#include "Utils.dh"

AddressSpace MapArray TurretSpace;

TurretSpace TurretUpgrade[MAX_UPGRADES] TurretUpgradeData =
{
    // Build
    {
        "Build Turret"; 1; 0;
        "Build the portable turret";
        nullptr;
        "Issue this command to enable or disable the turret";
    };
    
    // --------------------------------------------------
    // Weapons
    // 
    
    // Bullet
    {
        "Weapon Module - Bullet"; 1; 0;
        "The turret is able to fire rapid-fire low-damage bullets";
        nullptr;
        "Issuing this command will load the bullet weapon module, issuing this command while the weapon is already loaded will insert bullets";
    };
    {
        "Weapon Module - Bullet - Damage"; 10; 0;
        "Increases the damage of the turret's bullets";
    };
    {
        "Weapon Module - Bullet - Capacity"; 10; 0;
        "Increases the storage capacity of bullets the turret can hold";
    };
    {
        "Weapon Module - Bullet - Rate of Fire"; 5; 0;
        "Increases the fire rate of the turret's bullets";
    };
    
    // Pellet
    {
        "Weapon Module - Pellet"; 1; 0;
        "The turret is able to fire shotgun-like pellet spread shots";
        nullptr;
        "Issuing this command will load the pellet weapon module, issuing this command while the weapon is already loaded will insert pellets";
    };
    {
        "Weapon Module - Pellet - Damage"; 10; 0;
        "Increases the damage of the turret's pellets";
    };
    {
        "Weapon Module - Pellet - Capacity"; 10; 0;
        "Increases the storage capacity of shells the turret can hold";
    };
    {
        "Weapon Module - Pellet - Rate of Fire"; 5; 0;
        "Increases the fire rate of the turret's pellets";
    };
    {
        "Weapon Module - Pellet - Spread"; 5; 0;
        "Decreases the spread of the pellets fired";
    };
    {
        "Weapon Module - Pellet - Amount"; 10; 0;
        "Increases the number of pellets fired per shot";
    };
    
    // Rocket
    {
        "Weapon Module - Rocket"; 1; 0;
        "The turret is able to fire explosive rockets";
        nullptr;
        "Issuing this command will load the rocket weapon module, issuing this command while the weapon is already loaded will insert rockets";
    };
    {
        "Weapon Module - Rocket - Damage"; 10; 0;
        "Increases the damage of the turret's rockets";
    };
    {
        "Weapon Module - Rocket - Capacity"; 10; 0;
        "Increases the storage capacity of rockets the turret can hold";
    };
    {
        "Weapon Module - Rocket - Rate of Fire"; 5; 0;
        "Increases the fire rate of the turret's rockets";
    };
    {
        "Weapon Module - Rocket - Seeking"; 5; 0;
        "Allows fired rockets to seek targets";
    };
    
    // Plasma
    {
        "Weapon Module - Plasma"; 1; 0;
        "The turret is able to fire superheated balls of plasma";
        nullptr;
        "Issuing this command will load the plasma weapon module, issuing this command while the weapon is already loaded will insert cells";
    };
    {
        "Weapon Module - Plasma - Damage"; 10; 0;
        "Increases the damage of the turret's plasma shots";
    };
    {
        "Weapon Module - Plasma - Capacity"; 10; 0;
        "Increases the storage capacity of cells used for plasma the turret can hold";
    };
    {
        "Weapon Module - Plasma - Rate of Fire"; 5; 0;
        "Increases the fire rate of the turret's plasma shots";
    };
    
    // Railgun
    {
        "Weapon Module - Railgun"; 1; 0;
        "The turret is able to fire piercing railgun shots";
        nullptr;
        "Issuing this command will load the railgun weapon module, issuing this command while the weapon is already loaded will insert cells";
    };
    {
        "Weapon Module - Railgun - Damage"; 10; 0;
        "Increases the damage of the turret's railgun shots";
    };
    {
        "Weapon Module - Railgun - Capacity"; 10; 0;
        "Increases the storage capacity of cells used for the railgun the turret can hold";
    };
    {
        "Weapon Module - Railgun - Rate of Fire"; 5; 0;
        "Increases the fire rate of the turret's railgun shots";
    };
    {
        "Weapon Module - Railgun - Ripping"; 1; 0;
        "Allows the railgun to pierce through targets";
    };
    
    // Ammo
    {
        "Ammo Module - Autoloader"; 0; 0;
        "Autoloads ammo if it runs out from your own ammo pool";
        nullptr;
        "issuing this command will toggle autoloading on and off";
    };
    {
        "Ammo Module - Nano-Generators"; 10; 0;
        "Allows the turret to slowly generate it's own ammo supplies";
        "Upgrades increase generation speed";
    };
    {
        "Ammo Module - Nano-Generators - Bullets"; 1; 0;
        "Allows the turret to slowly generate bullets";
    };
    {
        "Ammo Module - Nano-Generators - Shells"; 1; 0;
        "Allows the turret to slowly generate shells";
    };
    {
        "Ammo Module - Nano-Generators - Rockets"; 1; 0;
        "Allows the turret to slowly generate rockets";
    };
    {
        "Ammo Module - Nano-Generators - Cells"; 1; 0;
        "Allows the turret to slowly generate cells";
    };
    
    // Special/Unique Weapons
    {
        "Special Weapon Module - Self-Destruct"; 0; 0;
        "Destroys the turret, but creates a devastating explosion";
        "Upgrades increase explosion radius and damage";
        "Issuing this command will trigger the self-destruct sequence";
    };
    
    // --------------------------------------------------
    // Armor
    // 
    
    // Plating
    {
        "Armor Plating - Reinforcement"; 0; 0;
        "Reinforce the plating of the turret, allowing it to take more damage";
        "Upgrades Increase the maximum health of the turret";
    };
    {
        "Armor Plating - Melee"; 0; 0;
        "Plating which protects against melee damage";
        "Upgrades increase protection amount";
    };
    {
        "Armor Plating - Bullet"; 0; 0;
        "Plating which protects against bullet damage";
        "Upgrades increase protection amount";
    };
    {
        "Armor Plating - Fire"; 0; 0;
        "Plating which protects against fire damage";
        "Upgrades increase protection amount";
    };
    {
        "Armor Plating - Plasma"; 0; 0;
        "Plating which protects against plasma damage";
        "Upgrades increase protection amount";
    };
    {
        "Armor Plating - Blast"; 0; 0;
        "Plating which protects against blast damage";
    };
    
    // Modules
    {
        "Armor Module - Projectile Reflection"; 0; 0;
        "Reflects projectiles fired at the turret";
        "Upgrades improve the abilities of the reflection";
    };
    {
        "Armor Module - Repair Nanites"; 0; 0;
        "Slowly Repairs the health of the turret";
        "Upgrades increase repair speed";
    };
    {
        "Armor Module - Phase Inverter"; 0; 0;
        "Randomly shifts the turret in and out of visibility";
        "Upgrades increase the time that the turret can stay invisible";
    };
    
    // --------------------------------------------------
    // Assist
    // 
    
    {
        "Assist Module - Health Injector"; 0; 0;
        "Injects you with some health if you are near death";
        "Upgrades increase injection chance";
    };
    {
        "Assist Module - Armor Repair Nanites"; 0; 0;
        "Slowly repairs your armor";
        "Upgrades increase repair speed";
    };
    {
        "Assist Module - Augmentation Charge Transfer Bus"; 0; 0;
        "Slowly recharges your augmentation battery";
        "Upgrades increase charge speed";
    };
    {
        "Assist Module - Shield Charge Transfer Bus"; 0; 0;
        "Slowly recharges your shield";
        "Upgrades increase charge speed";
    };
    {
        "Assist Module - Auto-Injector"; 0; 0;
        "Turret can inject you with a random cocktail of combat-enhancing drugs";
        nullptr;
        "Issuing this command will trigger an injection";
    };
    {
        "Assist Module - Auto-Injector - Type"; 0; 0;
        "Determines the type of drugs you will be injected with";
        "Upgrade allows powerups to be injected";
    };
    {
        "Assist Module - Auto-Injector - Amount"; 0; 0;
        "Determines the amount of drugs you will be injected with";
    };
    {
        "Assist Module - Auto-Injector - Potency"; 0; 0;
        "Determines the potency of the drugs you will be injected with";
    };
    {
        "Assist Module - Emergency Teleportation System"; 0; 0;
        "The turret will automatically teleport you out of danger under certain conditions";
    };
    {
        "Assist Module - Team Unit"; 0; 0;
        "Allows other assist modules to be used on teammates around you";
    };
    
    // --------------------------------------------------
    // Sensors
    // 
    
    {
        "Sensors - Calibration Speed"; 0; 0;
        "Increases the speed and reliability of the turret's sensors";
        "Upgrades increase the speed of all sensor-based activities";
    };
    
    // Item Finder
    {
        "Sensors Module - Item Finder"; 0; 0;
        "Calibrates the sensors to allow the turret to find different types of items";
    };
    {
        "Sensors Module - Item Finder - Money"; 0; 0;
        "Allows the sensors to detect and locate money";
        "Upgrades increase the amount of money that can be found";
        "Issuing this command will start the item finder, searching for money";
    };
    {
        "Sensors Module - Item Finder - Weapons"; 0; 0;
        "Allows the sensors to detect and locate weapons";
        "Upgrades increase the rarity of weapons which can be found";
        "Issuing this command will start the item finder, searching for weapons";
    };
    {
        "Sensors Module - Item Finder - Ammo"; 0; 0;
        "Allows the sensors to detect and locate ammo";
        "Upgrade allows larger ammo to be found";
        "Issuing this command will start the item finder, searching for ammo";
    };
    {
        "Sensors Module - Item Finder - Armor"; 0; 0;
        "Allows the sensors to detect and locate Armor";
        "Upgrades increase the rarity of armor which can be found";
        "Issuing this command will start the item finder, searching for armor";
    };
    {
        "Sensors Module - Item Finder - Powerups"; 0; 0;
        "Allows the sensors to detect and locate powerups";
        "Issuing this command will start the item finder, searching for powerups";
    };
    {
        "Sensors Module - Item Finder - Stims"; 0; 0;
        "Allows the sensors to detect and locate stims";
        "Upgrade allows stim packages to be found";
        "Issuing this command will start the item finder, searching for stims";
    };
    {
        "Sensors Module - Item Finder - Rare Items"; 0; 0;
        "Allows the sensors to detect and locate rare items";
        "Upgrades increase the chance of a rare item being found";
        "Issuing this command will start the item finder, searching for rare items";
    };
    
    // --------------------------------------------------
    // Commands
    // 
    
    {
        "Command Module - Idle"; 0; 0;
        "Allows you to command the turret to wait at it's current location";
        nullptr;
        "Issuing this command will tell the turret to wait";
    };
    {
        "Command Module - Wander"; 0; 0;
        "Allows you to command the turret to wander around it's current location";
        nullptr;
        "Issuing this command will tell the turret to wander";
    };
    {
        "Command Module - Orbit"; 0; 0;
        "Allows you to command the turret to around your location";
        nullptr;
        "Issuing this command will tell the turret to orbit";
    };
    {
        "Command Module - Target"; 0; 0;
        "Allows you to command the turret to attack your current target";
        nullptr;
        "Issuing this command will tell the turret to attack your current target";
    };
    {
        "Command Module - Control"; 0; 0;
        "Allows you to remotely control the turret";
        nullptr;
        "Issuing this command will switch your control over to the turret";
    };

    // --------------------------------------------------
    // Battery
    // 
    
    {
        "Battery - Capacity"; 10; 0;
        "Increases the capacity of the turret's battery";
    };
    
    // Generators
    {
        "Generator - Kinetic"; 0; 0;
        "Charges the turret's battery based on movement";
    };
    {
        "Generator - Illumination"; 0; 0;
        "Charges the turret's battery based on light level";
    };
    {
        "Generator - Force"; 0; 0;
        "Charges the turret's battery from bullet and melee based damage";
    };
    {
        "Generator - Thermal"; 0; 0;
        "Charges the turret's battery from fire based damage";
    };
    {
        "Generator - Plasma"; 0; 0;
        "Charges the turret's battery from plasma based damage";
    };
    {
        "Generator - Nuclear"; 0; 0;
        "Charges the turret's battery from toxicity and radiation based damage";
    };
    
    // --------------------------------------------------
    // Hardware
    // 
    
    {
        "Hardware - Battery Charge Bus"; 0; 0;
        "Decreases the time it takes for the turret's battery to be recharged when sent back to the Outpost";
    };
    {
        "Hardware - Build Quality"; 0; 0;
        "Decreases the parts it takes to repair the turret";
    };
    {
        "Hardware - Parts Optimization"; 0; 0;
        "Decreases the time it takes to repair the turret";
    };
    {
        "Hardware - Specification Optimization"; 0; 0;
        "Decreases the time it takes to upgrade the turret";
    };
};

script void TurretLoop() enter
{
    // Level Entry - Spawn Turret if it's active
    if (Player.Turret.Init && Player.Turret.Active)
    {
        if (GetCVar("drpg_debug"))
            Log("\cdDEBUG: \c-Turret was active, Respawning...\n");
        TurretSpawn();
    };
    
    Start:
    
    if (Player.Turret.Upgrade[TU_BUILD] && !Player.Turret.Init)
    {
        // Spawn the Turret
        TurretSpawn();
        
        // Initial charge
        Player.Turret.Battery = TURRET_BATTERY_CHARGE;
        
        // Offsets
        Player.Turret.AngleOffset = -0.25;
        Player.Turret.DistanceOffset = 48;
        
        // Nametag
        SetActorPropertyString(Player.Turret.TID, APROP_Nametag, StrParam("%N\c-'s Turret\n", PlayerNumber() + 1));
        
        // Initial levels
        Player.Turret.Upgrade[TU_WEAPON_BULLET_CAPACITY] = 1;
        Player.Turret.Upgrade[TU_WEAPON_PELLET_CAPACITY] = 1;
        Player.Turret.Upgrade[TU_WEAPON_ROCKET_CAPACITY] = 1;
        Player.Turret.Upgrade[TU_WEAPON_PLASMA_CAPACITY] = 1;
        Player.Turret.Upgrade[TU_WEAPON_RAILGUN_CAPACITY] = 1;
        Player.Turret.Upgrade[TU_BATTERY_CAPACITY] = 1;
        Player.Turret.Weapon = TW_NONE;
        
        // Set Active and TID
        Player.Turret.Init = true;
        Player.Turret.Active = true;
    };
    
    while (Player.Turret.Active)
    {
        // Despawn the turret if itself or the owning player dies
        if (GetActorProperty(Player.TID, APROP_Health) <= 0 || GetActorProperty(Player.Turret.TID, APROP_Health) <= 0)
            TurretDespawn();
        
        // Offset
        fixed Angle = GetActorAngle(0) + Player.Turret.AngleOffset;
        fixed X = GetActorX(0) + Cos(Angle) * Player.Turret.DistanceOffset;
        fixed Y = GetActorY(0) + Sin(Angle) * Player.Turret.DistanceOffset;
        fixed Z = GetActorZ(0) + 32.0;
        
        // Set Position
        SetActorPosition(Player.Turret.TID, X, Y, Z, false);
        
        // Drain Battery
        if (Player.Turret.Battery > 0 && (Timer() % 35) == 0)
            Player.Turret.Battery--;
        
        // Battery is drained
        if (Player.Turret.Battery <= 0)
            TurretDespawn();
        
        // Weapons
        Player.Turret.BulletAmmoMax = 200 * Player.Turret.Upgrade[TU_WEAPON_BULLET_CAPACITY];
        Player.Turret.ShellAmmoMax = 50 * Player.Turret.Upgrade[TU_WEAPON_PELLET_CAPACITY];
        Player.Turret.RocketAmmoMax = 50 * Player.Turret.Upgrade[TU_WEAPON_ROCKET_CAPACITY];
        Player.Turret.PlasmaAmmoMax = 300 * Player.Turret.Upgrade[TU_WEAPON_PLASMA_CAPACITY];
        Player.Turret.RailAmmoMax = 10 * Player.Turret.Upgrade[TU_WEAPON_RAILGUN_CAPACITY];
        Player.Turret.BatteryMax = TURRET_BATTERY_CHARGE * Player.Turret.Upgrade[TU_BATTERY_CAPACITY];
        
        // Nano Ammo Generators
        if (Player.Turret.Upgrade[TU_AMMO_NANOGEN] > 0 && (Timer() % (35 * (15 - Player.Turret.Upgrade[TU_AMMO_NANOGEN]))) == 0)
        {
            if (Player.Turret.Upgrade[TU_AMMO_NANOGEN_BULLET] && Player.Turret.BulletAmmo < Player.Turret.BulletAmmoMax)
                Player.Turret.BulletAmmo++;
            if (Player.Turret.Upgrade[TU_AMMO_NANOGEN_SHELL] && Player.Turret.ShellAmmo < Player.Turret.ShellAmmoMax)
                Player.Turret.ShellAmmo++;
            if (Player.Turret.Upgrade[TU_AMMO_NANOGEN_ROCKET] && Player.Turret.RocketAmmo < Player.Turret.RocketAmmoMax)
                Player.Turret.RocketAmmo++;
            if (Player.Turret.Upgrade[TU_AMMO_NANOGEN_CELL] && Player.Turret.PlasmaAmmo < Player.Turret.PlasmaAmmoMax)
                Player.Turret.PlasmaAmmo++;
            if (Player.Turret.Upgrade[TU_AMMO_NANOGEN_CELL] && Player.Turret.RailAmmo < Player.Turret.RailAmmoMax)
                Player.Turret.RailAmmo++;
        };
        
        // Pass info to uservars
        TurretPassVars();
        
        Delay(1);
    };
    
    Delay(1);
    goto Start;
};

acscript void TurretInit()
{
    int TempTID = UniqueTID();
    int MasterTID = GetActorProperty(0, APROP_MasterTID);
    
    Thing_ChangeTID(0, TempTID);
    SetActivator(MasterTID);
    Thing_ChangeTID(TempTID, Player.Turret.TID);
    
    Player.Turret.Active = true;
};

acscript void TurretMenu()
{
    // You don't have a turret
    if (!Player.Turret.Init)
    {
        PrintError("You haven't built a turret");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    Player.Turret.MenuOpen = true;
    ActivatorSound("menu/click", 127);
    
    // Menu Loop
    while (Player.Turret.MenuOpen)
    {
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        
        // Input
        if (Buttons & BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.Turret.MenuOpen = false;
        };
        
        Delay(1);
    };
};

acscript void TurretSetOffset(int Angle, int DistanceOffset)
{
    Player.Turret.AngleOffset += (fixed)Angle / 100.0;
    Player.Turret.DistanceOffset += (fixed)DistanceOffset;
};

acscript void TurretUseAmmo(int Type)
{
    SetActivator(GetActorProperty(0, APROP_MasterTID)); // Transfer from Turret to Player
    
    if (Type == TW_BULLET)
        Player.Turret.BulletAmmo--
    else if (Type == TW_PELLET)
        Player.Turret.ShellAmmo--
    else if (Type == TW_ROCKET)
        Player.Turret.RocketAmmo--
    else if (Type == TW_PLASMA)
        Player.Turret.PlasmaAmmo--
    else if (Type == TW_RAILGUN)
        Player.Turret.RailAmmo--;
};

acscript int TurretGetProjectileDamage(int Type)
{
    SetActivator(GetActorProperty(0, APROP_TargetTID)); // Transfer from missile to Turret
    SetActivator(GetActorProperty(0, APROP_MasterTID)); // Transfer from Turret to Player
    
    if (Type == TP_ROCKET)
        return (100 * (Player.Turret.Upgrade[TU_WEAPON_ROCKET_DAMAGE] + 1))
    else if (Type == TP_PLASMA)
        return (10 * (Player.Turret.Upgrade[TU_WEAPON_PLASMA_DAMAGE] + 1));
    
    return 0;
};

acscript int TurretGetProjectileProperty(int Type)
{
    SetActivator(GetActorProperty(0, APROP_TargetTID)); // Transfer from missile to Turret
    SetActivator(GetActorProperty(0, APROP_MasterTID)); // Transfer from Turret to Player
    
    if (Type == TP_ROCKET)
        return Player.Turret.Upgrade[TU_WEAPON_ROCKET_SEEKING];
    
    return 0;
};

function void BuildTurretData()
{
};

function void TurretCommand(int Index)
{
    // Don't issue the command if you don't have the upgrade yet
    if (!Player.Turret.Upgrade[Index])
    {
        ActivatorSound("menu/error", 127);
        PrintError("You don't have this upgrade yet");
        return;
    };
    
    if (Index == TU_BUILD)
        if (Player.Turret.Active)
            TurretDespawn()
        else
            TurretSpawn();
    
    if (Index == TU_WEAPON_BULLET)
    {
        if (Player.Turret.Weapon != TW_BULLET)
        {
            Player.Turret.Weapon = TW_BULLET;
            ActivatorSound("menu/click", 127);
        }
        else if (Player.Turret.BulletAmmo < Player.Turret.BulletAmmoMax)
        {
            if (CheckInventory("Clip") < 50)
            {
                ActivatorSound("menu/error", 127);
                PrintError("You need at least \ca50 Bullets\c- to load into the turret");
            }
            else
            {
                if (Player.Turret.BulletAmmo + 50 > Player.Turret.BulletAmmoMax)
                {
                    int Amount = Player.Turret.BulletAmmoMax - Player.Turret.BulletAmmo;
                    Player.Turret.BulletAmmo += Amount;
                    TakeInventory("Clip", Amount);
                }
                else
                {
                    Player.Turret.BulletAmmo += 50;
                    TakeInventory("Clip", 50);
                };
            };
        };
    };

    if (Index == TU_WEAPON_PELLET)
    {
        if (Player.Turret.Weapon != TW_PELLET)
        {
            Player.Turret.Weapon = TW_PELLET;
            ActivatorSound("menu/click", 127);
        }
        else if (Player.Turret.ShellAmmo < Player.Turret.ShellAmmoMax)
        {
            if (CheckInventory("Shell") < 20)
            {
                ActivatorSound("menu/error", 127);
                PrintError("You need at least \ci20 Shells\c- to load into the turret");
            }
            else
            {
                if (Player.Turret.ShellAmmo + 20 > Player.Turret.ShellAmmoMax)
                {
                    int Amount = Player.Turret.ShellAmmoMax - Player.Turret.ShellAmmo;
                    Player.Turret.ShellAmmo += Amount;
                    TakeInventory("Shell", Amount);
                }
                else
                {
                    Player.Turret.ShellAmmo += 20;
                    TakeInventory("Shell", 20);
                };
            };
        };
    };

    if (Index == TU_WEAPON_ROCKET)
    {
        if (Player.Turret.Weapon != TW_ROCKET)
        {
            Player.Turret.Weapon = TW_ROCKET;
            ActivatorSound("menu/click", 127);
        }
        else if (Player.Turret.RocketAmmo < Player.Turret.RocketAmmoMax)
        {
            if (CheckInventory("RocketAmmo") < 5)
            {
                ActivatorSound("menu/error", 127);
                PrintError("You need at least \cc5 Rockets\c- to load into the turret");
            }
            else
            {
                if (Player.Turret.RocketAmmo + 5 > Player.Turret.RocketAmmoMax)
                {
                    int Amount = Player.Turret.RocketAmmoMax - Player.Turret.RocketAmmo;
                    Player.Turret.RocketAmmo += Amount;
                    TakeInventory("RocketAmmo", Amount);
                }
                else
                {
                    Player.Turret.RocketAmmo += 5;
                    TakeInventory("RocketAmmo", 5);
                };
            };
        };
    };

    if (Index == TU_WEAPON_PLASMA)
    {
        if (Player.Turret.Weapon != TW_PLASMA)
        {
            Player.Turret.Weapon = TW_PLASMA;
            ActivatorSound("menu/click", 127);
        }
        else if (Player.Turret.PlasmaAmmo < Player.Turret.PlasmaAmmoMax)
        {
            if (CheckInventory("Cell") < 100)
            {
                ActivatorSound("menu/error", 127);
                PrintError("You need at least \cd100 Cells\c- to load into the turret");
            }
            else
            {
                if (Player.Turret.PlasmaAmmo + 100 > Player.Turret.PlasmaAmmoMax)
                {
                    int Amount = Player.Turret.PlasmaAmmoMax - Player.Turret.PlasmaAmmo;
                    Player.Turret.PlasmaAmmo += Amount;
                    TakeInventory("Cell", Amount);
                }
                else
                {
                    Player.Turret.PlasmaAmmo += 100;
                    TakeInventory("Cell", 100);
                };
            };
        };
    };
    
    if (Index == TU_WEAPON_RAILGUN)
    {
        if (Player.Turret.Weapon != TW_RAILGUN)
        {
            Player.Turret.Weapon = TW_RAILGUN;
            ActivatorSound("menu/click", 127);
        }
        else if (Player.Turret.RailAmmo < Player.Turret.RailAmmoMax)
        {
            if (CheckInventory("Cell") < 50)
            {
                ActivatorSound("menu/error", 127);
                PrintError("You need at least \cd50 Cells\c- to load into the turret");
            }
            else
            {
                Player.Turret.RailAmmo++;
                TakeInventory("Cell", 50);
            };
        };
    };
};

function int TurretUpgradeCost(int Index)
{
    return (TurretUpgradeData[Index].Cost * (Player.Turret.Upgrade[Index] + 1));
};

function void TurretPassVars()
{
    // Master TID
    SetUserVariable(Player.Turret.TID, "user_master", Player.TID);
    
    // Upgrade info
    for (int i = 0; i < MAX_UPGRADES; i++)
        SetUserArray(Player.Turret.TID, "user_upgrade", i, Player.Turret.Upgrade[i]);
    
    // Weapon Type
    SetUserVariable(Player.Turret.TID, "user_weapon", Player.Turret.Weapon);
    
    // Bullet
    SetUserVariable(Player.Turret.TID, "user_bullet_damage", Player.Turret.Upgrade[TU_WEAPON_BULLET_DAMAGE]);
    SetUserVariable(Player.Turret.TID, "user_bullet_rof", Player.Turret.Upgrade[TU_WEAPON_BULLET_ROF]);
    
    // Pellet
    SetUserVariable(Player.Turret.TID, "user_pellet_damage", Player.Turret.Upgrade[TU_WEAPON_PELLET_DAMAGE]);
    SetUserVariable(Player.Turret.TID, "user_pellet_rof", Player.Turret.Upgrade[TU_WEAPON_PELLET_ROF]);
    SetUserVariable(Player.Turret.TID, "user_pellet_spread", Player.Turret.Upgrade[TU_WEAPON_PELLET_SPREAD]);
    SetUserVariable(Player.Turret.TID, "user_pellet_amount", Player.Turret.Upgrade[TU_WEAPON_PELLET_AMOUNT]);
    
    // Rocket
    SetUserVariable(Player.Turret.TID, "user_rocket_rof", Player.Turret.Upgrade[TU_WEAPON_ROCKET_ROF]);
    
    // Plasma
    SetUserVariable(Player.Turret.TID, "user_plasma_rof", Player.Turret.Upgrade[TU_WEAPON_PLASMA_ROF]);
    
    // Railgun
    SetUserVariable(Player.Turret.TID, "user_railgun_damage", Player.Turret.Upgrade[TU_WEAPON_RAILGUN_DAMAGE]);
    SetUserVariable(Player.Turret.TID, "user_railgun_rof", Player.Turret.Upgrade[TU_WEAPON_RAILGUN_ROF]);
    SetUserVariable(Player.Turret.TID, "user_railgun_ripping", Player.Turret.Upgrade[TU_WEAPON_RAILGUN_RIPPING] * 2);
    
    // Ammo
    SetUserVariable(Player.Turret.TID, "user_ammo_bullet", Player.Turret.BulletAmmo);
    SetUserVariable(Player.Turret.TID, "user_ammo_shell", Player.Turret.ShellAmmo);
    SetUserVariable(Player.Turret.TID, "user_ammo_rocket", Player.Turret.RocketAmmo);
    SetUserVariable(Player.Turret.TID, "user_ammo_plasma", Player.Turret.PlasmaAmmo);
    SetUserVariable(Player.Turret.TID, "user_ammo_rail", Player.Turret.RailAmmo);
};

function void TurretSpawn()
{
    int TID = UniqueTID();
    
    GiveInventory("DRPGPortableTurretSpawner", 1);
    SpawnForced("TeleportFog", GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
    
    Player.Turret.TID = TID;
};

function void TurretDespawn()
{
    SpawnForced("TeleportFog", GetActorX(Player.Turret.TID), GetActorY(Player.Turret.TID), GetActorZ(Player.Turret.TID), 0, 0);
    Thing_Remove(Player.Turret.TID);
    
    Player.Turret.Active = false;
};

acscript void GiveTurret()
{
    Player.Turret.Upgrade[TU_BUILD] = 1;
};
