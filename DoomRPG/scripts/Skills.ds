#include "Arena.dh"
#include "Globals.dh"
#include "Menu.dh"
#include "Outpost.dh"
#include "RPG.dh"
#include "Shop.dh"
#include "SkillData.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Utils.dh"

bool Overdrive;
int BulletTimeMode;
int BulletTimeTimer;

function void InitSkills()
{
	int Index;
	
	// --------------------------------------------------
	// HEALING
	
	Skills[0][Index].Name = "Heal";
	Skills[0][Index].MaxLevel = 4;
	Skills[0][Index].Cost = 25;
	Skills[0][Index].Description[0] = "Recover 25% HP";
	Skills[0][Index].Description[1] = "Recover 50% HP";
	Skills[0][Index].Description[2] = "Recover 75% HP";
	Skills[0][Index].Description[3] = "Recover All HP";
	Index++;
	
	Skills[0][Index].Name = "Heal Summons";
	Skills[0][Index].MaxLevel = 1;
	Skills[0][Index].Cost = 100;
	Skills[0][Index].Description[0] = "Summons recover all their HP";
	Index++;
	
	Skills[0][Index].Name = "Heal Team";
	Skills[0][Index].MaxLevel = 4;
	Skills[0][Index].Cost = 50;
	Skills[0][Index].Description[0] = "Heals you and your teammates for 25% HP";
	Skills[0][Index].Description[1] = "Heals you and your teammates for 50% HP";
	Skills[0][Index].Description[2] = "Heals you and your teammates for 75% HP";
	Skills[0][Index].Description[3] = "Heals you and your teammates for all HP";
	Index++;

	Skills[0][Index].Name = "Life Leech";
	Skills[0][Index].MaxLevel = 5;
	Skills[0][Index].Cost = 100;
	Skills[0][Index].Description[0] = "Steal 10% of the target's current HP";
	Skills[0][Index].Description[1] = "Steal 20% of the target's current HP";
	Skills[0][Index].Description[2] = "Steal 30% of the target's current HP";
	Skills[0][Index].Description[3] = "Steal 40% of the target's current HP";
	Skills[0][Index].Description[4] = "Steal 50% of the target's current HP";
	Index++;

	Skills[0][Index].Name = "Repair Armor";
	Skills[0][Index].MaxLevel = 4;
	Skills[0][Index].Cost = 100;
	Skills[0][Index].Description[0] = "Repair 25% Armor";
	Skills[0][Index].Description[1] = "Repair 50% Armor";
	Skills[0][Index].Description[2] = "Repair 75% Armor";
	Skills[0][Index].Description[3] = "Repair All Armor";
	Index++;
	
	Skills[0][Index].Name = "Player Teleport";
	Skills[0][Index].MaxLevel = 1;
	Skills[0][Index].Cost = 50;
	Skills[0][Index].Description[0] = "Teleport to another Player";
	Index = 0;
	
	// --------------------------------------------------
	// POWERUPS
	
	Skills[1][Index].Name = "Invulnerability";
	Skills[1][Index].MaxLevel = 2;
	Skills[1][Index].Cost = 250;
	Skills[1][Index].Description[0] = "Invulnerability to all attacks\n\cd(30 Sec)";
	Skills[1][Index].Description[1] = "Invulnerability to all attacks\nProjectiles are reflected back at enemies\n\cd(30 Sec)";
	Index++;

	Skills[1][Index].Name = "Invisibility";
	Skills[1][Index].MaxLevel = 2;
	Skills[1][Index].Cost = 100;
	Skills[1][Index].Description[0] = "Makes you invisible to enemies\n\cd(30 sec)";
	Skills[1][Index].Description[1] = "Makes you invisible to enemies\nSome projectiles pass through you\n\cd(30 sec)";
	Index++;

	Skills[1][Index].Name = "Time Freeze";
	Skills[1][Index].MaxLevel = 2;
	Skills[1][Index].Cost = 200;
	Skills[1][Index].Description[0] = "Stutter Time";
	Skills[1][Index].Description[1] = "Freeze Time";
	Index++;

	Skills[1][Index].Name = "Iron Feet";
	Skills[1][Index].MaxLevel = 1;
	Skills[1][Index].Cost = 100;
	Skills[1][Index].Description[0] = "Protection from Damage Floors";
	Index++;

	Skills[1][Index].Name = "Night Vision";
	Skills[1][Index].MaxLevel = 1;
	Skills[1][Index].Cost = 200;
	Skills[1][Index].Description[0] = "Allows you to see in the dark";
	Index++;

	Skills[1][Index].Name = "Berserk";
	Skills[1][Index].MaxLevel = 1;
	Skills[1][Index].Cost = 200;
	Skills[1][Index].Description[0] = "Full Health\nIncreased Melee Damage";
	Index++;

	Skills[1][Index].Name = "Mental Mapping";
	Skills[1][Index].MaxLevel = 1;
	Skills[1][Index].Cost = 200;
	Skills[1][Index].Description[0] = "Full Map\nItem/Enemy Tracking";
	Index++;

	Skills[1][Index].Name = "Weapon Drop";
	Skills[1][Index].MaxLevel = 7;
	Skills[1][Index].Cost = 200;
	Skills[1][Index].Description[0] = "Drops a Weapon at your location\n\cjPistol";
	Skills[1][Index].Description[1] = "Drops a Weapon at your location\n\cjShotgun";
	Skills[1][Index].Description[2] = "Drops a Weapon at your location\n\cjSuper Shotgun";
	Skills[1][Index].Description[3] = "Drops a Weapon at your location\n\cjChaingun";
	Skills[1][Index].Description[4] = "Drops a Weapon at your location\n\cjRocket Launcher";
	Skills[1][Index].Description[5] = "Drops a Weapon at your location\n\cjPlasma Rifle";
	Skills[1][Index].Description[6] = "Drops a Weapon at your location\n\cjBFG9000";
	Index++;
	
	Skills[1][Index].Name = "Ammo Drop";
	Skills[1][Index].MaxLevel = 3;
	Skills[1][Index].Cost = 50;
	Skills[1][Index].Description[0] = "Drops a Small Backpack full of ammo at your location";
	Skills[1][Index].Description[1] = "Drops a Backpack full of ammo at your location";
	Skills[1][Index].Description[2] = "Drops a Large Backpack full of ammo at your location";
	Index = 0;

	// --------------------------------------------------
	// AURAS
	
	Skills[2][Index].Name = "Red Aura";
    Skills[2][Index].Icon = "Aura1";
	Skills[2][Index].MaxLevel = 3;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "2x Damage";
	Skills[2][Index].Description[1] = "4x Damage";
	Skills[2][Index].Description[2] = "4x Damage\nInfinite Ammo";
	Index++;

	Skills[2][Index].Name = "Green Aura";
    Skills[2][Index].Icon = "Aura2";
	Skills[2][Index].MaxLevel = 3;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "-25% Damage Taken";
	Skills[2][Index].Description[1] = "-50% Damage Taken";
	Skills[2][Index].Description[2] = "-75% Damage Taken\nDamage Floor Protection";
	Index++;

	Skills[2][Index].Name = "White Aura";
    Skills[2][Index].Icon = "Aura3";
	Skills[2][Index].MaxLevel = 5;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "Double Combo";
	Skills[2][Index].Description[1] = "Double Combo\nConstant Combo";
	Skills[2][Index].Description[2] = "Double Combo\nConstant Combo\n2x XP Per Kill";
	Skills[2][Index].Description[3] = "Double Combo\nConstant Combo\n2x XP Per Kill\nSlow XP Gain";
	Skills[2][Index].Description[4] = "Double Combo\nConstant Combo\n2x XP Per Kill\nFast XP Gain";
	Index++;

	Skills[2][Index].Name = "Pink Aura";
    Skills[2][Index].Icon = "Aura4";
	Skills[2][Index].MaxLevel = 2;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "Drain Enemy HP";
	Skills[2][Index].Description[1] = "Drain Enemy HP\n2x Max Health";
	Index++;

	Skills[2][Index].Name = "Blue Aura";
    Skills[2][Index].Icon = "Aura5";
	Skills[2][Index].MaxLevel = 3;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "25% Skill Cost Reduction";
	Skills[2][Index].Description[1] = "50% Skill Cost Reduction";
	Skills[2][Index].Description[2] = "75% Skill Cost Reduction";
	Index++;

	Skills[2][Index].Name = "Purple Aura";
    Skills[2][Index].Icon = "Aura6";
	Skills[2][Index].MaxLevel = 4;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "2x HP/EP Regen Amount";
	Skills[2][Index].Description[1] = "3x HP/EP Regen Amount";
	Skills[2][Index].Description[2] = "4x HP/EP Regen Amount";
	Skills[2][Index].Description[3] = "4x HP/EP Regen Amount\n-2x HP/EP Regen Timers";
	Index++;

	Skills[2][Index].Name = "Orange Aura";
    Skills[2][Index].Icon = "Aura7";
	Skills[2][Index].MaxLevel = 3;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "Double Movement Speed";
	Skills[2][Index].Description[1] = "Double Movement Speed\nDouble Jump Height";
	Skills[2][Index].Description[2] = "Double Movement Speed\nDouble Jump Height\nDouble Firing Speed";
	Index++;

	Skills[2][Index].Name = "Dark Blue Aura";
    Skills[2][Index].Icon = "Aura8";
	Skills[2][Index].MaxLevel = 6;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "Clip Regen";
	Skills[2][Index].Description[1] = "Clip Regen\nShell Regen";
	Skills[2][Index].Description[2] = "Clip Regen\nShell Regen\nRocket Regen";
	Skills[2][Index].Description[3] = "Clip Regen\nShell Regen\nRocket Regen\nCell Regen";
	Skills[2][Index].Description[4] = "Clip Regen\nShell Regen\nRocket Regen\nCell Regen\n2x Regen Speed";
	Skills[2][Index].Description[5] = "Clip Regen\nShell Regen\nRocket Regen\nCell Regen\n4x Regen Speed";
	Index++;

	Skills[2][Index].Name = "Yellow Aura";
    Skills[2][Index].Icon = "Aura9";
	Skills[2][Index].MaxLevel = 5;
	Skills[2][Index].Cost = 100;
	Skills[2][Index].Description[0] = "Slow Money Generation\n1.25x Drop Chances";
	Skills[2][Index].Description[1] = "Medium Money Generation\n1.5x Drop Chances";
	Skills[2][Index].Description[2] = "Fast Money Generation\n2x Drop Chances";
	Skills[2][Index].Description[3] = "Very Fast Money Generation\n4x Drop Chances";
	Skills[2][Index].Description[4] = "Mega Money Generation\n8x Drop Chances";
	Index = 0;

	// --------------------------------------------------
	// ATTACK
	
	Skills[3][Index].Name = "Weaken";
	Skills[3][Index].MaxLevel = 2;
	Skills[3][Index].Cost = 200;
	Skills[3][Index].Description[0] = "Weakens an enemy, halving their stats";
	Skills[3][Index].Description[1] = "Weakens an enemy, halving their stats and destroying their Aura";
	Index++;

	Skills[3][Index].Name = "Translocate";
	Skills[3][Index].MaxLevel = 1;
	Skills[3][Index].Cost = 50;
	Skills[3][Index].Description[0] = "Teleports a monster to the beginning of the level";
	Index = 0;

	// --------------------------------------------------
	// SUMMONING
	
	Skills[4][Index].Name = "Summon Marine";
	Skills[4][Index].MaxLevel = 8;
	Skills[4][Index].Cost = 100;
	Skills[4][Index].Description[0] = "Summons a Marine to fight with you\n\cjPistol";
	Skills[4][Index].Description[1] = "Summons a Marine to fight with you\n\cjShotgun";
	Skills[4][Index].Description[2] = "Summons a Marine to fight with you\n\cjSuper Shotgun";
	Skills[4][Index].Description[3] = "Summons a Marine to fight with you\n\cjChaingun";
	Skills[4][Index].Description[4] = "Summons a Marine to fight with you\n\cjRocket Launcher";
	Skills[4][Index].Description[5] = "Summons a Marine to fight with you\n\cjPlasma Rifle";
	Skills[4][Index].Description[6] = "Summons a Marine to fight with you\n\cjRailgun";
	Skills[4][Index].Description[7] = "Summons a Marine to fight with you\n\cjBFG 9000";
	Index++;
	
	Skills[4][Index].Name = "Summon Zombieman";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 25;
	Skills[4][Index].Description[0] = "Summons a Zombieman to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Shotgun Guy";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 50;
	Skills[4][Index].Description[0] = "Summons a Shotgun Guy to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Chaingun Guy";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 75;
	Skills[4][Index].Description[0] = "Summons a Chaingun Guy to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Imp";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 75;
	Skills[4][Index].Description[0] = "Summons an Imp to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Demon";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 75;
	Skills[4][Index].Description[0] = "Summons a Demon to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Cacodemon";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 100;
	Skills[4][Index].Description[0] = "Summons a Cacodemon to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Hell Knight";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 150;
	Skills[4][Index].Description[0] = "Summons a Hell Knight to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Baron of Hell";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 200;
	Skills[4][Index].Description[0] = "Summons a Baron of Hell to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Lost Soul";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 100;
	Skills[4][Index].Description[0] = "Summons a Lost Soul to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Pain Elemental";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 500;
	Skills[4][Index].Description[0] = "Summons a Pain Elemental to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Revenant";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 500;
	Skills[4][Index].Description[0] = "Summons a Revenant to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Mancubus";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 500;
	Skills[4][Index].Description[0] = "Summons a Mancubus to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Arachnotron";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 500;
	Skills[4][Index].Description[0] = "Summons an Arachnotron to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Arch-Vile";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 750;
	Skills[4][Index].Description[0] = "Summons an Arch-Vile to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Cyberdemon";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 1000;
	Skills[4][Index].Description[0] = "Summons a Cyberdemon to fight with you";
	Index++;
	
	Skills[4][Index].Name = "Summon Spider Mastermind";
	Skills[4][Index].MaxLevel = 1;
	Skills[4][Index].Cost = 1000;
	Skills[4][Index].Description[0] = "Summons a Spider Mastermind to fight with you";
	Index = 0;

	// --------------------------------------------------
	// UTILITY

	Skills[5][Index].Name = "Breakdown Armor";
	Skills[5][Index].MaxLevel = 1;
	Skills[5][Index].Cost = 250;
	Skills[5][Index].Description[0] = "Breaks down your current Armor into Credits";
	Index++;

	Skills[5][Index].Name = "Force Wall";
	Skills[5][Index].MaxLevel = 2;
	Skills[5][Index].Cost = 100;
	Skills[5][Index].Description[0] = "Creates a small force wall in front of you to reflect projectiles";
	Skills[5][Index].Description[1] = "Creates a large force wall in front of you to reflect projectiles";
	Index++;

	Skills[5][Index].Name = "Rally";
	Skills[5][Index].MaxLevel = 1;
	Skills[5][Index].Cost = 0;
	Skills[5][Index].Description[0] = "Teleports your summoned monsters to you";
	Index++;

	Skills[5][Index].Name = "Unsummon";
	Skills[5][Index].MaxLevel = 2;
	Skills[5][Index].Cost = 0;
	Skills[5][Index].Description[0] = "Banishes all of the friendly creatures under your control";
	Skills[5][Index].Description[1] = "Banishes all of the friendly creatures under your control\nEach creature banished restores\n\cn25 EP";
	Index++;

	Skills[5][Index].Name = "Recall";
	Skills[5][Index].MaxLevel = 1;
	Skills[5][Index].Cost = 25;
	Skills[5][Index].Description[0] = "Brings you to the beginning of the level";
	Index++;

	Skills[5][Index].Name = "Wireless Locker";
	Skills[5][Index].MaxLevel = 16;
	Skills[5][Index].Cost = 0;
	Skills[5][Index].Description[0] = "Access the Locker System Wirelessly\n";
	Skills[5][Index].Description[1] = "Access the Locker System Wirelessly\n\cd5% Wireless Efficiency";
	Skills[5][Index].Description[2] = "Access the Locker System Wirelessly\n\cd10% Wireless Efficiency";
	Skills[5][Index].Description[3] = "Access the Locker System Wirelessly\n\cd15% Wireless Efficiency";
	Skills[5][Index].Description[4] = "Access the Locker System Wirelessly\n\cd20% Wireless Efficiency";
	Skills[5][Index].Description[5] = "Access the Locker System Wirelessly\n\cd25% Wireless Efficiency";
	Skills[5][Index].Description[6] = "Access the Locker System Wirelessly\n\cd30% Wireless Efficiency";
	Skills[5][Index].Description[7] = "Access the Locker System Wirelessly\n\cd35% Wireless Efficiency";
	Skills[5][Index].Description[8] = "Access the Locker System Wirelessly\n\cd40% Wireless Efficiency";
	Skills[5][Index].Description[9] = "Access the Locker System Wirelessly\n\cd45% Wireless Efficiency";
	Skills[5][Index].Description[10] = "Access the Locker System Wirelessly\n\cd50% Wireless Efficiency";
	Skills[5][Index].Description[11] = "Access the Locker System Wirelessly\n\cd55% Wireless Efficiency";
	Skills[5][Index].Description[12] = "Access the Locker System Wirelessly\n\cd60% Wireless Efficiency";
	Skills[5][Index].Description[13] = "Access the Locker System Wirelessly\n\cd65% Wireless Efficiency";
	Skills[5][Index].Description[14] = "Access the Locker System Wirelessly\n\cd70% Wireless Efficiency";
	Skills[5][Index].Description[15] = "Access the Locker System Wirelessly\n\cd75% Wireless Efficiency";
	Index++;

	Skills[5][Index].Name = "Transport";
	Skills[5][Index].Level = 1;
	Skills[5][Index].CurrentLevel = 1;
	Skills[5][Index].MaxLevel = 1;
	Skills[5][Index].Cost = 0;
	Skills[5][Index].Description[0] = "Brings you to the UAC Outpost\nUse in Outpost to return to current level";
	Index++;
};

function int ScaleEPCost(int Cost)
{
	if (!GetCVar("drpg_skill_costscale")) return Cost;

	switch (GameSkill())
	{
		case 1: Cost = Cost / 2; 		break;	// 0.5x
		case 2: Cost = Cost; 			break;	// 1.0x
		case 3: Cost = Cost * 3 / 2; 	break;	// 1.5x
		case 4: Cost = Cost * 2; 		break;	// 2.0x
		case 5: Cost = Cost * 5 / 2; 	break;	// 2.5x
		case 6: Cost = Cost * 3; 		break;	// 3x
	};
	
	return Cost;
};

// Skill Wheel
acscript SkillWheel() net
{
    
    int Selected = -1;
    int LastSelected = -1;
    bool Opened = false;
    
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    while (true)
    {
        // Terminate if you're in a menu that isn't the Skills menu
        if ((Player.InMenu && Player.Menu != 3) || Player.InShop || Player.OutpostMenu > 0)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            return;
        };
        
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        Skill *CurrentSkill;
        
        // Cancel
        if (Buttons == BT_SPEED)
            break;
        
        // Selection
        if (Buttons == BT_FORWARD)
            Selected = 0
        else if (Buttons == (BT_FORWARD | BT_MOVERIGHT))
            Selected = 1
        else if (Buttons == BT_MOVERIGHT)
            Selected = 2
        else if (Buttons == (BT_MOVERIGHT | BT_BACK))
            Selected = 3
        else if (Buttons == BT_BACK)
            Selected = 4
        else if (Buttons == (BT_BACK | BT_MOVELEFT))
            Selected = 5
        else if (Buttons == BT_MOVELEFT)
            Selected = 6
        else if (Buttons == (BT_MOVELEFT | BT_FORWARD))
            Selected = 7
        else
            Selected = -1;
        
        // Set Skill
        if (Selected >= 0 && Player.SkillCatagory[Selected] != -1 && Player.SkillIndex[Selected] != -1)
            CurrentSkill = &Skills[Player.SkillCatagory[Selected]][Player.SkillIndex[Selected]]
        else
            CurrentSkill = nullptr;
        
        // Play sound
        if (Selected != LastSelected && Selected >= 0)
            ActivatorSound("menu/click", 127);
        
        LastSelected = Selected;
        
        // Draw Wheel
        int Radius = 96;
        SetHudSize(640, 480, false);
        if (!Opened)
            for (int i = 0; i <= Radius; i += 8)
            {
                for (int j = 0; j < MAX_SKILLKEYS; j++)
                {
                    fixed Angle = -0.25 + ((1.0 / MAX_SKILLKEYS) * j);
                    fixed X = 320.0 + (i * Cos(Angle));
                    fixed Y = 240.0 + (i * Sin(Angle));
                    
                    // Cursor
                    if (j == Selected)
                        PrintSprite("SelectBo", 0, (int)X, (int)Y, 0.05);
                    
                    // TODO: Icon
                    if (Player.SkillCatagory[j] != -1 && Player.SkillIndex[j] != -1)
                    {
                        if (StrLen(Skills[Player.SkillCatagory[j]][Player.SkillIndex[j]].Icon) == 0)
                            PrintSprite("SNone", 0, (int)X, (int)Y, 0.05)
                        else
                            PrintSprite(Skills[Player.SkillCatagory[j]][Player.SkillIndex[j]].Icon, 0, (int)X, (int)Y, 0.05);
                    };
                    
                    // Box
                    PrintSprite("ItemBox", 0, (int)X, (int)Y, 0.05);
                };
                
                if (i >= Radius)
                    Opened = true;
                
                Delay(1);
            };
        
        if (Opened)
            for (int i = 0; i < MAX_SKILLKEYS; i++)
            {
                fixed Angle = -0.25 + ((1.0 / MAX_SKILLKEYS) * i);
                fixed X = 320.0 + (Radius * Cos(Angle));
                fixed Y = 240.0 + (Radius * Sin(Angle));
                
                // Cursor
                if (i == Selected)
                    PrintSprite("SelectBo", 0, (int)X, (int)Y, 0.05);
                
                // Icon
                if (Player.SkillCatagory[i] != -1 && Player.SkillIndex[i] != -1)
                {
                    if (StrLen(Skills[Player.SkillCatagory[i]][Player.SkillIndex[i]].Icon) == 0)
                        PrintSpriteFade("SNone", WHEEL_ID + i, (int)X, (int)Y, 0.05, 1.0)
                    else
                        PrintSpriteFade(Skills[Player.SkillCatagory[i]][Player.SkillIndex[i]].Icon, WHEEL_ID + i, (int)X, (int)Y, 0.05, 1.0);
                };
                
                // Box
                PrintSpriteFade("ItemBox", WHEEL_ID + MAX_SKILLKEYS + i, (int)X, (int)Y, 0.05, 1.0);
            };
        
        // Skill Info
        if (CurrentSkill != nullptr)
        {
            int Cost = ScaleEPCost(CurrentSkill->Cost * CurrentSkill->CurrentLevel * Player.SkillCostMult);
            str CostColor = (Player.EP < Cost ? "\cg" : "\cv");
            str Info;
            
            // Build info string
            Info = StrParam("\cd%s\n\n\n", CurrentSkill->Name);
            Info = StrParam("%s\cjLevel: %d/%d\n\n", Info, CurrentSkill->CurrentLevel, CurrentSkill->Level);
            Info = StrParam("%s%s%d EP\n", Info, CostColor, Cost);
            
            // Display
            SetFont("SMALLFONT");
            SetHudClipRect(0, 0, 0, 0, 128);
            HudMessage("%s\n", Info, HUDMSG_FADEOUT, WHEEL_ID + (MAX_SKILLKEYS * 2), CR_WHITE, 320.4, 240.0, 0.05, 1.0);
            SetHudClipRect(0, 0, 0, 0, 0);
        };
        
        Delay(1);
    };
    
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
};

// Use Skill Script
acscript UseSkill(int Index) net
{
	// If you're dead, terminate
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	// Current Skill
	Skill *CurrentSkill = &Skills[Player.SkillCatagory[Index]][Player.SkillIndex[Index]];
    
    // Quickuse
	if (Index == -1)
        CurrentSkill = &Skills[Player.SkillPage][Player.MenuIndex];
	
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
	int EPCost = ScaleEPCost(CurrentSkill->Cost * CurrentSkill->CurrentLevel * Player.SkillCostMult);
	bool Success;
	
	// Overdrive?
	Overdrive = false;
	if (Buttons & BT_SPEED && (!Player.InMenu && !Player.InShop))
		Overdrive = true;
    
    // If you're in the Skills menu, assign the key to the selected skill
	if (Player.InMenu && Player.Menu == 3 && Index != -1)
	{
        // Remove the skill from this key
		if (Buttons & BT_SPEED)
		{
			ActivatorSound("menu/move", 127);
			Player.SkillCatagory[Index] = -1;
			Player.SkillIndex[Index] = -1;
			return;
		};
        
        // Can't assign two skills to the same key
		for (int i = 0; i < MAX_SKILLKEYS; i++)
			if (Player.SkillCatagory[i] == Player.SkillPage && Player.SkillIndex[i] == Player.MenuIndex)
			{
				ActivatorSound("menu/error", 127);
				return;
			};
		
        // Assign skill to this key
		ActivatorSound("menu/move", 127);
		Player.SkillCatagory[Index] = Player.SkillPage;
		Player.SkillIndex[Index] = Player.MenuIndex;
		return;
	};
	
	// If the key is unassigned, terminate
    if (Index != -1)
        if (Player.SkillCatagory[Index] == -1 || Player.SkillIndex[Index] == -1) return;

	// Overdriving an unlearnt skill will learn it
	if (Overdrive && CheckInventory("SkillToken") > 0 && CurrentSkill->Level == 0)
	{
		CurrentSkill->Level++;
		CurrentSkill->CurrentLevel++;
		TakeInventory("SkillToken", 1);
		FadeRange(0, 255, 255, 0.5, 0, 255, 255, 0.0, 0.5);
		return;
	};
	
	// Check if the Skill has been learned yet
	if (CurrentSkill->Level == 0)
	{
		SetFont("BIGFONT");
		HudMessage("You don't know this skill yet\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 1.0);
		ActivatorSound("skills/fail", 127);
		return;
	};

	// Can't use skills while burned out
	if (Player.EP < 0)
	{
		SetFont("BIGFONT");
		HudMessage("You can't use skills while burned out\n", HUDMSG_FADEOUT, 0, CR_BLUE, 0.5, 0.5, 2.0, 1.0);
		ActivatorSound("skills/fail", 127);
		return;
	};
	
	// Normal skills
	if (Player.EP >= EPCost || Overdrive)
	{
		switch ((Index == -1 ? Player.SkillPage : Player.SkillCatagory[Index]))
		{
			case 0: // Healing
				switch ((Index == -1 ? Player.MenuIndex : Player.SkillIndex[Index]))
				{
					case 0:		Success = Heal(1);											break; // Heal
					case 1:		Success = Heal(2);											break; // Heal Summons
					case 2:		Success = Heal(3);											break; // Heal Team
					case 3:		Success = LifeLeech();										break; // Life Leech
					case 4:		Success = Repair();											break; // Repair Armor
					case 5:		Success = PlayerTeleport();									break; // Player Teleport
				};
				break;
			
			case 1: // Powerups
				switch ((Index == -1 ? Player.MenuIndex : Player.SkillIndex[Index]))
				{
					case 0:		Success = Powerup(1);										break; // Invulnerability
					case 1:		Success = Powerup(2);										break; // Invisibility
					case 2:		Success = Powerup(3);										break; // Time Freeze
					case 3:		Success = Powerup(4);										break; // Iron Feet
					case 4:		Success = Powerup(5);										break; // Night Vision
					case 5:		Success = Powerup(6);										break; // Berserk
					case 6:		Success = Powerup(7);										break; // Mind Mapping
					case 7:		Success = Powerup(8);										break; // Drop Rune
					case 8:		Success = Powerup(9);										break; // Drop Ammo
				};
				break;
			
			case 2: // Auras
				ActivatorSound("skills/buff", 127);
				if (Player.SkillIndex[Index] == Player.Aura - 1)
					Player.AuraTimer += (1050 + Player.Energy * 5.25) * (1 + Player.AuraBonus)
				else
					Player.AuraTimer = (1050 + Player.Energy * 5.25) * (1 + Player.AuraBonus);
				switch ((Index == -1 ? Player.MenuIndex : Player.SkillIndex[Index]))
				{
					case 0:		Player.Aura = 1;											break; // Red Aura
					case 1:		Player.Aura = 2;											break; // Green Aura
					case 2:		Player.Aura = 3;											break; // White Aura
					case 3:		Player.Aura = 4;											break; // Pink Aura
					case 4:		Player.Aura = 5;											break; // Blue Aura
					case 5:		Player.Aura = 6;											break; // Purple Aura
					case 6:		Player.Aura = 7;											break; // Orange Aura
					case 7:		Player.Aura = 8;											break; // Dark Blue Aura
					case 8:		Player.Aura = 9;											break; // Yellow Aura
				};
				Success = true;
				break;
			
			case 3: // Attacks
				switch ((Index == -1 ? Player.MenuIndex : Player.SkillIndex[Index]))
				{
					case 0:		Success = Weaken();											break; // Weaken
					case 1:		Success = FireProjectile("TranslocateBall");				break; // Translocate
				};
				break;
			
			case 4: // Summoning
				switch ((Index == -1 ? Player.MenuIndex : Player.SkillIndex[Index]))
				{
					case 0:		Success = Summon(1);										break; // Summon Marine
					case 1:		Success = Summon(2);										break; // Summon Zombieman
					case 2:		Success = Summon(3);										break; // Summon Shotgun Guy
					case 3:		Success = Summon(4);										break; // Summon Chaingun Guy
					case 4:		Success = Summon(5);										break; // Summon Imp
					case 5:		Success = Summon(6);										break; // Summon Demon
					case 6:		Success = Summon(7);										break; // Summon Cacodemon
					case 7:		Success = Summon(8);										break; // Summon Hell Knight
					case 8:		Success = Summon(9);										break; // Summon Baron of Hell
					case 9:		Success = Summon(10);										break; // Summon Lost Soul
					case 10:	Success = Summon(11);										break; // Summon Pain Elemental
					case 11:	Success = Summon(12);										break; // Summon Revenant
					case 12:	Success = Summon(13);										break; // Summon Fatso
					case 13:	Success = Summon(14);										break; // Summon Arachnotron
					case 14:	Success = Summon(15);										break; // Summon Arch-Vile
					case 15:	Success = Summon(16);										break; // Summon Cyberdemon
					case 16:	Success = Summon(17);										break; // Summon Spider Mastermind
				};
				break;
				
			case 5: // Utility
				switch ((Index == -1 ? Player.MenuIndex : Player.SkillIndex[Index]))
				{
					case 0:		Success = BreakdownArmor();									break; // Breakdown Armor
					case 1:		Success = ForceWall();										break; // Force Wall
					case 2:		Success = Rally();											break; // Rally
					case 3:		Success = Unsummon();										break; // Unsummon
					case 4:		Success = Recall();											break; // Recall
					case 5:		Locker(true);												break; // Wireless Personal Locker
					case 6:		Transport();												break; // Transport
				};
				break;
		};
		
		if (Success)
			Player.EP -= EPCost;
	}
	else // Not enough EP
	{
		SetFont("BIGFONT");
		HudMessage("Not enough EP to use this skill!\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 1.0);
		ActivatorSound("skills/fail", 127);
	};
};

// Skill HUD Script
script DrawSkillHUD() enter
{
    Start:
	while (true)
	{
        // Don't draw if the hide skills while menu is open option is enabled
        if (GetCVar("drpg_menu_hideskills") && (Player.InMenu || Player.InShop || Player.OutpostMenu))
        {
            Delay(1);
            goto Start;
        };
        
		fixed X = GetCVarFixed("drpg_skill_x");
		fixed Y = GetCVarFixed("drpg_skill_y");
        
        for (int i = MAX_SKILLKEYS - 1; i >= 0; i--)
        {
            // If the skill key is blank, skip
            if (Player.SkillCatagory[i] == -1 || Player.SkillIndex[i] == -1) continue;
            
            // Current Skill
            Skill *CurrentSkill = &Skills[Player.SkillCatagory[i]][Player.SkillIndex[i]];
            
            int SkillCost = ScaleEPCost(CurrentSkill->Cost * CurrentSkill->CurrentLevel * Player.SkillCostMult);
            int Color = CR_GREEN;

            if (Player.EP < SkillCost)
                Color = CR_RED;
            
            if (CurrentSkill->Level == 0)
            {
                Color = CR_RED;
                
                HudMessage("%s [\cu%K\c-]\n", CurrentSkill->Name, StrParam("drpg_useskill_%d\n", i + 1),
                           HUDMSG_PLAIN, 0, Color,
                           X, Y, 0.05);
            }
            else
            {
                HudMessage("%s (%d/%d) [\cn%d\c-] [\cu%K\c-]\n",
                           CurrentSkill->Name,
                           CurrentSkill->CurrentLevel,
                           CurrentSkill->Level,
                           SkillCost, StrParam("drpg_useskill_%d\n", i + 1),
                           HUDMSG_PLAIN, 0, Color,
                           X, Y, 0.05);
            };
            
            Y -= 0.025;
        };
		
		Delay(1);
	};
};

// Heal
function bool Heal(int Type)
{
	int HealLevel = Skills[0][0].CurrentLevel;
	int HealTeamLevel = Skills[0][2].CurrentLevel;
	int HealAmount;
	
	// Calculate healing amount based on level
	switch (HealLevel)
	{
		case 1: HealAmount = Player.HealthMax / 4;		break; // 25%
		case 2: HealAmount = Player.HealthMax / 2;		break; // 50%
		case 3: HealAmount = Player.HealthMax / 1.33;	break; // 75%
		case 4: HealAmount = Player.HealthMax; 			break; // 100%
	};
	
	// Refund - If your health is max or above
	if (Type == 1 && GetActorProperty(Player.TID, APROP_Health) >= GetActorProperty(Player.TID, APROP_SpawnHealth))
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	// Refund - If you have no summoned monsters
	if (Type == 2 && Player.Summons == 0)
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	FadeRange(255, 0, 255, 0.5, 255, 0, 255, 0, 1.0);
	
	if (Type == 1) // Player
	{
		HealThing(HealAmount);
		ActivatorSound("skills/heal", 127);
	};
	if (Type == 2) // Summons
	{
		for (int i = 0; i < MAX_SUMMONS; i++)
			if (Player.SummonTID[i] > 0)
				SetActorProperty(Player.SummonTID[i], APROP_Health, GetActorProperty(Player.SummonTID[i], APROP_SpawnHealth));
		
		ActivatorSound("skills/heal2", 127);
	};
	if (Type == 3) // Team
	{
		int PlayerTID = Player.TID;
		
		for (int i = 0; i < MAX_PLAYERS; i++)
			if (PlayerInGame(i))
			{
				// Calculate this player's max HP
				switch (HealTeamLevel)
				{
					case 1: HealAmount = Players(i).HealthMax / 4;		break; // 25%
					case 2: HealAmount = Players(i).HealthMax / 2;		break; // 50%
					case 3: HealAmount = Players(i).HealthMax / 1.33;	break; // 75%
					case 4: HealAmount = Players(i).HealthMax; 			break; // 100%
				};
				
				SetActivator(Players(i).TID);
				FadeRange(255, 0, 255, 0.25, 255, 0, 255, 0, 1.0);
				HealThing(HealAmount);
				ActivatorSound("skills/heal", 127);
			};
		 
		SetActivator(PlayerTID);
	};
	
	return true;
};

// Life Leech
acscript bool LifeLeech()
{
	int PlayerNum = PlayerNumber ();
	int LeechLevel = Skills[0][2].CurrentLevel;
	
	SetActivatorToTarget(Players(PlayerNum).TID);
	
	// Refund - If the Player has no target
	if (ActivatorTID() == Players(PlayerNum).TID)
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	// Refund - If the target isn't actually a valid monster
	if (!CheckInventory("MonsterInit"))
	{
		ThingSound(Players(PlayerNum).TID, "menu/error", 127);
		return false;
	};
	
	int LeechAmount = Round((fixed)GetActorProperty(0, APROP_Health) * ((fixed)LeechLevel / 10.0));
	
	// Refund -- If you leech 0 HP
	if (LeechAmount == 0)
	{
		ThingSound(Players(PlayerNum).TID, "menu/error", 127);
		return false;
	};
	
	DamageThing(LeechAmount);
	SetActivator(Players(PlayerNum).TID);
	HealThing(LeechAmount);
	
	FadeRange(255, 0, 255, 0.25, 255, 0, 255, 0, 1.0);
	ActivatorSound("skills/lifeleech", 127);
	return true;
};

// Repair Armor
function bool Repair()
{
	int RepairLevel = Skills[0][4].CurrentLevel;
	int RepairAmount;
	
	// Calculate repair amount based on level
	switch (RepairLevel)
	{
		case 1: RepairAmount = Player.ArmorMax / 4;		break; // 25%
		case 2: RepairAmount = Player.ArmorMax / 2;		break; // 50%
		case 3: RepairAmount = Player.ArmorMax / 1.33;	break; // 75%
		case 4: RepairAmount = Player.ArmorMax; 		break; // 100%
	};

	if (CheckInventory("Armor") > 0 && CheckInventory("Armor") < Player.ArmorMax)
	{
		FadeRange(0, 255, 0, 0.5, 0, 255, 0, 0, 1.0);
		GiveInventory("ArmorBonus", RepairAmount);
		
		if (CheckInventory("Armor") > Player.ArmorMax)
		{
			int ArmorOverflow = CheckInventory("BasicArmor") - Player.ArmorMax;
			TakeInventory("BasicArmor", ArmorOverflow);
		};
		
		ActivatorSound("skills/repair", 127);
		return true;
	}
	else
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	return false;
};

// Teleport to closest Player
acscript bool PlayerTeleport()
{
	str[MAX_PLAYERS] Names;
	int PlayerChoice;
	
	// Refund - If there is only one player or you aren't in multiplayer
	if (PlayerCount() <= 1 || !InMultiplayer)
	{
		ActivatorSound("menu/error", 127);
		return false;
	};

	while (true)
	{
		fixed X = 48.1;
		fixed Y = 50.0;
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
		
		// Set the HUD Size
		SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
		
		// Title
		SetFont("BIGFONT");
		HudMessage("Choose a Player\n", HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05);
		
		// Input
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD)
		{
			ActivatorSound("menu/move", 127);
			PlayerChoice--;
			if (PlayerChoice < 0) PlayerChoice = PlayerCount() - 1;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK)
		{
			ActivatorSound("menu/move", 127);
			PlayerChoice++;
			if (PlayerChoice > PlayerCount() - 1) PlayerChoice = 0;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			// You can't teleport to yourself
			if (PlayerChoice == PlayerNumber())
				ActivatorSound("menu/error", 127)
			else
			{
				// Teleport
				SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
				GiveInventory("PlayerTeleportGhost", 1);
				SetActorPosition(Player.TID, GetActorX(Players(PlayerChoice).TID), GetActorY(Players(PlayerChoice).TID), GetActorZ(Players(PlayerChoice).TID), true);
				SetActorAngle(Player.TID, GetActorAngle(Players(PlayerChoice).TID));
				
				// Make sure you're not inside the other player before we solidify
				while (Distance(Player.TID, Players(PlayerChoice).TID) <= GetActorPropertyFixed(Players(PlayerChoice).TID, APROP_Radius))
					Delay(35);
				
				// Solidify
				GiveInventory("PlayerTeleportNormal", 1);
				return true;
			};
		};
		if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
		{
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			ActivatorSound("menu/move", 127);
			return false;
		};
		
		// Drawing
		for (int i = 0; i < MAX_PLAYERS; i++)
		{
			// Skip over players that aren't in the game
			if (!PlayerInGame(i))
			{
				// If you are highlighting someone who left, reset the cursor
				if (PlayerChoice == i)
					PlayerChoice = 0;
				
				continue;
			};
			
			// Get Player Names
			for (int i = 0; i < MAX_PLAYERS; i++)
				Names[i] = StrParam("%N\n", i + 1);
			
			// Cursor
			if (i == PlayerChoice)
				HudMessage("-->\n", HUDMSG_PLAIN, 0, MenuCursorColor, X - 24.0, Y, 0.05);
			
			// Bonus String
			if (i == PlayerNumber())
				HudMessage("%s\n", Names[i], HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05)
			else
				HudMessage("%s (%k)\n", Names[i], Distance(Player.TID, Players(i).TID), HUDMSG_PLAIN, 0, CR_WHITE, X, Y, 0.05);
			
			// Move down Y
			Y += 16.0;
		};
		
		Delay(1);
	};
};

// Powerups
function bool Powerup(int Type)
{
	// Levels
	int InvulnLevel = Skills[1][0].CurrentLevel;
	int InvisLevel = Skills[1][1].CurrentLevel;
	int TimeLevel = Skills[1][2].CurrentLevel;
	
	switch (Type)
	{
		case 1: // Invulnerability
			if (CheckInventory("PowerInvulnerable"))
			{
				ActivatorSound("menu/error", 127);
				return false;
			};
			ActivatorSound("powerups/protect", 127);
			GiveInventory(StrParam("SkillInvulnerability%d\n", InvulnLevel), 1);
			break;
		case 2: // Invisibility
			if (CheckInventory("PowerShadow"))
			{
				ActivatorSound("menu/error", 127);
				return false;
			};
			ActivatorSound("powerups/invis", 127);
			GiveInventory(StrParam("SkillInvisibility%d\n", InvisLevel), 1);
			break;
		case 3: // Time Freeze
			BulletTime(TimeLevel);
			break;
		case 4: // Iron Feet
			if (CheckInventory("PowerIronFeet"))
			{
				ActivatorSound("menu/error", 127);
				return false;
			};
			ActivatorSound("powerups/suit", 127);
			GiveInventory("PowerIronFeet", 1);
			break;
		case 5: // Night Vision
			if (CheckInventory("PowerLightAmp"))
			{
				ActivatorSound("menu/error", 127);
				return false;
			};
			ActivatorSound("powerups/light", 127);
			GiveInventory("PowerLightAmp", 1);
			break;
		case 6: // Berserk
			ActivatorSound("powerups/berserk", 127);
			GiveInventory("PowerStrength", 1);
			break;
		case 7: // Mind Mapping
			ActivatorSound("powerups/map", 127);
            GiveInventory("AllMapRevealer", 1);
            GiveInventory("AllMapScanner", 1);
			break;
		case 8: // Drop Rune
			return DropWeapon();
			break;
		case 9: // Drop Ammo
			return DropAmmo();
			break;
	};
	
	return true;
};

// Abuse PowerTimeFreezer to create a bullet-time effect
function void BulletTime(int Mode)
{
	BulletTimeMode = Mode;
	BulletTimeTimer = 350;
	
	// Remove duplicate TimeFreezerSounds
	Thing_Remove(1999);
	
	if (Mode == 1) // Stutter Time
	{
		SpawnForced("TimeFreezerQuickSound", GetActorX(0), GetActorY(0), GetActorZ(0), 1999, 0);
		SetActorState(1999, "Spawn");
		TakeInventory("PowerTimeFreezer", 1);
		GiveInventory("TimeFreezerQuick", 1);
	};
	if (Mode == 2) // Freeze Time
	{
		SpawnForced("TimeFreezerSound", GetActorX(0), GetActorY(0), GetActorZ(0), 1999, 0);
		SetActorState(1999, "Spawn");
		GiveInventory("TimeFreezer", 1);
	};
};

// Drops a random Rune in front of you
function bool DropWeapon()
{
	int DropWeaponLevel = Skills[1][7].CurrentLevel;
	fixed Angle = GetActorAngle(0);
	fixed X = GetActorX(0) + Cos(Angle) * 96.0;
	fixed Y = GetActorY(0) + Sin(Angle) * 96.0;
	fixed Z = GetActorZ(0) + 48.0;
	str Weapon;
	
	switch (DropWeaponLevel)
	{
		case 1: Weapon = "Pistol";			break;
		case 2: Weapon = "Shotgun";			break;
		case 3: Weapon = "SuperShotgun";	break;
		case 4: Weapon = "Chaingun";		break;
		case 5: Weapon = "RocketLauncher";	break;
		case 6: Weapon = "PlasmaRifle";		break;
		case 7: Weapon = "BFG9000";			break;
	};
	
	if (Spawn(Weapon, X, Y, Z, 0, Angle))
	{
		ActivatorSound("skills/drop", 127);
		Spawn("TeleportFog", X, Y, Z, 0, Angle);
		return true;
	}
	else
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	return false;
};

// Drops a backpack in front of you
function bool DropAmmo()
{
	int AmmoDropLevel = Skills[1][8].CurrentLevel;
	fixed Angle = GetActorAngle(0);
	fixed X = GetActorX(0) + Cos(Angle) * 96.0;
	fixed Y = GetActorY(0) + Sin(Angle) * 96.0;
	fixed Z = GetActorZ(0) + 48.0;
	str Ammo;
	
	switch (AmmoDropLevel)
	{
		case 1: 		Ammo = "SmallBackpack"; break;
		case 2: 		Ammo = "Backpack";		break;
		case 3: case 4: Ammo = "BigBackpack";	break;
	};
	
	if (Spawn(Ammo, X, Y, Z, 0, Angle))
	{
		if (AmmoDropLevel == 4 && GetCVar("drpg_ext_doomrl"))
			Spawn("RLSupplyCrate", X, Y, Z, 0, Angle);
		
		ActivatorSound("skills/drop", 127);
		Spawn("TeleportFog", X, Y, Z, 0, Angle);
		return true;
	}
	else
	{
		ActivatorSound("menu/error", 127);
		return false;
	};

	return false;
};

// Weaken
acscript bool Weaken()
{
	int PlayerNum = PlayerNumber ();
	int WeakenLevel = Skills[3][4].CurrentLevel;
	int MonsterLevel;
	int MonsterAura;
	int MonsterStrength;
	int MonsterDefense;
	
	SetActivatorToTarget(Players(PlayerNum).TID);
	
	// Refund - If the Player has no target
	if (ActivatorTID() == Players(PlayerNum).TID)
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	// Refund - If the target isn't actually a valid monster
	if (!CheckInventory("MonsterInit"))
	{
		ThingSound(Players(PlayerNum).TID, "menu/error", 127);
		return false;
	};

	MonsterLevel = CheckInventory("MonsterLevel") / 2;
	MonsterStrength = CheckInventory("MonsterStrength") / 2;
	MonsterDefense = CheckInventory("MonsterDefense") / 2;
	MonsterAura = CheckInventory("MonsterAura");
	
	// Destroy Aura
	if (WeakenLevel == 2) 
	{
		if (GetActorProperty(0, APROP_Health) > GetActorProperty(0, APROP_SpawnHealth))
			SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth));
		
		MonsterAura = 0;
	};
	
	if (MonsterLevel <= 0) MonsterLevel = 1;
	if (MonsterStrength <= 0) MonsterStrength = 1;
	if (MonsterDefense <= 0) MonsterDefense = 1;
	
	// Apply the stats to the monster
	SetInventory("MonsterLevel", MonsterLevel);
	SetInventory("MonsterAura", MonsterAura);
	SetInventory("MonsterStrength", MonsterStrength);
	SetInventory("MonsterDefense", MonsterDefense);
	SetActorPropertyFixed(0, APROP_DamageFactor, 1.0 - (0.9 * (MonsterDefense / 100)));

	SetActivator(Players(PlayerNum).TID);
	
	FadeRange(0, 0, 0, 0.25, 0, 0, 0, 0.0, 1.0);
	ActivatorSound("skills/weaken", 127);
	return true;
};

// Summoning
function bool Summon(int Type)
{
	fixed Angle = GetActorAngle(0);
	fixed X = GetActorX(0) + Cos(Angle) * 96.0;
	fixed Y = GetActorY(0) + Sin(Angle) * 96.0;
	fixed Z = GetActorZ(0);
	int MarineLevel = Skills[4][0].CurrentLevel;
	int NewID = UniqueTID();
	bool Success;
	
	str[][] DRLASummons =
	{
		// Former Human
		{
			"RLDRPGSummonedFormerHuman";
			"RLDRPGSummonedEliteHuman";
			"RLDRPGSummonedFormerCaptain";
		};
		
		// Former Sergeant
		{
			"RLDRPGSummonedFormerSergeant";
			"RLDRPGSummonedEliteSergeant";
		};
		
		// Former Commando
		{
			"RLDRPGSummonedFormerCommando";
			"RLDRPGSummonedEliteCommando";
			"RLDRPGSummonedEliteCaptain2";
		};
		
		// Imp
		{
			"RLDRPGSummonedImp";
			"RLDRPGSummonedNightmareImp";
			"RLDRPGSummonedCyberneticImp";
		};
		
		// Demon
		{
			"RLDRPGSummonedDemon";
			"RLDRPGSummonedSpectre";
			"RLDRPGSummonedNightmareDemon";
			"RLDRPGSummonedNightmareSpectre";
			"RLDRPGSummonedCyberneticDemon";
			"RLDRPGSummonedCyberneticSpectre";
		};
		
		// Cacodemon
		{
			"RLDRPGSummonedCacodemon";
			"RLDRPGSummonedNightmareCacodemon";
		};
		
		// Hell Knight
		{
			"RLDRPGSummonedHellKnight";
			"RLDRPGSummonedNightmareHellKnight";
			"RLDRPGSummonedCyberneticHellKnight";
		};
		
		// Baron of Hell
		{
			"RLDRPGSummonedBaronOfHell";
			"RLDRPGSummonedNightmareBaronOfHell";
			"RLDRPGSummonedCyberneticBaronOfHell";
		};
		
		// Lost Soul
		{
			"RLDRPGSummonedLostSoul";
			"RLDRPGSummonedNightmareLostSoul";
			"RLDRPGSummonedCyberneticLostSoul";
		};
		
		// Pain Elemental
		{
			"RLDRPGSummonedPainElemental";
			"RLDRPGSummonedNightmarePainElemental";
		};
		
		// Revenant
		{
			"RLDRPGSummonedRevenant";
			"RLDRPGSummonedNightmareRevenant";
			"RLDRPGSummonedCyberneticRevenant";
		};
		
		// Mancubus
		{
			"RLDRPGSummonedMancubus";
			"RLDRPGSummonedNightmareMancubus";
			"RLDRPGSummonedCyberneticMancubus";
		};
		
		// Arachnotron
		{
			"RLDRPGSummonedArachnotron";
			"RLDRPGSummonedNightmareArachnotron";
		};
		
		// Arch-Vile
		{
			"RLDRPGSummonedArchVile";
			"RLDRPGSummonedNightmareArchVile";
		};
		
		// Cyberdemon
		{
			"RLDRPGSummonedCyberdemon";
			"RLDRPGSummonedNightmareCyberdemon";
		};
		
		// Spider Mastermind
		{
			"RLDRPGSummonedSpiderMastermind";
			"RLDRPGSummonedCyberneticSpiderMastermind";
		};
	};
	
	// Stop if you already have the maximum amount of summons
	if (Player.Summons >= MAX_SUMMONS)
	{
		SetFont("BIGFONT");
		HudMessage("You cannot summon any more friendlies\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 1.0);
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	if (Type == 1) // Marines
	{
		if (GetCVar("drpg_ext_brutal")) // Brutal Doom
		{
			switch (MarineLevel)
			{
				case 1: Success = Spawn("Marine", X, Y, Z, NewID, Angle);					break;
				case 2: Success = Spawn("Marine_Shotgun", X, Y, Z, NewID, Angle);			break;
				case 3: Success = Spawn("Marine_SSG", X, Y, Z, NewID, Angle);				break;
				case 4: Success = Spawn("Marine_Minigun", X, Y, Z, NewID, Angle);			break;
				case 5: Success = Spawn("Marine_Rocket", X, Y, Z, NewID, Angle);			break;
				case 6: Success = Spawn("Marine_Plasma", X, Y, Z, NewID, Angle);			break;
				case 7: Success = Spawn("Marine_Railgun", X, Y, Z, NewID, Angle);			break;
				case 8: Success = Spawn("Marine_BFG", X, Y, Z, NewID, Angle);				break;
			};
		}
		else if (GetCVar("drpg_ext_extras")) // Extras
		{
			switch (MarineLevel)
			{
				case 1: Success = Spawn("MarinePistol2", X, Y, Z, NewID, Angle);			break;
				case 2: Success = Spawn("MarineShotgun2", X, Y, Z, NewID, Angle);			break;
				case 3: Success = Spawn("MarineSSG2", X, Y, Z, NewID, Angle);				break;
				case 4: Success = Spawn("MarineChaingun2", X, Y, Z, NewID, Angle);;			break;
				case 5: Success = Spawn("MarineRocket2", X, Y, Z, NewID, Angle);			break;
				case 6: Success = Spawn("MarinePlasma2", X, Y, Z, NewID, Angle);			break;
				case 7: Success = Spawn("MarineRailgun2", X, Y, Z, NewID, Angle);			break;
				case 8: Success = Spawn("MarineBFG2", X, Y, Z, NewID, Angle);				break;
			};
		}
		else // Vanilla
		{
			switch (MarineLevel)
			{
				case 1: Success = Spawn("MarinePistolRPG", X, Y, Z, NewID, Angle);			break;
				case 2: Success = Spawn("MarineShotgunRPG", X, Y, Z, NewID, Angle);			break;
				case 3: Success = Spawn("MarineSSGRPG", X, Y, Z, NewID, Angle);				break;
				case 4: Success = Spawn("MarineChaingunRPG", X, Y, Z, NewID, Angle);;		break;
				case 5: Success = Spawn("MarineRocketRPG", X, Y, Z, NewID, Angle);			break;
				case 6: Success = Spawn("MarinePlasmaRPG", X, Y, Z, NewID, Angle);			break;
				case 7: Success = Spawn("MarineRailgunRPG", X, Y, Z, NewID, Angle);			break;
				case 8: Success = Spawn("MarineBFGRPG", X, Y, Z, NewID, Angle);				break;
			};
		};
	}
	else // Monsters
	{
		if (GetCVar("drpg_ext_doomrl"))
			Success = Spawn(DRLASummons[Type - 2][Skills[4][Type - 1].CurrentLevel - 1], X, Y, Z, NewID, Angle)
		else
		{
			switch (Type)
			{
				case 2:		Success = Spawn("Zombieman", X, Y, Z, NewID, Angle);				break;
				case 3: 	Success = Spawn("ShotgunGuy", X, Y, Z, NewID, Angle);				break;
				case 4: 	Success = Spawn("ChaingunGuy", X, Y, Z, NewID, Angle);				break;
				case 5: 	Success = Spawn("DoomImp", X, Y, Z, NewID, Angle);					break;
				case 6: 	Success = Spawn("Demon", X, Y, Z, NewID, Angle);					break;
				case 7: 	Success = Spawn("Cacodemon", X, Y, Z, NewID, Angle);				break;
				case 8: 	Success = Spawn("HellKnight", X, Y, Z, NewID, Angle);				break;
				case 9: 	Success = Spawn("BaronOfHell", X, Y, Z, NewID, Angle);				break;
				case 10: 	Success = Spawn("LostSoul", X, Y, Z, NewID, Angle);					break;
				case 11: 	Success = Spawn("PainElemental", X, Y, Z, NewID, Angle);			break;
				case 12: 	Success = Spawn("Revenant", X, Y, Z, NewID, Angle);					break;
				case 13: 	Success = Spawn("Fatso", X, Y, Z, NewID, Angle);					break;
				case 14: 	Success = Spawn("Arachnotron", X, Y, Z, NewID, Angle);				break;
				case 15: 	Success = Spawn("Archvile", X, Y, Z, NewID, Angle);					break;
				case 16: 	Success = Spawn("Cyberdemon", X, Y, Z, NewID, Angle);				break;
				case 17: 	Success = Spawn("SpiderMastermind", X, Y, Z, NewID, Angle);			break;
			};
		};
	};
	
	if (Success)
	{
		SpawnForced("TeleportFog", X, Y, Z, 0, Angle);
		SetActorAngle(NewID, Angle);
		SetActorProperty(NewID, APROP_Friendly, 1);
		GiveActorInventory(NewID, "FriendlyBooster", 1);
		
		// Add summon to your summon array
		for (int i = 0; i < MAX_SUMMONS; i++)
			if (Player.SummonTID[i] == 0)
			{
				Player.SummonTID[i] = NewID;
				Player.Summons++;
				return true;
			};
	}
	else
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
};

// Breaks down current Armor into Credits
function bool BreakdownArmor()
{
	int Armor = CheckInventory("BasicArmor");
	
	// Kind of hackish to prevent breaking down Armors that use high values for indestructibleness
	if (Armor > 1000)
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	if (Armor > 0)
	{
		TakeInventory("BasicArmor", Armor);
		GiveInventory("Credits", Armor);
		
		// DoomRL Compatibility
		if (GetCVar("drpg_ext_doomrl"))
		{
			TakeInventory("RL100ArmorWorn", 1);
			TakeInventory("RL150ArmorWorn", 1);
			TakeInventory("RL200ArmorWorn", 1);
			TakeInventory("RL100RegenArmorWorn", 1);
			TakeInventory("RLIndestructibleArmorWorn", 1);
		};
		
		ActivatorSound("skills/breakdown", 127);
		return true;
	}
	else
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	return false;
};

// Drops a Force Field in front of you
function bool ForceWall()
{
	fixed Angle = GetActorAngle(0);
	fixed X = GetActorX(0) + Cos(Angle) * 96.0;
	fixed Y = GetActorY(0) + Sin(Angle) * 96.0;
	fixed Z = GetActorZ(0);
	int WallLevel = Skills[5][1].CurrentLevel;
	
	Thing_Remove(1998);
	
	switch (WallLevel)
	{
		case 1:
			if (!Spawn("ForceField", X, Y, Z, 1998, Angle) == 0) {return true;}
			else
			{
				ActivatorSound("menu/error", 127);
				return false;
			};
			break;
		case 2:
			if (!Spawn("ForceField2", X, Y, Z, 1998, Angle) == 0) {return true;}
			else
			{
				ActivatorSound("menu/error", 127);
				return false;
			};
			break;
	};

	return false;
};

// Rallies (teleports) your summoned monster/marines around you
function bool Rally()
{
	fixed X = GetActorX(0);
	fixed Y = GetActorY(0);
	fixed Z = GetActorZ(0);
	fixed Angle = GetActorAngle(0);
	
	// Fail if you have no summons active
	if (Player.Summons == 0)
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	SpawnForced("TeleportFog", X, Y, Z, 0, Angle);
	
	for (int i = 0; i < MAX_SUMMONS; i++)
		if (Player.SummonTID[i] > 0)
			SetActorPosition(Player.SummonTID[i], X, Y, Z, 0);
	
	ActivatorSound("skills/rally", 127);
	return true;
};

// Unsummon - Removes all actors under the player's control
function bool Unsummon()
{
	int UnsummonLevel = Skills[5][3].CurrentLevel;
	int EPAdd;
	
	// Fail if you have no summons active
	if (Player.Summons == 0)
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
	
	for (int i = 0; i < MAX_SUMMONS; i++)
	{
		// Continue if there's no summon in this slot
		if (Player.SummonTID[i] == 0) continue;
		
		if (UnsummonLevel == 2 && GetActorProperty(i, APROP_Health) > 0)
			EPAdd += 25;
		
		// Overdrive - Remove summons (teleport out) instead of killing them
		if (GetActorProperty(Player.SummonTID[i], APROP_Health) > 0)
		{
			SpawnForced("TeleportFog", GetActorX(Player.SummonTID[i]), GetActorY(Player.SummonTID[i]), GetActorZ(Player.SummonTID[i]), 0, 0);
			Thing_Remove(Player.SummonTID[i]);
		};
		
		// Remove the summon from the array
		Player.SummonTID[i] = 0;
	};
	
	
	if (UnsummonLevel == 2)
		Player.EP += EPAdd;

	Player.Summons = 0;
	
	FadeRange(192, 0, 0, 0.5, 192, 0, 0, 0.0, 1.0);
	ActivatorSound("skills/unsummon", 127);
	return true;
};

// Recall - Return to the beginning of the map
function bool Recall()
{
	// Fail if you're in the Arena
	if (ArenaActive)
	{
		ActivatorSound("menu/error", 127);
		return false;
	};
		
	SetInventory("ArtiTeleport", 1);
	UseInventory("ArtiTeleport");
	return true;
};

// Handles the Transportation system
acscript Transport()
{
	// If you're dead, terminate
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	// Multiplayer
	if (InMultiplayer && PlayerCount() > 1)
	{
		int Players = PlayerCount();
		bool Ready;
		bool[MAX_PLAYERS] Voted;
		int PlayersApprove;
		int PlayersDeny;
		
		for (int i = 0; i < MAX_PLAYERS; i++)
			Voted[i] = false;
		
		while (!Ready)
		{
			// Freeze all players
			SetPlayerProperty(true, 1, PROP_TOTALLYFROZEN);
			
			// Input
			for (int i = 0; i < Players; i++)
			{
				// Skip input checks if you've already voted
				if (Voted[i]) continue;
				
				int Buttons = GetPlayerInput(i, INPUT_BUTTONS);
				int OldButtons = GetPlayerInput(i, INPUT_OLDBUTTONS);
				
				if (Buttons == BT_USE && OldButtons != BT_USE)
				{
					ActivatorSound("menu/move", 127);
					PlayersApprove++;
					Voted[i] = true;
				};
				if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
				{
					ActivatorSound("menu/move", 127);
					PlayersDeny++;
					Voted[i] = true;
				};
			};
			
			// Check that everyone has voted
			Ready = true;
			for (int i = 0; i < Players; i++)
				if (!Voted[i]) Ready = false;
			
			// Drawing
			SetFont("BIGFONT");
			HudMessageBold("\cd%N has requested Transport\n\c-Players: %d (\cd%d\c-/\cg%d\c-)\n\n\cd%K\c- to Approve\n\cd%K\c- to Deny\n",
						   PlayerNumber() + 1, Players, PlayersApprove, PlayersDeny, "+use", "+speed",
						   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 0.5, 0.75, 1.0, 4.0);
			
			Delay(1);
		};
		
		// Ready - tally votes and confirm/deny Transport
		if (Ready)
		{
			SetPlayerProperty(true, 0, PROP_TOTALLYFROZEN);
			
			// Approved
			if (PlayersApprove > PlayersDeny)
			{
				for (int i = 0; i < MAX_PLAYERS; i++)
					SetActorProperty(Players(i).TID, APROP_Invulnerable, true);
				HudMessageBold("\cdTransport Approved!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 1.0, 4.0);
				Delay(35 * 2);
				FadeRange(255, 255, 255, 0.0, 255, 255, 255, 1.0, 3.0);
				Delay(35 * 3);
			};
			
			// Denied
			if (PlayersDeny > PlayersApprove)
			{
				HudMessageBold("\cgTransport Denied!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 1.0, 2.0);
				return;
			};
			
			// Draw
			if (PlayersApprove == PlayersDeny)
			{
				HudMessageBold("\cjDraw!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 1.0, 2.0);
				return;
			};
		};
	}
	else // Single Player
	{
		// Fade Screen
		FadeRange(255, 255, 255, 0.0, 255, 255, 255, 1.0, 1.0);
		
		// Freeze Player
		SetActorProperty(0, APROP_Invulnerable, true);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		
		// Delay and unfreeze Player
		Delay(35);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		SetActorProperty(0, APROP_Invulnerable, false);
	};
	
	// Transport
	if (!InBase)
	{
		str LevelLump = StrParam("%N\n", PRINTNAME_LEVEL);
		for (int i = 0; i < 8 && i < StrLen(LevelLump); i++)
			LastVisited[i] = LevelLump[i];
		
		ChangeLevel("OUTPOST", 0, CHANGELEVEL_NOINTERMISSION, -1);
		InBase = true;
		Transported = true;
	}
	else
	{
		ChangeLevel(StrParam("%s\n", LastVisited), 0, CHANGELEVEL_NOINTERMISSION, -1);
		InBase = false;
		Transported = true;
	};
};

// Used from DECORATE to get dynamic projectile damage rates
acscript SetProjectileDamage(str Type)
{
	// For the FUTUUUUUUUURE
	
	return 0;
};

// Removes a player's Aura
acscript RemoveAura()
{
    Player.Aura = 0;
    Player.AuraTimer = 0;
};

function void CheckSkills()
{
	// Aura-related vars to save typing :P
	int RedAuraLevel = Skills[2][0].CurrentLevel;
	int GreenAuraLevel = Skills[2][1].CurrentLevel;
	int WhiteAuraLevel = Skills[2][2].CurrentLevel;
	int PinkAuraLevel = Skills[2][3].CurrentLevel;
	int BlueAuraLevel = Skills[2][4].CurrentLevel;
	int PurpleAuraLevel = Skills[2][5].CurrentLevel;
	int OrangeAuraLevel = Skills[2][6].CurrentLevel;
	int DarkBlueAuraLevel = Skills[2][7].CurrentLevel;
	int YellowAuraLevel = Skills[2][8].CurrentLevel;
	fixed LuckMult = 1;
	fixed X = GetActorX(0);
	fixed Y = GetActorY(0);
	fixed Z = GetActorZ(0);
	int Angle = GetActorAngle(0) * 256;
	int AmmoRegenMult = 1;
	
	// Reset the Skill multiplier from the Blue Aura and Energy Augmentation
	Player.SkillCostMult = 1.0;
	
	// Level 4 and 5 of the Energy Augmentation reduce skill costs by 25% and 50%
	if (Player.Augs.Active[AUG_ENERGY])
		if (Player.Augs.Level[AUG_ENERGY] == 4)
			Player.SkillCostMult = 0.75
		else if (Player.Augs.Level[AUG_ENERGY] >= 5)
			Player.SkillCostMult = 0.5;
			
	// Give the player the Aura item while an Aura is active (for SBARINFO hax)
	if (Player.AuraTimer > 0)
		GiveInventory("Aura", 1)
	else
		TakeInventory("Aura", 1);
	
	// Make the Player's Aura appear in their Health Bar
	if (InMultiplayer)
		SetInventory("MonsterAura", Player.Aura);
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
	{
		// Add an extra level to the Ammo Drop to drop Supply Crates
		Skills[1][8].MaxLevel = 4;
		Skills[1][8].Description[3] = "Drops a Large Backpack full of ammo at your location\nDrops a Supply Crate at your location";
		
		// DoomRL Marines use slightly different weapons (Whenever Yholl decides to do them :P)
		// Skills[4][0].Description[2] = "Summons a Marine to fight with you\n\cjDouble Shotgun";
		// Skills[4][0].Description[3] = "Summons a Marine to fight with you\n\cjBattle Rifle";
		
		// Summoning Skills - Names
		Skills[4][1].Name = "Summon Former Human";
		Skills[4][2].Name = "Summon Former Sergeant";
		Skills[4][3].Name = "Summon Former Commando";
		
		// Summoning Skills - Levels
		Skills[4][1].MaxLevel = 3;
		Skills[4][2].MaxLevel = 2;
		Skills[4][3].MaxLevel = 3;
		Skills[4][4].MaxLevel = 3;
		Skills[4][5].MaxLevel = 6;
		Skills[4][6].MaxLevel = 2;
		Skills[4][7].MaxLevel = 3;
		Skills[4][8].MaxLevel = 3;
		Skills[4][9].MaxLevel = 3;
		Skills[4][10].MaxLevel = 2;
		Skills[4][11].MaxLevel = 3;
		Skills[4][12].MaxLevel = 3;
		Skills[4][13].MaxLevel = 2;
		Skills[4][14].MaxLevel = 2;
		Skills[4][15].MaxLevel = 2;
		Skills[4][16].MaxLevel = 2;
		Skills[4][17].MaxLevel = 2;
		
		// Summoning Skills - Descriptions
		Skills[4][1].Description[0] = "Summons a Former Human to fight with you";
		Skills[4][1].Description[1] = "Summons an Elite Human to fight with you";
		Skills[4][1].Description[2] = "Summons a Former Human Captain to fight with you";
		Skills[4][2].Description[0] = "Summons a Former Sergeant to fight with you";
		Skills[4][2].Description[1] = "Summons an Elite Sergeant to fight with you";
		Skills[4][3].Description[0] = "Summons a Former Commando to fight with you";
		Skills[4][3].Description[1] = "Summons an Elite Commando to fight with you";
		Skills[4][3].Description[2] = "Summons an Elite Human Captain to fight with you";
		Skills[4][4].Description[1] = "Summons a Nightmare Imp to fight with you";
		Skills[4][4].Description[2] = "Summons a Cyber-Imp to fight with you";
		Skills[4][5].Description[1] = "Summons a Spectre to fight with you";
		Skills[4][5].Description[2] = "Summons a Nightmare Demon to fight with you";
		Skills[4][5].Description[3] = "Summons a Nightmare Spectre to fight with you";
		Skills[4][5].Description[4] = "Summons a Mech-Demon to fight with you";
		Skills[4][5].Description[5] = "Summons a Mechtre to fight with you";
		Skills[4][6].Description[1] = "Summons a Nightmare Cacodemon to fight with you";
		Skills[4][7].Description[1] = "Summons a Nightmare Knight to fight with you";
		Skills[4][7].Description[2] = "Summons a Cybruiser to fight with you";
		Skills[4][8].Description[1] = "Summons a Baron of Nightmares to fight with you";
		Skills[4][8].Description[2] = "Summons a Techno-Lord to fight with you";
		Skills[4][9].Description[1] = "Summons a Nightmare Soul to fight with you";
		Skills[4][9].Description[2] = "Summons a Hellmine to fight with you";
		Skills[4][10].Description[1] = "Summons a Nightmare Elemental to fight with you";
		Skills[4][11].Description[1] = "Summons a Nightmare Revenant to fight with you";
		Skills[4][11].Description[2] = "Summons a Heavy Revenant to fight with you";
		Skills[4][12].Description[1] = "Summons a Nightmare Mancubus to fight with you";
		Skills[4][12].Description[2] = "Summons a Volacubus to fight with you";
		Skills[4][13].Description[1] = "Summons a Nightmare Arachnotron to fight with you";
		Skills[4][14].Description[1] = "Summons a Nightmare Arch-Vile to fight with you";
		Skills[4][15].Description[1] = "Summons a Nightmare Cyberdemon to fight with you";
		Skills[4][16].Description[1] = "Summons a Spider Overmind to fight with you";
	};
	
	// Aura handling
	if (Player.AuraTimer > 0)
	{
		if (!CheckInventory("MenuFreezer")) // lolhax
			switch (Player.Aura)
			{
				// Red Aura
				case 1:
					FadeRange(255, 0, 0, 0.05, 255, 0, 0, 0.0, 1.0);
					if (RedAuraLevel == 1)
						GiveInventory("RedAura2x", 1);
					if (RedAuraLevel >= 2)
						GiveInventory("RedAura4x", 1);
					if (RedAuraLevel >= 3)
						GiveInventory("RedAuraInfiniteAmmo", 1);
					break;
				// Green Aura
				case 2:
					FadeRange(0, 255, 0, 0.05, 0, 255, 0, 0.0, 1.0);
					if (GreenAuraLevel == 1)
						Player.DamageFactor = Player.DamageFactor - Player.DamageFactor * 0.25;
					if (GreenAuraLevel == 2)
						Player.DamageFactor = Player.DamageFactor - Player.DamageFactor * 0.5;
					if (GreenAuraLevel == 3)
					{
						Player.DamageFactor = Player.DamageFactor - Player.DamageFactor * 0.75;
						GiveInventory("GreenAuraIronFeet", 1);
					};
					break;
				// White Aura
				case 3:
					FadeRange(255, 255, 255, 0.05, 255, 255, 255, 0.0, 1.0);
					if (WhiteAuraLevel >= 2)
					{
						if (Player.Combo == 0) Player.Combo++;
						Player.ComboTimer = COMBO_MAX - 1;
					};
					if (WhiteAuraLevel == 3)
						if ((Timer() % (35 * 4)) == 1)
							Player.XPGained += XPTable[Player.Level] / 100 / (Player.Level + 1);
					if (WhiteAuraLevel >= 4)
						if ((Timer() % (35 * 2)) == 1)
							Player.XPGained += XPTable[Player.Level] / 100 / (Player.Level + 1);
					break;
				// Pink Aura
				case 4:
					FadeRange(255, 0, 255, 0.05, 255, 0, 255, 0.0, 1.0);
					if (PinkAuraLevel >= 1)
						GiveInventory("PinkAuraDrain", 1);
					if (PinkAuraLevel >= 2)
						Player.HealthMax *= 2;
					break;
				// Blue Aura
				case 5:
					FadeRange(0, 255, 255, 0.05, 0, 255, 255, 0.0, 1.0);
					if (BlueAuraLevel == 1)
						Player.SkillCostMult /= 1.33;
					if (BlueAuraLevel == 2)
						Player.SkillCostMult /= 2;
					if (BlueAuraLevel == 3)
						Player.SkillCostMult /= 4;
					break;
				// Purple Aura
				case 6:
					FadeRange(255, 0, 128, 0.05, 255, 0, 128, 0.0, 1.0);
					if (PurpleAuraLevel == 1)
					{
						Player.HPAmount *= 2;
						Player.EPAmount *= 2;
					};
					if (PurpleAuraLevel == 2)
					{
						Player.HPAmount *= 3;
						Player.EPAmount *= 3;
					};
					if (PurpleAuraLevel == 3)
					{
						Player.HPAmount *= 4;
						Player.EPAmount *= 4;
					};
					if (PurpleAuraLevel == 4)
					{
						Player.HPAmount *= 4;
						Player.EPAmount *= 4;
						Player.HPTime /= 2;
						Player.EPTime /= 2;
					};
					break;
				// Orange Aura
				case 7:
					FadeRange(255, 128, 0, 0.05, 255, 128, 0, 0.0, 1.0);
					if (OrangeAuraLevel >= 1)
						Player.Speed *= 2;
					if (OrangeAuraLevel >= 2)
						Player.JumpHeight *= 2;
					if (OrangeAuraLevel >= 3)
						Player.WeaponSpeed = 100;
					break;
				// Dark Blue Aura
				case 8:
					FadeRange(0, 0, 128, 0.05, 0, 0, 128, 0.0, 1.0);
					if (DarkBlueAuraLevel == 5)
						AmmoRegenMult = 2;
					if (DarkBlueAuraLevel == 6)
						AmmoRegenMult = 4;
					if (DarkBlueAuraLevel >= 1)
						if ((Timer() % (35 / 2)) == 1)
							GiveInventory("Clip", AmmoRegenMult);
					if (DarkBlueAuraLevel >= 2)
						if ((Timer() % 35) == 1)
							GiveInventory("Shell", AmmoRegenMult);
					if (DarkBlueAuraLevel >= 3)
						if ((Timer() % (35 * 2)) == 1)
							GiveInventory("RocketAmmo", AmmoRegenMult);
					if (DarkBlueAuraLevel >= 4)
						if ((Timer() % (35 / 2)) == 1)
							GiveInventory("Cell", AmmoRegenMult);
					break;
				// Yellow Aura
				case 9:
					FadeRange(255, 255, 0, 0.05, 255, 255, 0, 0.0, 1.0);
					if ((Timer() % (35 * (6 - YellowAuraLevel))) == 1)
						GiveInventory("Credits", (Player.RankLevel + 1));
					if (YellowAuraLevel == 1)
						LuckMult = 1.25;
					if (YellowAuraLevel == 2)
						LuckMult = 1.5;
					if (YellowAuraLevel == 3)
						LuckMult = 2;
					if (YellowAuraLevel == 4)
						LuckMult = 4;
					if (YellowAuraLevel == 5)
						LuckMult = 8;
					Player.HealthChance *= LuckMult;
					Player.EPChance *= LuckMult;
					Player.ArmorChance *= LuckMult;
					Player.PowerupChance *= LuckMult;
					Player.WeaponChance *= LuckMult;
					Player.TokenChance *= LuckMult;
					Player.AugChance *= LuckMult;
					Player.ShieldChance *= LuckMult;
					Player.StimChance *= LuckMult;
					break;
			};
		
		// Aura FX
		if (Player.Aura > 0)
			SpawnAura(0, Player.Aura, false);
		
		// Decrease timer this tic and calculate HUD timer amount
		if (!CheckInventory("MenuFreezer") && !CheckInventory("PowerTimeFreezer"))
			Player.AuraTimer--;
	}
	else
		Player.Aura = 0;
	
	// Summoned Monsters Handling
	for (int i = 0; i < MAX_SUMMONS; i++)
		if (GetActorProperty(Player.SummonTID[i], APROP_Health) <= 0)
			Player.Summons--;
	
	// Force Wall Handling
	if (GetActorProperty(1998, APROP_Alpha) > 0)
	{
		fixed WallAngle = GetActorAngle(0);
		fixed WallX = GetActorX(0) + Cos(WallAngle) * 48;
		fixed WallY = GetActorY(0) + Sin(WallAngle) * 48;
		fixed WallZ = GetActorZ(0);
		
		SetActorPosition(1998, WallX, WallY, WallZ, false);
		SetActorAngle(1998, WallAngle);
	};
	
	// Bullet-Time timer handling
	if (BulletTimeTimer >= 0)
	{
		if (BulletTimeTimer % 3)
			GiveInventory("TimeFreezerQuick", 1);
		
		BulletTimeTimer--;
	};
};
