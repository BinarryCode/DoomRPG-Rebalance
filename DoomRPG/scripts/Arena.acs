#library "Arena"

#include "zcommon.acs"

#import "Menu.acs"
#import "Shop.acs"
#import "Skills.acs"
#import "Stats.acs"

// Arena defines
#libdefine MAX_MODS				1
#libdefine MAX_ENVIRONMENTS		4
#libdefine MAX_BONUS			8

// Arena State Defines
#libdefine ARENA_INTERMISSION	1
#libdefine ARENA_WAITING		2
#libdefine ARENA_READY			3
#libdefine ARENA_ACTIVE			4

global int 30 : ArenaMaxWave;

bool ArenaActive = false;
int ArenaState = ARENA_READY;
int ArenaWave;
int ArenaTimer;
int ArenaTimerMax = 35 * 10;
int ArenaCount;
int ArenaMod;
int ArenaEnvironment;
int ArenaSpotSpawns = 1100;
int ArenaSectorTag = 100;

str ArenaMods[MAX_MODS] =
{
	"\cgNo Regeneration"
};

str ArenaEnvironments[MAX_ENVIRONMENTS] =
{
	"\cmBlackout",
	"\cjFoggy",
	"\ciThe Floor is Lava",
	"\cuGrayscale",
};

str ArenaBonus[MAX_BONUS] =
{
    "\cgFull Health",
    "\cvFull EP",
    "\cfMoney Drop",
    "\cuAmmo Drop",
    "\cgHealth Drop",
    "\cdArmor Drop",
    "\cuWeapon Drop",
	"\cfLuck Drop"
};

str Monsters[17] =
{
    "ZombieMan", "ShotgunGuy", "ChaingunGuy", "DoomImp", "Demon", "Spectre",
    "HellKnight", "BaronOfHell", "Cacodemon", "LostSoul",
    "PainElemental", "Revenant", "Fatso", "Arachnotron", "ArchVile",
    "Cyberdemon", "SpIDerMastermind"
};

// Arena Script
script "ArenaLoop" (void)
{
	SetMusic("Outpost", 3);
	ArenaSetEnvironment(0);
	
	// Arena Loop
    while (1)
    {
        // Stop the script if the Arena is stopped or you die
        if (!ArenaActive || GetActorProperty(0, APROP_HEALTH) <= 0)
		{
			ACS_NamedExecuteAlways("ArenaStop", 0);
            terminate;
		}
        
        // Arena HUD
		ArenaDrawHUD();
        
		// Arena Status Handling
		if (ArenaState == ARENA_INTERMISSION)
		{
			// Clean corpses every 5 waves
            if (ArenaWave > 1 && ArenaTimer <= 1 && (ArenaWave % 4) == 1)
				Thing_Remove(1002);

			ArenaMod = -1;
			ArenaGetBonus();
			ArenaSetEnvironment(0);
			ArenaState = ARENA_WAITING;
		}
		else if (ArenaState == ARENA_WAITING)
		{
			int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
			
			SetFont("BIGFONT");
			if (!InMenu && !InShop)
				HudMessage(s:"Press ", s:"\cd", k:"+use", s:"\c-", s:" to start the next wave\n",
						   s:"Press ", s:"\cd", k:"+speed", s:"\c-", s:" to exit the Arena";
						   HUDMSG_PLAIN, 0, CR_WHITE, 0.5, 0.75, 0.05);
					   
			if (Buttons == BT_USE && (!InMenu && !InShop))
				ArenaState = ARENA_READY;
			if (Buttons == BT_SPEED && (!InMenu && !InShop))
			{
				ACS_NamedExecuteAlways("ArenaStop", 0);
				terminate;
			}
		}
		else if (ArenaState == ARENA_READY)
		{
			ArenaWave++;
			ArenaSetMod();
			ArenaSetEnvironment(-1);
			ArenaSpawnMobs();
			ArenaState = ARENA_ACTIVE;
		}
		else if (ArenaState == ARENA_ACTIVE)
		{
			ArenaCheckMod();
			ArenaCount = ThingCount(0, 1002);
			if (ArenaCount <= 0)
				ArenaState = ARENA_INTERMISSION;
		}
		
        Delay(1);
    }
}

// Stop the Arena session
script "ArenaStop" (void)
{
	if (ArenaWave > 1)
		ArenaState = ARENA_WAITING;
	else
		ArenaState = ARENA_READY;
	
	ArenaActive = false;
	
	if (ArenaWave >= ArenaMaxWave)
		ArenaMaxWave = ArenaWave;
	
	ArenaCount = 0;
    ArenaMod = -1;
	ArenaSetEnvironment(0);
    
	Ceiling_RaiseByValue(ArenaSectorTag - 1, 64, 128);
	Thing_Remove(1002);
	
	if (GetActorProperty(0, APROP_HEALTH) <= 0)
		SetMusic("OutPost", 1);
	else
		SetMusic("Outpost", 0);
}

// Arena Test Script
script "SetArena" (int Wave, int Environment)
{
    if (Wave > 0) ArenaWave = Wave;
	ArenaSetEnvironment(Environment);
}

function void ArenaDrawHUD(void)
{
	SetFont("SMALLFONT");
	
	if (ArenaEnvironment > 0)
		HudMessage(s:ArenaEnvironments[ArenaEnvironment - 1];
				   HUDMSG_PLAIN, 5, CR_WHITE, -0.0225, 0.525, 0.05);
	if (ArenaMod >= 0)
		HudMessage(s:ArenaMods[ArenaMod];
				   HUDMSG_PLAIN, 4, CR_WHITE, -0.0225, 0.55, 0.05);
	if (ArenaTimer > 0)
		HudMessage(s:"Time: ",
				   d:ArenaTimer / 35 + 1;
				   HUDMSG_PLAIN, 3, CR_GREEN, -0.0225, 0.575, 0.05);
	HudMessage(s:"Wave: ",
			   d:ArenaWave;
			   HUDMSG_PLAIN, 2, CR_GREEN, -0.0225, 0.6, 0.05);
	if (ArenaCount > 0)
		HudMessage(s:"Monsters: ",
				   d:ArenaCount;
				   HUDMSG_PLAIN, 1, CR_GREEN, -0.0225, 0.625, 0.05);
}

function void ArenaSetMod(void)
{
	int ModRandomizer = Random(-10, MAX_MODS - 1);
	ArenaMod = ModRandomizer;
}

function void ArenaCheckMod(void)
{
	switch (ArenaMod)
	{
		case 0: // No Regeneration
			HPRate = 0;
			EPRate = 0;
			break;
	}
}

function void ArenaGetBonus(void)
{
	int BonusRandomizer = Random(-10, MAX_BONUS - 1);
	str SpawnItem;
	int i;
	
	if (BonusRandomizer >= 0)
	{
		SetFont("BIGFONT");
		HudMessage(s:ArenaBonus[BonusRandomizer]; HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 2.0, 1.0);
		ActivatorSound("misc/secret", 127);
	}
	switch (BonusRandomizer)
	{
		case 0: // Full Health
			HealThing(1000000);
			break;
		case 1: // Full EP
			EP = EPMax;
			break;
		case 2: // Money Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			for (i = 0; i < ArenaWave; i++)
				if (Random(1, 4) == 1)
				{
					SpawnSpot("MoneyDropper", 1200, 1201, 0);
					SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
					Thing_ChangeTID(1201, 0);
				}
			break;
		case 3: // Ammo Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			for (i = 0; i < ArenaWave; i++)
				if (Random(1, 4) == 1)
				{
					switch (Random(1, 8))
					{
						case 1: SpawnItem = "Clip";         break;
						case 2: SpawnItem = "ClipBox";      break;
						case 3: SpawnItem = "Shell";        break;
						case 4: SpawnItem = "ShellBox";     break;
						case 5: SpawnItem = "RocketAmmo";   break;
						case 6: SpawnItem = "RocketBox";    break;
						case 7: SpawnItem = "Cell";         break;
						case 8: SpawnItem = "CellPack";     break;
					}
					
					SpawnSpot(SpawnItem, 1200, 1201, 0);
					SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
					Thing_ChangeTID(1201, 0);
				}
			break;
		case 4: // Health Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			for (i = 0; i < ArenaWave; i++)
				if (Random(1, 4) == 1)
				{
					if (Random(1, 2) == 1)
						SpawnItem = "HealthDropper1";
					else
						SpawnItem = "HealthDropper2";
					
					SpawnSpot(SpawnItem, 1200, 1201, 0);
					SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
					Thing_ChangeTID(1201, 0);
				}
			break;
		case 5: // Armor Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			for (i = 0; i < ArenaWave; i++)
				if (Random(1, 4) == 1)
				{
					if (Random(1, 2) == 1)
						SpawnItem = "GreenArmorRandomizer";
					else
						SpawnItem = "BlueArmorRandomizer";
					
					SpawnSpot(SpawnItem, 1200, 1201, 0);
					SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
					Thing_ChangeTID(1201, 0);
				}
			break;
		case 6: // Weapon Drop
			SpawnSpot("TeleportFog", 1200, 0, 0);
			SpawnItem = "WeaponDropper";
			SpawnSpot(SpawnItem, 1200, 1201, 0);
			SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
			Thing_ChangeTID(1201, 0);
			break;
		case 7: // Luck Drop
			for (i = 0; i < ArenaWave; i++)
				{
					SpawnSpot("TeleportFog", 1200, 0, 0);
					SpawnItem = "Dropper";
					SpawnSpot(SpawnItem, 1200, 1201, 0);
					SetActorVelocity(1201, Random(-8, 8) << 16, Random(-8, 8) << 16, Random(-8, 8) << 16, true, false);
					Thing_ChangeTID(1201, 0);
				}
			break;
	}
}

function void ArenaSpawnMobs(void)
{
	int MonsterID;
	
	for (int i = ArenaSpotSpawns; i < ArenaSpotSpawns + 30; i++)
	{
		// Get a random monster from the list
		MonsterID = Random(-5 + (ArenaWave / 10), ArenaWave / 5);
		
		if (MonsterID > 16)
			MonsterID = 16;
		
		// Skip this spawn spot if < 0 is hit by the randomizer
		if (MonsterID < 0)
			continue;
			
		// Spawn the monster
		if (SpawnSpotFacingForced(Monsters[MonsterID], i, 1002))
			SpawnSpotForced("TeleportFog", i, 0, 0);
	}
}

function void ArenaSetEnvironment(int ID)
{
	if (ID == -1)
	{
		int EnvironmentRandomizer = Random(-10, MAX_ENVIRONMENTS);
		if (EnvironmentRandomizer > 0)
			ID = EnvironmentRandomizer;
	}

	switch (ID)
	{
		case 0: // Normal
			Light_Fade(ArenaSectorTag, 192, 35);
			Light_Fade(ArenaSectorTag + 1, 192, 35);
			Light_Fade(ArenaSectorTag + 2, 192, 35);
			Sector_SetFade(ArenaSectorTag, 0, 0, 0);
			Sector_SetFade(ArenaSectorTag + 1, 0, 0, 0);
			Sector_SetFade(ArenaSectorTag + 2, 0, 0, 0);
			ChangeFloor(ArenaSectorTag, "CEIL5_1");
			ChangeFloor(ArenaSectorTag + 1, "CEIL5_2");
			ChangeFloor(ArenaSectorTag + 2, "FLAT3");
			Sector_SetDamage(ArenaSectorTag, 0, 0);
			Sector_SetDamage(ArenaSectorTag + 1, 0, 0);
			Sector_SetDamage(ArenaSectorTag + 2, 0, 0);
			Sector_SetColor(ArenaSectorTag, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 1, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 2, 255, 255, 255);
			break;
		case 1: // Blackout
			Light_Fade(ArenaSectorTag, 0, 35);
			Light_Fade(ArenaSectorTag + 1, 0, 35);
			Light_Fade(ArenaSectorTag + 2, 0, 35);
			break;
		case 2: // Foggy
			int r = Random(0, 255);
			int g = Random(0, 255);
			int b = Random(0, 255);
			Light_Fade(ArenaSectorTag, 128, 35);
			Light_Fade(ArenaSectorTag + 1, 128, 35);
			Light_Fade(ArenaSectorTag + 2, 128, 35);
			Sector_SetFade(ArenaSectorTag, r, g, b);
			Sector_SetFade(ArenaSectorTag + 1, r, g, b);
			Sector_SetFade(ArenaSectorTag + 2, r, g, b);
			break;
		case 3: // The Floor is Lava
			ChangeFloor(ArenaSectorTag, "LAVA1");
			ChangeFloor(ArenaSectorTag + 1, "LAVA1");
			ChangeFloor(ArenaSectorTag + 2, "LAVA1");
			Sector_SetDamage(ArenaSectorTag, 1, 14);
			Sector_SetDamage(ArenaSectorTag + 1, 1, 14);
			Sector_SetDamage(ArenaSectorTag + 2, 1, 14);
			break;
		case 4: // Grayscale
			Sector_SetColor(ArenaSectorTag, 255, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 1, 255, 255, 255, 255);
			Sector_SetColor(ArenaSectorTag + 2, 255, 255, 255, 255);
			break;
	}
	
	ArenaEnvironment = ID;
}
