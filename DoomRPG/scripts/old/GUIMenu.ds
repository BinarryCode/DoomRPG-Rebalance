#include "RPG.dh"

#include "Augs.dh"
#include "AugData.dh"
#include "GUI.dh"
#include "GUIMenu.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "Mission.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Skills.dh"
#include "SkillData.dh"
#include "Stats.dh"
#include "Utils.dh"

function void CreateMenus()
{
	// Main Window
	GUIWindow *MainWindow = GUICreateWindow();
	MainWindow->X = 0;
	MainWindow->Y = 100;
	MainWindow->Width = 360;
	MainWindow->Height = 320;
	MainWindow->CanClose = false;
	
	// Stats Window
	GUIWindow *StatsWindow = GUICreateWindow();
	StatsWindow->Title = "Stats";
	StatsWindow->X = 360;
	StatsWindow->Y = 100;
	StatsWindow->Width = 220;
	StatsWindow->Height = 100;
	StatsWindow->Visible = true;
	
	// Augmentations Window
	GUIWindow *AugsWindow = GUICreateWindow();
	AugsWindow->Title = "Augs";
	AugsWindow->X = 0;
	AugsWindow->Y = 420;
	AugsWindow->Width = 104;
	AugsWindow->Height = 112;
	AugsWindow->Visible = true;
	
	// Skills Window
	GUIWindow *SkillsWindow = GUICreateWindow();
	SkillsWindow->Title = "Skills";
	SkillsWindow->X = 360;
	SkillsWindow->Y = 200;
	SkillsWindow->Width = 260;
	SkillsWindow->Height = 260;
	SkillsWindow->Visible = true;
	
	// Add Windows to Array
	Player.Window[WINDOW_MAIN] = MainWindow;
	Player.Window[WINDOW_STATS] = StatsWindow;
	Player.Window[WINDOW_AUGS] = AugsWindow;
	Player.Window[WINDOW_SKILLS] = SkillsWindow;
};

function void MenuUpdate()
{
	UpdateMainMenu();
	UpdateStatsMenu();
	UpdateAugsMenu();
	UpdateSkillsMenu();
};

script void UpdateMainMenu()
{
	// Menu Icon Tooltips
	static GUITooltip *StatTooltip = GUICreateTooltip();
	static GUITooltip *AugTooltip = GUICreateTooltip();
	static GUITooltip *SkillTooltip = GUICreateTooltip();
	static GUITooltip *ShieldTooltip = GUICreateTooltip();
	static GUITooltip *StimsTooltip = GUICreateTooltip();
	static GUITooltip *ShopTooltip = GUICreateTooltip();
	
	// Menu Icons
	static GUIIcon *StatIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUIIcon *AugIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUIIcon *SkillIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUIIcon *ShieldIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUIIcon *StimsIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUIIcon *ShopIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	
	// Player Info
	static GUIIcon *PlayerIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *PlayerInfoLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	
	// Map Info
	static GUIIcon *MapIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *MonstersLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	static GUILabel *ItemsLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	static GUILabel *SecretsLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
    
	// Stat Tokens
	static GUIIcon *StatTokenIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *StatTokenLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	
	// Stat Cap Tokens
	static GUIIcon *StatCapTokenIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *StatCapTokenLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	
	// Skill Tokens
	static GUIIcon *SkillTokenIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *SkillTokenLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	
	// Augmentations
	static GUIIcon *AugCanisterIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *AugCanisterLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	static GUIIcon *AugUpgradeCanisterIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *AugUpgradeCanisterLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	static GUIIcon *AugSlotIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *AugSlotLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	
	// Stims
	static GUIIcon *StimIcon = GUICreateIcon(Player.Window[WINDOW_MAIN]);
	static GUILabel *StimLabel = GUICreateLabel(Player.Window[WINDOW_MAIN]);
	
    while (true)
	{
		// Window Title
		Player.Window[WINDOW_MAIN]->Title = StrParam("%N\n", PlayerNumber() + 1);
		
		// Icon Tooltips
		StatTooltip->Text = "\ciStats Menu";
		AugTooltip->Text = "\cdAugmenations Menu";
		SkillTooltip->Text = "\cnSkills Menu";
		ShieldTooltip->Text = "\cvShield Menu";
		StimsTooltip->Text = "\cuStims Menu";
		ShopTooltip->Text = "\ckShop Menu";
		StatTooltip->NoBack = true;
		AugTooltip->NoBack = true;
		SkillTooltip->NoBack = true;
		ShieldTooltip->NoBack = true;
		StimsTooltip->NoBack = true;
		ShopTooltip->NoBack = true;
		
		// Stat Menu Icon
		StatIcon->Texture = "STAT1";
		StatIcon->X = 8;
		StatIcon->Y = 8;
		StatIcon->Width = 24;
		StatIcon->Height = 24;
		StatIcon->Tooltip = StatTooltip;
		StatIcon->OnClick = function void(GUIIcon *Icon) { Player.Window[WINDOW_STATS]->Visible = !Player.Window[WINDOW_STATS]->Visible; };
		
		// Augmentations Menu Icon
		AugIcon->Texture = "AUGCA0";
		AugIcon->X = 40;
		AugIcon->Y = 8;
		AugIcon->Width = 24;
		AugIcon->Height = 24;
		AugIcon->Tooltip = AugTooltip;
		AugIcon->OnClick = function void(GUIIcon *Icon) { Player.Window[WINDOW_AUGS]->Visible = !Player.Window[WINDOW_AUGS]->Visible; };
		
		// Skill Menu Icon
		SkillIcon->Texture = "EPUPA0";
		SkillIcon->X = 68;
		SkillIcon->Y = 4;
		SkillIcon->XOff = 16;
		SkillIcon->YOff = 24;
		SkillIcon->Width = 32;
		SkillIcon->Height = 32;
		SkillIcon->Tooltip = SkillTooltip;
		SkillIcon->OnClick = function void(GUIIcon *Icon) { Player.Window[WINDOW_SKILLS]->Visible = !Player.Window[WINDOW_SKILLS]->Visible; };
		
		// Shield Menu Icon
		ShieldIcon->Texture = "SHPAA0";
		ShieldIcon->X = 108;
		ShieldIcon->Y = 4;
		ShieldIcon->Width = 32;
		ShieldIcon->Height = 32;
		ShieldIcon->Tooltip = ShieldTooltip;
		
		// Stims Menu Icon
		StimsIcon->Texture = "STIMB0";
		StimsIcon->X = 140;
		StimsIcon->Y = 4;
		StimsIcon->Width = 32;
		StimsIcon->Height = 32;
		StimsIcon->Tooltip = StimsTooltip;
		
		// Shop Icon
		ShopIcon->Texture = "CREDA0";
		ShopIcon->X = 176;
		ShopIcon->Y = 4;
		ShopIcon->XOff = 16;
		ShopIcon->YOff = 20;
		ShopIcon->Width = 32;
		ShopIcon->Height = 32;
		ShopIcon->Tooltip = ShopTooltip;
		
		// Player Info String
		str PlayerInfo;
		PlayerInfo = StrParam("\cjLevel: %d\n\n", Player.Level);
		PlayerInfo = StrParam("%s\cjXP: %d / %d\n\n", PlayerInfo, Player.XP, Player.XPNext);
		PlayerInfo = StrParam("%s\ckTitle: %s (%d / %d)\n\n", PlayerInfo, Player.RankString, Player.RankLevel, MAX_RANK);
		PlayerInfo = StrParam("%s\ckRank: %d / %d\n\n", PlayerInfo, Player.Rank, Player.RankNext);
		if (Player.RankLevel > 0)
			PlayerInfo = StrParam("%s\ckPayout: %d C (%s) [%d%%]\n\n", PlayerInfo, CalculatePay(), FormatTime(Player.PayTimer), Player.PayBonus);
		
		// Player/Class Icon
		PlayerIcon->Texture = "PLAYA1";
		PlayerIcon->X = 20;
		PlayerIcon->Y = 48;
		PlayerIcon->Width = 32;
		PlayerIcon->Height = 48;
		
		// Player Info
		PlayerInfoLabel->Text = PlayerInfo;
		PlayerInfoLabel->X = 64;
		PlayerInfoLabel->Y = 72;
		PlayerInfoLabel->Big = true;
		
		// Map Icon
		MapIcon->Texture = "PMAPA0";
		MapIcon->X = 20;
		MapIcon->Y = 112;
		MapIcon->Width = 28;
		MapIcon->Height = 27;
		
		// Kills
		MonstersLabel->Text = StrParam("Monsters: %d / %d\n", GetLevelInfo(LEVELINFO_KILLED_MONSTERS), GetLevelInfo(LEVELINFO_TOTAL_MONSTERS));
		MonstersLabel->X = 64;
		MonstersLabel->Y = 116;
		MonstersLabel->Color = (CurrentLevel->KillBonus ? MenuCursorColor : CR_BRICK);
		MonstersLabel->Big = true;
		
		// Items
		ItemsLabel->Text = StrParam("Items: %d / %d\n", GetLevelInfo(LEVELINFO_FOUND_ITEMS), GetLevelInfo(LEVELINFO_TOTAL_ITEMS));
		ItemsLabel->X = 64;
		ItemsLabel->Y = 128;
		ItemsLabel->Color = (CurrentLevel->ItemsBonus ? MenuCursorColor : CR_LIGHTBLUE);
		ItemsLabel->Big = true;
		
		// Secrets
		SecretsLabel->Text = StrParam("Secrets: %d / %d\n", GetLevelInfo(LEVELINFO_FOUND_SECRETS), GetLevelInfo(LEVELINFO_TOTAL_SECRETS));
		SecretsLabel->X = 64;
		SecretsLabel->Y = 140;
		SecretsLabel->Color = (CurrentLevel->ItemsBonus ? MenuCursorColor : CR_GOLD);
		SecretsLabel->Big = true;
		
		// Stat Tokens
		StatTokenIcon->Texture = "TOKAA0";
		StatTokenIcon->X = 24;
		StatTokenIcon->Y = 160;
		StatTokenIcon->Width = 24;
		StatTokenIcon->Height = 21;
		StatTokenLabel->Text = StrParam("%d\n", CheckInventory("StatToken"));
		StatTokenLabel->X = 64;
		StatTokenLabel->Y = 169;
		StatTokenLabel->Color = CR_RED;
		StatTokenLabel->Big = true;
		
		// Stat Cap Tokens
		StatCapTokenIcon->Texture = "TOKBA0";
		StatCapTokenIcon->X = 24;
		StatCapTokenIcon->Y = 180;
		StatCapTokenIcon->Width = 24;
		StatCapTokenIcon->Height = 21;
		StatCapTokenLabel->Text = StrParam("%d / 100\n", CheckInventory("StatCapToken"));
		StatCapTokenLabel->X = 64;
		StatCapTokenLabel->Y = 189;
		StatCapTokenLabel->Color = CR_YELLOW;
		StatCapTokenLabel->Big = true;
		
		// Skill Tokens
		SkillTokenIcon->Texture = "TOKCA0";
		SkillTokenIcon->X = 24;
		SkillTokenIcon->Y = 200;
		SkillTokenIcon->Width = 24;
		SkillTokenIcon->Height = 21;
		SkillTokenLabel->Text = StrParam("%d\n", CheckInventory("SkillToken"));
		SkillTokenLabel->X = 64;
		SkillTokenLabel->Y = 209;
		SkillTokenLabel->Color = CR_DARKGREEN;
		SkillTokenLabel->Big = true;
		
		// Augmentations
		AugCanisterIcon->Texture = "AUGCA0";
		AugCanisterIcon->X = 160;
		AugCanisterIcon->Y = 157;
		AugCanisterIcon->Width = 24;
		AugCanisterIcon->Height = 24;
		AugCanisterLabel->Text = StrParam("%d\n", CheckInventory("AugCanister"));
		AugCanisterLabel->X = 192;
		AugCanisterLabel->Y = 169;
		AugCanisterLabel->Color = CR_GREEN;
		AugCanisterLabel->Big = true;
		AugUpgradeCanisterIcon->Texture = "AUGUA0";
		AugUpgradeCanisterIcon->X = 159;
		AugUpgradeCanisterIcon->Y = 173;
		AugUpgradeCanisterIcon->Width = 24;
		AugUpgradeCanisterIcon->Height = 24;
		AugUpgradeCanisterLabel->Text = StrParam("%d\n", CheckInventory("AugUpgradeCanister"));
		AugUpgradeCanisterLabel->X = 192;
		AugUpgradeCanisterLabel->Y = 189;
		AugUpgradeCanisterLabel->Color = CR_GREEN;
		AugUpgradeCanisterLabel->Big = true;
		AugSlotIcon->Texture = "AUGUB0";
		AugSlotIcon->X = 155;
		AugSlotIcon->Y = 187;
		AugSlotIcon->Width = 32;
		AugSlotIcon->Height = 32;
		AugSlotLabel->Text = StrParam("%d / %d\n", Player.Augs.SlotsUsed, Player.Augs.Slots);
		AugSlotLabel->X = 192;
		AugSlotLabel->Y = 209;
		AugSlotLabel->Color = CR_GREEN;
		AugSlotLabel->Big = true;
		
		// Stim Info
		str StimInfo;
		StimInfo = StrParam("S: %d\n\n", CheckInventory("StimSmall"));
		StimInfo = StrParam("%sM: %d\n\n", StimInfo, CheckInventory("StimMedium"));
		StimInfo = StrParam("%sL: %d\n\n", StimInfo, CheckInventory("StimLarge"));
		StimInfo = StrParam("%sXL: %d\n", StimInfo, CheckInventory("StimXL"));
		
		// Stim
		StimIcon->Texture = "STIMB0";
		StimIcon->X = 20;
		StimIcon->Y = 240;
		StimIcon->Width = 32;
		StimIcon->Height = 32;
		StimLabel->Text = StimInfo;
		StimLabel->X = 64;
		StimLabel->Y = 256;
		StimLabel->Color = CR_WHITE;
		StimLabel->Big = true;
		
		Delay(1);
	};
};

script void UpdateStatsMenu()
{
	// Stat Tooltips
	static GUITooltip *StrengthTooltip = GUICreateTooltip();
	static GUITooltip *DefenseTooltip = GUICreateTooltip();
	static GUITooltip *VitalityTooltip = GUICreateTooltip();
	static GUITooltip *EnergyTooltip = GUICreateTooltip();
	static GUITooltip *RegenerationTooltip = GUICreateTooltip();
	static GUITooltip *AgilityTooltip = GUICreateTooltip();
	static GUITooltip *CapacityTooltip = GUICreateTooltip();
	static GUITooltip *LuckTooltip = GUICreateTooltip();
	
	// Stat Perk Icons
	static GUIIcon *[8] PerkIcons;
	for (int i = 0; i < 8; i++)
		PerkIcons[i] = GUICreateIcon(Player.Window[WINDOW_STATS]);
	
	// Stat Icons
	static GUIIcon *StrengthIcon = GUICreateIcon(Player.Window[WINDOW_STATS]);
	static GUIIcon *DefenseIcon = GUICreateIcon(Player.Window[WINDOW_STATS]);
	static GUIIcon *VitalityIcon = GUICreateIcon(Player.Window[WINDOW_STATS]);
	static GUIIcon *EnergyIcon = GUICreateIcon(Player.Window[WINDOW_STATS]);
	static GUIIcon *RegenerationIcon = GUICreateIcon(Player.Window[WINDOW_STATS]);
	static GUIIcon *AgilityIcon = GUICreateIcon(Player.Window[WINDOW_STATS]);
	static GUIIcon *CapacityIcon = GUICreateIcon(Player.Window[WINDOW_STATS]);
	static GUIIcon *LuckIcon = GUICreateIcon(Player.Window[WINDOW_STATS]);
	
	// Stat Labels
	static GUILabel *StrengthLabel = GUICreateLabel(Player.Window[WINDOW_STATS]);
	static GUILabel *DefenseLabel = GUICreateLabel(Player.Window[WINDOW_STATS]);
	static GUILabel *VitalityLabel = GUICreateLabel(Player.Window[WINDOW_STATS]);
	static GUILabel *EnergyLabel = GUICreateLabel(Player.Window[WINDOW_STATS]);
	static GUILabel *RegenerationLabel = GUICreateLabel(Player.Window[WINDOW_STATS]);
	static GUILabel *AgilityLabel = GUICreateLabel(Player.Window[WINDOW_STATS]);
	static GUILabel *CapacityLabel = GUICreateLabel(Player.Window[WINDOW_STATS]);
	static GUILabel *LuckLabel = GUICreateLabel(Player.Window[WINDOW_STATS]);
	
	while (true)
	{
		// Tooltip Info
		str StrengthInfo, DefenseInfo, VitalityInfo, EnergyInfo, RegenInfo, AgilityInfo, CapacityInfo, LuckInfo;
		StrengthInfo = "Determines extra damage you deal\nwith all types of attacks\n\n";
		StrengthInfo = StrParam("%s\cg+%d%% Base Damage\n\n", StrengthInfo, Player.Level * (10 - GameSkill()));
		StrengthInfo = StrParam("%s\cg+%d%% Bonus Damage\n\n", StrengthInfo, Player.BonusDamage);
		StrengthInfo = StrParam("%s\cg+%d%% Total Damage\n", StrengthInfo, Player.TotalDamage);
		DefenseInfo = "Determines your resistance to\nall forms of damage\n\n";
		DefenseInfo = StrParam("%s\cd%d%% Damage Taken\n\n", DefenseInfo, Player.DamageFactor * 100.0);
		DefenseInfo = StrParam("%s\cd%d Mass\n", DefenseInfo, Player.Mass);
		VitalityInfo = "Determines your max HP and\nregeneration rate\n\n";
		VitalityInfo = StrParam("%s\ca%d Max HP\n\n", VitalityInfo, Player.HealthMax);
		VitalityInfo = StrParam("%s\ca%d HP Regen\n", VitalityInfo, Player.HPAmount);
		EnergyInfo = "Determines your max EP and\nregeneration rate\n\n";
		EnergyInfo = StrParam("%s\cn%d Max EP\n\n", EnergyInfo, Player.EPMax);
		EnergyInfo = StrParam("%s\cn%d EP Regen\n\n", EnergyInfo, Player.EPAmount);
		EnergyInfo = StrParam("%s\cn%d Second Aura Timer\n", EnergyInfo, ((1050 + (Player.Energy * 5.25)) * (Player.AuraBonus + 1)) / 35);
		RegenInfo = "Determines your regeneration rate and\nthe time that Regeneration Spheres last\n\n";
		RegenInfo = StrParam("%s\ca%k Second HP Timer\n\n", RegenInfo, (fixed)Player.HPTime / (35.0 * 2.0));
		RegenInfo = StrParam("%s\cn%k Second EP Timer\n\n", RegenInfo, (fixed)Player.EPTime / (35.0 * 2.0));
		RegenInfo = StrParam("%s\ct%d Second Regen Bonus\n\n", RegenInfo, 5.0 + ((fixed)Player.Regeneration / 13.33));
		RegenInfo = StrParam("%s\cdToxicity Regen: %d\n", RegenInfo, 30 - Player.ToxicityRegenBonus);
		AgilityInfo = "Governs your movement, jumping and\nfire speeds as well as your\nsurvival bonus\n\n";
		AgilityInfo = StrParam("%s\ciSpeed: %k\n\n", AgilityInfo, Player.Speed);
		AgilityInfo = StrParam("%s\ciJump Height: %k\n\n", AgilityInfo, Player.JumpHeight);
		AgilityInfo = StrParam("%s\ci%d%% Weapon Speed\n\n", AgilityInfo, Player.WeaponSpeed);
		AgilityInfo = StrParam("%s\ci%d%% Survival Bonus\n", AgilityInfo, Player.SurvivalBonus);
		CapacityInfo = "Determines your ammo carrying capacity and\nhow many compounds of each type you can\ncarry for Stims as well as your maximum\ninevntory size\n\n";
		CapacityInfo = StrParam("%s\caBullets: %d/%d\n\n", CapacityInfo, CheckInventory("Clip"), GetAmmoCapacity("Clip"));
		CapacityInfo = StrParam("%s\ciShells: %d/%d\n\n", CapacityInfo, CheckInventory("Shell"), GetAmmoCapacity("Shell"));
		CapacityInfo = StrParam("%s\cuRockets: %d/%d\n\n", CapacityInfo, CheckInventory("RocketAmmo"), GetAmmoCapacity("RocketAmmo"));
		CapacityInfo = StrParam("%s\cdCells: %d/%d\n\n", CapacityInfo, CheckInventory("Cells"), GetAmmoCapacity("Cells"));
		CapacityInfo = StrParam("%s\cvStim Vials Max: %d\n", CapacityInfo, Player.Stim.VialMax);
		if (GetCVar("drpg_inv_capacity"))
			CapacityInfo = StrParam("%s\n\cjInventory: %d/%d\n", CapacityInfo, Player.InvItems, CheckInventoryMax());
		LuckInfo = "Determines the rates at which most items drop\n\n";
		LuckInfo = StrParam("%s\ck%k%% Credit Drop Chance\n\n", LuckInfo, Player.CreditChance);
		LuckInfo = StrParam("%s\ck%k%% Health Drop Chance\n\n", LuckInfo, Player.HealthChance);
		LuckInfo = StrParam("%s\ck%k%% EP Capsule Drop Chance\n\n", LuckInfo, Player.EPChance);
		LuckInfo = StrParam("%s\ck%k%% Armor Drop Chance\n\n", LuckInfo, Player.ArmorChance);
		LuckInfo = StrParam("%s\ck%k%% Powerup Drop Chance\n\n", LuckInfo, Player.PowerupChance);
		LuckInfo = StrParam("%s\ck%k%% Weapon Drop Chance\n\n", LuckInfo, Player.WeaponChance);
		LuckInfo = StrParam("%s\ck%k%% Token Drop Chance\n\n", LuckInfo, Player.TokenChance);
		LuckInfo = StrParam("%s\ck%k%% Augmentation Drop Chance\n\n", LuckInfo, Player.AugChance);
		LuckInfo = StrParam("%s\ck%k%% Shield Part Drop Chance\n\n", LuckInfo, Player.ShieldChance);
		LuckInfo = StrParam("%s\ck%k%% Stim/Vial Drop Chance\n", LuckInfo, Player.StimChance);
		
		// Tooltip Info - Perks
		if (Player.Perks[STAT_STRENGTH])
			StrengthInfo = StrParam("%s\n\n\cgStrength Perk\n\cgDamage exponentially increases as\n\cghealth lowers\n", StrengthInfo);
		if (Player.Perks[STAT_DEFENSE])
			DefenseInfo = StrParam("%s\n\n\cdDefense Perk\n\cdDamage taken exponentially\n\cddecreases as health lowers\n", DefenseInfo);
		if (Player.Perks[STAT_VITALITY])
			VitalityInfo = StrParam("%s\n\n\caVitality Perk\n\caNo Movement Penalties\n\ca2x HP regeneration rate\n\cabelow 10%% health\n", VitalityInfo);
		if (Player.Perks[STAT_ENERGY])
			EnergyInfo = StrParam("%s\n\n\cnEnergy Perk\n\cn2x EP regeneration rate\n\cnwhen burned out\n\cnMultiple Auras\n", EnergyInfo);
		if (Player.Perks[STAT_REGENERATION])
			RegenInfo = StrParam("%s\n\n\ctRegeneration Perk\n\ctRegeneration speeds increase\n\ctas your HP/EP gets lower\n", RegenInfo);
		if (Player.Perks[STAT_AGILITY])
			AgilityInfo = StrParam("%s\n\n\ciAgility Perk\n\ci+30%% Survival Bonus\n\ciMovement increases Regeneration\n\cispeed\n", AgilityInfo);
		if (Player.Perks[STAT_CAPACITY])
			CapacityInfo = StrParam("%s\n\n\chCapacity Perk\n\chAmmo regeneration\n", CapacityInfo);
		if (Player.Perks[STAT_LUCK])
			LuckInfo = StrParam("%s\n\n\ckLuck Perk\n\ckAlways have full automap and scanner\n", LuckInfo);
		
		// Tooltips
		StrengthTooltip->Type = TT_COMPLEX;
		StrengthTooltip->Title = StrParam("\cgStrength: %d\n", Player.Strength);
		StrengthTooltip->Text = StrengthInfo;
		StrengthTooltip->Width = 220;
		StrengthTooltip->Icon = "STAT1";
		StrengthTooltip->IconXOff = 20;
		StrengthTooltip->IconYOff = 24;
		DefenseTooltip->Type = TT_COMPLEX;
		DefenseTooltip->Title = StrParam("\cdDefense: %d\n", Player.Defense);
		DefenseTooltip->Text = DefenseInfo;
		DefenseTooltip->Width = 190;
		DefenseTooltip->Icon = "STAT2";
		DefenseTooltip->IconXOff = 20;
		DefenseTooltip->IconYOff = 24;
		VitalityTooltip->Type = TT_COMPLEX;
		VitalityTooltip->Title = StrParam("\caVitality: %d\n", Player.Vitality);
		VitalityTooltip->Text = VitalityInfo;
		VitalityTooltip->Width = 180;
		VitalityTooltip->Icon = "STAT3";
		VitalityTooltip->IconXOff = 20;
		VitalityTooltip->IconYOff = 24;
		EnergyTooltip->Type = TT_COMPLEX;
		EnergyTooltip->Title = StrParam("\cnEnergy: %d\n", Player.Energy);
		EnergyTooltip->Text = EnergyInfo;
		EnergyTooltip->Width = 170;
		EnergyTooltip->Icon = "STAT4";
		EnergyTooltip->IconXOff = 20;
		EnergyTooltip->IconYOff = 24;
		RegenerationTooltip->Type = TT_COMPLEX;
		RegenerationTooltip->Title = StrParam("\ctRegeneration: %d\n", Player.Regeneration);
		RegenerationTooltip->Text = RegenInfo;
		RegenerationTooltip->Width = 260;
		RegenerationTooltip->Icon = "STAT5";
		RegenerationTooltip->IconXOff = 20;
		RegenerationTooltip->IconYOff = 24;
		AgilityTooltip->Type = TT_COMPLEX;
		AgilityTooltip->Title = StrParam("\ciAgility: %d\n", Player.Agility);
		AgilityTooltip->Text = AgilityInfo;
		AgilityTooltip->Width = 230;
		AgilityTooltip->Icon = "STAT6";
		AgilityTooltip->IconXOff = 20;
		AgilityTooltip->IconYOff = 24;
		CapacityTooltip->Type = TT_COMPLEX;
		CapacityTooltip->Title = StrParam("\chCapacity: %d\n", Player.Capacity);
		CapacityTooltip->Text = CapacityInfo;
		CapacityTooltip->Width = 280;
		CapacityTooltip->Icon = "STAT7";
		CapacityTooltip->IconXOff = 20;
		CapacityTooltip->IconYOff = 24;
		LuckTooltip->Type = TT_COMPLEX;
		LuckTooltip->Title = StrParam("\ckLuck: %d\n", Player.Luck);
		LuckTooltip->Text = LuckInfo;
		LuckTooltip->Width = 300;
		LuckTooltip->Icon = "STAT8";
		LuckTooltip->IconXOff = 20;
		LuckTooltip->IconYOff = 24;
		
		// Stat Perk Icons
		for (int i = 0; i < 8; i++)
		{
			PerkIcons[i]->Texture = "STATP";
			PerkIcons[i]->X = 32 + (56 * (i % 4));
			PerkIcons[i]->Y = 16 + (32 * (i / 4)) + (i > 3 ? 8 : 0);
			
			// Determine visibility from whether you have the perk or not
			PerkIcons[i]->Visible = Player.Perks[i];
		};
		
		// Stat Icons
		StrengthIcon->Texture = "STAT1";
		StrengthIcon->X = 8;
		StrengthIcon->Y = 8;
		StrengthIcon->Width = 24;
		StrengthIcon->Height = 24;
		StrengthIcon->Tooltip = StrengthTooltip;
		StrengthIcon->OnClick = function void(GUIIcon *) { IncreaseStat(STAT_STRENGTH); };
		DefenseIcon->Texture = "STAT2";
		DefenseIcon->X = 64;
		DefenseIcon->Y = 4;
		DefenseIcon->Width = 24;
		DefenseIcon->Height = 24;
		DefenseIcon->Tooltip = DefenseTooltip;
		DefenseIcon->OnClick = function void(GUIIcon *) { IncreaseStat(STAT_DEFENSE); };
		VitalityIcon->Texture = "STAT3";
		VitalityIcon->X = 120;
		VitalityIcon->Y = 6;
		VitalityIcon->Width = 24;
		VitalityIcon->Height = 24;
		VitalityIcon->Tooltip = VitalityTooltip;
		VitalityIcon->OnClick = function void(GUIIcon *) { IncreaseStat(STAT_VITALITY); };
		EnergyIcon->Texture = "STAT4";
		EnergyIcon->X = 176;
		EnergyIcon->Y = 8;
		EnergyIcon->Width = 24;
		EnergyIcon->Height = 24;
		EnergyIcon->Tooltip = EnergyTooltip;
		EnergyIcon->OnClick = function void(GUIIcon *) { IncreaseStat(STAT_ENERGY); };
		RegenerationIcon->Texture = "STAT5";
		RegenerationIcon->X = 8;
		RegenerationIcon->Y = 48;
		RegenerationIcon->Width = 24;
		RegenerationIcon->Height = 24;
		RegenerationIcon->Tooltip = RegenerationTooltip;
		RegenerationIcon->OnClick = function void(GUIIcon *) { IncreaseStat(STAT_REGENERATION); };
		AgilityIcon->Texture = "STAT6";
		AgilityIcon->X = 64;
		AgilityIcon->Y = 48;
		AgilityIcon->Width = 24;
		AgilityIcon->Height = 24;
		AgilityIcon->Tooltip = AgilityTooltip;
		AgilityIcon->OnClick = function void(GUIIcon *) { IncreaseStat(STAT_AGILITY); };
		CapacityIcon->Texture = "STAT7";
		CapacityIcon->X = 120;
		CapacityIcon->Y = 46;
		CapacityIcon->Width = 24;
		CapacityIcon->Height = 24;
		CapacityIcon->Tooltip = CapacityTooltip;
		CapacityIcon->OnClick = function void(GUIIcon *) { IncreaseStat(STAT_CAPACITY); };
		LuckIcon->Texture = "STAT8";
		LuckIcon->X = 176;
		LuckIcon->Y = 44;
		LuckIcon->Width = 24;
		LuckIcon->Height = 24;
		LuckIcon->Tooltip = LuckTooltip;
		LuckIcon->OnClick = function void(GUIIcon *) { IncreaseStat(STAT_LUCK); };
		
		// Stat Labels
		StrengthLabel->Text = StrParam("%d\n", Player.Strength);
		StrengthLabel->Alignment = LA_CENTER;
		StrengthLabel->X = 20;
		StrengthLabel->Y = 32;
		StrengthLabel->Color = CR_RED;
		StrengthLabel->Big = true;
		DefenseLabel->Text = StrParam("%d\n", Player.Defense);
		DefenseLabel->Alignment = LA_CENTER;
		DefenseLabel->X = 76;
		DefenseLabel->Y = 32;
		DefenseLabel->Color = CR_GREEN;
		DefenseLabel->Big = true;
		VitalityLabel->Text = StrParam("%d\n", Player.Vitality);
		VitalityLabel->Alignment = LA_CENTER;
		VitalityLabel->X = 132;
		VitalityLabel->Y = 32;
		VitalityLabel->Color = CR_BRICK;
		VitalityLabel->Big = true;
		EnergyLabel->Text = StrParam("%d\n", Player.Energy);
		EnergyLabel->Alignment = LA_CENTER;
		EnergyLabel->X = 188;
		EnergyLabel->Y = 32;
		EnergyLabel->Color = CR_LIGHTBLUE;
		EnergyLabel->Big = true;
		RegenerationLabel->Text = StrParam("%d\n", Player.Regeneration);
		RegenerationLabel->Alignment = LA_CENTER;
		RegenerationLabel->X = 20;
		RegenerationLabel->Y = 72;
		RegenerationLabel->Color = CR_PURPLE;
		RegenerationLabel->Big = true;
		AgilityLabel->Text = StrParam("%d\n", Player.Agility);
		AgilityLabel->Alignment = LA_CENTER;
		AgilityLabel->X = 76;
		AgilityLabel->Y = 72;
		AgilityLabel->Color = CR_ORANGE;
		AgilityLabel->Big = true;
		CapacityLabel->Text = StrParam("%d\n", Player.Capacity);
		CapacityLabel->Alignment = LA_CENTER;
		CapacityLabel->X = 132;
		CapacityLabel->Y = 72;
		CapacityLabel->Color = CR_BLUE;
		CapacityLabel->Big = true;
		LuckLabel->Text = StrParam("%d\n", Player.Luck);
		LuckLabel->Alignment = LA_CENTER;
		LuckLabel->X = 188;
		LuckLabel->Y = 72;
		LuckLabel->Color = CR_GOLD;
		LuckLabel->Big = true;
		
		Delay(1);
	};
};

script void UpdateAugsMenu()
{
	static GUITooltip *[MAX_AUGS] AugTooltips;
	static GUIIcon *[MAX_AUGS] AugIcons;
	static GUILabel *[MAX_AUGS] AugLabels;
	static GUIContextMenu *[MAX_AUGS] ContextMenus;

	for (int i = 0; i < MAX_AUGS; i++)
	{
		AugTooltips[i] = GUICreateTooltip();
		AugIcons[i] = GUICreateIcon(Player.Window[WINDOW_AUGS]);
		AugLabels[i] = GUICreateLabel(Player.Window[WINDOW_AUGS]);
		ContextMenus[i] = GUICreateContextMenu();
	};
	
	while (true)
	{
		for (int i = 0; i < MAX_AUGS; i++)
		{
			// Tooltip Description
			char[256] AugDescription;
			int Pos = 0;
			char Color;
			
			for (int j = 0; j < 256; j++)
				AugDescription[j] = 0;
			
			for (int j = 0; j < AugData[i].MaxLevel; j++)
			{
				if (Player.Augs.Level[i] <= j)
					Color = 'u'
				else
					Color = 'd';
				
				AugDescription[Pos++] = '\c';
				AugDescription[Pos++] = Color;
				
				for (int k = 0; Pos < 255 && k < StrLen(AugData[i].Description[j]); k++)
					AugDescription[Pos++] = AugData[i].Description[j][k];
				
				if (j < AugData[i].MaxLevel - 1) 
					AugDescription[Pos++] = '\n';
			};
			
			// Tooltip
			AugTooltips[i]->Type = TT_COMPLEX;
			AugTooltips[i]->Title = StrParam("\ca%s\n", AugData[i].Name);
			AugTooltips[i]->Text = StrParam("%s\n", AugDescription);
			AugTooltips[i]->Width = 208;
			if (Player.Augs.Active[i])
				AugTooltips[i]->Icon = StrParam("Aug%dE\n", i + 1)
			else if (Player.Augs.Level[i] > 0)
				AugTooltips[i]->Icon = StrParam("Aug%dB\n", i + 1)
			else
				AugTooltips[i]->Icon = StrParam("Aug%d\n", i + 1);
			AugTooltips[i]->IconXOff = 10;
			AugTooltips[i]->IconYOff = 4;
			
			/*
			Log ("=====\n");
			Log ("Tooltip @ %p\n", AugTooltips[i]);
			Log ("Title: %s\n", AugTooltips[i]->Title);
			Log ("-----\n");
			Log ("Text: %s\n", AugTooltips[i]->Text);
			Log ("-----\n");
			Log ("Icon: %s\n", AugTooltips[i]->Icon);
			Log ("-----\n");
			Log ("Offsets: %i, %i\n", AugTooltips[i]->IconXOff, AugTooltips[i]->IconYOff);
			Log ("=====\n");
			*/
			
			// Icon
			if (Player.Augs.Active[i])
				AugIcons[i]->Texture = StrParam("Aug%dE\n", i + 1)
			else if (Player.Augs.Level[i] > 0)
				AugIcons[i]->Texture = StrParam("Aug%dB\n", i + 1)
			else
				AugIcons[i]->Texture = StrParam("Aug%d\n", i + 1);
			AugIcons[i]->X = 5 + (32 * (i % 3));
			AugIcons[i]->Y = (32 * (i / 3));
			AugIcons[i]->Width = 25;
			AugIcons[i]->Height = 25;
			AugIcons[i]->XOff = 5;
			AugIcons[i]->YOff = 5;
			if (!AugIcons[i]->Tooltip)
				AugIcons[i]->Tooltip = AugTooltips[i];
			AugIcons[i]->ContextMenu = ContextMenus[i];
			
			// Context Menu
			ContextMenus[i]->X = AugIcons[i]->Window->X + AugIcons[i]->X;
			ContextMenus[i]->Y = AugIcons[i]->Window->Y + AugIcons[i]->Y;
			ContextMenus[i]->Data = i;
			ContextMenus[i]->Name[0] = "Equip/Activate Augmentation";
			ContextMenus[i]->Name[1] = "Upgrade Augmentation";
			ContextMenus[i]->OnClick[0] = function void(int Index) { if (Player.Augs.Level[Index] == 0) LevelUpAug(Index) else EquipAug(Index); };
			ContextMenus[i]->OnClick[1] = function void(int Index) { LevelUpAug(Index); };
			
			// Level
			AugLabels[i]->Text = StrParam("\cd%d/%d\n", Player.Augs.Level[i], AugData[i].MaxLevel);
			AugLabels[i]->X = 8 + (32 * (i % 3));
			AugLabels[i]->Y = 24 + (32 * (i / 3));
		};
		
		Delay(1);
	};
};

script void UpdateSkillsMenu()
{
	// Skill Category Icon Tooltips
	static GUITooltip *HealingTooltip = GUICreateTooltip();
	static GUITooltip *PowerupTooltip = GUICreateTooltip();
	static GUITooltip *AuraTooltip = GUICreateTooltip();
	static GUITooltip *AttackTooltip = GUICreateTooltip();
	static GUITooltip *SummonTooltip = GUICreateTooltip();
	static GUITooltip *UtilityTooltip = GUICreateTooltip();
	
	// Skill Category Icons
	static GUIIcon *HealingIcon = GUICreateIcon(Player.Window[WINDOW_SKILLS]);
	static GUIIcon *PowerupIcon = GUICreateIcon(Player.Window[WINDOW_SKILLS]);
	static GUIIcon *AuraIcon = GUICreateIcon(Player.Window[WINDOW_SKILLS]);
	static GUIIcon *AttackIcon = GUICreateIcon(Player.Window[WINDOW_SKILLS]);
	static GUIIcon *SummonIcon = GUICreateIcon(Player.Window[WINDOW_SKILLS]);
	static GUIIcon *UtilityIcon = GUICreateIcon(Player.Window[WINDOW_SKILLS]);
	
	// Skill Tooltip
	static GUITooltip *SkillTooltip = GUICreateTooltip();
	
	// Skill List
	static GUIList *SkillList = GUICreateList(Player.Window[WINDOW_SKILLS]);
	
	// Skill Context Menu
	static GUIContextMenu *SkillContextMenu = GUICreateContextMenu();
	
	while (true)
	{
		// Skill Category Icon Tooltips
		HealingTooltip->Text = "\cgHealing";
		PowerupTooltip->Text = "\cdPowerups";
		AuraTooltip->Text = "\cjAuras";
		AttackTooltip->Text = "\ciAttacks";
		SummonTooltip->Text = "\cnSummoning";
		UtilityTooltip->Text = "\cuUtility";
		HealingTooltip->NoBack = true;
		PowerupTooltip->NoBack = true;
		AuraTooltip->NoBack = true;
		AttackTooltip->NoBack = true;
		SummonTooltip->NoBack = true;
		UtilityTooltip->NoBack = true;
		
		// Skill Category Icons
		HealingIcon->Texture = "MEDIA0";
		HealingIcon->X = 8;
		HealingIcon->Y = 4;
		HealingIcon->Width = 32;
		HealingIcon->Height = 32;
		HealingIcon->XOff = 14;
		HealingIcon->YOff = 26;
		HealingIcon->Tooltip = HealingTooltip;
		HealingIcon->OnClick = function void(GUIIcon *) { Player.SkillPage = 0; };
		PowerupIcon->Texture = "PINVA0";
		PowerupIcon->X = 48;
		PowerupIcon->Y = 4;
		PowerupIcon->Width = 32;
		PowerupIcon->Height = 32;
		PowerupIcon->XOff = 14;
		PowerupIcon->YOff = 26;
		PowerupIcon->Tooltip = PowerupTooltip;
		PowerupIcon->OnClick = function void(GUIIcon *) { Player.SkillPage = 1; };
		AuraIcon->Texture = "AuraWhit";
		AuraIcon->X = 88;
		AuraIcon->Y = 4;
		AuraIcon->XOff = 0;
		AuraIcon->YOff = 30;
		AuraIcon->Width = 32;
		AuraIcon->Height = 32;
		AuraIcon->Tooltip = AuraTooltip;
		AuraIcon->OnClick = function void(GUIIcon *) { Player.SkillPage = 2; };
		AttackIcon->Texture = "BAL1A0";
		AttackIcon->X = 128;
		AttackIcon->Y = 4;
		AttackIcon->Width = 32;
		AttackIcon->Height = 32;
		AttackIcon->XOff = 16;
		AttackIcon->YOff = 16;
		AttackIcon->Tooltip = AttackTooltip;
		AttackIcon->OnClick = function void(GUIIcon *) { Player.SkillPage = 3; };
		SummonIcon->Texture = "TFOGD0";
		SummonIcon->X = 168;
		SummonIcon->Y = 4;
		SummonIcon->Width = 32;
		SummonIcon->Height = 32;
		SummonIcon->XOff = 16;
		SummonIcon->YOff = 44;
		SummonIcon->Tooltip = SummonTooltip;
		SummonIcon->OnClick = function void(GUIIcon *) { Player.SkillPage = 4; };
		UtilityIcon->Texture = "STAT8";
		UtilityIcon->X = 208;
		UtilityIcon->Y = 4;
		UtilityIcon->Width = 32;
		UtilityIcon->Height = 32;
		UtilityIcon->XOff = 16;
		UtilityIcon->YOff = 26;
		UtilityIcon->Tooltip = UtilityTooltip;
		UtilityIcon->OnClick = function void(GUIIcon *) { Player.SkillPage = 5; };
		
		// Build Skill Description
		Skill *CurrentSkill = &Skills[Player.SkillPage][SkillList->Selected];
		str SkillDescription = "";
		if (SkillList->Selected >= 0)
			if (CurrentSkill->Level > 0 && CurrentSkill->Level < CurrentSkill->MaxLevel)
				SkillDescription = StrParam("%s\n\n\cdNext Level\n%s\n",
											CurrentSkill->Description[CurrentSkill->CurrentLevel - 1],
											CurrentSkill->Description[CurrentSkill->Level])
			else if (CurrentSkill->Level == CurrentSkill->MaxLevel)
				SkillDescription = StrParam("%s\n",
											CurrentSkill->Description[CurrentSkill->CurrentLevel - 1])
			else
				SkillDescription = StrParam("\cu%s\n",
											CurrentSkill->Description[0]);
		
		// Skill Tooltip
		SkillTooltip->Type = TT_TITLE;
		SkillTooltip->Title = CurrentSkill->Name;
		SkillTooltip->Text = SkillDescription;
		SkillTooltip->Color = CR_YELLOW;
		SkillTooltip->Width = 232;
		SkillTooltip->Height = 0;
		
		// Skill List
		SkillList->X = 8;
		SkillList->Y = 64;
		SkillList->Shown = 20;
		SkillList->Tooltip = SkillTooltip;
		SkillList->ContextMenu = SkillContextMenu;
		
		// Skill Context Menu
		SkillContextMenu->X = SkillList->Window->X + SkillList->X;
		SkillContextMenu->Y = SkillList->Window->Y + SkillList->Y;
		SkillContextMenu->Data = SkillList->Selected;
		SkillContextMenu->Name[0] = "Learn/Upgrade Skill";
		SkillContextMenu->Name[1] = "Quick Use Skill";
		SkillContextMenu->Name[2] = "Decrease Current Level";
		SkillContextMenu->Name[3] = "Increase Current Level";
		SkillContextMenu->Name[4] = StrParam("Assign to Skill Key 1 [%K]\n", "drpg_useskill_1");
		SkillContextMenu->Name[5] = StrParam("Assign to Skill Key 2 [%K]\n", "drpg_useskill_2");
		SkillContextMenu->Name[6] = StrParam("Assign to Skill Key 3 [%K]\n", "drpg_useskill_3");
		SkillContextMenu->Name[7] = StrParam("Assign to Skill Key 4 [%K]\n", "drpg_useskill_4");
		SkillContextMenu->Name[8] = StrParam("Assign to Skill Key 5 [%K]\n", "drpg_useskill_5");
		SkillContextMenu->Name[9] = StrParam("Assign to Skill Key 6 [%K]\n", "drpg_useskill_6");
		SkillContextMenu->Name[10] = StrParam("Assign to Skill Key 7 [%K]\n", "drpg_useskill_7");
		SkillContextMenu->Name[11] = StrParam("Assign to Skill Key 8 [%K]\n", "drpg_useskill_8");
		SkillContextMenu->OnClick[0] = function void(int Selected) {};
		SkillContextMenu->OnClick[1] = function void(int Selected) {};
		SkillContextMenu->OnClick[2] = function void(int Selected) {};
		SkillContextMenu->OnClick[3] = function void(int Selected) {};
		SkillContextMenu->OnClick[4] = function void(int Selected) {};
		SkillContextMenu->OnClick[5] = function void(int Selected) {};
		SkillContextMenu->OnClick[6] = function void(int Selected) {};
		SkillContextMenu->OnClick[7] = function void(int Selected) {};
		SkillContextMenu->OnClick[8] = function void(int Selected) {};
		SkillContextMenu->OnClick[9] = function void(int Selected) {};
		SkillContextMenu->OnClick[10] = function void(int Selected) {};
		SkillContextMenu->OnClick[11] = function void(int Selected) {};
		
		// Clear the skill list for this frame
		for (int i = 0; i < MAX_SKILLS; i++)
			SkillList->Entries[i] = "";
        
        Delay(1);
	};
};
