#library "Augs"

#include "zcommon.acs"

#import "Stats.acs"
#import "Skills.acs"
#import "Shield.acs"
#import "Utils.acs"

#libdefine AUG_STRENGTH		0
#libdefine AUG_DEFENSE		1
#libdefine AUG_VITALITY		2
#libdefine AUG_ENERGY		3
#libdefine AUG_REGENERATION	4
#libdefine AUG_AGILITY		5
#libdefine AUG_CAPACITY		6
#libdefine AUG_LUCK			7

#libdefine MAX_AUGS			8
#libdefine AUG_LEVELS		5

str AugData[MAX_AUGS][1 + AUG_LEVELS] =
{
	// Name, Icon, Description...
	
	// Augs
	{
		"Muscle Replacer",
		"1.25x Damage",
		"1.5x Damage",
		"2x Damage",
		"4x Damage"
	},
	{
		"Dermal Armor",
		"-10x Damage Taken",
		"-20x Damage Taken",
		"-30x Damage Taken",
		"-40x Damage Taken",
		"-50x Damage Taken"
	},
	{
		"Pain Inhibitor",
		"2x Max Health",
		"2x Health Regen"
	},
	{
		"Psi Projector",
		"2x Max EP",
		"2x EP Regen",
		"2x Aura Timer"
	},
	{
		"Adrenaline Booster",
		"2x HP/EP Regen",
		"2x Shield Charge Rate",
		"-2x Shield Delay Rate"
	},
	{
		"Wired Reflexes",
		"2x Movement Speed",
		"2x Jump Height",
		"Double Weapon Speed"
	},
	{
		"Weight Distributor",
		"2x Ammo Limits"
	},
	{
		"Precognition Unit",
		"2x Survival Chance",
		"2x Luck Drop Chances"
	},
};

int AugLevelMax[MAX_AUGS] =
{
	4, 5, 2, 3, 3, 3, 1, 2
};

global int 47 : Augs[];
global int 48 : AugLevels[];
global int 49 : AugSlotsUsed;

int MaxAugSlots;

function void CheckAugSlots(void)
{
	MaxAugSlots = (6 - GameSkill()) + CheckInventory("AugSlotUpgrade");
}

function void CheckAugs(void)
{
	// Sanity check to prevent negative slots used
	if (AugSlotsUsed < 0)
		AugSlotsUsed = 0;

	// Strength Aug
	if (Augs[AUG_STRENGTH])
	{
		if (AugLevels[AUG_STRENGTH] == 1)
			Damage = FixedMul(Damage, 1.25);
		if (AugLevels[AUG_STRENGTH] == 2)
			Damage = FixedMul(Damage, 1.5);
		if (AugLevels[AUG_STRENGTH] == 3)
			Damage *= 2;
		if (AugLevels[AUG_STRENGTH] >= 4)
			Damage *= 4;
	}
	
	// Defense Aug
	if (Augs[AUG_DEFENSE])
	{
		if (AugLevels[AUG_DEFENSE] == 1)
			DamageFactor = DamageFactor - FixedMul(DamageFactor, 0.1);
		if (AugLevels[AUG_DEFENSE] == 2)
			DamageFactor = DamageFactor - FixedMul(DamageFactor, 0.2);
		if (AugLevels[AUG_DEFENSE] == 3)
			DamageFactor = DamageFactor - FixedMul(DamageFactor, 0.3);
		if (AugLevels[AUG_DEFENSE] == 4)
			DamageFactor = DamageFactor - FixedMul(DamageFactor, 0.4);
		if (AugLevels[AUG_DEFENSE] >= 5)
			DamageFactor = DamageFactor - FixedMul(DamageFactor, 0.5);
	}
	
	// Vitality Aug
	if (Augs[AUG_VITALITY])
	{
		if (AugLevels[AUG_VITALITY] >= 1)
			HealthMax *= 2;
		if (AugLevels[AUG_VITALITY] >= 2)
			HPRate += FixedMul(Vitality, 1.25) + FixedMul(Regeneration, 1.25);
	}
	
	// Energy Aug
	if (Augs[AUG_ENERGY])
	{
		if (AugLevels[AUG_ENERGY] >= 1)
			EPMax *= 2;
		if (AugLevels[AUG_ENERGY] >= 2)
			EPRate += FixedMul(Energy, 1.25) + FixedMul(Regeneration, 1.25);
		if (AugLevels[AUG_ENERGY] >= 3)
			AuraBonus = true;
		else
			AuraBonus = false;
	}
	
	// Regeneration Aug
	if (Augs[AUG_REGENERATION])
	{
		if (AugLevels[AUG_REGENERATION] >= 1)
		{
			HPRate += FixedMul(Vitality, 1.25) + FixedMul(Regeneration, 1.25);
			EPRate += FixedMul(Energy, 1.25) + FixedMul(Regeneration, 1.25);
		}
		if (AugLevels[AUG_REGENERATION] >= 2)
			ShieldChargeRate *= 2;
		if (AugLevels[AUG_REGENERATION] >= 3)
			ShieldDelayRate = FixedDiv(ShieldDelayRate, 2.0);
	}

	// Agility Aug
	if (Augs[AUG_AGILITY])
	{
		if (AugLevels[AUG_AGILITY] >= 1)
			Speed *= 2;
		if (AugLevels[AUG_AGILITY] >= 2)
			JumpHeight *= 2;
		if (AugLevels[AUG_AGILITY] >= 3)
			WeaponSpeed += 100;
	}
	
	// Capacity Aug
	if (Augs[AUG_CAPACITY])
	{
		SetAmmoCapacity("Clip", Capacity * 20 * 2);
		SetAmmoCapacity("Shell", Capacity * 10 * 2);
		SetAmmoCapacity("RocketAmmo", Capacity * 5 * 2);
		SetAmmoCapacity("Cell", Capacity * 30 * 2);
	}

	// Luck Aug
	if (Augs[AUG_LUCK])
	{
		if (AugLevels[AUG_LUCK] >= 1)
			SurvivalBonus *= 2;
		if (AugLevels[AUG_LUCK] >= 2)
		{
			HealthChance *= 2;
			ArmorChance *= 2;
			PowerupChance *= 2;
			RuneChance *= 2;
			TokenChance *= 2;
			AugChance *= 2;
			ShieldChance *= 2;
			EPChance *= 2;
		}
	}

	// Keep adding more
	// ...
}

function void EquipAug(int Aug)
{
	if (AugLevels[Aug] > 0)
	{
		if (Augs[Aug])
		{
			ActivatorSound("aug/equip", 127);
			AugSlotsUsed--;
			Augs[Aug] = false;
		}
		else
		{
			AugSlotsUsed++;
			
			if (AugSlotsUsed > MaxAugSlots)
			{
				ActivatorSound("menu/error", 127);
				Print(s:"You don't have a free Augmentation slot!");
				AugSlotsUsed--;
			}
			else
			{
				ActivatorSound("aug/equip", 127);
				Augs[Aug] = true;
			}
		}
	}
}

function void LevelUpAug(int Aug)
{
	if (AugLevels[Aug] < AugLevelMax[Aug])
	{
		if (AugLevels[Aug] == 0)
		{
			if (CheckInventory("AugCanister"))
			{
				ActivatorSound("aug/levelup", 127);
				TakeInventory("AugCanister", 1);
				AugLevels[Aug]++;
			}
			else
				ActivatorSound("menu/error", 127);
		}
		else
		{
			if (CheckInventory("AugUpgradeCanister"))
			{
				ActivatorSound("aug/levelup", 127);
				TakeInventory("AugUpgradeCanister", 1);
				AugLevels[Aug]++;
			}
			else
				ActivatorSound("menu/error", 127);
		}
	}
}
