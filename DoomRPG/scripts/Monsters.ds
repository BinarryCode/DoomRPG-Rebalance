#include "Arena.dh"
#include "Globals.dh"
#include "Monsters.dh"
#include "Popoffs.dh"
#include "RPG.dh"
#include "Stats.dh"
#include "Utils.dh"

// Monster Init Script
acscript MonsterInit(int Flags)
{
	// If initialization has already occurred on this monster, terminate
	if (CheckInventory("MonsterInit")) return;
	
	// Set as initialized
	SetInventory("MonsterInit", 1);
	
	// Set the Height
	SetInventory("HeightCheck", (int)GetActorPropertyFixed(0, APROP_Height));
	
	// Start Damage Numbers Script
	DamageNumbers();
	
	// Start Monster Loop Script
	MonsterLoop();
	
	// Give it a Health Bar
	if (!(Flags & MF_NOHEALTHBAR))
		SetInventory("HealthBar", 1);
	
	// Apply Monster Flags
	SetInventory("MonsterFlags", Flags);
	
	// Apply Stats
	if (!(Flags & MF_NOSTATS))
		MonsterStats(Flags, false);
};

// Modify the targeted monster (mainly for debugging)
acscript MonsterSet(int Level, int Aura, int Flags)
{
    // Move script to the targeted monster
    SetActivatorToTarget(Player.TID);
    
    // Set Stats/Flags
    SetInventory("MonsterLevel", Level);
    SetInventory("MonsterAura", Aura);
    SetInventory("MonsterFlags", Flags);
    
    // Re-run the Stats Script
    MonsterStats(Flags, true);
};

// Apply stats to monsters
script MonsterStats(int Flags, bool Modify)
{
    // Move Activator to whoever the player is targeting
    if (Modify)
        SetActivatorToTarget(Player.TID);
	
    int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterAura = CheckInventory("MonsterAura");
    int MonsterThreat = CheckInventory("MonsterThreat");
	int MonsterStrength = CheckInventory("MonsterStrength");
	int MonsterDefense = CheckInventory("MonsterDefense");
    int MonsterVitality = CheckInventory("MonsterVitality");
    int MonsterEnergy = CheckInventory("MonsterEnergy");
    int MonsterRegeneration = CheckInventory("MonsterRegeneration");
    int MonsterAgility = CheckInventory("MonsterAgility");
    int MonsterCapacity = CheckInventory("MonsterCapacity");
    int MonsterLuck = CheckInventory("MonsterLuck");
	int NumPlayers;
	int PlayerAvgLevel;
	int AuraRandomizer;
    int ThreatPool;
    
	// Add up the levels of all the players in the game
	for (int i = 0; i < MAX_PLAYERS; i++)
	{
		if (!PlayerInGame(i)) continue;
		NumPlayers++;
		PlayerAvgLevel += Players(i).Level;
	};
	
	// Now calculate the average level between them
	PlayerAvgLevel /= NumPlayers;
	
	// Monster Stats System
	if (GetCVar("drpg_monster_levels") > 0)
	{
		// level
        if (!Modify)
        {
            int LevelType = GetCVar("drpg_monster_levels");
            fixed LevelWeight = GetCVarFixed("drpg_monster_level_weight");
            fixed MapWeight = GetCVarFixed("drpg_monster_map_weight");
            fixed RandomMinWeight = GetCVarFixed("drpg_monster_random_min_mult");
            fixed RandomMaxWeight = GetCVarFixed("drpg_monster_random_max_mult");
            int LevelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
            
            // Calculate Monster Level
            if (LevelType == 1 || LevelType == 3) // Player Level
                MonsterLevel += (int)((fixed)PlayerAvgLevel * LevelWeight);
            if (LevelType == 2 || LevelType == 3) // Map Number
                MonsterLevel += (int)((fixed)LevelNum * MapWeight);
            
            // Randomization Weight
            if (RandomMinWeight > RandomMaxWeight)
                Log("\cgERROR: \c-Monster Random Min Multiplier cannot be above Monster Random Max Multiplier!\n")
            else
                MonsterLevel *= (int)RandomFixed(RandomMinWeight, RandomMaxWeight);
            
            // If the Arena is active, base the Monster Levels Map Number portion on the current wave
            if (LevelNum == 999 && ArenaActive)
                MonsterLevel = ArenaWave;
            
            // If the monster is friendly, it has the average level of all players in the game
            if (GetActorProperty(0, APROP_Friendly))
                MonsterLevel = PlayerAvgLevel;
		};
        
		// Calculate Monster Stats
		MonsterStrength = Random(MonsterLevel, MonsterLevel + GameSkill());
		MonsterDefense = Random(MonsterLevel, MonsterLevel + GameSkill());
        MonsterVitality = Random(MonsterLevel, MonsterLevel + GameSkill());;
        MonsterEnergy = Random(MonsterLevel, MonsterLevel + GameSkill());
        MonsterRegeneration = Random(MonsterLevel, MonsterLevel + GameSkill());
        MonsterAgility = Random(MonsterLevel, MonsterLevel + GameSkill());
        MonsterCapacity = Random(MonsterLevel, MonsterLevel + GameSkill());
        MonsterLuck = Random(MonsterLevel, MonsterLevel + GameSkill());
	};
	
	// Apply Aura
	if (!GetActorProperty(0, APROP_Friendly) && !(Flags & MF_NOAURA) && !Modify)
	{
		int AuraCurve = GetCVar("drpg_aura_curve");
		int AuraMin = -1000 + MonsterEnergy + AuraCurve;
		if (AuraMin > 0) AuraMin = 0;
		AuraRandomizer = Random(AuraMin, 10);
		if (AuraRandomizer > 0)
			MonsterAura = AuraRandomizer;
	};
	
	// Apply the aura effects
	switch (MonsterAura)
	{
		case 1: // Red Aura - Strength
			MonsterStrength *= 2;
			break;
		case 2: // Green Aura - Defense
			MonsterDefense *= 2;
			break;
		case 3: // White Aura - XP
			MonsterLevel *= 2;
			break;
		case 4: // Pink Aura - Vitality
            MonsterVitality *= 2;
			break;
        case 5: // Blue Aura - Energy
            MonsterEnergy *= 2;
            break;
        case 6: // Purple Aura - Regeneration
            MonsterRegeneration *= 2;
            break;
		case 7: // Orange Aura - Agility
            MonsterAgility *= 2;
			break;
        case 8: // Dark Blue Aura - Capacity
            MonsterCapacity *= 2;
            GiveInventory("AggressionBooster", 1);
            break;
        case 9: // Yellow Aura - Luck
            MonsterLuck *= 2;
            break;
		case 10: // Black Aura - Miniboss
			MonsterLevel *= 2;
            MonsterStrength *= 2;
            MonsterDefense *= 2;
            MonsterVitality *= 2;
            MonsterEnergy *= 2;
            MonsterRegeneration *= 2;
            MonsterAgility *= 2;
            MonsterCapacity *= 2;
            GiveInventory("AggressionBooster", 1);
            MonsterLuck *= 2;
			break;
	};
	
    // Calculate Monster Threat Level
    ThreatPool += MonsterStrength;
    ThreatPool += MonsterDefense;
    ThreatPool += MonsterVitality;
    ThreatPool += MonsterEnergy;
    ThreatPool += MonsterRegeneration;
    ThreatPool += MonsterAgility;
    ThreatPool += MonsterCapacity;
    ThreatPool += MonsterLuck;
    ThreatPool /= 1000;
    if (MonsterAura > 0 && MonsterAura < 9) // Normal Auras
        ThreatPool++
    else if (MonsterAura == 10) // Black Aura
        ThreatPool += 2;
    MonsterThreat = ThreatPool;
    
    // Cap Level and Stats
    if (MonsterLevel <= 0)
        MonsterLevel = 1;
    if (MonsterLevel > 1000)
        MonsterLevel = 1000;
    if (MonsterThreat > 10)
        MonsterThreat = 10;
    if (MonsterStrength > 1000)
        MonsterStrength = 1000;
    if (MonsterDefense > 1000)
        MonsterDefense = 1000;
    if (MonsterVitality > 1000)
        MonsterVitality = 1000;
    if (MonsterEnergy > 1000)
        MonsterEnergy = 1000;
    if (MonsterRegeneration > 1000)
        MonsterRegeneration = 1000;
    if (MonsterAgility > 1000)
        MonsterAgility = 1000;
    if (MonsterCapacity > 1000)
        MonsterCapacity = 1000;
    if (MonsterLuck > 1000)
        MonsterLuck = 1000;
	
    // Apply the stats to the monster
    SetInventory("MonsterLevel", MonsterLevel);
    SetInventory("MonsterAura", MonsterAura);
    SetInventory("MonsterThreat", MonsterThreat);
    SetInventory("MonsterStrength", MonsterStrength);
    SetInventory("MonsterDefense", MonsterDefense);
    SetInventory("MonsterVitality", MonsterVitality);
    SetInventory("MonsterEnergy", MonsterEnergy);
    SetInventory("MonsterRegeneration", MonsterRegeneration);
    SetInventory("MonsterAgility", MonsterAgility);
    SetInventory("MonsterCapacity", MonsterCapacity);
    SetInventory("MonsterLuck", MonsterLuck);
    
    // Health
    SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth) * (1.0 + ((fixed)MonsterVitality / 125.0)));
    
    // Speed
    SetActorPropertyFixed(0, APROP_Speed, GetActorPropertyFixed(0, APROP_Speed) * (1.0 + ((fixed)MonsterAgility / 800.0)));
};

// Monster Loop
script MonsterLoop()
{
	Start:
	
	int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterFlags = CheckInventory("MonsterFlags");
	int MonsterStrength = CheckInventory("MonsterStrength");
    int MonsterDefense = CheckInventory("MonsterDefense");
    int MonsterEnergy = CheckInventory("MonsterEnergy");
    int MonsterRegeneration = CheckInventory("MonsterRegeneration");
    int MonsterAgility = CheckInventory("MonsterAgility");
	int AuraType = CheckInventory("MonsterAura");
	
	// Death
	if (GetActorProperty(0, APROP_Health) <= 0)
	{
		MonsterDeath();
		return;
	};
	
	// Friendly Monster Aura
	if (GetActorProperty(0, APROP_Friendly))
		SpawnAura(0, 0, false);
	
	// Black Aura Effects
	if (AuraType == 10)
        SetActorProperty(0, APROP_RenderStyle, STYLE_Fuzzy);
    
    // Regeneration
    if (GetActorProperty(0, APROP_Health) < GetActorProperty(0, APROP_SpawnHealth) && (Timer() % (35 * (10 - GameSkill()))) == 1 && !CheckInventory("PowerTimeFreezer"))
    {
        HealThing(GetActorProperty(0, APROP_SpawnHealth) * (MonsterRegeneration / 1000.0));
        
        // Prevent going over 100%
        if (GetActorProperty(0, APROP_Health) > GetActorProperty(0, APROP_SpawnHealth))
            SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth));
    };
    
    // Blue Aura Level Increase
    if (AuraType == 5 && (Timer() % (35 * (60 - (MonsterEnergy / 20)))) == 0)
    {
        SetInventory("MonsterLevel", MonsterLevel + 1);
        MonsterStats(CheckInventory("MonsterFlags"), true);
        SpawnForced("LevelUpArrow", GetActorX(0), GetActorY(0), GetActorZ(0) + GetActorPropertyFixed(0, APROP_Height), 0, 0);
    };
    
	// Spawn Aura
	if (AuraType)
		SpawnAura(0, AuraType, false);
	
	// Strength
    SetInventory(StrParam("Strength%d\n", MonsterStrength * GameSkill()), 1);
	
    // Defense
    SetActorPropertyFixed(0, APROP_DamageFactor, 1.0 - (0.09 * (MonsterDefense / 100)));
    
    Delay(1);
	goto Start;
};

script MonsterDeath()
{
	int Killer = WhoKilledMe();
	int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterFlags = CheckInventory("MonsterFlags");
    int MonsterCapacity = CheckInventory("MonsterCapacity");
    int MonsterLuck = CheckInventory("MonsterLuck");
	int AuraType = CheckInventory("MonsterAura");
	fixed XPAmount = Random(GetActorProperty(0, APROP_SpawnHealth) / 2, GetActorProperty(0, APROP_SpawnHealth));
	int DropMod = MonsterLuck * 0.256;
    int DropAmount = 1 + (MonsterCapacity / 100);
	int DropTID = (Players(Killer).Stim.PowerupTimer[STIM_MAGNETIC] > 0 ? Players(Killer).TID : 0);
    
    // Don't scale drops to skill level
    if (GetCVar("drpg_scale_drops"))
        DropAmount /= GameSkill();
    
    // Always drop at least one item
    if (DropAmount < 1)
        DropAmount = 1;
    
    // Prevent Drop Mod from overflowing
    if (DropMod > 256)
        DropMod = 256;
    
    // Double XP
    if (AuraType == 3 || AuraType == 10)
        XPAmount *= 2;
    
    // Double Drop Amount
    if (AuraType == 9 || AuraType == 10)
        DropAmount *= 2;
    
	// Drops
	if (!(MonsterFlags & MF_NODROPS) && !GetActorProperty(0, APROP_Friendly))
	{
		// Aura Drops
        for (int i = 1; i <= DropAmount; i++)
        {
            switch (AuraType)
            {
                case 1: // Red Aura - Strength
                    DropItem(DropTID, "WeaponDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "VialStrength", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 2: // Green Aura - Defense
                    DropItem(DropTID, "UsedArmorDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "VialDefense", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 3: // White Aura - XP
                    DropItem(DropTID, "SmallTokenDropper", 1, 96 + DropMod);
                    DropItem(DropTID, "VialPotency", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 4: // Pink Aura - Vitality
                    DropItem(DropTID, "HealthDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "VialVitality", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 5: // Blue Aura - Energy
                    DropItem(DropTID, "EPCapsule", 1, 128 + DropMod);
                    DropItem(DropTID, "BigEPCapsule", 1, 64 + DropMod);
                    DropItem(DropTID, "VialEnergy", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 6: // Purple Aura - Regeneration
                    DropItem(DropTID, "RegenSphere", 1, 128 + DropMod);
                    DropItem(DropTID, "VialRegeneration", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 7: // Orange Aura - Agility
                    DropItem(DropTID, "TimeSphere", 1, 64 + (DropMod / 2));
                    DropItem(DropTID, "VialAgility", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 8: // Dark Blue Aura - Capacity
                    DropItem(DropTID, "AmmoDropper", 1, 128 + DropMod);
                    if (GetCVar("drpg_ext_doomrl"))
                        DropItem(DropTID, "RLModpackSpawner", 1, 128 + DropMod);
                    DropItem(DropTID, "VialCapacity", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 9: // Yellow Aura - Luck
                    DropItem(DropTID, "VialLuck", 1, 255);
                    DropItem(DropTID, "VialDropperRare", 1, 32);
                    break;
                case 10: // Black Aura - Miniboss
                    DropItem(DropTID, "WeaponDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "UsedArmorDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "SmallTokenDropper", 1, 96 + DropMod);
                    DropItem(DropTID, "HealthDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "EPCapsule", 1, 128 + DropMod);
                    DropItem(DropTID, "BigEPCapsule", 1, 64 + DropMod);
                    DropItem(DropTID, "RegenSphere", 1, 128 + DropMod);
                    DropItem(DropTID, "TimeSphere", 1, 64 + (DropMod / 2));
                    DropItem(DropTID, "AmmoDropper", 1, 128 + DropMod);
                    if (GetCVar("drpg_ext_doomrl"))
                        DropItem(DropTID, "RLModpackSpawner", 1, 128 + DropMod);
                    DropItem(DropTID, "VialStrength", 1, 192 + DropMod);
                    DropItem(DropTID, "VialDefense", 1, 192 + DropMod);
                    DropItem(DropTID, "VialAgility", 1, 192 + DropMod);
                    DropItem(DropTID, "VialVitality", 1, 192 + DropMod);
                    DropItem(DropTID, "VialEnergy", 1, 192 + DropMod);
                    DropItem(DropTID, "VialRegeneration", 1, 192 + DropMod);
                    DropItem(DropTID, "VialCapacity", 1, 192 + DropMod);
                    DropItem(DropTID, "VialLuck", 1, 192 + DropMod);
                    DropItem(DropTID, "VialPurifier", 1, 255);
                    DropItem(DropTID, "VialPotency", 1, 192 + DropMod);
                    DropItem(DropTID, "VialDropperRare", 1, 255);
                    break;
            };
		
            // Luck-based Drops
            if (Killer > -1)
            {
                    if (RandomFixed(0.0, 100.0) < Players(Killer).CreditChance)	DropItem(DropTID, "MoneyDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).HealthChance)	DropItem(DropTID, "HealthDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).EPChance)		DropItem(DropTID, "EPCapsule", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).ArmorChance)	DropItem(DropTID, "ArmorDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).PowerupChance)DropItem(DropTID, "PowerupDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).WeaponChance)	DropItem(DropTID, "WeaponDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).WeaponChance)	DropItem(DropTID, "RLModpackSpawner", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).TokenChance)	DropItem(DropTID, "SmallTokenDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).AugChance)	DropItem(DropTID, "AugDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).ShieldChance)	DropItem(DropTID, "ShieldDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).StimChance)	DropItem(DropTID, "StimDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).StimChance)	DropItem(DropTID, "VialDropper", 1, 255);
            };
		
            // Boss Drops
            if ((i % 5) == 0 && MonsterFlags & MF_BOSS)
            {
                DropItem(DropTID, "Credits1000", 1, 255);
                DropItem(DropTID, "SoulsphereRandomizer", 1, 255);
                DropItem(DropTID, "Continue", 1, 128 - DropMod);
                DropItem(DropTID, "TokenDropper", 1, 255 - DropMod);
                DropItem(DropTID, "AugDropper", 1, 160 - DropMod);
                DropItem(DropTID, "ShieldDropper", 1, 160 - DropMod);
            };
        };
	};
	
	// Add XP
	if (!(MonsterFlags & MF_NOXP) && !GetActorProperty(0, APROP_Friendly))
	{
		// XP modifications based on level and skill
		if (GetCVar("drpg_xp_monsterlevel")) XPAmount *= 1.0 + ((fixed)MonsterLevel / 100.0);
		if (GetCVar("drpg_xp_skilllevel")) XPAmount *= 1.0 - (0.15 * (fixed)GameSkill());
		
		for (int i = 0; i < MAX_PLAYERS; i++)
		{
			if (MonsterFlags & MF_NEGATIVEXP)
				AddXP(i, -(int)XPAmount, false)
			else
			{
				if (Killer == i)
					AddXP(i, (int)XPAmount, false)
				else
					AddXP(i, (int)XPAmount, true);
			};
		};
	};
	
	// Add a kill to the pay kills
	if (!(MonsterFlags & MF_NOPAYKILL) && Killer > -1)
		Players(Killer).PayKills++;
	
	// SHOTGUNS!
	if (GetCVar("drpg_shotguns"))
		DropItem(0, "ShotSpawn", 1, 255);
};

script int WhoKilledMe()
{
	SetActivatorToTarget(0);
	return PlayerNumber();
};
