#include "Arena.dh"
#include "Globals.dh"
#include "Monsters.dh"
#include "Popoffs.dh"
#include "RPG.dh"
#include "Stats.dh"
#include "Utils.dh"

// Monster Init Script
acscript MonsterInit(int Flags)
{
	// If initialization has already occurred on this monster, terminate
	if (CheckInventory("MonsterInit")) return;
	
	// Set as initialized
	SetInventory("MonsterInit", 1);
	
	// Set the Height
	SetInventory("HeightCheck", (int)GetActorPropertyFixed(0, APROP_Height));
	
	// Start Damage Numbers Script
	DamageNumbers();
	
	// Start Monster Loop Script
	MonsterLoop();
	
	// Give it a Health Bar
	if (!(Flags & MF_NOHEALTHBAR))
		SetInventory("HealthBar", 1);
	
	// Apply Monster Flags
	SetInventory("MonsterFlags", Flags);
	
	// Apply Stats
	if (!(Flags & MF_NOSTATS))
		MonsterStats(Flags, false);
};

// Modify the targeted monster (mainly for debugging)
acscript MonsterSet(int Level, int Aura, int Flags)
{
    // Move script to the targeted monster
    SetActivatorToTarget(Player.TID);
    
    // Set Stats/Flags
    SetInventory("MonsterLevel", Level);
    SetInventory("MonsterAura", Aura);
    SetInventory("MonsterFlags", Flags);
    
    // Re-run the Stats Script
    MonsterStats(Flags, true);
};

// Apply stats to monsters
script MonsterStats(int Flags, bool Modify)
{
    // Move Activator to whoever the player is targeting
    if (Modify)
        SetActivatorToTarget(Player.TID);
	
    int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterAura = CheckInventory("MonsterAura");
	int MonsterStrength = CheckInventory("MonsterStrength");
	int MonsterDefense = CheckInventory("MonsterDefense");
	int NumPlayers;
	int PlayerAvgLevel;
	int AuraRandomizer;
    
	// Add up the levels of all the players in the game
	for (int i = 0; i < MAX_PLAYERS; i++)
	{
		if (!PlayerInGame(i)) continue;
		NumPlayers++;
		PlayerAvgLevel += Players(i).Level;
	};
	
	// Now calculate the average level between them
	PlayerAvgLevel /= NumPlayers;
	
	// Monster Stats System
	if (GetCVar("drpg_monster_levels") > 0)
	{
		// level
        if (!Modify)
        {
            int LevelType = GetCVar("drpg_monster_levels");
            fixed LevelWeight = GetCVarFixed("drpg_monster_level_weight");
            fixed MapWeight = GetCVarFixed("drpg_monster_map_weight");
            fixed RandomMinWeight = GetCVarFixed("drpg_monster_random_min_mult");
            fixed RandomMaxWeight = GetCVarFixed("drpg_monster_random_max_mult");
            int LevelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
            
            // Calculate Monster Level
            if (LevelType == 1 || LevelType == 3) // Player Level
                MonsterLevel += (int)((fixed)PlayerAvgLevel * LevelWeight);
            if (LevelType == 2 || LevelType == 3) // Map Number
                MonsterLevel += (int)((fixed)LevelNum * MapWeight);
            
            // Randomization Weight
            if (RandomMinWeight > RandomMaxWeight)
                Log("\cgERROR: \c-Monster Random Min Multiplier cannot be above Monster Random Max Multiplier!\n")
            else
                MonsterLevel *= (int)RandomFixed(RandomMinWeight, RandomMaxWeight);
            
            // If the Arena is active, base the Monster Levels Map Number portion on the current wave
            if (LevelNum == 999 && ArenaActive)
                MonsterLevel = ArenaWave;
            
            // If the monster is friendly, it has the average level of all players in the game
            if (GetActorProperty(0, APROP_Friendly))
                MonsterLevel = PlayerAvgLevel;
		};
        
        // Monster level can't be below 1
        if (MonsterLevel <= 0)
            MonsterLevel = 1;
		
		// Strength
		MonsterStrength = Random(MonsterLevel, MonsterLevel + (GameSkill() * 5));
		if (MonsterStrength <= 0) MonsterStrength = 1;
		
        // Monster Strength can't go above 32000
        if (MonsterStrength > 32000)
            MonsterStrength = 32000;
        
		// Defense
		MonsterDefense = Random(MonsterLevel, MonsterLevel + (GameSkill() * 5));
		if (MonsterDefense <= 0) MonsterDefense = 1;
        
        // Monster Defense can't go above 1000
        if (MonsterDefense > 1000)
            MonsterDefense = 1000;
	};
	
	// Apply Aura
	if (!GetActorProperty(0, APROP_Friendly) && !(Flags & MF_NOAURA) && !Modify)
	{
		int AuraCurve = GetCVar("drpg_aura_curve");
		int AuraMin = -100 + ((GameSkill() * (GameSkill() * 2))) + AuraCurve;
		if (AuraMin > 0) AuraMin = 0;
		int AuraMax = 10;
		AuraRandomizer = Random(AuraMin, AuraMax);
		if (AuraRandomizer > 0)
			MonsterAura = AuraRandomizer;
	};
	
	// If the monster has an Aura, double it's initial health
	if (AuraRandomizer > 0 || MonsterAura > 0)
		SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth) * 2);
	
	// Apply the aura effects
	switch (MonsterAura)
	{
		case 1: // Red Aura - Strength
			MonsterStrength *= 2;
			break;
		case 2: // Green Aura - Defense
			MonsterDefense *= 2;
			break;
		case 3: // White Aura - XP
			MonsterLevel *= 2;
			break;
		case 4: // Pink Aura - Vitality
			SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth) * 4);
			break;
		case 7: // Orange Aura - Agility
			SetActorProperty(0, APROP_Speed, GetActorProperty(0, APROP_Speed) * 2);
			break;
        case 8: // Dark Blue Aura - Capacity
            GiveInventory("AggressionBooster", 1);
            break;
		case 10: // Black Aura - Miniboss
			MonsterLevel *= Random(2, 3 + GameSkill());
			MonsterStrength += MonsterLevel *= (Random(2, 3 + GameSkill()));
			MonsterDefense += MonsterLevel *= (Random(2, 3 + GameSkill()));
			SetActorProperty(0, APROP_Speed, GetActorProperty(0, APROP_Speed) * 2);
			SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth) * 8);
            GiveInventory("AggressionBooster", 1);
			break;
	};
	
	// Apply the stats to the monster
    SetInventory("MonsterLevel", MonsterLevel);
    SetInventory("MonsterAura", MonsterAura);
    SetInventory("MonsterStrength", MonsterStrength);
    SetInventory("MonsterDefense", MonsterDefense);
    SetActorPropertyFixed(0, APROP_DamageFactor, 1.0 - (0.09 * (MonsterDefense / 100)));
    if (GetActorPropertyFixed(0, APROP_DamageFactor) < 0.1) SetActorPropertyFixed(0, APROP_DamageFactor, 0.1);
};

// Monster Loop
script MonsterLoop()
{
	Start:
	fixed X = GetActorX(0);
	fixed Y = GetActorY(0);
	fixed Z = GetActorZ(0);
	int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterFlags = CheckInventory("MonsterFlags");
	int MonsterStrength = CheckInventory("MonsterStrength");
	int AuraType = CheckInventory("MonsterAura");
	fixed Radius = GetActorPropertyFixed(0, APROP_Radius);
	fixed Height = GetActorPropertyFixed(0, APROP_Height);
	int Angle = GetActorAngle(0) * 256;
	int RegenAmount;
	
	// Death
	if (GetActorProperty(0, APROP_Health) <= 0)
	{
		MonsterDeath();
		return;
	};
	
	// Friendly Monster Aura
	if (GetActorProperty(0, APROP_Friendly))
		SpawnAura(0, 0, false);
	
	// Aura Loop Effects
	switch (AuraType)
	{
		case 6: // Purple Aura - Regeneration
			RegenAmount = 0.01 * GetActorProperty(0, APROP_SpawnHealth);
			if (RegenAmount == 0) RegenAmount = 1;
			if (GetActorProperty(0, APROP_Health) < GetActorProperty(0, APROP_SpawnHealth) && (Timer() % 35) == 1 && !CheckInventory("PowerTimeFreezer"))
				HealThing(RegenAmount);
			break;
		case 10: // Black Aura - Miniboss
			RegenAmount = 0.01 * GetActorProperty(0, APROP_SpawnHealth);
            SetActorProperty(0, APROP_RenderStyle, STYLE_Fuzzy);
			if (RegenAmount == 0) RegenAmount = 1;
			if (GetActorProperty(0, APROP_Health) < GetActorProperty(0, APROP_SpawnHealth) && (Timer() % 35) == 1 && !CheckInventory("PowerTimeFreezer"))
				HealThing(RegenAmount);
			break;
	};
    
	// Spawn Aura
	if (AuraType)
		SpawnAura(0, AuraType, false);
	
	// Strength
	if (MonsterStrength >= 32000)
		SetInventory("Strength32000", 1)
	else if (MonsterStrength > 0)
		SetInventory(StrParam("Strength%d\n", MonsterStrength), 1);
	
	Delay(1);
	goto Start;
};

script MonsterDeath()
{
	int Killer = WhoKilledMe();
	int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterFlags = CheckInventory("MonsterFlags");
	int AuraType = CheckInventory("MonsterAura");
	fixed XPAmount = Random(GetActorProperty(0, APROP_SpawnHealth) / 2, GetActorProperty(0, APROP_SpawnHealth));
	int SkillDropMod = (GameSkill() - 1) * 32;
	int DropTID = (Players(Killer).Stim.PowerupTimer[STIM_MAGNETIC] > 0 ? Players(Killer).TID : 0);
	int LuckDrops = 1;
	
    // Don't scale drops to skill level
    if (!GetCVar("drpg_scale_drops"))
        SkillDropMod = 0;
    
	// Drops
	if (!(MonsterFlags & MF_NODROPS) && !GetActorProperty(0, APROP_Friendly))
	{
		// Aura Drops
		switch (AuraType)
		{
			case 1: // Red Aura - Strength
				DropItem(DropTID, "WeaponDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialStrength", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 2: // Green Aura - Defense
				DropItem(DropTID, "UsedArmorDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialDefense", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 3: // White Aura - XP
				XPAmount *= 2;
				DropItem(DropTID, "SmallTokenDropper", 1, 96 - SkillDropMod);
				DropItem(DropTID, "VialPotency", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 4: // Pink Aura - Vitality
				DropItem(DropTID, "HealthDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialVitality", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 5: // Blue Aura - Energy
				DropItem(DropTID, "EPCapsule", 1, 128 - SkillDropMod);
				DropItem(DropTID, "BigEPCapsule", 1, 64 - SkillDropMod);
				DropItem(DropTID, "VialEnergy", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 6: // Purple Aura - Regeneration
				DropItem(DropTID, "RegenSphere", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialRegeneration", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 7: // Orange Aura - Agility
				DropItem(DropTID, "TimeSphere", 1, 64 - (SkillDropMod / 2));
				DropItem(DropTID, "VialAgility", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 8: // Dark Blue Aura - Capacity
				DropItem(DropTID, "AmmoDropper", 1, 128 - SkillDropMod);
                if (GetCVar("drpg_ext_doomrl"))
                    DropItem(DropTID, "RLModpackSpawner", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialCapacity", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 9: // Yellow Aura - Luck
				LuckDrops = 4;
				DropItem(DropTID, "VialLuck", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 10: // Black Aura - Miniboss
				XPAmount *= 4;
				LuckDrops = 4;
				DropItem(DropTID, "WeaponDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "UsedArmorDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "SmallTokenDropper", 1, 96 - SkillDropMod);
				DropItem(DropTID, "TimeSphere", 1, 128 - SkillDropMod);
				DropItem(DropTID, "HealthDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "EPCapsule", 1, 128 - SkillDropMod);
				DropItem(DropTID, "BigEPCapsule", 1, 64 - SkillDropMod);
				DropItem(DropTID, "RegenSphere", 1, 128 - SkillDropMod);
				DropItem(DropTID, "AmmoDropper", 1, 128 - SkillDropMod);
                if (GetCVar("drpg_ext_doomrl"))
                    DropItem(DropTID, "RLModpackSpawner", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialStrength", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialDefense", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialAgility", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialVitality", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialEnergy", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialRegeneration", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialCapacity", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialLuck", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialPurifier", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialPotency", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
		};
		
		// Luck-based Drops
		if (Killer > -1)
		{
			for (int i = 0; i < LuckDrops; i++)
			{
				if (RandomFixed(0.0, 100.0) < Players(Killer).CreditChance)	DropItem(DropTID, "MoneyDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).HealthChance)	DropItem(DropTID, "HealthDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).EPChance)		DropItem(DropTID, "EPCapsule", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).ArmorChance)	DropItem(DropTID, "ArmorDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).PowerupChance)DropItem(DropTID, "PowerupDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).WeaponChance)	DropItem(DropTID, "WeaponDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).TokenChance)	DropItem(DropTID, "SmallTokenDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).AugChance)	DropItem(DropTID, "AugDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).ShieldChance)	DropItem(DropTID, "ShieldDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).StimChance)	DropItem(DropTID, "StimDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).StimChance)	DropItem(DropTID, "VialDropper", 1, 255);
			};
		};
		
		// Boss Drops
		if (MonsterFlags & MF_BOSS)
		{
			DropItem(DropTID, "Credits1000", 1, 255);
			DropItem(DropTID, "SoulsphereRandomizer", 1, 255);
			DropItem(DropTID, "Continue", 1, 128 - SkillDropMod);
			DropItem(DropTID, "TokenDropper", 1, 255 - SkillDropMod);
			DropItem(DropTID, "WeaponDropper", 1, 255 - SkillDropMod);
			DropItem(DropTID, "AugDropper", 1, 160 - SkillDropMod);
			DropItem(DropTID, "ShieldDropper", 1, 160 - SkillDropMod);
		};
	};
	
	// Add XP
	if (!(MonsterFlags & MF_NOXP) && !GetActorProperty(0, APROP_Friendly))
	{
		// XP modifications based on level and skill
		if (GetCVar("drpg_xp_monsterlevel")) XPAmount *= 1.0 + ((fixed)MonsterLevel / 100.0);
		if (GetCVar("drpg_xp_skilllevel")) XPAmount *= 1.0 - (0.15 * (fixed)GameSkill());
		
		for (int i = 0; i < MAX_PLAYERS; i++)
		{
			if (MonsterFlags & MF_NEGATIVEXP)
				AddXP(i, -(int)XPAmount, false)
			else
			{
				if (Killer == i)
					AddXP(i, (int)XPAmount, false)
				else
					AddXP(i, (int)XPAmount, true);
			};
		};
	};
	
	// Add a kill to the pay kills
	if (!(MonsterFlags & MF_NOPAYKILL) && Killer > -1)
		Players(Killer).PayKills++;
	
	// SHOTGUNS!
	if (GetCVar("drpg_shotguns"))
		DropItem(0, "ShotSpawn", 1, 255);
};

script int WhoKilledMe()
{
	SetActivatorToTarget(0);
	return PlayerNumber();
};
