#include "Arena.dh"
#include "Globals.dh"
#include "MonsterData.dh"
#include "Monsters.dh"
#include "Popoffs.dh"
#include "RPG.dh"
#include "Stats.dh"
#include "Utils.dh"

// Monster Init Script
acscript void MonsterInit(int Flags)
{
    // If initialization has already occurred on this monster, terminate
    if (CheckInventory("DRPGMonsterInit")) return;
    
    // Set as initialized
    SetInventory("DRPGMonsterInit", 1);
    
    // Set the Height
    SetInventory("DRPGHeightCheck", (int)GetActorPropertyFixed(0, APROP_Height));
    
    // Start Damage Numbers Script
    DamageNumbers();
    
    // Start Monster Loop Script
    MonsterLoop();
    
    // Give it a Health Bar
    if (!(Flags & MF_NOHEALTHBAR))
        SetInventory("DRPGHealthBar", 1);
    
    // Apply Monster Flags
    SetInventory("DRPGMonsterFlags", Flags);
    
    // Apply Stats
    if (!(Flags & MF_NOSTATS))
        MonsterStats(Flags, false);
        
    // Save the Render Type
    SetInventory("DRPGMonsterRenderStyle", GetActorProperty(0, APROP_RenderStyle));
};

// Modify the targeted monster (mainly for debugging)
acscript void MonsterSet(int Level, int Aura, int Flags)
{
    // Move script to the targeted monster
    SetActivatorToTarget(Player.TID);
    
    // Set Stats/Flags
    if (Level > 0)
        SetInventory("DRPGMonsterLevel", Level);
    if (Aura > 0)
        SetInventory("DRPGMonsterAura", Aura);
    if (Flags > 0)
        SetInventory("DRPGMonsterFlags", Flags);
    
    // Re-run the Stats Script
    MonsterStats(Flags, true);
};

// Dump the targeted monster's stats to the console
acscript void MonsterDump()
{
    int PlayerNum = PlayerNumber();
    
    // Move script to the targeted monster
    SetActivatorToTarget(Player.TID);
    
    // If you have no target, terminate
    if (ActivatorTID() == Players(PlayerNum).TID)
    {
        ActivatorSound("menu/error", 127);
        return;
    };
    
    Log("\ca===== MONSTER INFORMATION =====\n");
    Log(" Actor: %s\n", GetActorClass(0));
    Log(" Tag: %s\n", GetActorPropertyString(0, APROP_Nametag));
    Log(" Height: %k\n", GetActorPropertyFixed(0, APROP_Height));
    Log(" Radius: %k\n", GetActorPropertyFixed(0, APROP_Radius));
    Log(" Speed: %k\n", GetActorPropertyFixed(0, APROP_Speed));
    Log(" TID: %d\n", ActivatorTID());
    
    Log("\cf===== MONSTER FLAGS =====\n");
    Log(" Init: %d\n", CheckInventory("DRPGMonsterInit"));
    Log(" Named: %d\n", CheckInventory("DRPGMonsterNamed"));
    Log(" HealthBar: %d\n", CheckInventory("DRPGHealthBar"));
    Log(" RenderStyle: %d\n", CheckInventory("DRPGMonsterRenderStyle"));
    Log(" Flags: %d\n", CheckInventory("DRPGMonsterFlags"));
    
    Log("\cd===== MONSTER STATS =====\n");
    Log(" Level: %d\n", CheckInventory("DRPGMonsterLevel"));
    Log(" Aura: %d\n", CheckInventory("DRPGMonsterAura"));
    Log(" Threat: %d\n", CheckInventory("DRPGMonsterThreat"));
    Log(" Spawn Health: %d\n", CheckInventory("DRPGMonsterSpawnHealth"));
    Log(" Health Max %d\n", CheckInventory("DRPGMonsterHealthMax"));
    Log(" Current Speed: %d\n", CheckInventory("DRPGMonsterSpeed"));
    Log(" \cgStrength: %d\n", CheckInventory("DRPGMonsterStrength"));
    Log(" \cdDefense: %d\n", CheckInventory("DRPGMonsterDefense"));
    Log(" \caVitality: %d\n", CheckInventory("DRPGMonsterVitality"));
    Log(" \cnEnergy: %d\n", CheckInventory("DRPGMonsterEnergy"));
    Log(" \ctRegeneration: %d\n", CheckInventory("DRPGMonsterRegeneration"));
    Log(" \ciAgility: %d\n", CheckInventory("DRPGMonsterAgility"));
    Log(" \chCapacity: %d\n", CheckInventory("DRPGMonsterCapacity"));
    Log(" \ckLuck: %d\n", CheckInventory("DRPGMonsterLuck"));
};

// Apply stats to monsters
script MonsterStats(int Flags, int StatFlags)
{
    // Move Activator to whoever the player is targeting
    if (StatFlags & SF_PLAYERTARGET)
        SetActivatorToTarget(Player.TID);
    
    int MonsterLevel = CheckInventory("DRPGMonsterLevel");
    int MonsterAura = CheckInventory("DRPGMonsterAura");
    int MonsterThreat = CheckInventory("DRPGMonsterThreat");
    int MonsterSpeed = CheckInventory("DRPGMonsterSpeed");
    int MonsterStrength = CheckInventory("DRPGMonsterStrength");
    int MonsterDefense = CheckInventory("DRPGMonsterDefense");
    int MonsterVitality = CheckInventory("DRPGMonsterVitality");
    int MonsterEnergy = CheckInventory("DRPGMonsterEnergy");
    int MonsterRegeneration = CheckInventory("DRPGMonsterRegeneration");
    int MonsterAgility = CheckInventory("DRPGMonsterAgility");
    int MonsterCapacity = CheckInventory("DRPGMonsterCapacity");
    int MonsterLuck = CheckInventory("DRPGMonsterLuck");
    int NumPlayers;
    int PlayerAvgLevel;
    int AuraRandomizer;
    int[8] StatEffect;
    
    // Add up the levels of all the players in the game
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        if (!PlayerInGame(i)) continue;
        NumPlayers++;
        PlayerAvgLevel += Players(i).Level;
    };
    
    // Now calculate the average level between them
    PlayerAvgLevel /= NumPlayers;
    
    // Monster Stats System
    if (GetCVar("drpg_monster_levels") > 0)
    {
        // level
        if (!StatFlags)
        {
            int LevelType = GetCVar("drpg_monster_levels");
            fixed LevelWeight = GetCVarFixed("drpg_monster_level_weight");
            fixed MapWeight = GetCVarFixed("drpg_monster_map_weight");
            fixed RandomMinWeight = GetCVarFixed("drpg_monster_random_min_mult");
            fixed RandomMaxWeight = GetCVarFixed("drpg_monster_random_max_mult");
            int LevelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
            
            // Cap Level Number to 100
            if (LevelNum > 100)
                LevelNum = 100;
            
            // If the Arena is active, base the Monster Levels Map Number portion on the current wave
            if (InBase && ArenaActive)
                LevelNum = ArenaWave;
            
            // Calculate Monster Level
            if (LevelType == 1 || LevelType == 3) // Player Level
                MonsterLevel += (int)((fixed)PlayerAvgLevel * LevelWeight);
            if (LevelType == 2 || LevelType == 3) // Map Number
                MonsterLevel += (int)((fixed)LevelNum * MapWeight);
            
            // Randomization Weight
            if (RandomMinWeight > RandomMaxWeight)
                Log("\cgERROR: \c-Monster Random Min Multiplier cannot be above Monster Random Max Multiplier!\n")
            else
                MonsterLevel = (int)(MonsterLevel * RandomFixed(RandomMinWeight, RandomMaxWeight));
            
            // If the monster is friendly, it has the average level of all players in the game
            if (GetActorProperty(0, APROP_Friendly))
                MonsterLevel = PlayerAvgLevel;
        };
        
        // Calculate the monster's cut and special stats
        if (GetCVar("drpg_monster_specialize"))
        {
            // Zero out the StatEffect array
            for (int i = 0; i < 8; i++)
                StatEffect[i] = 0;
            
            int DelayCounter = 0;
            int CutCount = 0;
            int SpecializedCount = 0;
            while (CutCount < 4 || SpecializedCount < 2)
            {
                for (int i = 0; i < 8; i++)
                {
                    if (StatEffect[i] == 0)
                    {
                        if (CutCount < 4 && Random(1, 2) == 1) // Cut Stat
                        {
                            StatEffect[i] = 1;
                            CutCount++;
                        }
                        else if (SpecializedCount < 2) // Specialized Stat
                        {
                            StatEffect[i] = 2;
                            SpecializedCount++;
                        };
                    };
                };
                
                DelayCounter++;
                if ((DelayCounter % 10) == 0)
                    Delay(1);
                
                // Give up if it takes too long
                if (DelayCounter > 100)
                {
                    if (GetUserCVar(Arbitrator, "drpg_debug"))
                        Log("\cgERROR: \c-Gave up on specializing monster!\n");
                    break;
                };
            };
        };
        
        // Calculate Monster Stats
        MonsterStrength = Random(MonsterLevel, MonsterLevel + Random(GameSkill(), GameSkill() * 2));
        MonsterDefense = Random(MonsterLevel, MonsterLevel + Random(GameSkill(), GameSkill() * 2));
        MonsterVitality = Random(MonsterLevel, MonsterLevel + Random(GameSkill(), GameSkill() * 2));
        MonsterEnergy = Random(MonsterLevel, MonsterLevel + Random(GameSkill(), GameSkill() * 2));
        MonsterRegeneration = Random(MonsterLevel, MonsterLevel + Random(GameSkill(), GameSkill() * 2));
        MonsterAgility = Random(MonsterLevel, MonsterLevel + Random(GameSkill(), GameSkill() * 2));
        MonsterCapacity = Random(MonsterLevel, MonsterLevel + Random(GameSkill(), GameSkill() * 2));
        MonsterLuck = Random(MonsterLevel, MonsterLevel + Random(GameSkill(), GameSkill() * 2));
        
        if (GetCVar("drpg_monster_specialize"))
        {
            // Cut Stats
            if (StatEffect[0] == 1) MonsterStrength /= 2;
            if (StatEffect[1] == 1) MonsterDefense /= 2;
            if (StatEffect[2] == 1) MonsterVitality /= 2;
            if (StatEffect[3] == 1) MonsterEnergy /= 2;
            if (StatEffect[4] == 1) MonsterRegeneration /= 2;
            if (StatEffect[5] == 1) MonsterAgility /= 2;
            if (StatEffect[6] == 1) MonsterCapacity /= 2;
            if (StatEffect[7] == 1) MonsterLuck /= 2;
            
            // Specialized Stats
            if (StatEffect[0] == 2) MonsterStrength *= Random(2, 4);
            if (StatEffect[1] == 2) MonsterDefense *= Random(2, 4);
            if (StatEffect[2] == 2) MonsterVitality *= Random(2, 4);
            if (StatEffect[3] == 2) MonsterEnergy *= Random(2, 4);
            if (StatEffect[4] == 2) MonsterRegeneration *= Random(2, 4);
            if (StatEffect[5] == 2) MonsterAgility *= Random(2, 4);
            if (StatEffect[6] == 2) MonsterCapacity *= Random(2, 4);
            if (StatEffect[7] == 2) MonsterLuck *= Random(2, 4);
        };
    };
    
    // Apply Aura
    if (!GetActorProperty(0, APROP_Friendly) && !(Flags & MF_NOAURA) && !StatFlags)
    {
        int AuraCurve = GetCVar("drpg_aura_curve");
        int AuraMin = -1000 + MonsterEnergy + AuraCurve;
        if (AuraMin > 0) AuraMin = 0;
        AuraRandomizer = Random(AuraMin, 10);
        if (AuraRandomizer > 0)
            MonsterAura = AuraRandomizer;
    };
    
    // Apply the aura effects
    switch (MonsterAura)
    {
        case 1: // Red Aura - Strength
            MonsterStrength *= 2;
            break;
        case 2: // Green Aura - Defense
            MonsterDefense *= 2;
            break;
        case 3: // White Aura - XP
            MonsterLevel *= 2;
            break;
        case 4: // Pink Aura - Vitality
            MonsterVitality *= 2;
            break;
        case 5: // Blue Aura - Energy
            MonsterEnergy *= 2;
            break;
        case 6: // Purple Aura - Regeneration
            MonsterRegeneration *= 2;
            break;
        case 7: // Orange Aura - Agility
            MonsterAgility *= 2;
            break;
        case 8: // Dark Blue Aura - Capacity
            MonsterCapacity *= 2;
            GiveInventory("DRPGAggressionBooster", 1);
            break;
        case 9: // Yellow Aura - Luck
            MonsterLuck *= 2;
            break;
        case 10: // Black Aura - Miniboss
            MonsterLevel *= 2;
            MonsterStrength *= 2;
            MonsterDefense *= 2;
            MonsterVitality *= 2;
            MonsterEnergy *= 2;
            MonsterRegeneration *= 2;
            MonsterAgility *= 2;
            MonsterCapacity *= 2;
            GiveInventory("DRPGAggressionBooster", 1);
            MonsterLuck *= 2;
            break;
    };
    
    // Cap Level and Stats
    if (MonsterLevel <= 0)
        MonsterLevel = 1;
    if (MonsterLevel > 1000)
        MonsterLevel = 1000;
    if (MonsterThreat > 10)
        MonsterThreat = 10;
    if (MonsterStrength > 1000)
        MonsterStrength = 1000;
    if (MonsterDefense > 1000)
        MonsterDefense = 1000;
    if (MonsterVitality > 1000)
        MonsterVitality = 1000;
    if (MonsterEnergy > 1000)
        MonsterEnergy = 1000;
    if (MonsterRegeneration > 1000)
        MonsterRegeneration = 1000;
    if (MonsterAgility > 1000)
        MonsterAgility = 1000;
    if (MonsterCapacity > 1000)
        MonsterCapacity = 1000;
    if (MonsterLuck > 1000)
        MonsterLuck = 1000;
    
    // We need to make sure we only pass the speed to the monster if it's being initially created
    if (!StatFlags)
        MonsterSpeed = (int)GetActorPropertyFixed(0, APROP_Speed);
    
    // Apply the stats to the monster
    SetInventory("DRPGMonsterLevel", MonsterLevel);
    SetInventory("DRPGMonsterAura", MonsterAura);
    SetInventory("DRPGMonsterThreat", MonsterThreat);
    SetInventory("DRPGMonsterSpeed", MonsterSpeed);
    SetInventory("DRPGMonsterStrength", MonsterStrength);
    SetInventory("DRPGMonsterDefense", MonsterDefense);
    SetInventory("DRPGMonsterVitality", MonsterVitality);
    SetInventory("DRPGMonsterEnergy", MonsterEnergy);
    SetInventory("DRPGMonsterRegeneration", MonsterRegeneration);
    SetInventory("DRPGMonsterAgility", MonsterAgility);
    SetInventory("DRPGMonsterCapacity", MonsterCapacity);
    SetInventory("DRPGMonsterLuck", MonsterLuck);
    
    // Calculate Threat Level
    MonsterThreat = CalculateMonsterThreatLevel(0);
    
    // Calculate Health
    SetInventory("DRPGMonsterSpawnHealth", GetActorProperty(0, APROP_SpawnHealth));
    SetInventory("DRPGMonsterHealthMax", CalculateMonsterMaxHealth(0));
    SetActorProperty(0, APROP_Health, CalculateMonsterMaxHealth(0));
    
    // Calculate Speed
    SetActorPropertyFixed(0, APROP_Speed, CalculateMonsterSpeed(0));
};

// Monster Loop
script void MonsterLoop()
{
    Start:
    
    int MonsterLevel = CheckInventory("DRPGMonsterLevel");
    int MonsterFlags = CheckInventory("DRPGMonsterFlags");
    int MonsterRenderStyle = CheckInventory("DRPGMonsterRenderStyle");
    int MonsterStrength = CheckInventory("DRPGMonsterStrength");
    int MonsterDefense = CheckInventory("DRPGMonsterDefense");
    int MonsterEnergy = CheckInventory("DRPGMonsterEnergy");
    int MonsterRegeneration = CheckInventory("DRPGMonsterRegeneration");
    int MonsterAgility = CheckInventory("DRPGMonsterAgility");
    int AuraType = CheckInventory("DRPGMonsterAura");
    
    // Death
    if (GetActorProperty(0, APROP_Health) <= 0)
    {
        MonsterDeath();
        return;
    };
    
    // Friendly Monster Aura
    if (GetActorProperty(0, APROP_Friendly) && GetActorPropertyString(0, APROP_Nametag) != "Marine" && GetActorPropertyString(0, APROP_Nametag) != "Heavy Marine" && !CheckInventory("DRPGMonsterNamed"))
        SpawnAura(0, 0, false);
    
    // Black Aura Effects
    if (AuraType == 10)
    {
        if (GetActorLightLevel(0) < 128)
            SetActorProperty(0, APROP_RenderStyle, STYLE_Fuzzy)
        else
            SetActorProperty(0, APROP_RenderStyle, MonsterRenderStyle);
    };
    
    // Regeneration
    if (GetActorProperty(0, APROP_Health) < GetActorProperty(0, APROP_SpawnHealth) && (Timer() % (35 * (30 - (AuraType == 6 ? 20 : 0)))) == 0 && !CheckInventory("PowerTimeFreezer"))
    {
        HealThing((int)((fixed)GetActorProperty(0, APROP_SpawnHealth) * ((fixed)MonsterRegeneration / 1000.0)));
        
        // Prevent going over 100%
        if (GetActorProperty(0, APROP_Health) > GetActorProperty(0, APROP_SpawnHealth))
            SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth));
    };
    
    // Blue Aura Level Increase
    if (AuraType == 5 && (Timer() % (35 * (60 - (MonsterEnergy / 20)))) == 0 && !CheckInventory("PowerTimeFreezer"))
    {
        SetInventory("DRPGMonsterLevel", MonsterLevel + 1);
        MonsterStats(CheckInventory("DRPGMonsterFlags"), SF_LEVELUP);
        SpawnForced("DRPGLevelUpArrow", GetActorX(0), GetActorY(0), GetActorZ(0) + GetActorPropertyFixed(0, APROP_Height), 0, 0);
    };
    
    // Spawn Aura
    if (AuraType)
        SpawnAura(0, AuraType, false);
    
    // Strength
    SetInventory(StrParam("DRPGStrength%d\n", MonsterStrength * GameSkill()), 1);
    
    // Defense
    SetActorPropertyFixed(0, APROP_DamageFactor, 1.0 - (0.09 * (MonsterDefense / 100)));
    
    Delay(1);
    goto Start;
};

script void MonsterDeath()
{
    int Killer = WhoKilledMe();
    int MonsterLevel = CheckInventory("DRPGMonsterLevel");
    int MonsterThreat = CheckInventory("DRPGMonsterThreat");
    int MonsterFlags = CheckInventory("DRPGMonsterFlags");
    int MonsterCapacity = CheckInventory("DRPGMonsterCapacity");
    int MonsterLuck = CheckInventory("DRPGMonsterLuck");
    int AuraType = CheckInventory("DRPGMonsterAura");
    fixed XPAmount = Random(GetActorProperty(0, APROP_SpawnHealth) / 2.0, GetActorProperty(0, APROP_SpawnHealth)) * (1.0 + (fixed)MonsterThreat * 0.3);
    int RankAmount = GetActorProperty(0, APROP_SpawnHealth) * (1 + (MonsterThreat - (MonsterThreat > 0 ? 1 : 0)));
    int DropMod = MonsterLuck * 0.256;
    int DropAmount = (int)(1.0 + ((fixed)MonsterCapacity / 100.0));
    int DropTID = (Players(Killer).Stim.PowerupTimer[STIM_MAGNETIC] > 0 ? Players(Killer).TID : 0);
    
    // Don't scale drops to skill level
    if (GetCVar("drpg_scale_drops"))
        DropAmount /= GameSkill();
    
    // Always drop at least one item
    if (DropAmount < 1)
        DropAmount = 1;
    
    // Prevent Drop Mod from overflowing
    if (DropMod > 256)
        DropMod = 256;
    
    // Aura-Based XP/Rank Modifiers
    if (AuraType > 0 && AuraType < 10) // All Auras except Black
        RankAmount *= 2;
    if (AuraType == 3) // White
        XPAmount *= 2;
    if (AuraType == 10) // Black
    {
        XPAmount *= 2;
        RankAmount *= 4;
    };
    
    // Double Drop Amount
    if (AuraType == 9 || AuraType == 10)
        DropAmount *= 2;
    
    // Drops
    if (!(MonsterFlags & MF_NODROPS) && !GetActorProperty(0, APROP_Friendly))
    {
        // Aura Drops
        for (int i = 1; i <= DropAmount; i++)
        {
            switch (AuraType)
            {
                case 1: // Red Aura - Strength
                    DropItem(DropTID, "DRPGWeaponDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGVialStrength", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 2: // Green Aura - Defense
                    DropItem(DropTID, "DRPGUsedArmorDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGVialDefense", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 3: // White Aura - XP
                    DropItem(DropTID, "DRPGSmallTokenDropper", 1, 96 + DropMod);
                    DropItem(DropTID, "DRPGVialPotency", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 4: // Pink Aura - Vitality
                    DropItem(DropTID, "DRPGHealthDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGVialVitality", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 5: // Blue Aura - Energy
                    DropItem(DropTID, "DRPGEPCapsule", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGBigEPCapsule", 1, 64 + DropMod);
                    DropItem(DropTID, "DRPGVialEnergy", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 6: // Purple Aura - Regeneration
                    DropItem(DropTID, "DRPGRegenSphere", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGVialRegeneration", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 7: // Orange Aura - Agility
                    DropItem(DropTID, "DRPGTimeSphere", 1, 64 + (DropMod / 2));
                    DropItem(DropTID, "DRPGVialAgility", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 8: // Dark Blue Aura - Capacity
                    DropItem(DropTID, "DRPGAmmoDropper", 1, 128 + DropMod);
                    if (GetCVar("drpg_ext_doomrl"))
                        DropItem(DropTID, "RLModpackSpawner", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGVialCapacity", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 9: // Yellow Aura - Luck
                    DropItem(DropTID, "DRPGVialLuck", 1, 255);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 32);
                    break;
                case 10: // Black Aura - Miniboss
                    DropItem(DropTID, "DRPGWeaponDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGUsedArmorDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGSmallTokenDropper", 1, 96 + DropMod);
                    DropItem(DropTID, "DRPGHealthDropper", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGEPCapsule", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGBigEPCapsule", 1, 64 + DropMod);
                    DropItem(DropTID, "DRPGRegenSphere", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGTimeSphere", 1, 64 + (DropMod / 2));
                    DropItem(DropTID, "DRPGAmmoDropper", 1, 128 + DropMod);
                    if (GetCVar("drpg_ext_doomrl"))
                        DropItem(DropTID, "RLModpackSpawner", 1, 128 + DropMod);
                    DropItem(DropTID, "DRPGVialStrength", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialDefense", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialAgility", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialVitality", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialEnergy", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialRegeneration", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialCapacity", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialLuck", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialPurifier", 1, 255);
                    DropItem(DropTID, "DRPGVialPotency", 1, 192 + DropMod);
                    DropItem(DropTID, "DRPGVialDropperRare", 1, 255);
                    break;
            };
        
            // Luck-based Drops
            if (Killer > -1)
            {
                    if (RandomFixed(0.0, 100.0) < Players(Killer).CreditChance) DropItem(DropTID, "DRPGMoneyDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).HealthChance) DropItem(DropTID, "DRPGHealthDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).EPChance)     DropItem(DropTID, "DRPGEPCapsule", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).ArmorChance)  DropItem(DropTID, "DRPGArmorDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).PowerupChance)DropItem(DropTID, "DRPGPowerupDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).WeaponChance) DropItem(DropTID, "DRPGWeaponDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).WeaponChance) DropItem(DropTID, "RLModpackSpawner", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).TokenChance)  DropItem(DropTID, "DRPGSmallTokenDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).AugChance)    DropItem(DropTID, "DRPGAugDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).ShieldChance) DropItem(DropTID, "DRPGShieldDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).StimChance)   DropItem(DropTID, "DRPGStimDropper", 1, 255);
                    if (RandomFixed(0.0, 100.0) < Players(Killer).StimChance)   DropItem(DropTID, "DRPGVialDropper", 1, 255);
            };
        };
            
        // Boss Drops
        if (MonsterFlags & MF_BOSS)
            for (int i = 1; i <= (DropAmount / 2) + 1; i++)
            {
                DropItem(DropTID, "DRPGCredits1000", 1, 255);
                DropItem(DropTID, "DRPGSoulsphereRandomizer", 1, 255);
                DropItem(DropTID, "DRPGContinue", 1, 128 + DropMod);
                DropItem(DropTID, "DRPGTokenDropper", 1, 255 + DropMod);
                DropItem(DropTID, "DRPGAugDropper", 1, 128 + DropMod);
                DropItem(DropTID, "DRPGShieldDropper", 1, 128 + DropMod);
                DropItem(DropTID, "DRPGUACCard", 1, DropMod / 8);
                DropItem(DropTID, "DRPGImmunityCrystal", 1, DropMod / 8);
            };
    };
    
    // Add XP/Rank
    if (!(MonsterFlags & MF_NOXP) && !GetActorProperty(0, APROP_Friendly))
    {
        // XP modifications based on level and skill
        if (GetCVar("drpg_xp_monsterlevel")) XPAmount *= 1.0 + ((fixed)MonsterLevel / 100.0);
        if (GetCVar("drpg_xp_skilllevel")) XPAmount *= 1.0 - (0.15 * (fixed)GameSkill());
        
        for (int i = 0; i < MAX_PLAYERS; i++)
        {
            if (MonsterFlags & MF_NEGATIVEXP)
                AddXP(i, (int)XPAmount, -RankAmount, false)
            else
            {
                if (Killer == i)
                    AddXP(i, (int)XPAmount, RankAmount, false)
                else
                    AddXP(i, (int)XPAmount, RankAmount, true);
            };
        };
    };
    
    // Add a kill to the pay kills
    if (!(MonsterFlags & MF_NOPAYKILL) && Killer > -1)
        Players(Killer).PayKills++;
    
    // Mission Handling
    if (Killer > -1 && Players(Killer).Mission.Active && !InBase && !GetActorProperty(0, APROP_Friendly))
    {
        // Collection Mission
        if (Players(Killer).Mission.Type == MT_COLLECT)
            if (Random(1, 1 << ((Players(Killer).Mission.Difficulty + 1))) == 1)
                DropItem(0, Players(Killer).Mission.Item.Actor, 1, 255);
        
        // Kill Mission
        if (Players(Killer).Mission.Type == MT_KILL)
        {
            str Actor = GetActorClass(0);
            str NeededActor = StrParam("DRPG%s\n", Players(Killer).Mission.Monster.Actor);
            int Match = StrCmp(Actor, NeededActor);
            
            // DoomRL Compatibility
            if (GetCVar("drpg_ext_doomrl"))
            {
                NeededActor = StrParam("%sRPG\n", Players(Killer).Mission.Monster.Actor);
                
                // Special handling for Humans
                for (int i = 0; i < MAX_HUMANS; i++)
                    if (StrCmp(StrLeft(Actor, StrLen(Actor) - 3), MonsterHumanData[i][0]) == 0)
                    {
                        Actor = StrParam("%sRPG\n", MonsterHumanData[i][1]);
                        break;
                    };
                
                // Re-check the match
                Match = StrCmp(Actor, NeededActor);
            }
            // Extras Compatibility
            else if (GetCVar("drpg_ext_extras"))
            {
                NeededActor = StrParam("DRPG%sExtras\n", Players(Killer).Mission.Monster.Actor);
                
                Match = StrCmp(Actor, NeededActor);
            };
            
            if (GetUserCVar(Killer, "drpg_debug"))
                Log("\cdDEBUG: \caKilled %s, need %s, match was %d\n", Actor, NeededActor, Match);
            
            if (Match == 0)
                Players(Killer).Mission.Current++;
        };
    };
    
    // SHOTGUNS!
    if (GetCVar("drpg_shotguns"))
        DropItem(0, "DRPGShotSpawn", 1, 255);
};

script int WhoKilledMe()
{
    SetActivatorToTarget(0);
    return PlayerNumber();
};

function int CalculateMonsterThreatLevel(int TID)
{
    int Aura = CheckInventoryTID(TID, "DRPGMonsterAura");
    int Strength = CheckInventoryTID(TID, "DRPGMonsterStrength");
    int Defense = CheckInventoryTID(TID, "DRPGMonsterDefense");
    int Vitality = CheckInventoryTID(TID, "DRPGMonsterVitality");
    int Energy = CheckInventoryTID(TID, "DRPGMonsterEnergy");
    int Regeneration = CheckInventoryTID(TID, "DRPGMonsterRegeneration");
    int Agility = CheckInventoryTID(TID, "DRPGMonsterAgility");
    int Capacity = CheckInventoryTID(TID, "DRPGMonsterCapacity");
    int Luck = CheckInventoryTID(TID, "DRPGMonsterLuck");
    int Threat;
    
    Threat += Strength;
    Threat += Defense;
    Threat += Vitality;
    Threat += Energy;
    Threat += Regeneration;
    Threat += Agility;
    Threat += Capacity;
    Threat += Luck;
    Threat /= 1000;
    if (Aura > 0 && Aura < 9) // Normal Auras
        Threat++
    else if (Aura == 10) // Black Aura
        Threat += 2;
    
    return Threat;
};

function int CalculateMonsterMaxHealth(int TID)
{
    int Vitality = CheckInventoryTID(TID, "DRPGMonsterVitality");
    int HealthMax = GetActorProperty(TID, APROP_SpawnHealth);
    int Health = HealthMax;
    
    Health *= 100 + Vitality * 100 / 100;
    Health /= 100;
    Health -= HealthMax;
    
    if (Health < HealthMax)
        Health = HealthMax;
    
    return Health;
};

function fixed CalculateMonsterSpeed(int TID)
{
    int Agility = CheckInventoryTID(TID, "DRPGMonsterAgility");
    int BaseSpeed = CheckInventoryTID(TID, "DRPGMonsterSpeed");
    
    fixed SpeedMult = (fixed)BaseSpeed;
    SpeedMult *= 1.0 + ((fixed)Agility / 1000.0);
    
    return SpeedMult;
};
