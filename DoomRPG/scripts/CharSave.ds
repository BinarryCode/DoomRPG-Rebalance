#include "RPG.dh"

#include "Arena.dh"
#include "Augs.dh"
#include "CharSave.dh"
#include "ItemData.dh"
#include "Shield.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Utils.dh"

/*  
    
    --- Character Save Format ---
    
    GENERAL NOTES
    - Items such as Tokens, Shield Parts and Stims will be stored in the Locker for retrieval instead of in the save data itself
    - Each byte will be stored with a leading 0 if necessary, so a level of 10 and a rank level of 5 will come out as 0A05
    
    Version / Compatibility Flag
        - Version is referenced from defs, stored in 2 bytes
        - Mirror of the CompatMode static, stored in 1 byte
    Level / Rank Level
        - Only Level and Rank Level are stored, the XP to give is determined from these
        - Both Level and Rank Level are stored in 1 byte each
    Stats
        - Each stat will be stored in 1 byte since they will never go above 200 by normal means
    Skills
        - Each skill level is stored in 1 byte
        - Each skill category will be wrapped in a set of []'s
        - Each skill within each category will be seperated by a -
    Skill Wheel
        - 16 bytes total
        - Each slot is 2 bytes
        - First byte is the category, second byte is the index
        - Both bytes being 255 (FFFF) means it is blank
    Augmentations
        - Each augmentation's level is stored in 1 byte
    Stims
        - Each stim vial type is stored in 4 bytes
    Misc
        - Credits
          - Stored in 4 bytes
        - Chips
          - Gold Chip stored in 2 bytes
          - Platinum Chip stored in 2 bytes
        - UAC Card
          - Stored in 1 byte
        - Augmentation Battery
          - Stored in 1 byte
        - Toxicity
          - Stored in 1 byte
        - Pay Bonus
          - Stored in 2 bytes
        - Arena Wave
          - Stored in 2 bytes
    Locker
        - Each item's count will be stored in 4 bytes
        - Each item category will be wrapped in a set of []'s
        - Each item within each category will be seperated by a -
        
    ----- COMPATIBILITY EXTENSIONS -----
    
    DRLA Assemblies
        - Each assembly set can be stored in a 4-byte bitfield
    DRLA Known Exotic Effects Info (TODO)
        - Each weapon can use a 1 byte bitfield to hold the known exoctic effects
    
    Checksum
        - Checksum is seperated out at the end via a |
        - Checksum is determined by XOR'ing the value of each entry into a total buffer and doing the following:
          (Total * 8) / 2
          [KS] I removed the LShift because that only leaves us with 24 bits for comparison. Instead, we XOR (^) the values together.
    
*/

str[DRLA_MAX_ASSEMBLIES] DRLAAssemblies =
{
    "RLChainswordAssemblyLearntToken";
    "RLPiercingBladeAssemblyLearntToken";
    "RLSilencedPistolAssemblyLearntToken";
    "RLShredderPistolAssemblyLearntToken";
    "RLSpeedloaderPistolAssemblyLearntToken";
    "RLHighPowerWeaponAssemblyLearntToken";
    "RLElephantGunAssemblyLearntToken";
    "RLHeavyShotgunAssemblyLearntToken";
    "RLPlasmaticShrapnelAssemblyLearntToken";
    "RLTacticalShotgunAssemblyLearntToken";
    "RLGatlingGunAssemblyLearntToken";
    "RLMicroLauncherAssemblyLearntToken";
    "RLDoubleChainsawAssemblyLearntToken";
    "RLStormPistolAssemblyLearntToken";
    "RLPlasmaPistolAssemblyLearntToken";
    "RLAutoshotgunAssemblyLearntToken";
    "RLNanoShrapnelAssemblyLearntToken";
    "RLFocusedDoubleShotgunAssemblyLearntToken";
    "RLBulletstormChaingunAssemblyLearntToken";
    "RLAssaultRifleAssemblyLearntToken";
    "RLBurstCannonAssemblyLearntToken";
    "RLTacticalRocketLauncherAssemblyLearntToken";
    "RLGrenadeLauncherAssemblyLearntToken";
    "RLHyperblasterAssemblyLearntToken";
    "RLPlasmaRifleMkIIAssemblyLearntToken";
    "RLVBFG9000AssemblyLearntToken";
    "RLMiniMissilePistolAssemblyLearntToken";
    "RLRipperAssemblyLearntToken";
    "RLDemolitionAmmoAssemblyLearntToken";
    "RLNanomanufactureAmmoAssemblyLearntToken";
    "RLMotherInLawAssemblyLearntToken";
    "RLPlasmaRefractorAssemblyLearntToken";
    "RLBiggestFuckingGunAssemblyLearntToken";
    "RLAutocannonAssemblyLearntToken";
};

acscript void SaveCharacter() net
{
    // You need to be in the Outpost to do this
    if (!InBase)
    {
        SetFont("BIGFONT");
        HudMessage("\cgERROR: \cjYou must be in the Outpost to save and deposit your equipment\n", HUDMSG_FADEOUT, 0, CR_WHITE, 1.5, 0.5, 3.0, 2.0);
        ActivatorSound("menu/error", 127);
        return;
    };
    
    SetFont("BIGFONT");
    HudMessage("===== Save In Progress =====\n", HUDMSG_PLAIN | HUDMSG_LOG, 70, CR_YELLOW, 0.5, 0.3, 0);
    SetFont("SMALLFONT");
    HudMessage("Do not quit the game or power off your console.\n", HUDMSG_PLAIN | HUDMSG_LOG, 71, CR_ORANGE, 0.5, 0.35, 0);
    
    // Bulk Deposit
    for (int i = 0; i < ItemCategories; i++)
    {
        for (int j = 0; j < ItemMax[i]; j++)
            if (CheckInventory(ItemData[i][j].Actor) > 0)
            {
                Player.Locker[i][j] += CheckInventory(ItemData[i][j].Actor);
                SetInventory(ItemData[i][j].Actor, 0);
            };
    };
    
    Delay(1);
    
    // Populate the data
    auto CharSaveInfo Info;
    PopulateCharData(&Info);
    
    auto char const *SaveString = MakeSaveString(&Info);
    auto char *EncodedSaveString = Z_Malloc(strlen(SaveString) + 1, PU_STATIC, NULL);
    auto bool EncodeLock = false;
    
    EncodeRLE(SaveString, EncodedSaveString, &EncodeLock);
    while (EncodeLock) Delay(1);
    
    EncodedSaveString = Z_Realloc(EncodedSaveString, strlen(EncodedSaveString) + 1, PU_STATIC, NULL);
    // Log("Save Data: %s\n", EncodedSaveString);
    int PartialStringsNeeded = strlen(EncodedSaveString) / CHARSAVE_MAXSIZE;
    if (strlen(EncodedSaveString) % CHARSAVE_MAXSIZE > 0)
        PartialStringsNeeded++;
    auto char *PartialSaveString = Z_Malloc(CHARSAVE_MAXSIZE + 1, PU_STATIC, NULL);
    PartialSaveString[CHARSAVE_MAXSIZE] = '\x00';
    
    for (int i = 0; i < CHARSAVE_MAXCVARS; i++)
        SetUserCVarString(PlayerNumber(), StrParam("drpg_char_data_%d\n", i), "");

    bool Success = true;
    
    if (PartialStringsNeeded > CHARSAVE_MAXCVARS)
        Success = false;
    if (Success && !SetUserCVar(PlayerNumber(), "drpg_char_data_len", PartialStringsNeeded))
        Success = false;
    for (int i = 0; Success && i < PartialStringsNeeded; i++)
    {
        strncpy(PartialSaveString, EncodedSaveString + (CHARSAVE_MAXSIZE * i), CHARSAVE_MAXSIZE);
        if (!SetUserCVarString(PlayerNumber(), StrParam("drpg_char_data_%d\n", i), StrParam("%s\n", PartialSaveString)))
            Success = false;
    };
    
    Z_Free((void *)SaveString);
    Z_Free((void *)EncodedSaveString);
    Z_Free((void *)PartialSaveString);
    
    if (Success)
    {
        // Saving Successful
        ActivatorSound("charsave/save", 127);
        SetFont("BIGFONT");
        HudMessage("===== Character Saved =====\n", HUDMSG_FADEOUT | HUDMSG_LOG, 70, CR_WHITE, 0.5, 0.3, 3.0, 2.0);
        HudMessage("\n", HUDMSG_FADEOUT, 71, CR_ORANGE, 0.5, 0.35, 3.0, 2.0);
    }
    else
    {
        // Saving Failed
        ActivatorSound("charsave/fail", 127);
        SetFont("BIGFONT");
        HudMessage("===== Character Save Failed =====\n", HUDMSG_FADEOUT | HUDMSG_LOG, 70, CR_RED, 0.5, 0.3, 5.0, 2.0);
        SetFont("SMALLFONT");
        HudMessage("A CVar could not be written to.\n", HUDMSG_FADEOUT | HUDMSG_LOG, 71, CR_ORANGE, 0.5, 0.35, 5.0, 2.0);
        HudMessage("Perhaps your save is too large?\n", HUDMSG_FADEOUT | HUDMSG_LOG, 72, CR_ORANGE, 0.5, 0.4, 5.0, 2.0);
        HudMessage("Post your ini if you see this.\n", HUDMSG_FADEOUT | HUDMSG_LOG, 73, CR_ORANGE, 0.5, 0.45, 5.0, 2.0);
    };
};

acscript void LoadCharacter() net
{
    auto char *EncodedSaveString;
    auto char *SaveString;
    auto CharSaveInfo Info;
    auto bool EncodeLock = false;
    
    EncodedSaveString = Z_Malloc(65536, PU_STATIC, NULL);
    EncodedSaveString[0] = '\x00';
    
    int NumCVars = GetUserCVar(PlayerNumber(), "drpg_char_data_len");
    if (NumCVars <= 0)
    {
        ActivatorSound("charsave/fail", 127);
        SetFont("BIGFONT");
        HudMessage("===== No Character Data =====\n", HUDMSG_FADEOUT | HUDMSG_LOG, 70, CR_RED, 0.5, 0.3, 3.0, 2.0);
        return;
    };
    
    SetFont("BIGFONT");
    HudMessage("===== Load In Progress =====\n", HUDMSG_PLAIN | HUDMSG_LOG, 70, CR_YELLOW, 0.5, 0.3, 0);
    SetFont("SMALLFONT");
    HudMessage("Make sure to withdraw your items from the shop!\n", HUDMSG_PLAIN, 71, CR_ORANGE, 0.5, 0.35, 0);
    
    for (int i = 0; i < NumCVars; i++)
    {
        char *tmp = StringToCharP(GetUserCVarString(PlayerNumber(), StrParam("drpg_char_data_%d\n", i)));
        strcat(EncodedSaveString, tmp);
        Z_Free((void *)tmp);
    };
    
    EncodedSaveString = Z_Realloc(EncodedSaveString, strlen(EncodedSaveString) + 1, PU_STATIC, NULL);
    // Log("Load Data (Encoded): %s\n", EncodedSaveString);
    
    SaveString = Z_Malloc(65536, PU_STATIC, NULL);
    
    DecodeRLE(EncodedSaveString, SaveString, &EncodeLock);
    while (EncodeLock) Delay(1);
    
    SaveString = Z_Realloc(SaveString, strlen(SaveString) + 1, PU_STATIC, NULL);
    // Log("Load Data (Raw): %s\n", SaveString);
    Z_Free((void *)EncodedSaveString);
    
    LoadCharDataFromString(&Info, SaveString);
    
    Z_Free((void *)SaveString);
    
    // Version / Compatibility Flag
    if (Info.Version < 0)
    {
        auto str[3] ReasonStrings =
        {
            "You loaded this with different mods!";     // 1: Wrong CompatMode
            "Your save version is outdated.";           // 2: SaveVersion is too old
            "Your save was corrupted.";                 // 3: Bad checksum or something else went wrong
        };
        int Reason = -(Info.Version) - 1;
        
        ActivatorSound("charsave/fail", 127);
        SetFont("BIGFONT");
        HudMessage("===== Character Load Failed =====\n", HUDMSG_FADEOUT | HUDMSG_LOG, 70, CR_RED, 0.5, 0.3, 3.0, 2.0);
        SetFont("SMALLFONT");
        HudMessage("%s (Error %d)\n", ReasonStrings[Reason], Reason + 1, HUDMSG_FADEOUT | HUDMSG_LOG, 71, CR_ORANGE, 0.5, 0.35, 3.0, 2.0);
        return;
    };
    
    // Level / Rank Level
    if (Info.Level > 0)
    {
        Player.Level = Info.Level;
        Player.XP = XPTable[Player.Level - 1];
    };
    if (Info.RankLevel > 0)
    {
        Player.RankLevel = Info.RankLevel;
        Player.Rank = RankTable[Player.RankLevel - 1];
    };
    
    // Stats
    Player.Strength     = Info.Stats[0];
    Player.Defense      = Info.Stats[1];
    Player.Vitality     = Info.Stats[2];
    Player.Energy       = Info.Stats[3];
    Player.Regeneration = Info.Stats[4];
    Player.Agility      = Info.Stats[5];
    Player.Capacity     = Info.Stats[6];
    Player.Luck         = Info.Stats[7];
    
    Player.EP = Player.Energy * 10;
    Player.HealthMax = Player.Vitality * 10;
    Player.ActualHealth = Player.HealthMax;
    SetActorProperty(0, APROP_Health, Player.HealthMax);
    
    // Skills
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < MAX_SKILLS; j++)
        {
            Player.SkillLevel[i][j].Level = Info.Skills[i][j];
            Player.SkillLevel[i][j].CurrentLevel = Info.Skills[i][j];
        };
    
    // Skill Wheel
    for (int i = 0; i < MAX_SKILLKEYS; i++)
    {
        Player.SkillCategory[i] = Info.SkillWheel[i][0];
        Player.SkillIndex[i]    = Info.SkillWheel[i][1];
        if (Info.SkillWheel[i][0] == 255 || Info.SkillWheel[i][1] == 255)
        {
            Player.SkillCategory[i] = -1;
            Player.SkillIndex[i] = -1;
        };
    };
    
    // Augmentations
    for (int i = 0; i < MAX_AUGS; i++)
        Player.Augs.Level[i] = Info.Augs[i];

    // Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        Player.Stim.Vials[i] = Info.Stims[i];
    
    // Misc
    SetInventory("DRPGCredits", Info.Credits);
    SetInventory("DRPGChipGold", Info.GoldChips);
    SetInventory("DRPGChipPlatinum", Info.PlatinumChips);
    SetInventory("DRPGUACCard", Info.ShopCard);
    if (Info.ShopCard == 5)
        SetInventory("DRPGDiamondUACCard", 1);
    Player.Augs.Battery = Info.Battery;
    Player.Toxicity = Info.Toxicity;
    Player.PayBonus = Info.PayBonus;
    ArenaMaxWave = Info.ArenaWave;
    
    Delay(1);
    
    // Locker
    for (int i = 0; i < ITEM_CATEGORIES; i++)
        for (int j = 0; j < ITEM_MAX; j++)
            Player.Locker[i][j] = Info.Locker[i][j];
    
    // DRLA Assemblies
    for (int i = 0; i < DRLA_MAX_ASSEMBLIES; i++)
    {
        if (Info.DRLAAssemblies1 & (1 << i) && i < 16)
            SetInventory(DRLAAssemblies[i], 1)
        else if (Info.DRLAAssemblies2 & 1 << (i - 16) && i < 32)
            SetInventory(DRLAAssemblies[i], 1)
        else if (Info.DRLAAssemblies3 & 1 << (i - 32) && i < 48)
            SetInventory(DRLAAssemblies[i], 1);
    };
    
    ActivatorSound("charsave/accept", 127);
    SetFont("BIGFONT");
    HudMessage("===== Character Load Complete =====\n", HUDMSG_FADEOUT | HUDMSG_LOG, 70, CR_GREEN, 0.5, 0.3, 3.0, 2.0);
    SetFont("SMALLFONT");
    HudMessage("Make sure to withdraw your items from the shop!\n", HUDMSG_FADEOUT | HUDMSG_LOG, 71, CR_WHITE, 0.5, 0.35, 3.0, 2.0);
};

acscript void ClearCharacter() net
{
    SetUserCVar(PlayerNumber(), "drpg_char_data_len", 0);
    for (int i = 0; i < CHARSAVE_MAXCVARS; i++)
        SetUserCVarString(PlayerNumber(), StrParam("drpg_char_data_%d\n", i), "");
    
    ActivatorSound("charsave/accept", 127);
    SetFont("BIGFONT");
    HudMessage("===== Character Cleared =====\n", HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_YELLOW, 0.5, 0.3, 3.0, 2.0);
};

acscript void DumpCharacter()
{
    for (int i = 0; i < GetUserCVar(PlayerNumber(), "drpg_char_data_len"); i++)
    {
        str Data = GetUserCVarString(PlayerNumber(), StrParam("drpg_char_data_%d\n", i));
        Log("\cdData %d \c-- \ca%s\n", i, Data);
    };
};

// Hexadecimal storage
function char ToHexChar(int i)
{
    return "0123456789ABCDEF"[i & 0xF];
};

function int FromHexChar(char c)
{
    switch (c)
    {
    case '0':           return 0;
    case '1':           return 1;
    case '2':           return 2;
    case '3':           return 3;
    case '4':           return 4;
    case '5':           return 5;
    case '6':           return 6;
    case '7':           return 7;
    case '8':           return 8;
    case '9':           return 9;
    case 'A': case 'a': return 10;
    case 'B': case 'b': return 11;
    case 'C': case 'c': return 12;
    case 'D': case 'd': return 13;
    case 'E': case 'e': return 14;
    case 'F': case 'f': return 15;
    };
    
    return 0; // Default
};

script void PopulateCharData(CharSaveInfo *Info)
{
    // Version / Compatibility Flag
    Info->Version = CHARSAVE_VERSION;
    Info->CompatMode = CompatMode;
    
    // Level / Rank Level
    Info->Level = Player.Level;
    Info->RankLevel = Player.RankLevel;
    
    // Stats
    Info->Stats[0] = Player.Strength;
    Info->Stats[1] = Player.Defense;
    Info->Stats[2] = Player.Vitality;
    Info->Stats[3] = Player.Energy;
    Info->Stats[4] = Player.Regeneration;
    Info->Stats[5] = Player.Agility;
    Info->Stats[6] = Player.Capacity;
    Info->Stats[7] = Player.Luck;
    
    // Skills
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < MAX_SKILLS; j++)
            Info->Skills[i][j] = Player.SkillLevel[i][j].Level;
    
    // Skill Wheel
    for (int i = 0; i < MAX_SKILLKEYS; i++)
    {
        Info->SkillWheel[i][0] = Player.SkillCategory[i];
        Info->SkillWheel[i][1] = Player.SkillIndex[i];
        if (Info->SkillWheel[i][0] == -1)
            Info->SkillWheel[i][0] = 255;
        if (Info->SkillWheel[i][1] == -1)
            Info->SkillWheel[i][1] = 255;
    };
    
    // Augmentations
    for (int i = 0; i < MAX_AUGS; i++)
        Info->Augs[i] = Player.Augs.Level[i];
    
    // Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        Info->Stims[i] = Player.Stim.Vials[i];
    
    // Misc
    Info->Credits = CheckInventory("DRPGCredits");
    Info->GoldChips = CheckInventory("DRPGChipGold");
    Info->PlatinumChips = CheckInventory("DrpgChipPlatinum");
    Info->ShopCard = Player.ShopCard;
    Info->Battery = Player.Augs.Battery;
    Info->Toxicity = Player.Toxicity;
    Info->PayBonus = Player.PayBonus;
    Info->ArenaWave = ArenaMaxWave;
    
    // Locker
    for (int i = 0; i < ITEM_CATEGORIES; i++)
        for (int j = 0; j < ITEM_MAX; j++)
            Info->Locker[i][j] = Player.Locker[i][j];
    
    // ----- COMPATIBILITY EXTENSIONS -----
    
    // DRLA Assemblies
    for (int i = 0; i < DRLA_MAX_ASSEMBLIES; i++)
    {
        if (CheckInventory(DRLAAssemblies[i]) && i < 16)
            Info->DRLAAssemblies1 |= 1 << i
        else if (CheckInventory(DRLAAssemblies[i]) && i < 32)
            Info->DRLAAssemblies2 |= 1 << (i - 16)
        else if (CheckInventory(DRLAAssemblies[i]) && i < 48)
            Info->DRLAAssemblies3 |= 1 << (i - 32);
    };
    
    // Calc Checksum
    Info->Checksum = 0;
    Info->Checksum ^= Info->Version;
    Info->Checksum ^= Info->CompatMode;
    Info->Checksum ^= Info->Level;
    Info->Checksum ^= Info->RankLevel;
    for (int i = 0; i < STAT_MAX; i++)
        Info->Checksum ^= Info->Stats[i];
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < MAX_SKILLS; j++)
            Info->Checksum ^= Info->Skills[i][j];
    for (int i = 0; i < MAX_SKILLKEYS; i++)
    {
        Info->Checksum ^= Info->SkillWheel[i][0];
        Info->Checksum ^= Info->SkillWheel[i][1];
    };
    for (int i = 0; i < MAX_AUGS; i++)
        Info->Checksum ^= Info->Augs[i];
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        Info->Checksum ^= Info->Stims[i];
    Info->Checksum ^= Info->Credits;
    Info->Checksum ^= Info->Battery;
    Info->Checksum ^= Info->Toxicity;
    Info->Checksum ^= Info->PayBonus;
    Info->Checksum ^= Info->ArenaWave;
    for (int i = 0; i < ITEM_CATEGORIES; i++)
        for (int j = 0; j < ITEM_MAX; j++)
            Info->Checksum ^= Info->Locker[i][j] + (i * 256) + j;
    Info->Checksum ^= Info->DRLAAssemblies1;
    Info->Checksum ^= Info->DRLAAssemblies2;
    Info->Checksum ^= Info->DRLAAssemblies3;
    
    Info->Checksum = CalculateChecksum(Info->Checksum);
};

script void LoadCharDataFromString(CharSaveInfo *Info, char const *String)
{
    int StringPos = 0;
    int Version = 0;
    Info->Version = -3;
    
    // Version / Compatibility Flag
    Version = HexToInteger(String + StringPos, 4);
    StringPos += 4;
    if (Version != CHARSAVE_VERSION)
    {
        Info->Version = -2;
        return;
    };
    
    Info->CompatMode = HexToInteger(String + StringPos, 2);
    StringPos += 2;
    if (Info->CompatMode != CompatMode)
    {
        Info->Version = -1;
        return;
    };
    
    // Level / Rank Level
    Info->Level = HexToInteger(String + StringPos, 2);
    StringPos += 2;
    Info->RankLevel = HexToInteger(String + StringPos, 2);
    StringPos += 2;
    
    // Stats
    for (int i = 0; i < STAT_MAX; i++)
    {
        Info->Stats[i] = HexToInteger(String + StringPos, 2);
        StringPos += 2;
    };
    
    // Skills
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < MAX_SKILLS; j++)
        {
            Info->Skills[i][j] = HexToInteger(String + StringPos, 2);
            StringPos += 2;
        };
    
    // Skill Wheel
    for (int i = 0; i < MAX_SKILLKEYS; i++)
    {
        Info->SkillWheel[i][0] = HexToInteger(String + StringPos,     2);
        Info->SkillWheel[i][1] = HexToInteger(String + StringPos + 2, 2);
        StringPos += 4;
    };
    
    // Augmentations
    for (int i = 0; i < MAX_AUGS; i++)
    {
        Info->Augs[i] = HexToInteger(String + StringPos, 2);
        StringPos += 2;
    };
    
    // Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
    {
        Info->Stims[i] = HexToInteger(String + StringPos, 8);
        StringPos += 8;
    };
    
    // Misc
    Info->Credits = HexToInteger(String + StringPos, 8);
    StringPos += 8;
    Info->GoldChips = HexToInteger(String + StringPos, 4);
    StringPos += 4;
    Info->PlatinumChips = HexToInteger(String + StringPos, 4);
    StringPos += 4;
    Info->ShopCard = HexToInteger(String + StringPos, 1);
    StringPos += 1;
    Info->Battery = HexToInteger(String + StringPos, 2);
    StringPos += 2;
    Info->Toxicity = HexToInteger(String + StringPos, 2);
    StringPos += 2;
    Info->PayBonus = HexToInteger(String + StringPos, 4);
    StringPos += 4;
    Info->ArenaWave = HexToInteger(String + StringPos, 4);
    StringPos += 4;
    
    // Locker
    for (int i = 0; i < ITEM_CATEGORIES; i++)
        for (int j = 0; j < ITEM_MAX; j++)
        {
            Info->Locker[i][j] = HexToInteger(String + StringPos, 4);
            StringPos += 4;
        };
    
    // ----- COMPATIBILITY EXTENSIONS -----
    
    // DRLA Assemblies
    Info->DRLAAssemblies1 = HexToInteger(String + StringPos, 4);
    StringPos += 4;
    Info->DRLAAssemblies2 = HexToInteger(String + StringPos, 4);
    StringPos += 4;
    Info->DRLAAssemblies3 = HexToInteger(String + StringPos, 4);
    StringPos += 4;
    
    // Verify Checksum
    Info->Checksum = HexToInteger(String + StringPos, 8);
    StringPos += 8;
    
    Info->Version = Version;
    
    auto int MyChecksum = 0;
    MyChecksum ^= Info->Version;
    MyChecksum ^= Info->CompatMode;
    MyChecksum ^= Info->Level;
    MyChecksum ^= Info->RankLevel;
    for (int i = 0; i < STAT_MAX; i++)
        MyChecksum ^= Info->Stats[i];
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < MAX_SKILLS; j++)
            MyChecksum ^= Info->Skills[i][j];
    for (int i = 0; i < MAX_SKILLKEYS; i++)
    {
        MyChecksum ^= Info->SkillWheel[i][0];
        MyChecksum ^= Info->SkillWheel[i][1];
    };
    for (int i = 0; i < MAX_AUGS; i++)
        MyChecksum ^= Info->Augs[i];
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        MyChecksum ^= Info->Stims[i];
    MyChecksum ^= Info->Credits;
    MyChecksum ^= Info->Battery;
    MyChecksum ^= Info->Toxicity;
    MyChecksum ^= Info->PayBonus;
    MyChecksum ^= Info->ArenaWave;
    for (int i = 0; i < ITEM_CATEGORIES; i++)
        for (int j = 0; j < ITEM_MAX; j++)
            MyChecksum ^= Info->Locker[i][j] + (i * 256) + j;
    MyChecksum ^= Info->DRLAAssemblies1;
    MyChecksum ^= Info->DRLAAssemblies2;
    MyChecksum ^= Info->DRLAAssemblies3;
    
    MyChecksum = CalculateChecksum(MyChecksum);
    
    if (MyChecksum != Info->Checksum)
    {
        Info->Version = -3;
        return;
    };
};

script char const *MakeSaveString(CharSaveInfo *Info)
{
    char *SaveString = Z_Malloc(65536, PU_STATIC, NULL);
    unsigned int pos = 0;
    
    // Version
    SaveString[pos + 3] = ToHexChar(Info->Version);
    SaveString[pos + 2] = ToHexChar(Info->Version >> 4);
    SaveString[pos + 1] = ToHexChar(Info->Version >> 8);
    SaveString[pos + 0] = ToHexChar(Info->Version >> 12);
    pos += 4;
    
    // Compatibility
    SaveString[pos + 1] = ToHexChar(Info->CompatMode);
    SaveString[pos + 0] = ToHexChar(Info->CompatMode >> 4);
    pos += 2;
    
    // Level & Rank
    SaveString[pos + 3] = ToHexChar(Info->RankLevel);
    SaveString[pos + 2] = ToHexChar(Info->RankLevel >> 4);
    SaveString[pos + 1] = ToHexChar(Info->Level);
    SaveString[pos + 0] = ToHexChar(Info->Level >> 4);
    pos += 4;
    
    // Stats
    for (int i = 0; i < STAT_MAX; i++)
    {
        SaveString[pos + 1] = ToHexChar(Info->Stats[i]);
        SaveString[pos + 0] = ToHexChar(Info->Stats[i] >> 4);
        pos += 2;
    };
    
    // Skills
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < MAX_SKILLS; j++)
        {
            SaveString[pos + 1] = ToHexChar(Info->Skills[i][j]);
            SaveString[pos + 0] = ToHexChar(Info->Skills[i][j] >> 4);
            pos += 2;
        };
    
    // Skill Wheel
    for (int i = 0; i < MAX_SKILLKEYS; i++)
    {
        SaveString[pos + 3] = ToHexChar(Info->SkillWheel[i][1]);
        SaveString[pos + 2] = ToHexChar(Info->SkillWheel[i][1] >> 4);
        SaveString[pos + 1] = ToHexChar(Info->SkillWheel[i][0]);
        SaveString[pos + 0] = ToHexChar(Info->SkillWheel[i][0] >> 4);
        pos += 4;
    };
    
    // Augs
    for (int i = 0; i < MAX_AUGS; i++)
    {
        SaveString[pos + 1] = ToHexChar(Info->Augs[i]);
        SaveString[pos + 0] = ToHexChar(Info->Augs[i] >> 4);
        pos += 2;
    };
    
    // Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
    {
        SaveString[pos + 7] = ToHexChar(Info->Stims[i]);
        SaveString[pos + 6] = ToHexChar(Info->Stims[i] >> 4);
        SaveString[pos + 5] = ToHexChar(Info->Stims[i] >> 8);
        SaveString[pos + 4] = ToHexChar(Info->Stims[i] >> 12);
        SaveString[pos + 3] = ToHexChar(Info->Stims[i] >> 16);
        SaveString[pos + 2] = ToHexChar(Info->Stims[i] >> 20);
        SaveString[pos + 1] = ToHexChar(Info->Stims[i] >> 24);
        SaveString[pos + 0] = ToHexChar(Info->Stims[i] >> 28);
        pos += 8;
    };
    
    // Misc
    
    // Credits
    SaveString[pos + 7] = ToHexChar(Info->Credits);
    SaveString[pos + 6] = ToHexChar(Info->Credits >> 4);
    SaveString[pos + 5] = ToHexChar(Info->Credits >> 8);
    SaveString[pos + 4] = ToHexChar(Info->Credits >> 12);
    SaveString[pos + 3] = ToHexChar(Info->Credits >> 16);
    SaveString[pos + 2] = ToHexChar(Info->Credits >> 20);
    SaveString[pos + 1] = ToHexChar(Info->Credits >> 24);
    SaveString[pos + 0] = ToHexChar(Info->Credits >> 28);
    pos += 8;
    
    // Gold Chips
    SaveString[pos + 3] = ToHexChar(Info->GoldChips);
    SaveString[pos + 2] = ToHexChar(Info->GoldChips >> 4);
    SaveString[pos + 1] = ToHexChar(Info->GoldChips >> 8);
    SaveString[pos + 0] = ToHexChar(Info->GoldChips >> 12);
    pos += 4;
    
    // Platinum Chips
    SaveString[pos + 3] = ToHexChar(Info->PlatinumChips);
    SaveString[pos + 2] = ToHexChar(Info->PlatinumChips >> 4);
    SaveString[pos + 1] = ToHexChar(Info->PlatinumChips >> 8);
    SaveString[pos + 0] = ToHexChar(Info->PlatinumChips >> 12);
    pos += 4;
    
    // UAC Card
    SaveString[pos + 0] = ToHexChar(Info->ShopCard);
    pos += 1;
    
    // Aug Battery
    SaveString[pos + 1] = ToHexChar(Info->Battery);
    SaveString[pos + 0] = ToHexChar(Info->Battery >> 4);
    pos += 2;
    
    // Toxicity
    SaveString[pos + 1] = ToHexChar(Info->Toxicity);
    SaveString[pos + 0] = ToHexChar(Info->Toxicity >> 4);
    pos += 2;
    
    // Pay Bonus
    SaveString[pos + 3] = ToHexChar(Info->PayBonus);
    SaveString[pos + 2] = ToHexChar(Info->PayBonus >> 4);
    SaveString[pos + 1] = ToHexChar(Info->PayBonus >> 8);
    SaveString[pos + 0] = ToHexChar(Info->PayBonus >> 12);
    pos += 4;
    
    // Arena Wave
    SaveString[pos + 3] = ToHexChar(Info->ArenaWave);
    SaveString[pos + 2] = ToHexChar(Info->ArenaWave >> 4);
    SaveString[pos + 1] = ToHexChar(Info->ArenaWave >> 8);
    SaveString[pos + 0] = ToHexChar(Info->ArenaWave >> 12);
    pos += 4;

    // Locker
    for (int i = 0; i < ITEM_CATEGORIES; i++)
        for (int j = 0; j < ITEM_MAX; j++)
        {
            SaveString[pos + 3] = ToHexChar(Info->Locker[i][j]);
            SaveString[pos + 2] = ToHexChar(Info->Locker[i][j] >> 4);
            SaveString[pos + 1] = ToHexChar(Info->Locker[i][j] >> 8);
            SaveString[pos + 0] = ToHexChar(Info->Locker[i][j] >> 12);
            pos += 4;
        };
    
    // DRLA Assemblies
    SaveString[pos + 3] = ToHexChar(Info->DRLAAssemblies1);
    SaveString[pos + 2] = ToHexChar(Info->DRLAAssemblies1 >> 4);
    SaveString[pos + 1] = ToHexChar(Info->DRLAAssemblies1 >> 8);
    SaveString[pos + 0] = ToHexChar(Info->DRLAAssemblies1 >> 12);
    pos += 4;
    SaveString[pos + 3] = ToHexChar(Info->DRLAAssemblies2);
    SaveString[pos + 2] = ToHexChar(Info->DRLAAssemblies2 >> 4);
    SaveString[pos + 1] = ToHexChar(Info->DRLAAssemblies2 >> 8);
    SaveString[pos + 0] = ToHexChar(Info->DRLAAssemblies2 >> 12);
    pos += 4;
    SaveString[pos + 3] = ToHexChar(Info->DRLAAssemblies3);
    SaveString[pos + 2] = ToHexChar(Info->DRLAAssemblies3 >> 4);
    SaveString[pos + 1] = ToHexChar(Info->DRLAAssemblies3 >> 8);
    SaveString[pos + 0] = ToHexChar(Info->DRLAAssemblies3 >> 12);
    pos += 4;
    
    // Checksum
    SaveString[pos + 7] = ToHexChar(Info->Checksum);
    SaveString[pos + 6] = ToHexChar(Info->Checksum >> 4);
    SaveString[pos + 5] = ToHexChar(Info->Checksum >> 8);
    SaveString[pos + 4] = ToHexChar(Info->Checksum >> 12);
    SaveString[pos + 3] = ToHexChar(Info->Checksum >> 16);
    SaveString[pos + 2] = ToHexChar(Info->Checksum >> 20);
    SaveString[pos + 1] = ToHexChar(Info->Checksum >> 24);
    SaveString[pos + 0] = ToHexChar(Info->Checksum >> 28);
    pos += 8;
    
    SaveString[pos] = '\x00';
    
    SaveString = Z_Realloc(SaveString, strlen(SaveString) + 1, PU_STATIC, NULL);
    return SaveString;
};

script void EncodeRLE(char const *InString, char *OutString, bool *StringLock)
{
    *StringLock = true;
    
    int OutPos = 0;
    int InLength = strlen(InString);
    
    char LastSeen = '\x00';
    int LastCount = 0;
    
    for (int InPos = 0; InPos < InLength; InPos++)
    {
        char Seen = InString[InPos];
        
        if (Seen == LastSeen)
            LastCount++
        else
        {
            if (LastCount > 3)
            {
                str LastSize = StrParam("[%X]\n", LastCount - 1);
                for (int i = 0; i < StrLen(LastSize); i++)
                    OutString[OutPos++] = (char)LastSize[i];
            }
            else
            {
                for (int i = LastCount - 1; i > 0; i--)
                    OutString[OutPos++] = LastSeen;
            };
            
            LastSeen = Seen;
            LastCount = 1;
            if (Seen)
                OutString[OutPos++] = Seen;
        };
        
        if (InPos % 1000 == 0) Delay(1);
    };
    
    if (LastCount > 1)
    {
        str LastSize = StrParam("[%X]\n", LastCount - 1);
        for (int i = 0; i < StrLen(LastSize); i++)
            OutString[OutPos++] = (char)LastSize[i];
    };
    
    OutString[OutPos] = '\x00';
    *StringLock = false;
};

script void DecodeRLE(char const *InString, char *OutString, bool *StringLock)
{
    *StringLock = true;
    
    int OutPos = 0;
    int InLength = strlen(InString);
    
    char LastSeen = '\x00';
    char *CountString = Z_Malloc(8, PU_STATIC, NULL);
    int CountStringLength = 0;
    int RepeatCount = 0;
    bool InBrackets = false;
    
    for (int InPos = 0; InPos < InLength; InPos++)
    {
        if (InString[InPos] == '[')
        {
            CountStringLength = 0;
            
            InBrackets = true;
        }
        else if (InString[InPos] == ']')
        {
            for (RepeatCount = HexToInteger(CountString, CountStringLength); RepeatCount > 0; RepeatCount--)
            {
                OutString[OutPos++] = LastSeen;
                if (OutPos % 1000 == 0) Delay(1);
            };
            
            InBrackets = false;
        }
        else if (InBrackets)
        {
            CountString[CountStringLength++] = InString[InPos];
        }
        else
        {
            LastSeen = InString[InPos];
            OutString[OutPos++] = LastSeen;
        };
        
        if (InPos % 1000 == 0) Delay(1);
    };
    
    Z_Free(CountString);
    OutString[OutPos] = '\x00';
    *StringLock = false;
};

function int HexToInteger(char const *SourceStr, int Length)
{
    int NumDigits = Length;
    int Result = 0;

    if (Length <= 0)
        NumDigits = strlen(SourceStr);
    
    for (int i = NumDigits - 1; i >= 0; i--)
        Result += FromHexChar(SourceStr[i]) << 4 * ((NumDigits - 1) - i);
    
    return Result;
};

function char *StringToCharP(str Source)
{
    int Length = StrLen(Source);
    
    char *Destination = Z_Malloc(Length + 1, PU_STATIC, NULL);
    Destination[Length] = '\x00';
    
    for (int i = 0; i < Length; i++)
        Destination[i] = Source[i];
    
    return Destination;
};

function int CalculateChecksum(int Value)
{
    return (Value * 8) / 2;
};
