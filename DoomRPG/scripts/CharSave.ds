#include "RPG.dh"

#include "Arena.dh"
#include "Augs.dh"
#include "CharSave.dh"
#include "ItemData.dh"
#include "Shield.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Utils.dh"

/*  
    
    --- Character Save Format ---
    
    TODO: Rewriting
    
    GENERAL NOTES
    - Each section is seperated by a -, except the checksum which is seperated by a |
    - Items such as Tokens, Shield Parts and Stims will be stored in the Locker for retrieval instead of in the save data itself
    - Each byte will be stored with a leading 0 if necessary, so a level of 10 and a rank level of 5 will come out as 0A05
    
    1. Version / Compatibility Flag
        - Version is referenced from defs, stored in 2 bytes
        - Mirror of the CompatMode static, stored in 1 byte
    2. Level / Rank Level
        - Only Level and Rank Level are stored, the XP to give is determined from these
        - Both Level and Rank Level are stored in 1 byte each
    3. Stats
        - Each stat will be stored in 1 byte since they will never go above 200 by normal means
    4. Skills
        - Each skill level is stored in 1 byte
        - Each skill category will be wrapped in a set of []'s
        - Each skill within each category will be seperated by a -
    5. Skill Wheel
        - 16 bytes total
        - Each slot is 2 bytes
        - First byte is the category, second byte is the index
        - Both bytes being 255 (FFFF) means it is blank
    6. Augmentations
        - Each augmentation's level is stored in 1 byte
    7. Stims
        - Each stim vial type is stored in 4 bytes
    8. Misc
        - Credits
          - Stored in 4 bytes
        - Augmentation Battery
          - Stored in 1 byte
        - Toxicity
          - Stored in 1 byte
        - Pay Bonus
          - Stored in 2 bytes
        - Arena Wave
          - Stored in 2 bytes
    9. Locker
        - Each item's count will be stored in 4 bytes
        - Each item category will be wrapped in a set of []'s
        - Each item within each category will be seperated by a -
        
    ----- COMPATIBILITY EXTENSIONS -----
    
    1. DRLA Assemblies
        - Each assembly set can be stored in a 4-byte bitfield
    2. DRLA Known Exotic Effects Info
        - Each weapon can use a 1 byte bitfield to hold the known exoctic effects
    
    Checksum
        - Checksum is seperated out at the end via a |
        - Checksum is determined by adding the value of each entry into a total buffer and doing the following:
          ((Total * 8) / 2) << 8
    
    BASIC EXAMPLE
    - Each category is seperated onto a new line for readability
    - Version 1, DRLA Compatibility mode
    - Level 10, Rank 4
    - Stats are Defaults
    - First skill of each category learned at it's max level
    - Skill wheel contains Heal and Red Aura on slots 1 and 2
    - Augs are levels 1, 2, 3, 4, 1, 2, 3, 4, 1 respectively
    - Each stim is 0 for brevity
    - 1000 Credits, 100% Battery, 25% Toxicity, 10% Pay Bonus
    - Locker and DRLA stuff are 0 and omitted for brevity
    
    0102
    -0A04
    -00000A0A00000A00
    -[0400000000][020000000000000000][060000000000000000][0200000000][0700000000000000000000000000000000][0100000000000000]
    -00000200FFFFFFFFFFFFFFFFFFFFFFFF
    -010203040102030401-
    -...
    -03E864190A
    -...
    -...
    -...
    |42F0000
    
*/

str[DRLA_MAX_ASSEMBLIES] DRLAAssemblies =
{
    "RLChainswordAssemblyLearntToken";
    "RLPiercingBladeAssemblyLearntToken";
    "RLSilencedPistolAssemblyLearntToken";
    "RLShredderPistolAssemblyLearntToken";
    "RLSpeedloaderPistolAssemblyLearntToken";
    "RLHighPowerWeaponAssemblyLearntToken";
    "RLElephantGunAssemblyLearntToken";
    "RLHeavyShotgunAssemblyLearntToken";
    "RLPlasmaticShrapnelAssemblyLearntToken";
    "RLTacticalShotgunAssemblyLearntToken";
    "RLGatlingGunAssemblyLearntToken";
    "RLMicroLauncherAssemblyLearntToken";
    "RLDoubleChainsawAssemblyLearntToken";
    "RLStormPistolAssemblyLearntToken";
    "RLPlasmaPistolAssemblyLearntToken";
    "RLAutoshotgunAssemblyLearntToken";
    "RLNanoShrapnelAssemblyLearntToken";
    "RLFocusedDoubleShotgunAssemblyLearntToken";
    "RLBulletstormChaingunAssemblyLearntToken";
    "RLAssaultRifleAssemblyLearntToken";
    "RLBurstCannonAssemblyLearntToken";
    "RLTacticalRocketLauncherAssemblyLearntToken";
    "RLGrenadeLauncherAssemblyLearntToken";
    "RLHyperblasterAssemblyLearntToken";
    "RLPlasmaRifleMkIIAssemblyLearntToken";
    "RLVBFG9000AssemblyLearntToken";
    "RLMiniMissilePistolAssemblyLearntToken";
    "RLRipperAssemblyLearntToken";
    "RLDemolitionAmmoAssemblyLearntToken";
    "RLNanomanufactureAmmoAssemblyLearntToken";
    "RLMotherInLawAssemblyLearntToken";
    "RLPlasmaRefractorAssemblyLearntToken";
    "RLBiggestFuckingGunAssemblyLearntToken";
    "RLAutocannonAssemblyLearntToken";
};

acscript void SaveCharacter() net
{
    // !!! TEMPORARY !!!
    // IN PROGRESS - WIP
    SetFont("BIGFONT");
    HudMessage("\cgERROR: \cjCurrently being rewritten\n", HUDMSG_FADEOUT, 0, CR_WHITE, 1.5, 0.5, 3.0, 2.0);
    ActivatorSound("menu/error", 127);
    return;
    
    // You need to be in the Outpost to do this
    if (!InBase)
    {
        SetFont("BIGFONT");
        HudMessage("\cgERROR: \cjYou must be in the Outpost to deposit your equipment\n", HUDMSG_FADEOUT, 0, CR_WHITE, 1.5, 0.5, 3.0, 2.0);
        ActivatorSound("menu/error", 127);
        return;
    };
    
    // Bulk Deposit
    // TODO: Should be moved to a Locker function
    for (int i = 0; i < ItemCategories; i++)
    {
        for (int j = 0; j < ItemMax[i]; j++)
            if (CheckInventory(ItemData[i][j].Actor) > 0)
            {
                Player.Locker[i][j] = CheckInventory(ItemData[i][j].Actor);
                SetInventory(ItemData[i][j].Actor, 0);
            };
    };
    
    // Populate the data
    auto CharSaveInfo Info = {};
    PopulateCharData(&Info);
    
    // Saving Successful
    ActivatorSound("charsave/save", 127);
    SetFont("BIGFONT");
    HudMessage("===== Character Saved =====\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 1.0, 2.0);
};

acscript void LoadCharacter() net
{
    // !!! TEMPORARY !!!
    // IN PROGRESS - WIP
    SetFont("BIGFONT");
    HudMessage("\cgERROR: \cjCurrently being rewritten\n", HUDMSG_FADEOUT, 0, CR_WHITE, 1.5, 0.5, 3.0, 2.0);
    ActivatorSound("menu/error", 127);
    return;
    
    ActivatorSound("charsave/accept", 127);
    SetFont("BIGFONT");
    HudMessage("===== Character Load Complete =====\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 1.0, 2.0);
};

acscript void DumpCharacter()
{
};

// Hexadecimal storage
function char ToHexChar(int i)
{
    return "0123456789ABCDEF"[i & 0xF];
};

function int FromHexChar(char c)
{
    switch (c)
    {
    case '0':           return 0;
    case '1':           return 1;
    case '2':           return 2;
    case '3':           return 3;
    case '4':           return 4;
    case '5':           return 5;
    case '6':           return 6;
    case '7':           return 7;
    case '8':           return 8;
    case '9':           return 9;
    case 'A': case 'a': return 10;
    case 'B': case 'b': return 11;
    case 'C': case 'c': return 12;
    case 'D': case 'd': return 13;
    case 'E': case 'e': return 14;
    case 'F': case 'f': return 15;
    };
    
    return 0; // Default
};

function void PopulateCharData(CharSaveInfo *Info)
{
    // 1. Version / Compatibility Flag
    Info->Version = CHARSAVE_VERSION;
    Info->CompatMode = CompatMode;
    
    // 2. Level / Rank Level
    Info->Level = Player.Level;
    Info->RankLevel = Player.RankLevel;
    
    // 3. Stats
    Info->Stats =
    {
        Player.Strength;
        Player.Defense;
        Player.Vitality;
        Player.Energy;
        Player.Regeneration;
        Player.Agility;
        Player.Capacity;
        Player.Luck;
    };
    
    // 4. Skills
    for (int i = 0; i < MAX_CATEGORIES; i++)
        for (int j = 0; j < MAX_SKILLS; j++)
            Info->Skills[i][j] = Player.SkillLevel[i][j].Level;
    
    // 5. Skill Wheel
    for (int i = 0; i < MAX_SKILLKEYS; i++)
    {
        Info->SkillWheel[i][0] = Player.SkillCategory[i];
        Info->SkillWheel[i][1] = Player.SkillIndex[i];
    };
    
    // 6. Augmentations
    for (int i = 0; i < MAX_AUGS; i++)
        Info->Augs[i] = Player.Augs.Level[i];
    
    // 7. Stims
    for (int i = 0; i < MAX_COMPOUNDS; i++)
        Info->Stims[i] = Player.Stim.Vials[i];
    
    // 8. Misc
    Info->Credits = CheckInventory("DRPGCredits");
    Info->Battery = Player.Augs.Battery;
    Info->Toxicity = Player.Toxicity;
    Info->PayBonus = Player.PayBonus;
    Info->ArenaWave = ArenaMaxWave;
    
    // 9. Locker
    for (int i = 0; i < ITEM_CATEGORIES; i++)
        for (int j = 0; i < ITEM_MAX; j++)
            Info->Locker[i][j] = Player.Locker[i][j];
    
    // ----- COMPATIBILITY EXTENSIONS -----
    
    // 1. DRLA Assemblies
    for (int i = 0; i < DRLA_MAX_ASSEMBLIES; i++)
        Info->DRLAAssemblies[i] = CheckInventory(DRLAAssemblies[i]);
};

function int CalculateChecksum(int Value)
{
    return ((Value * 8) / 2) << 8;
};
