#library "Augs"

#include "zcommon.acs"

#import "Stats.acs"
#import "Skills.acs"
#import "Shield.acs"
#import "Utils.acs"

#libdefine AUG_STRENGTH		0
#libdefine AUG_DEFENSE		1
#libdefine AUG_VITALITY		2
#libdefine AUG_ENERGY		3
#libdefine AUG_REGENERATION	4
#libdefine AUG_AGILITY		5
#libdefine AUG_CAPACITY		6
#libdefine AUG_LUCK			7
#libdefine AUG_BLACKMARKET	8
#libdefine MAX_AUGS			9

str AugData[30][4] =
{
	// Class name, Nice name, Description, Icon
	
	// Augsd
	{ "StrengthAug", "Muscle Replacer", "2x Damage", "AUGCA0" },
	{ "DefenseAug", "Dermal Armor", "-2x Damage Taken", "AUGCB0" },
	{ "VitalityAug", "Pain Inhibitor", "2x Max Health\n2x Health Regen", "AUGCC0" },
	{ "EnergyAug", "Psi Projector", "2x Max EP\n2x EP Regen", "AUGCD0" },
	{ "RegenerationAug", "Adrenaline Booster", "2x HP/EP Regen\n2x Shield Charge Rate\n-2x Shield Delay Rate", "AUGCE0" },
	{ "AgilityAug", "Wired Reflexes", "2x Movement Speed\n2x Jump Height", "AUGCF0" },
	{ "CapacityAug", "Weight Distributor", "2x Ammo Limits", "AUGCG0" },
	{ "LuckAug", "Precognition Unit", "2x Luck Drop Chances", "AUGCH0" },
	{ "BlackMarketAug", "Black Market Module", "2x Damage\n-2x Damage Taken\n2x Max Health\n4x Health Regen\n2x Max EP\n4x EP Regen\n2x Shield Charge Rate\n-2x Shield Delay Rate\n2x Movement Speed\n2x Jump Height\n2x Ammo Limits\n2x Luck Drop Chances", "AUGCI0" },
	
	// ...
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" },
	{ "", "", "", "" }
};

global int 48 : Augs[];
global int 49 : AugSlotsUsed;

int MaxAugSlots;

function void CheckAugSlots(void)
{
	// How many slots will you get on your difficulty?
	int Skill = GameSkill();
	if (Skill == 1 || Skill == 2 || Skill == 3)
		MaxAugSlots = 5;
	if (Skill == 4)
		MaxAugSlots = 4;
	if (Skill == 5)
		MaxAugSlots = 3;
	if (Skill == 6)
		MaxAugSlots = 2;
	if (Skill == 7)
		MaxAugSlots = 1;
		
	// Additional slots given
	MaxAugSlots += CheckInventory("AugSlotUpgrade");
}

function void CheckAugs(void)
{
	// Sanity check to prevent negative slots used
	if (AugSlotsUsed < 0)
		AugSlotsUsed = 0;

	// Strength Aug
	if (Augs[AUG_STRENGTH])
		Damage = FixedMul(Damage, 2.0);
	
	// Defense Aug
	if (Augs[AUG_DEFENSE])
		DamageFactor = FixedDiv(DamageFactor, 2.0);
	
	// Vitality Aug
	if (Augs[AUG_VITALITY])
		HealthMax *= 2;
	
	// Energy Aug
	if (Augs[AUG_ENERGY])
		EPMax *= 2;
	
	// Regeneration Aug
	if (Augs[AUG_REGENERATION])
	{
		HPRate += FixedMul(Vitality, 1.25) + FixedMul(Regeneration, 1.25);
		EPRate += FixedMul(Energy, 1.25) + FixedMul(Regeneration, 1.25);
		ShieldChargeRate *= 2;
		ShieldDelayRate = FixedDiv(ShieldDelayRate, 2.0);
	}

	// Agility Aug
	if (Augs[AUG_AGILITY])
	{
		Speed *= 2;
		JumpHeight *= 2;
	}
	
	// Capacity Aug
	if (Augs[AUG_CAPACITY] || Augs[AUG_BLACKMARKET])
	{
		SetAmmoCapacity("Clip", Capacity * 20 * 2);
		SetAmmoCapacity("Shell", Capacity * 10 * 2);
		SetAmmoCapacity("RocketAmmo", Capacity * 5 * 2);
		SetAmmoCapacity("Cell", Capacity * 30 * 2);
	}
	if (Augs[AUG_CAPACITY] && Augs[AUG_BLACKMARKET])
	{
		SetAmmoCapacity("Clip", Capacity * 20 * 4);
		SetAmmoCapacity("Shell", Capacity * 10 * 4);
		SetAmmoCapacity("RocketAmmo", Capacity * 5 * 4);
		SetAmmoCapacity("Cell", Capacity * 30 * 4);
	}

	// Luck Aug
	if (Augs[AUG_LUCK])
	{
		MoneyChance[0] *= 2;
		MoneyChance[1] *= 2;
		MoneyChance[2] *= 2;
		MoneyChance[3] *= 2;
		MoneyChance[4] *= 2;
		MoneyChance[5] *= 2;
		MoneyChance[6] *= 2;
		HealthChance[0] *= 2;
		HealthChance[1] *= 2;
		HealthChance[2] *= 2;
		ArmorChance[0] *= 2;
		ArmorChance[1] *= 2;
		ArmorChance[2] *= 2;
		ArmorChance[3] *= 2;
		ArmorChance[4] *= 2;
		PowerupChance *= 2;
		RuneChance *= 2;
		TokenChance *= 2;
		AugChance *= 2;
		ShieldChance *= 2;
		EPChance *= 2;
	}
	
	// Rainbow Aug
	if (Augs[AUG_BLACKMARKET])
	{
		Damage = FixedMul(Damage, 2.0);
		DamageFactor = FixedDiv(DamageFactor, 2.0);
		HealthMax *= 2;
		EPMax *= 2;
		HPRate += FixedMul(Vitality, 1.25) + FixedMul(Regeneration, 1.25);
		EPRate += FixedMul(Energy, 1.25) + FixedMul(Regeneration, 1.25);
		ShieldChargeRate *= 2;
		ShieldDelayRate = FixedDiv(ShieldDelayRate, 2.0);
		Speed *= 2;
		JumpHeight *= 2;
		MoneyChance[0] *= 2;
		MoneyChance[1] *= 2;
		MoneyChance[2] *= 2;
		MoneyChance[3] *= 2;
		MoneyChance[4] *= 2;
		MoneyChance[5] *= 2;
		MoneyChance[6] *= 2;
		HealthChance[0] *= 2;
		HealthChance[1] *= 2;
		HealthChance[2] *= 2;
		ArmorChance[0] *= 2;
		ArmorChance[1] *= 2;
		ArmorChance[2] *= 2;
		ArmorChance[3] *= 2;
		ArmorChance[4] *= 2;
		PowerupChance *= 2;
		RuneChance *= 2;
		TokenChance *= 2;
		AugChance *= 2;
		ShieldChance *= 2;
		EPChance *= 2;
	}

	// Keep adding more
	// ...

	// Strength Item
	if (Round(Damage * 100) > 0 && Round(Damage * 100) <= 8000)
		GiveInventory(StrParam(s:"Strength", d:Round(Damage * 100)), 1);

	// Apply Bonuses
	SetActorProperty(0, APROP_SPAWNHEALTH, HealthMax);
	SetActorProperty(0, APROP_DAMAGEFACTOR, DamageFactor);
	SetActorProperty(0, APROP_SPEED, Speed);
	SetActorProperty(0, APROP_JUMPZ, JumpHeight);
}

function void EquipAug(int Aug)
{
	if (CheckInventory(AugData[Aug][0]))
	{
		if (Augs[Aug])
		{
			ActivatorSound("misc/augequip", 127);
			AugSlotsUsed--;
			Augs[Aug] = false;
		}
		else
		{
			AugSlotsUsed++;
			
			if (AugSlotsUsed > MaxAugSlots)
			{
				ActivatorSound("menu/error", 127);
				Print(s:"You don't have a free Accessory slot!");
				AugSlotsUsed--;
			}
			else
			{
				ActivatorSound("misc/augequip", 127);
				Augs[Aug] = true;
			}
		}
	}
}
