#library "Utils"

#include "zcommon.acs"

#import "RPG.acs"
#import "Stats.acs"
#import "Skills.acs"
#import "Accessories.acs"
#import "Shop.acs"
#import "Menu.acs"
#import "Shield.acs"

#define MAX_CATAGORIES		6
#define MAX_SKILLS			17
#define SHOP_CATAGORIES		9

global int 5 : LevelNum;				// Used to keep track of the level number for the transport system
global int 6 : InBase;					// Whether you are at the UAC Outpost or not
global int 63 : Transported;			// True if you are using the Transportation System

// For Dropped Items
int ItemID = 3000;
int MaxItems = 3000;

// Skill Level Names
str SkillLevels[7] =
{
	"Very Easy", "Easy",
	"Normal",
	"Hard", "Very Hard",
	"Nightmare", "Unfair",
};

// Utility Scripts
// --------------------------------------------------

// Regular Item Drops
script "DropItem" (int X, int Y, int Z, int LuckDrop)
{
	Delay(1);
	
	// Get a new TID
	ItemID++;
	
	// Shift the floats for the Spawn function
	X = X << 16;
	Y = Y << 16;
	Z = Z << 16;
	
	// Credits
	if (Random(1, 100) < MoneyChance[0])	SpawnForced("Credits1", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < MoneyChance[1])	SpawnForced("Credits5", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < MoneyChance[2])	SpawnForced("Credits10", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < MoneyChance[3])	SpawnForced("Credits20", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < MoneyChance[4])	SpawnForced("Credits50", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < MoneyChance[5])	SpawnForced("Credits100", X, Y, Z, ++ItemID, 0);		SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < MoneyChance[6])	SpawnForced("Credits1000", X, Y, Z, ++ItemID, 0);		SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	
	// Health
	if (Random(1, 100) < HealthChance[0])	SpawnForced("HealthDropper1", X, Y, Z, ++ItemID, 0);	SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < HealthChance[1])	SpawnForced("HealthDropper2", X, Y, Z, ++ItemID, 0);		SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);MaxItems++;
	if (Random(1, 100) < HealthChance[2])	SpawnForced("HealthDropper3", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;

	// Armor
	if (Random(1, 100) < ArmorChance[0])	SpawnForced("GreenArmor", X, Y, Z, ++ItemID, 0);		SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < ArmorChance[1])	SpawnForced("BlueArmor", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < ArmorChance[2])	SpawnForced("YellowArmor", X, Y, Z, ++ItemID, 0);		SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < ArmorChance[3])	SpawnForced("RedArmor", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	if (Random(1, 100) < ArmorChance[4])	SpawnForced("WhiteArmor", X, Y, Z, ++ItemID, 0);		SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	
	// Powerup
	if (Random(1, 100) < PowerupChance)		SpawnForced("PowerupDropper", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;

	// Rune
	if (Random(1, 100) < RuneChance)		SpawnForced("RuneDropper", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	
	// Token
	if (Random(1, 100) < TokenChance)		SpawnForced("SmallTokenDropper", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	
	// Accessory
	if (Random(1, 100) < AccessoryChance)	SpawnForced("AccessoryDropper", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
	
	// Shield Part
	if (Random(1, 100) < ShieldChance)		SpawnForced("ShieldDropper", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;

	// EP Capsule
	if (Random(1, 100) < EPChance)			SpawnForced("EPCapsule", X, Y, Z, ++ItemID, 0);			SetActorVelocity(ItemID, Random(-4.0, 4.0), Random(-4.0, 4.0), Random(-4.0, 4.0), false, false);	MaxItems++;
}

// Deletes all drops that are on the ground
script "ClearDrops" (void)
{
	for (int i = 3000; i < MaxItems; i++)
	{
		SpawnForced("TeleportFog", GetActorX(i), GetActorY(i), GetActorZ(i), 0, 0);
		Thing_Remove(i);
	}
	
	ItemID = 3000;
	MaxItems = 3000;
}

// Set Skill Level during the game
script "SetSkill" (int NewSkill)
{
	SetFont("BIGFONT");
	
	if (NewSkill < 0 || NewSkill > 6)
	{
		Print(s:"\cgInvalid Skill Level");
		terminate;
	}
	
	FadeRange(255, 255, 255, 0.5, 255, 255, 255, 0.0, 0.5);
	ChangeSkill(NewSkill);
	ActivatorSound("misc/secret", 127);
	Print(s:"\cjSkill Level has been changed to\n\cg", d:NewSkill + 1, s:" - ", s:SkillLevels[NewSkill]);
}

// Respec - Respecialize your Player
script "Respec" (int Stats, int Skills, int Inventory, int Levels)
{
	// Vars
	int StatPoints;
	int SkillPoints;
	int OldCredits;
	
	// Respec Stats
	if (Stats)
	{
		// Add stats into a pool of tokens to give back to the player
		StatPoints += Strength;
		StatPoints += Defense;
		StatPoints += Vitality - 10;
		StatPoints += Energy - 10;
		StatPoints += Regeneration;
		StatPoints += Agility;
		StatPoints += Capacity - 10;
		StatPoints += Luck;
		
		// Reset Stats
		Strength = 0;
		Defense = 0;
		Vitality = 10;
		Energy = 10;
		Regeneration = 0;
		Agility = 0;
		Capacity = 10;
		Luck = 0;

		// Give Respecced Stat Tokens back
		GiveInventory("StatToken", StatPoints);

		// Reset HP and EP
		SetActorProperty(0, APROP_HEALTH, 100);
		EP = 100;
		EPMax = 100;
		
		// Reset Shield
		Shield = 0;
		ShieldTimer = 375;
	}
	
	// Respec Skills
	if (Skills)
	{
		// Reset skills, add skill levels together into a pool of tokens to give back to the player
		for (int i = 0; i < MAX_CATAGORIES; i++)
			for (int j = 0; j < MAX_SKILLS; j++)
			{
				SkillPoints += SkillLevel[(i * MAX_SKILLS) + j];
				SkillLevel[(i * MAX_SKILLS) + j] = 0;
			}

		// Give Respecced Skill Tokens back
		GiveInventory("StatToken", SkillPoints);

		// Remove Auras
		Aura = 0;
		AuraTimer = 0;
	}
	
	// Clear and Sell Inventory
	if (Inventory)
	{
		// Run through the shop catagories and sell everything using the utility SellAll script
		for (int k = 2; k < SHOP_CATAGORIES - 1; k++)
		{
			ACS_NamedExecuteAlways("SellAll", 0, k, 1);
			Delay(1);
		}
		OldCredits = CheckInventory("Credits");
		
		// Remove Accessories
		for (int l = 0; l < 9; l++)
			Accessories[l] = 0;
		AccessorySlotsUsed = 0;

		// Clear out everything else that isn't sellable/can't be sold
		ClearInventory();
		
		// Restore the default item loadout
		DefaultLoadout();
		
		// Restore default Shield Parts
		ShieldBody = 1;
		ShieldBattery = 1;
		ShieldCapacitor = 1;
		ShieldAccessory = 1;
	}
	
	// Reset Levels
	if (Levels)
	{
		Level = 0;
		XP = 0;
		XPNext = 0;
		RankLevel = 0;
		Rank = 0;
		RankNext = 0;
	}
		
	// Take 1/2 Credits
	GiveInventory("Credits", OldCredits);
	TakeInventory("Credits", CheckInventory("Credits") / 2);
	
	// FX
	FadeRange(255, 255, 255, 0.75, 0, 0, 0, 0.0, 2.5);
	HudMessage(s:"Respec Complete"; HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.5, 2.5, 2.5);
	ActivatorSound("health/continue", 127);
}

// Test a Skill given a level and optional EP cost
// TODO: This is broken
script "TestSkill" (int Catagory, int Skill, int SkillLvl, int NoEP)
{
	if (SkillLvl == 0) SkillLvl = 1;
	
	int OldLevel = SkillLevel[(SkillCatagory * MAX_SKILLS) + SkillIndex[SkillCatagory]];
	
	SkillCatagory = Catagory;
	SkillIndex[Catagory] = Skill;
	SkillLevel[(SkillCatagory * MAX_SKILLS) + SkillIndex[SkillCatagory]] = SkillLvl;
	
	ACS_NamedExecuteAlways("UseSkill", 0, 1);
	
	SkillLevel[(SkillCatagory * MAX_SKILLS) + SkillIndex[SkillCatagory]] = OldLevel;
	
	if (!NoEP)
		EP += SkillCosts[SkillCatagory][SkillIndex[SkillCatagory]] * SkillLevel[(SkillCatagory * MAX_SKILLS) + SkillIndex[SkillCatagory]];
}

// Add to XP from DECORATE
script "AddXP" (int Amount, int MultXP, int MultStyle, int AddCombo)
{
	// Scale XP/Rank Gains using the XP Scaling Option
	switch (GetCVAR("drpg_scalexp"))
	{
		case 2: Amount = FixedMul(Amount, 2.0);	 	break;
		case 3: Amount = FixedMul(Amount, 4.0);  	break;
		case 4: Amount = FixedMul(Amount, 8.0);  	break;
		case 5: Amount = FixedMul(Amount, 0.75); 	break;
		case 6: Amount = FixedMul(Amount, 0.5);  	break;
		case 7: Amount = FixedMul(Amount, 0.25); 	break;
	}
	
	// Check the Multipliers
	if (MultXP == 0) MultXP = 1;
	if (MultStyle == 0) MultStyle = 1;
	
	if (GetCVAR("drpg_combo"))
	{
		TotalGained += Amount;
		XPMult = MultXP;
		StyleMult = MultStyle;
		Combo++;
		Combo += AddCombo;
		ComboTimer = 100;
	}
	else
	{
		XP += Amount;
		Rank += Amount;
	}
}

// For items or other things to add EP
script "AddEP" (int Amount)
{
	FadeRange(0, 255, 255, 0.25, 0, 255, 255, 0, 0.25);
	
	EP += amount;
	
	if (EP > EPMax)
		EP = EPMax;
}

// Returns your current EP (for DECORATE)
script "GetEP" (void)
{
	SetResultValue(EP);
}

// Returns your max EP (for DECORATE)
script "GetEPMax" (void)
{
	SetResultValue(EPMax);
}

// Returns the amount to heal given the percentage out of max HP (for DECORATE)
script "GetHealPercent" (int Percent)
{
	int Amount = HealthMax * Percent / 100;
	SetResultValue(Amount);
}

// Returns your max Health (for DECORATE)
script "GetHealthMax" (void)
{
	SetResultValue(HealthMax);
}

// HAAAAAAAAAAAAAAAX
script "Cheat" (int StatBoost)
{
	int ItemMax = 1000;
	
	// Max Level/Rank
	XP = 1000000000;
	Rank = 1000000000;
	
	// Stats
	Strength += statboost;
	Defense += statboost;
	Vitality += statboost;
	Energy += statboost;
	Regeneration += statboost;
	Agility += statboost;
	Capacity += statboost;
	Luck += statboost;
	
	// Max out all Skills
	for (int i = 0; i < MAX_CATAGORIES; i++)
		for (int j = 0; j < MAX_SKILLS; j++)
		{
			SkillLevel[(i * MAX_SKILLS) + j] = SkillLevelMax[i][j];
			CurrentSkillLevel[(i * MAX_SKILLS) + j] = SkillLevelMax[i][j];
		}
	
	// Items - Tokens
	// GiveInventory("StatToken", 10000);
	GiveInventory("StatCapToken", 100);
	// GiveInventory("SkillToken", 10000);
	
	// Items - Health
	GiveInventory("StimPack", ItemMax);
	GiveInventory("SmallMedikit", ItemMax);
	GiveInventory("Medikit", ItemMax);
	GiveInventory("LargeMedikit", ItemMax);
	GiveInventory("XLMedikit", ItemMax);
	GiveInventory("MedPack", ItemMax);
	GiveInventory("SuperMedPack", ItemMax);
	GiveInventory("SurgeryKit", ItemMax);
	GiveInventory("Continue", 1000);
	
	// Items - Armor
	TakeInventory("BasicArmor", 10000000);
	GiveInventory("WhiteArmor", 1);
	Delay(1);
	for (int k = 0; k < ItemMax; k++)
	{
		GiveInventory("UsedGreenArmor", ItemMax);
		GiveInventory("GreenArmor", ItemMax);
		GiveInventory("UsedBlueArmor", ItemMax);
		GiveInventory("BlueArmor", ItemMax);
		GiveInventory("UsedYellowArmor", ItemMax);
		GiveInventory("YellowArmor", ItemMax);
		GiveInventory("UsedRedArmor", ItemMax);
		GiveInventory("RedArmor", ItemMax);
		GiveInventory("UsedWhiteArmor", ItemMax);
		GiveInventory("WhiteArmor", ItemMax);
	}
	
	// Items - Powerups
	GiveInventory("InvulnerabilitySphere", ItemMax);
	GiveInventory("InvulnerabilityCharge", ItemMax);
	GiveInventory("BlurSphere", ItemMax);
	GiveInventory("InvisibilityCharge", ItemMax);
	GiveInventory("RadSuit", ItemMax);
	GiveInventory("Infrared", ItemMax);
	GiveInventory("Berserk", ItemMax);
	GiveInventory("AllMap", ItemMax);
	
	// Items - Weapons/Ammo
	GiveInventory("Pistol", 1);
	GiveInventory("Shotgun", 1);
	GiveInventory("SuperShotgun", 1);
	GiveInventory("ChainGun", 1);
	GiveInventory("RocketLauncher", 1);
	GiveInventory("PlasmaRifle", 1);
	GiveInventory("BFG9000", 1);
	GiveInventory("ChainSaw", 1);
	GiveInventory("Pistol1", 1);
	GiveInventory("Shotgun1", 1);
	GiveInventory("SSG", 1);
	GiveInventory("ChainGun1", 1);
	GiveInventory("RocketLauncher1", 1);
	GiveInventory("PlasmaGun", 1);
	GiveInventory("BFG9001", 1);
	GiveInventory("ChainSaw1", 1);
	GiveInventory("Clip", GetAmmoCapacity("Clip"));
	GiveInventory("Shell", GetAmmoCapacity("Shell"));
	GiveInventory("RocketAmmo", GetAmmoCapacity("RocketAmmo"));
	GiveInventory("Cell", GetAmmoCapacity("Cell"));
	// GiveInventory("GrenadeFrag", 100);
	
	// Items - Misc
	ACS_NamedExecute("AllRunes", 0);
	ACS_NamedExecute("GiveAccs", 0);
	ACS_NamedExecute("FullShield", 0);
	GiveInventory("RedCard", 1);
	GiveInventory("YellowCard", 1);
	GiveInventory("BlueCard", 1);
	GiveInventory("RedSkull", 1);
	GiveInventory("YellowSkull", 1);
	GiveInventory("BlueSkull", 1);
	GiveInventory("PowerInvulnerable", 1);
	GiveInventory("PowerShadow", 1);
	GiveInventory("PowerIronFeet", 1);
	GiveInventory("PowerLightAmp", 1);
	GiveInventory("Credits", 1000000000);
	
	// Restore HP/EP/Shields
	HealThing(1000000);
	EP = EPMax;
	Shield = ShieldCapacity;
	ShieldTimer = 0;
}

// For testing different stats and their effects
script "ModStat" (int stat, int value)
{
	switch (stat)
	{
		case 1:	strength = value;		break;
		case 2:	Defense = value;		break;
		case 3:	Vitality = value;		break;
		case 4:	Energy = value;			break;
		case 5:	Regeneration = value;	break;
		case 6:	Agility = value;		break;
		case 7:	Capacity = value;		break;
		case 8:	Luck = value;			break;
	}
}

// Instant payout
script "Payout" (int Time)
{
	if (Time > 0) PayTimer = Time; else PayTimer = 35 * 60 * 5;
}

// Give all Runes
script "AllRunes" (void)
{
	ActivatorSound("misc/secret", 127);
	GiveInventory("StrengthRune", 1);
	GiveInventory("DrainRune", 1);
	GiveInventory("EndlessRune", 1);
	GiveInventory("ResistanceRune", 1);
	GiveInventory("RegenerationRune", 1);
	GiveInventory("FrightRune", 1);
	GiveInventory("GhostRune", 1);
	GiveInventory("HighJumpRune", 1);
	GiveInventory("HAsteRune", 1);
}

// Give all Accessories
script "GiveAccs" (void)
{
	GiveInventory("StrengthBadge", 1);
	GiveInventory("DefenseBadge", 1);
	GiveInventory("ProficiencyBadge", 1);
	GiveInventory("AgilityBadge", 1);
	GiveInventory("VitalityBadge", 1);
	GiveInventory("EnergyBadge", 1);
	GiveInventory("RegenerationBadge", 1);
	GiveInventory("CapacityBadge", 1);
	GiveInventory("LuckBadge", 1);
	GiveInventory("RainbowBadge", 1);
}

// All all Shield Components
script "FullShield" (void)
{
	// Bodies
	GiveInventory("ShieldBodyBronze", 1);
	GiveInventory("ShieldBodySilver", 1);
	GiveInventory("ShieldBodyGold", 1);
	GiveInventory("ShieldBodyDiamond", 1);
	GiveInventory("ShieldBodyDemon", 1);
	GiveInventory("ShieldBodyTurtle", 1);
}

// Utility Functions
// --------------------------------------------------

// Gets Max EP after all bonuses are applied to it
function int GetEPMax(void)
{
	int MaxEP = EPMax;
	
	// Max EP Checks for Accessories
	if (Accessories[3] || Accessories[8])
		MaxEP *= 2;
	if (Accessories[3] && Accessories[8])
		MaxEP *= 2;
	
	return MaxEP;
}

// PrintSprite Utility Function
function void PrintSprite(str sprite, int id, int x, int y, int d)
{
    SetFont(sprite);
    HudMessage(s:"A"; HUDMSG_PLAIN, id, CR_UNTRANSLATED, x, y, d);
}

// Returns integer value
function int Round(int fixedNumber)
{
	return (fixedNumber + 0.5) >> 16;
}

// Returns fixed point value
function int Floor(int fixedNumber)
{
	return fixedNumber & 0xFFFF0000;
}

// This function computes n-th power of x.
function int Pow(int x, int n)
{
	int y = 1;
	while (n-- > 0) y *= x;
	return y;
}

// This function can be used to return the absolute value of a negative integer. 
function int Abs(int x)
{
    if (x < 0)
        return -x;

    return x;
}
