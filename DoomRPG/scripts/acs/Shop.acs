#library "Shop"

#include "zcommon.acs"

#import "Stats.acs"
#import "Skills.acs"
#import "Accessories.acs"
#import "Menu.acs"
#import "Utils.acs"

#define SHOP_CATAGORIES			16

str ShopNames[SHOP_CATAGORIES] =
{
	"Weapons",
	"Ammo",
	"Health",
	"Armor",
	"Powerups",
	"Tokens",
	"Shield",
	"Accessories",
	"Brutal Doom",
};

// Shop Array
int Shop[SHOP_CATAGORIES][20][2] =
{
    // Weapon
	{
		{ "Pistol", "Pistol" },
		{ "Shotgun", "Shotgun" },
		{ "SuperShotgun", "Super Shotgun" },
		{ "ChainGun", "Chaingun" },
		{ "RocketLauncher", "Rocket Launcher" },
		{ "PlasmaRifle", "Plasma Rifle" },
		{ "BFG9000", "BFG 9000" },
		{ "Chainsaw", "Chainsaw" }
//		{ "GrenadeFrag", "Frag Grenade" }
	},
    
    // Ammo
	{
		{ "Clip", "Clip" },
		{ "ClipBox", "Box of Bullets" },
		{ "Shell", "Shells" },
		{ "ShellBox", "Box of Shells" },
		{ "RocketAmmo", "Rockets" },
		{ "RocketBox", "Box of Rockets" },
		{ "Cell", "Cell" },
		{ "CellPack", "Cell Charge Pack" },
		{ "Backpack", "Backpack" },
		{ "BigBackpack", "Big Backpack" }
	},
    
    // Health
	{
		{ "HealthBonus", "Health Bonus" },
		{ "Stimpack", "Stimpack" },
		{ "SmallMedikit", "Small Medikit" },
		{ "Medikit", "Medikit" },
		{ "LargeMedikit", "Large Medikit" },
		{ "XLMedikit", "Extra-Large Medikit" },
		{ "MedPack", "Med Pack" },
		{ "SuperMedPack", "Super Med Pack" },
		{ "SurgeryKit", "Surgery Kit" },
		{ "Soulsphere", "Soulsphere" },
		{ "AtomicHealth", "Atomic Health" },
		{ "Continue", "Continue" },
		{ "EPCapsule", "EP Capsule" },
		{ "BigEPCapsule", "Big EP Capsule" }
	},
    
    // Armor
	{
		{ "ArmorBonus", "Armor Bonus" },
		{ "GreenArmor", "Green Armor" },
		{ "UsedGreenArmor", "Green Armor (Used)" },
		{ "BlueArmor", "Blue Armor" },
		{ "UsedBlueArmor", "Blue Armor (Used)" },
		{ "YellowArmor", "Yellow Armor" },
		{ "UsedYellowArmor", "Yellow Armor (Used)" },
		{ "RedArmor", "Red Armor" },
		{ "UsedRedArmor", "Red Armor (Used)" },
		{ "WhiteArmor", "White Armor" },
		{ "UsedWhiteArmor", "White Armor (Used)" }
	},
	
	// Powerups
	{
		{ "InvulnerabilitySphere", "Invulnerability Sphere" },
		{ "InvulnerabilityCharge", "Invulnerability Charge" },
		{ "BlurSphere", "Invisibility Sphere" },
		{ "InvisibilityCharge", "Invisibility Charge" },
		{ "TimeSphere", "Time Sphere" },
		{ "RegenSphere", "Regeneration Sphere" },
		{ "RadSuit", "Radiation Suit" },
		{ "Infrared", "IR Goggles" },
		{ "Berserk", "Berserk Pack" },
		{ "AllMap", "Computer Area Map" },
		{ "Megasphere", "Megasphere" },
		{ "StrengthRune", "Strength Rune" },
		{ "DrainRune", "Drain Rune" },
		{ "EndlessRune", "Endless Rune" },
		{ "ResistanceRune", "Resistance Rune" },
		{ "RegenerationRune", "Regeneration Rune" },
		{ "FrightRune", "Fright Rune" },
		{ "GhostRune", "Ghost Rune" },
		{ "HighJumpRune", "High Jump Rune" },
		{ "HasteRune", "Haste Rune" }
	},
	
	// Tokens
	{
		{ "StatToken", "Stat Token" },
		{ "BigStatToken", "Big Stat Token" },
		{ "StatCapToken", "Stat Cap Token" },
		{ "BigStatCapToken", "Big Stat Cap Token" },
		{ "SkillToken", "Skill Token" },
		{ "BigSkillToken", "Big Skill Token" },
		{ "MegaToken", "Mega Token" },
		{ "BigMegaToken", "Big Mega Token" }
	},
	
	// Shield
	{
		{ "ShieldBodyBronze", "Shield Body - Bronze" },
		{ "ShieldBodySilver", "Shield Body - Silver" },
		{ "ShieldBodyGold", "Shield Body - Gold" },
		{ "ShieldBodyDiamond", "Shield Body - Diamond" },
		{ "ShieldBodyDemon", "Shield Body - Demon" },
		{ "ShieldBodyTurtle", "Shield Body - Turtle" },
	},
	
	// Accessories
	{
		{ "StrengthBadge", "Strength Badge" },
		{ "DefenseBadge", "Defense Badge" },
		{ "VitalityBadge", "Vitality Badge" },
		{ "EnergyBadge", "Energy Badge" },
		{ "RegenerationBadge", "Regeneration Badge" },
		{ "AgilityBadge", "Agility Badge" },
		{ "CapacityBadge", "Capacity Badge" },
		{ "LuckBadge", "Luck Badge" },
		{ "RainbowBadge", "Rainbow Badge" }
	},
	
	// Brutal Doom
	{
		{ "BrutalPistol", "Pistol" },
		{ "Grenade_Launcher", "Grenade Launcher" },
		{ "Rail_Gun", "Railgun" },
		{ "BFG10000", "BFG10000" },
		{ "HellishMissileLauncher", "Hellish Missile Launcher" },
		{ "FlameCannon", "Flame Cannon" },
		{ "SecretWeapon_MP40", "MP40" }
	},
};

int ShopCosts[SHOP_CATAGORIES][20] = {
    // Weapon
	{
		20, 75, 200, 300, 750, 1500, 3000, 300, 100
	},
    // Ammo
	{
		10, 50, 25, 125, 50, 250, 200, 1000, 285, 1675
	},
    // Health
	{
		5, 100, 250, 500, 1000, 2500, 5000, 7500, 10000, 1000, 2000, 50000, 500, 1000
	},
    // Armor
	{
		5, 100, 50, 500, 250, 1000, 500, 5000, 2500, 10000, 5000
	},
	// Artifacts
	{
		1000, 2000, 500, 1000, 200, 1000, 250, 500, 1000, 1000, 5000, 	// Powerups
		1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000			// Runes
	},
	// Tokens
	{
		25000, 125000, 25000, 125000, 25000, 125000, 375000, 750000
	},
	// Shields
	{
		10000, 20000, 25000, 50000, 75000, 25000
	},
	// Accessories
	{
		25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 250000	// Badges
	},
	// Brutal Doom
	{
		100, 1000, 2500, 10000, 5000, 5000, 500
	},
};

int ShopMax[SHOP_CATAGORIES] =
{
	8, 10, 14, 11, 19, 8, 6, 9, 7
};

bool InShop;
int ShopIndex;
int ShopOffset;
int Page;	
int ShopSpotID = 1000;

// Open the Shop
script "OpenShop" (void)
{
	// If you're dead, terminate
	if (GetActorProperty(0, APROP_HEALTH) <= 0) terminate;
	
	InMenu = false;
	
	if (InShop)
	{
		// Sanity Check to prevent the shop closing itself after buying an item in the Outpost Shop
		if (InBase) terminate;
		
		ActivatorSound("menu/leave", 127);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		InShop = False;
	}
	else
	{
		// Don't let you Shop Anywhere if it's disabled
		if (!InBase && !GetCVAR("drpg_shoptype")) terminate;
		
		ActivatorSound("menu/shop", 127);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		InShop = true;
	}
}

// Sell items in bulk
script "SellAll" (int SellPage, int Silent)
{
	int Total;
	int ItemMax = 1000;
	
	// Set font
	SetFont("BIGFONT");
	
	// Invalid Pages
	if (SellPage < 2)
	{
		print(s:"\cgInvalid Shop Page");
		ActivatorSound("menu/error", 127);
		terminate;
	}
	
	// Sell Items
	for (int i = 0; i < ShopMax[SellPage]; i++)
		for (int j = 0; j < ItemMax; j++)
			if (CheckInventory(Shop[SellPage][i][0]) > 0)
			{
					// Oh god...
					if (Shop[SellPage][i][0] == "HealthBonus" || Shop[SellPage][i][0] == "ArmorBonus") continue;
					
					TakeInventory(Shop[SellPage][i][0], 1);
					GiveInventory("Credits", ShopCosts[SellPage][i] / 2);
					Total += ShopCosts[SellPage][i] / 2;
			}
			else continue;
	
	// Accessory Handling
	if (SellPage == 7)
		for (int k = 0; k < 8; k++)
		{
			Accessories[k] = false;
			AccessorySlotsUsed = 0;
		}

	// Display Message
	if (!Silent)
	{
		HudMessage(s:"Sold all ", s:ShopNames[SellPage], s:" items for ", d:Total, s:" Credits";
				   HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.5, 5.0, 5.0);
		ActivatorSound("credits/payout", 127);
	}
}

function void ShopLoop(void)
{
	// Vars
	int Catagories; // 8 vanilla catagories, 8 reserved for compatibility
	int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(0, INPUT_OLDBUTTONS);
	int Discount = FixedMul(RankLevel, 2.1);
	int Cost = ShopCosts[page][ShopIndex] - ShopCosts[page][ShopIndex] * Discount / 100;
	int SellPrice = ShopCosts[Page][ShopIndex] / 2;
	if (Page == 1) SellPrice /= 4;
	
	if (InShop)
    {
		// Freeze the game if the option is active
		if (GetCVAR("drpg_menufreeze"))
			GiveInventory("MenuFreezer", 1);

		// Compatibility handling - Brutal Doom
		if (GetCVAR("drpg_ext_brutal"))
		{
			Shop[0][0][1] = "Assault Rifle";
			Catagories = 9;
		}
		else
			Catagories = 8;
		
		// Set the HUD Size
		SetHUDSize(GetCVAR("drpg_menu_width"), GetCVAR("drpg_menu_height"), true);

		// Draw the background
		if (GetCVAR("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
		// Draw Shop
        SetFont("BIGFONT");
        HudMessage(s:"Shop - ", s:ShopNames[Page],
				   s:" (", d:Page + 1, s:"/", d:Catagories, s:")";
                   HUDMSG_PLAIN, 3000, CR_GREEN,
                   24.1, 24.0, 0.1);
        
        // Draw Price
        HudMessage(s:"\cj", d:Cost, s:" C \ci(", d:SellPrice, s:" C) \ck(Discount: ", d:Discount, s:"%)";
                   HUDMSG_PLAIN, 3021, CR_GOLD,
                   24.1, 38.0, 0.1);
        
        /* Draw Help
        SetFont("SMALLFONT");
		HudMessage(s:"Up/Down to move\nLeft/Right to change pages\nUse to buy\nRun to sell\nMenu to exit";
				   HUDMSG_PLAIN, 3022, CR_RED,
				   0.1, 240.1, 0.1); */
        
		// Draw Item List
        for (int i = 0; i < ShopMax[Page]; i++)
        {
			SetFont("SMALLFONT");
            if (i == ShopIndex)
				if (CheckInventory(Shop[Page][i][0]) > 0)
					HudMessage(s:Shop[Page][i][1], s:" [", d:CheckInventory(Shop[Page][i][0]), s:"]";
							   HUDMSG_PLAIN, 3001 + i, CR_GREEN,
							   24.1, 50.0 + 8.0 * i, 0.1);
				else
					HudMessage(s:Shop[Page][i][1];
							   HUDMSG_PLAIN, 3001 + i, CR_GREEN,
							   24.1, 50.0 + 8.0 * i, 0.1);
            else
                if (CheckInventory("Credits") >= ShopCosts[Page][i] - ShopCosts[page][i] * Discount / 100)
					if (CheckInventory(Shop[Page][i][0]) > 0)
						HudMessage(s:Shop[Page][i][1], s:" [", d:CheckInventory(Shop[Page][i][0]), s:"]";
								   HUDMSG_PLAIN, 3001 + i, CR_WHITE,
								   24.1, 50.0 + 8.0 * i, 0.1);
					 else
						HudMessage(s:Shop[Page][i][1];
								   HUDMSG_PLAIN, 3001 + i, CR_WHITE,
								   24.1, 50.0 + 8.0 * i, 0.1);
                else
					if (CheckInventory(Shop[Page][i][0]) > 0)
						HudMessage(s:Shop[Page][i][1], s:" [", d:CheckInventory(Shop[Page][i][0]), s:"]";
								   HUDMSG_PLAIN, 3001 + i, CR_RED,
								   24.1, 50.0 + 8.0 * i, 0.1);
					else
						HudMessage(s:Shop[Page][i][1];
								   HUDMSG_PLAIN, 3001 + i, CR_RED,
								   24.1, 50.0 + 8.0 * i, 0.1);
        }
        
        // Check Input
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && ShopIndex >= 0)
        {
			if (ShopIndex <= 0) ShopIndex = ShopMax[Page];
            ActivatorSound("menu/move", 127);
            ShopIndex--;
        }
        if (Buttons == BT_BACK && OldButtons != BT_BACK && ShopIndex <= ShopMax[Page])
        {
			if (ShopIndex >= ShopMax[Page] - 1) ShopIndex = -1;
            ActivatorSound("menu/move", 127);
            ShopIndex++;
        }
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT && Page >= 0) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT && Page >= 0))
        {
			if (Page <= 0) Page = Catagories;
            ActivatorSound("menu/move", 127);
			ShopIndex = 0;
            Page--;
        }
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT && Page < Catagories) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT && Page < Catagories))
        {
			if (Page >= Catagories - 1) Page = -1;
            ActivatorSound("menu/move", 127);
			ShopIndex = 0;
            Page++;
        }
        if (Buttons == BT_USE && OldButtons != BT_USE)
			if (CheckInventory("Credits") >= Cost)
				BuyItem(Shop[Page][ShopIndex][0], Cost);
			else
				ActivatorSound("menu/error", 127);
		if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
			if (CheckInventory(Shop[Page][ShopIndex][0]) > 0)
				SellItem(Shop[Page][ShopIndex][0]);
			else
				ActivatorSound("menu/error", 127);
    }
}

function void BuyItem(str Item, int Cost)
{
	ActivatorSound("menu/buy", 127);

	// If it's a Token, use alternate handling due to bullshit
	if (Item == "StatToken") 	Item = "SmallStatToken";
	if (Item == "StatCapToken") Item = "SmallStatCapToken";
	if (Item == "SkillToken")	Item = "SmallSkillToken";

	if (InBase && !GetCVAR("drpg_shoptype"))
		SpawnSpotForced(Item, ShopSpotID, 0, 0);
	else
		SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
	
	TakeInventory("Credits", Cost);
}

function void SellItem(str Item)
{
	int SellCost = ShopCosts[Page][ShopIndex] / 2;
	
	// If it's ammo, 1/4th the price to prevent abuse
	if (Item == "Clip" || Item == "Shell" || Item == "RocketAmmo" || Item == "Cell")
		SellCost /= 4;

	// If it's an Accessory, unequip it too
	if (Page == 7 && Accessories[ShopIndex] == 1)
	{
		Accessories[ShopIndex] = false;
		AccessorySlotsUsed--;
	}
	
	// Sell the Item
	ActivatorSound("credits/payout", 127);
	TakeInventory(Item, 1);
	GiveInventory("Credits", SellCost);
}
