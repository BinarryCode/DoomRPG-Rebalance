#library "Shield"

#include "zcommon.acs"

#import "Stats.acs"
#import "Skills.acs"
#import "Augs.acs"
#import "Shop.acs"
#import "Menu.acs"
#import "Utils.acs"

global int 50 : Shield;
global int 51 : ShieldCapacity;
global int 52 : ShieldBody;
global int 53 : ShieldBattery;
global int 54 : ShieldCapacitor;
global int 55 : ShieldAccessory;
global str 56 : ArmorType;
global int 57 : ArmorAmount;

str ShieldData[4][30][4] =
{
	// Item, Name, Description, Icon
	
	// Bodies
	{
		// Standard Body
		{
			"ShieldBodyPluggy",
			"Pluggy",
			"+50 Capacity",
			"SHBOA0",
		},
	},
	
	// Batteries
	{
		// Standard Battery
		{
			"ShieldBatteryDoubleA",
			"Double-A",
			"+50 Capacity",
			"SHBAA0",
		},
	},

	// Capacitors
	{
		// Standard Capacitor
		{
			"ShieldCapacitorStandard",
			"\ctStandard",
			"+1 Charge Rate/sec",
			"SHCAA0",
		},
		
		// Cooled Capacitor
		{
			"ShieldCapacitorCooled",
			"\cnCooled",
			"+2 Charge Rate/sec",
			"SHCAB0",
		},

		// Energized Capacitor
		{
			"ShieldCapacitorEnergized",
			"\cdEnergized",
			"+3 Charge Rate/sec",
			"SHCAC0",
		},

		// Infused Capacitor
		{
			"ShieldCapacitorInfused",
			"\ckInfused",
			"+4 Charge Rate/sec",
			"SHCAD0",
		},
		
		// Mega Capacitor
		{
			"ShieldCapacitorMega",
			"\caFiery",
			"+5 Charge Rate/sec",
			"SHCAE0",
		},
	},

	// Accessories
	{
		// Standard Capacitor
		{
			"ShieldAccessoryAmp",
			"Amplified",
			"2x Damage at Full Capacity\nHalves Capacity on Attack",
			"SHACA0",
		},
	}
};

// Shield Stats
int ShieldStats[3][30][3] =
{
	// Capacity, Charge Rate, Delay Rate
	// Bodies
	{
		{ 50, 0, 0 }, 		// Standard Body
	},

	// Batteries
	{
		{ 50, 0, 0 }, 		// Standard Battery
	},

	// Capacitor
	{
		{ 0, 1, 0 }, 		// Standard Capacitor
		{ 0, 2, 0 }, 		// Cooled Capacitor
		{ 0, 3, 0 }, 		// Energized Capacitor
		{ 0, 4, 0 }, 		// Infused Capacitor
		{ 0, 5, 0 } 		// Mega Capacitor
	}
};

int ShieldChargeRate;
int ShieldDelayRate;
int BeforeHealth;
int AfterHealth;
int HealthLoss;
int BeforeArmor;
int AfterArmor;
int ArmorLoss;
int ShieldTimer;
int ShieldInterval;
bool ShieldFull = false;

script "Shield" (void)
{
	BeforeHealth = GetActorProperty(0, APROP_HEALTH);
	BeforeArmor = CheckInventory("Armor");
	HealthLoss = BeforeHealth - AfterHealth;
	ArmorLoss = BeforeArmor - AfterArmor;
	ShieldInterval = 35;
	
	/* Debugging
	SetFont("BIGFONT");
	Print(s:"\cj", d:BeforeHealth,
		  s:"\n\cj", d:BeforeArmor,
		  s:"\n\cj", d:HealthLoss,
		  s:"\n\cj", d:ArmorLoss,
		  s:"\n\cj", s:ArmorType,
		  s:"\n\cj", d:ArmorAmount); */
	
	// For the HUD
	TakeInventory("ShieldCapacity", 100);
	GiveInventory("ShieldCapacity", FixedMul(FixedDiv(Shield, ShieldCapacity), 100));
	
	// Shield is Full
	if (Shield >= ShieldCapacity && !ShieldFull)
	{
		ActivatorSound("shield/full", 127);
		ShieldFull = true;
	}
	
	// Fake Shield Armor Handling
	TakeInventory("BasicArmor", 1000000);
	if (Shield >= 0)
	{
		GiveInventory("Shield", 1);
		GiveInventory("ShieldArmor", 1);
	}
	else
	{
		GiveInventory("ShieldArmorEmpty", 1);
		
		if (ArmorLoss != 0 || HealthLoss != 0)
			GiveArmor();
	}
	
	// Damage Handling
	if (ArmorLoss < -Shield)
	{
		ShieldTimer = ShieldDelayRate;
		TakeInventory("BasicArmor", 1000000);
		if (ArmorLoss >= -1000000 && ArmorLoss <= -999000)
			ArmorLoss = 0; // INCOMING TERRIBLE HACKS, BEWARE
		Thing_Damage(0, Abs(ArmorLoss + Shield));
		Shield = 0;
		ShieldFull = false;
		FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
		ActivatorSound("shield/hit", 127);
		GiveArmor();
	}
	else if (AfterArmor != BeforeArmor)
	{
		FadeRange(255, 255, 255, 0.1, 255, 255, 255, 0.0, 0.1);
		Shield += ArmorLoss;
		ShieldTimer = ShieldDelayRate;
		ShieldFull = false;
	}
	
	// Accessory Handling
	if (Augs[AUG_REGENERATION]) // Regeneration Aug
	{
		ShieldChargeRate *= 2;
		ShieldDelayRate = FixedDiv(ShieldDelayRate, 2.0);
		ShieldInterval /= 2;
	}
	if (Augs[AUG_BLACKMARKET]) // Black Market Aug
	{
		ShieldChargeRate *= 2;
		ShieldDelayRate = FixedDiv(ShieldDelayRate, 2.0);
		ShieldInterval /= 2;
	}

	// Increase Charge
	if (ShieldTimer == 0)
	{
		Shield += ShieldChargeRate;
		ShieldTimer = ShieldInterval;
	}

	// Shield Timer
	if (ShieldTimer > 0)
		ShieldTimer--;
	
	Delay(1);
}

script "ToggleShield" (void)
{
	// If you're dead, terminate
	if (GetActorProperty(0, APROP_HEALTH) <= 0) terminate;
	
	// If you have no Shield parts equipped, terminate
	if (ShieldBody == 0 && ShieldBattery == 0 && ShieldCapacitor == 0 && ShieldAccessory == 0) terminate;
	
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
	
	if (!CheckInventory("Shield"))
	{
		ActivatorSound("shield/on", 127);
		ArmorType = CheckArmorType();
		ArmorAmount = CheckInventory("BasicArmor");
		GiveInventory("Shield", 1);
	}
	else
	{
		GiveArmor();
		ActivatorSound("shield/off", 127);
	}
}

script "AddShield" (int Amount)
{
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 0.25);
	Shield += Amount;
}

function void GiveArmor(void)
{
	TakeInventory("BasicArmor", 1000000);
	TakeInventory("Shield", 1);
	
	if (ArmorType != "")
	{
		GiveInventory(ArmorType, 1);
		UseInventory(ArmorType);
		TakeInventory("BasicArmor", GetArmorType(ArmorType, 0) - 1);
		GiveInventory("ArmorBonus", ArmorAmount - 1);
	}
}

function str CheckArmorType(void)
{
		 if (GetArmorType("BasicArmorBonus", 0) > 0) 	return "BasicArmorBonus";
	else if (GetArmorType("GreenArmor", 0) > 0) 		return "GreenArmor";
	else if (GetArmorType("UsedGreenArmor", 0) > 0) 	return "UsedGreenArmor";
	else if (GetArmorType("BlueArmor", 0) > 0) 			return "BlueArmor";
	else if (GetArmorType("UsedBlueArmor", 0) > 0) 		return "UsedBlueArmor";
	else if (GetArmorType("YellowArmor", 0) > 0) 		return "YellowArmor";
	else if (GetArmorType("UsedYellowArmor", 0) > 0) 	return "UsedYellowArmor";
	else if (GetArmorType("RedArmor", 0) > 0) 			return "RedArmor";
	else if (GetArmorType("UsedRedArmor", 0) > 0) 		return "UsedRedArmor";
	else if (GetArmorType("WhiteArmor", 0) > 0) 		return "WhiteArmor";
	else if (GetArmorType("UsedWhiteArmor", 0) > 0) 	return "UsedWhiteArmor";
	else												return "";
	
	return "";
}

function void CheckShields(void)
{
	// EP -> Shield Charging (WIP)
	int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
	if ((!InMenu && !InShop) && Buttons & BT_SPEED && Buttons & BT_USE && Shield < ShieldCapacity)
	{
		FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
		// ActivatorSound("regen/shield", 64);
		EP--;
		Shield++;
	}
	
	// If a part is sold/dropped/nuked from orbit/etc, unequip it
	if (!CheckInventory(ShieldData[0][ShieldBody - 1][0])) 		ShieldBody = 0;
	if (!CheckInventory(ShieldData[1][ShieldBattery - 1][0])) 	ShieldBattery = 0;
	if (!CheckInventory(ShieldData[2][ShieldCapacitor - 1][0]))	ShieldCapacitor = 0;
	if (!CheckInventory(ShieldData[3][ShieldAccessory - 1][0]))	ShieldAccessory = 0;
	
	// Apply Components stats to Shield
	ShieldCapacity = ShieldStats[0][ShieldBody - 1][0] + ShieldStats[1][ShieldBattery - 1][0] + ShieldStats[2][ShieldCapacitor - 1][0];
	ShieldChargeRate = ShieldStats[0][ShieldBody - 1][1] + ShieldStats[1][ShieldBattery- 1][1] + ShieldStats[2][ShieldCapacitor- 1][1];
	ShieldDelayRate = 175 + ShieldStats[0][ShieldBody - 1][2] + ShieldStats[1][ShieldBattery - 1][2] + ShieldStats[2][ShieldCapacitor - 1][2];
}

// Amp, Absorb, Adaptive, Booster, Roid, Spike, Nova, Turtle, Immunity
function void CheckShieldAccessory(void)
{
	int X;
	int Y;
	int Z;
	int Angle;
	
	if (CheckInventory("Shield") && ShieldAccessory == 1) // Amp
		if (Shield >= ShieldCapacity)
		{
			int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
			
			if (Buttons & BT_ATTACK)
			{
				ActivatorSound("shield/amp", 127);
				FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.5);
				Shield /= 2;
			}
			
			Damage *= 2;
		}
	
	if (CheckInventory("Shield") && ShieldAccessory == -2) // Booster
		if (AfterArmor != BeforeArmor)
			if (Random(1, 4) <= 1)
			{
				Angle = GetActorAngle(0);
				X = GetActorX(0) + cos(Angle) * 96;
				Y = GetActorY(0) + sin(Angle) * 96;
				Z = GetActorZ(0) + 48.0;

				Spawn("ShieldBooster", X, Y, Z, 0, Angle);
			}
	
	if (CheckInventory("Shield") && ShieldAccessory == -3) // Roid
		if (CheckWeapon("Fist") || CheckWeapon("Knuckle"))
			Damage *= 2;
	
	if (ShieldAccessory == -4) // Turtle
	{
		ShieldCapacity *= 2;
		HealthMax /= 2;
	}
	
	if (ShieldAccessory == -5) // Nova
		if (AfterArmor != BeforeArmor && Shield <= 0)
		{
			X = GetActorX(0);
			Y = GetActorY(0);
			Z = GetActorZ(0);
			Angle = GetActorAngle(0);
			
			int Pitch = GetActorPitch(0);
			int XSpeed = FixedMul(cos(Angle), 16.0);
			int YSpeed = FixedMul(sin(Angle), 16.0);
			int ZSpeed = -FixedMul(sin(Pitch), 16.0);
			int FireHeight = GetActorViewHeight(0) * 780 / 1000;
			int Offset = 8.0;
			int Projectiles = 64;
			int AngleAdd;
			
			AngleAdd = FixedDiv(1.0, Projectiles) >> 16;

			for (int i = 0; i < Projectiles; i++)
			{
				XSpeed = FixedMul(cos(Angle), 16.0);
				YSpeed = FixedMul(sin(Angle), 16.0);
				ZSpeed = -FixedMul(sin(Pitch), 16.0);
				
				SpawnProjectile(0, "Fireball", 0, 0, 0, 0, 2001);
				SetActorVelocity(2001, XSpeed, YSpeed, ZSpeed, 0, 0);
				SetActorAngle(2001, Angle);
				SetActorPosition(2001, X, Y, Z + FireHeight + Offset, 0);
				Thing_ChangeTID(2001, UniqueTID());
				
				Angle += AngleAdd;
			}
			
			AfterArmor = 0;
			BeforeArmor = 0;
		}
}
