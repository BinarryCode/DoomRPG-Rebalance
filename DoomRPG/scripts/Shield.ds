#include "inc/Shield.dh"

script ShieldScript()
{
	BeforeArmor = CheckInventory("Armor");
	HealthLoss = BeforeHealth - AfterHealth;
	ArmorLoss = BeforeArmor - AfterArmor;
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SetInventory("RLUnequippingArmor", 0);
	
	/* Debugging
	SetFont("BIGFONT");
	Print("%d\n%d\n%d\n%d\n%s\n%d\n",
		  BeforeHealth,
		  BeforeArmor,
		  HealthLoss,
		  ArmorLoss,
		  ArmorType,
		  ArmorAmount);
	*/
	
	// For the HUD
	int scs = Shield / ShieldCapacity * 100;
	TakeInventory("ShieldCapacity", 100);
	GiveInventory("ShieldCapacity", scs);
	
	// Shield is Full
	if (Shield >= ShieldCapacity && !ShieldFull)
	{
		ActivatorSound("shield/full", 127);
		ShieldFull = true;
	};
	
	// Fake Shield Armor Handling
	TakeInventory("BasicArmor", 1000000);
	if (Shield >= 0)
	{
		GiveInventory("Shield", 1);
		GiveInventory("ShieldArmor", 1);
	}
	else
	{
		GiveInventory("ShieldArmorEmpty", 1);
		
		if (ArmorLoss != 0 || HealthLoss != 0)
			GiveArmor();
	};
	
	// Damage Handling
	if (ArmorLoss < -Shield)
	{
		ShieldTimer = 35.0 * ShieldDelayRate;
		TakeInventory("BasicArmor", 1000000);
		if (ArmorLoss >= -1000000 && ArmorLoss <= -999000)
			ArmorLoss = 0; // INCOMING TERRIBLE HACKS, BEWARE
		Thing_Damage(0, Abs(ArmorLoss));
		Shield += ArmorLoss;
		ShieldFull = false;
		FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
		ActivatorSound("shield/hit", 127);
		GiveInventory("ShieldReflectionOff", 1);
		GiveInventory("ShieldGhostOff", 1);
		GiveArmor();
	}
	else if (AfterArmor != BeforeArmor && Timer() > 2) // GROSS HACKS
	{
		FadeRange(255, 255, 255, 0.1, 255, 255, 255, 0.0, 0.1);
		Shield += ArmorLoss;
		ShieldTimer = 35.0 * ShieldDelayRate;
		ShieldFull = false;
	};
	
	// Increase Charge
	if (ShieldTimer == 0)
	{
		Shield += ShieldChargeRate;
		ShieldTimer = ShieldInterval;
	};

	// Shield Timer
	if (ShieldTimer > 0)
		ShieldTimer--;
	
	Delay(1);
};

script ToggleShield(int Unequipped)
{
	// If you're dead, terminate
	if (GetActorProperty(0, APROP_Health) <= 0) return;
	
	// If you have no Shield parts equipped or are misSing a part, terminate
	if (!Unequipped && (ShieldBody == 0 || ShieldBattery == 0 || ShieldCapacitor == 0))
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// If you have indestructible armor, don't let you equip the shield
	if (CheckInventory("BasicArmor") > 1000 && CheckArmorType() != "ShieldArmor" && CheckArmorType() != "ShieldArmorEmpty")
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
	
	if (!CheckInventory("Shield"))
	{
		ActivatorSound("shield/on", 127);
		ArmorType = CheckArmorType();
		ArmorAmount = CheckInventory("BasicArmor");
		GiveInventory("Shield", 1);
		if (GetCVar("drpg_ext_doomrl")) GiveInventory("RLIndestructibleArmorWorn", 1);
		Nova = false;
	}
	else
	{
		ActivatorSound("shield/off", 127);
		GiveArmor();
		if (GetCVar("drpg_shield_reset"))
			Shield = 0;
		if (GetCVar("drpg_ext_doomrl")) TakeInventory("RLIndestructibleArmorWorn", 1);
		Nova = true;
	};
};

script AddShield(int Amount)
{
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 0.25);
	Shield += Amount;
};

function void GiveArmor()
{
	TakeInventory("BasicArmor", 1000000);
	TakeInventory("Shield", 1);
	
	if (ArmorType != "")
	{
		GiveInventory(ArmorType, 1);
		UseInventory(ArmorType);
		TakeInventory("BasicArmor", GetArmorType(ArmorType, 0) - 1);
		GiveInventory("ArmorBonus", ArmorAmount - 1);
	};
};

function void CheckShields()
{
	// Check to make sure the Shield has components
	if (CheckInventory("Shield") && (ShieldBody == 0 || ShieldBattery == 0 || ShieldCapacitor == 0))
	{
		ACS_NamedExecuteAlways("ToggleShield", 0, true);
		Shield = 0;
		ShieldTimer = 35.0 * ShieldDelayRate;
	};

	// EP -> Shield Charging (WIP)
	int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
	if ((!InMenu && !InShop) && Buttons & BT_SPEED && Buttons & BT_USE && Shield < ShieldCapacity && EP > 0)
	{
		FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
		// ActivatorSound("regen/shield", 64);
		EP--;
		Shield++;
	};
	
	// If a part is sold/dropped/nuked from orbit/etc, unequip it
	if (!CheckInventory(ShieldData[0][ShieldBody - 1][0])) 		ShieldBody = 0;
	if (!CheckInventory(ShieldData[1][ShieldBattery - 1][0])) 	ShieldBattery = 0;
	if (!CheckInventory(ShieldData[2][ShieldCapacitor - 1][0]))	ShieldCapacitor = 0;
	if (!CheckInventory(ShieldData[3][ShieldAccessory - 1][0]))	ShieldAccessory = 0;
	
	// Apply Components stats to Shield
	ShieldCapacity = ShieldStats[0][ShieldBody - 1][0] + ShieldStats[1][ShieldBattery - 1][0] + ShieldStats[2][ShieldCapacitor - 1][0];
	ShieldChargeRate = ShieldStats[0][ShieldBody - 1][1] + ShieldStats[1][ShieldBattery- 1][1] + ShieldStats[2][ShieldCapacitor- 1][1];
	ShieldDelayRate = 5.0 + ShieldStats[0][ShieldBody - 1][2] + ShieldStats[1][ShieldBattery - 1][2] + ShieldStats[2][ShieldCapacitor - 1][2];
	ShieldInterval = 35;
	
	// Aug Handling
	if (Augs[AUG_REGENERATION])
	{
		if (AugLevels[AUG_REGENERATION] >= 3)
			ShieldChargeRate *= 2;
		if (AugLevels[AUG_REGENERATION] >= 4)
			ShieldDelayRate = FixedDiv(ShieldDelayRate, 2.0);
		if (AugLevels[AUG_REGENERATION] >= 5)
			ShieldInterval /= 2;
	};
};

// Amp, Absorb, Adaptive, Booster, Roid, Spike, Nova, Turtle, Immunity
function void CheckShieldAccessory()
{
	int X, Y, Z;
	int Angle;
	
	if (CheckInventory("Shield") && ShieldAccessory == 1) // Amp
		if (Shield >= ShieldCapacity)
		{
			int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
			
			if (Buttons & BT_ATTACK)
			{
				ActivatorSound("shield/amp", 127);
				FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.5);
				Shield /= 2;
			};
			
			TotalDamage *= 2;
		};
	
	if (CheckInventory("Shield") && ShieldAccessory == 2) // Booster
		if (AfterArmor != BeforeArmor)
			if (Random(1, 4) <= 1)
			{
				Angle = GetActorAngle(0);
				X = GetActorX(0) + Cos(Angle) * 96;
				Y = GetActorY(0) + Sin(Angle) * 96;
				Z = GetActorZ(0) + 48.0;

				Spawn("ShieldBooster", X, Y, Z, 0, Angle);
			};
	
	if (CheckInventory("Shield") && ShieldAccessory == 3) // Roid
		if (CheckWeapon("Fist") || CheckWeapon("Knuckle") || CheckWeapon("Melee_Attacks") || CheckWeapon("RLFistRedux"))
			TotalDamage *= 2;
	
	if (ShieldAccessory == 4) // Turtle
	{
		ShieldCapacity *= 2;
		HealthMax /= 2;
	};
	
	if (ShieldAccessory == 5 && !Nova) // Nova
		if (AfterHealth != BeforeHealth && Shield <= 0)
		{
			X = GetActorX(0);
			Y = GetActorY(0);
			Z = GetActorZ(0);
			Angle = GetActorAngle(0);
			
			int Pitch = GetActorPitch(0);
			int XSpeed = FixedMul(Cos(Angle), 16.0);
			int YSpeed = FixedMul(Sin(Angle), 16.0);
			int ZSpeed = -FixedMul(Sin(Pitch), 16.0);
			int FireHeight = GetActorViewHeight(0) * 780 / 1000;
			int Offset = 8.0;
			int Projectiles = 64;
			int AngleAdd;
			
			AngleAdd = 1.0 * Projectiles;

			for (int i = 0; i < Projectiles; i++)
			{
				XSpeed = FixedMul(Cos(Angle), 16.0);
				YSpeed = FixedMul(Sin(Angle), 16.0);
				ZSpeed = -FixedMul(Sin(Pitch), 16.0);
				
				SpawnProjectile(0, "Fireball", 0, 0, 0, 0, 2001);
				SetActorVelocity(2001, XSpeed, YSpeed, ZSpeed, 0, 0);
				SetActorAngle(2001, Angle);
				SetActorPosition(2001, X, Y, Z + FireHeight + Offset, 0);
				Thing_ChangeTID(2001, UniqueTID());
				
				Angle += AngleAdd;
			};
			
			Nova = true;
		};
	
	if (CheckInventory("Shield") && ShieldAccessory == 6) // Reflective
		{GiveInventory("ShieldReflection", 1);}
	else if (CheckInventory("Shield") && ShieldAccessory != 6)
		{GiveInventory("ShieldReflectionOff", 1);};
	
	if (CheckInventory("Shield") && ShieldAccessory == 7) // Ghost
		{GiveInventory("ShieldGhost", 1);}
	else if (CheckInventory("Shield") && ShieldAccessory != 7)
		{GiveInventory("ShieldGhostOff", 1);};
};
