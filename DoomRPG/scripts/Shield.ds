#include "Globals.dh"
#include "Menu.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Utils.dh"

str[4][MAX_PARTS][4] ShieldData =
{
	// Item, Name, Description, Icon
	
	/* Rarity colors
	
		White 	\cj	Common
		Green 	\cd	Uncommon
		Blue	\cn	Rare
		Gold	\ck	Legendary
	
	*/
	
	// Bodies
	{
		{
			"ShieldBody1";
			"\cjUAC";
			"";
			"SHBOA0";
		};
		{
			"ShieldBody2";
			"\cjXTron";
			"";
			"SHBOB0";
		};
		{
			"ShieldBody3";
			"\cdEDF";
			"";
			"SHBOC0";
		};
		{
			"ShieldBody4";
			"\cdMisfit Tech";
			"";
			"SHBOD0";
		};
		{
			"ShieldBody5";
			"\cnYholl";
			"";
			"SHBOE0";
		};
		{
			"ShieldBody6";
			"\cnARKAI";
			"";
			"SHBOF0";
		};
		{
			"ShieldBody7";
			"\ckXaser Inc.";
			"";
			"SHBOG0";
		};
	};
	
	// Batteries
	{
		{
			"ShieldBattery1";
			"\cjCrappy";
			"";
			"SHBAA0";
		};
		{
			"ShieldBattery2";
			"\cjBullet";
			"";
			"SHBAB0";
		};
		{
			"ShieldBattery3";
			"\cdSpiked";
			"";
			"SHBAC0";
		};
		{
			"ShieldBattery4";
			"\cdMirrored";
			"";
			"SHBAD0";
		};
		{
			"ShieldBattery5";
			"\cnClustered";
			"";
			"SHBAE0";
		};
		{
			"ShieldBattery6";
			"\cnWinged";
			"";
			"SHBAF0";
		};
		{
			"ShieldBattery7";
			"\ckReinforced";
			"";
			"SHBAG0";
		};
	};

	// Capacitors
	{
		{
			"ShieldCapacitor1";
			"\cjStandard";
			"";
			"SHCAA0";
		};
		{
			"ShieldCapacitor2";
			"\cjCooled";
			"";
			"SHCAB0";
		};
		{
			"ShieldCapacitor3";
			"\cdEnergized";
			"";
			"SHCAC0";
		};
		{
			"ShieldCapacitor4";
			"\cnInfused";
			"";
			"SHCAD0";
		};
		{
			"ShieldCapacitor5";
			"\ckFiery";
			"";
			"SHCAE0";
		};
	};

	// Accessories
	{
		{
			"ShieldAccessory1";
			"\caAMP-3000";
			"2x Damage at Full Capacity\nHalves Capacity on Attack";
			"SHACA0";
		};
		{
			"ShieldAccessory2";
			"\cvBST-700";
			"When hit; ocassionally drop Shield Boosters";
			"SHACB0";
		};
		{
			"ShieldAccessory3";
			"\cgX-7";
			"2x Damage with Fists";
			"SHACC0";
		};
		{
			"ShieldAccessory4";
			"\cdDEF-2";
			"2x Capacity; -2x Max Health";
			"SHACD0";
		};
		{
			"ShieldAccessory5";
			"\ciNOV-A";
			"Emit a Nova when Shield is depleted";
			"SHACE0";
		};
		{
			"ShieldAccessory6";
			"\ckRF-CT";
			"Reflect projectiles back at enemies";
			"SHACF0";
		};
		{
			"ShieldAccessory7";
			"\cuGH0ST";
			"Invisible to enemies";
			"SHACG0";
		};
	};
};

// Shield Stats
int[3][MAX_PARTS][3] ShieldStats =
{
	// Capacity, Charge Rate, Delay Rate
	// Bodies
	{
		{ 25; 0; 0; };
		{ 50; 0; 0; };
		{ 100; 0; 0; };
		{ 150; 0; 0; };
		{ 200; 0; 0; };
		{ 250; 0; 0; };
		{ 500; 0; 0; };
	};

	// Batteries
	{
		{ 25; 0; 0; };
		{ 50; 1; 0; };
		{ 100; 1; 0; };
		{ 150; 2; 0; };
		{ 200; 3; -0.25; };
		{ 250; 4; -0.5; };
		{ 500; 5; -1.0; };
	};

	// Capacitor
	{
		{ 0; 1; 0; };
		{ 0; 2; 0; };
		{ 0; 3; 0; };
		{ 0; 4; -0.5; };
		{ 0; 5; -1.0; };
	};
};

// Max Shield Parts per page
int[4] ShieldPartsMax = { 7; 7; 5; 7; };

script ShieldScript()
{
	while (1)
	{
		if (Player.Shield.Active)
		{
			/* Debugging
			SetFont("BIGFONT");
			Print("%d\n%d\n%d\n",
				  Player.BeforeHealth,
				  Player.AfterHealth,
				  Player.HealthLoss); */
			
			// Shield is Full
			if (Player.Shield.Charge >= Player.Shield.Capacity && !Player.Shield.Full)
			{
				ActivatorSound("shield/full", 127);
				Player.Shield.Full = true;
			};
			
			// Damage
			if (Player.HealthLoss > 0)
			{
				if (Player.Shield.Charge == 0)
				{
					Player.Shield.Health -= Player.HealthLoss;
					ToggleShield(false);
				}
				else if (Player.HealthLoss > Player.Shield.Charge)
				{
					SetActorProperty(Player.TID, APROP_Health, Player.Shield.Health - (Player.HealthLoss - Player.Shield.Charge));
					Player.Shield.Charge = 0;
					if (Player.Shield.Accessory == 5) // Nova
						ShieldNova();
					ToggleShield(true);
				}
				else
				{
					Player.Shield.Charge -= Player.HealthLoss;
					SetActorProperty(Player.TID, APROP_Health, SHIELD_HEALTH);
				};
				
				Player.Shield.Timer = 35.0 * Player.Shield.DelayRate;
				Player.Shield.Full = false;
			};
			
			// Increase Charge
			if (Player.Shield.Timer == 0)
			{
				Player.Shield.Charge += Player.Shield.ChargeRate;
				Player.Shield.Timer = Player.Shield.Interval;
			};

			// Shield Timer
			if (Player.Shield.Timer > 0)
				Player.Shield.Timer--;
		};
		
		Delay(1);
	};
};

acscript ToggleShield(bool Destroyed)
{
	// If you're dead, terminate
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	// If you have no Shield parts equipped or are misSing a part, terminate
	if (Player.Shield.Body == 0 || Player.Shield.Battery == 0 || Player.Shield.Capacitor == 0)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
	
	if (!Player.Shield.Active)
	{
		ActivatorSound("shield/on", 127);
		ACS_NamedTerminate("DamageNumbers", 0);
		Player.Shield.Health = GetActorProperty(Player.TID, APROP_Health);
		SetActorProperty(Player.TID, APROP_Health, SHIELD_HEALTH);
		Player.Shield.Timer = 35.0 * Player.Shield.DelayRate;
		Player.Shield.Active = true;
	}
	else
	{
		ActivatorSound("shield/off", 127);
		DamageNumbers();
		if (!Destroyed) SetActorProperty(Player.TID, APROP_Health, Player.Shield.Health);
		Player.Shield.Active = false;
		if (GetCVar("drpg_shield_reset"))
			Player.Shield.Charge = 0;
		GiveInventory("ShieldReflectionOff", 1);
		GiveInventory("ShieldGhostOff", 1);
	};
};

script AddShield(int Amount)
{
	FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 0.25);
	Player.Shield.Charge += Amount;
};

function void CheckShields()
{
	// Check to make sure the Shield has components
	if (Player.Shield.Active && (Player.Shield.Body == 0 || Player.Shield.Battery == 0 || Player.Shield.Capacitor == 0))
	{
		ToggleShield(false);
		Player.Shield.Charge = 0;
		Player.Shield.Timer = 35 * Player.Shield.DelayRate;
	};

	// EP -> Shield Charging
	int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
	if (Player.Shield.Active && (!Player.InMenu && !Player.InShop) && Buttons & BT_SPEED && Buttons & BT_USE && Player.Shield.Charge < Player.Shield.Capacity && Player.EP > 0)
	{
		FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
		// ActivatorSound("regen/shield", 64);
		Player.EP--;
		Player.Shield.Charge++;
	};
	
	// If a part is sold/dropped/nuked from orbit/etc, unequip it
	if (!CheckInventory(ShieldData[0][Player.Shield.Body - 1][0])) 		Player.Shield.Body = 0;
	if (!CheckInventory(ShieldData[1][Player.Shield.Battery - 1][0])) 	Player.Shield.Battery = 0;
	if (!CheckInventory(ShieldData[2][Player.Shield.Capacitor - 1][0]))	Player.Shield.Capacitor = 0;
	if (!CheckInventory(ShieldData[3][Player.Shield.Accessory - 1][0]))	Player.Shield.Accessory = 0;
	
	// Apply Components stats to Shield
	Player.Shield.Capacity = ShieldStats[0][Player.Shield.Body - 1][0] + ShieldStats[1][Player.Shield.Battery - 1][0] + ShieldStats[2][Player.Shield.Capacitor - 1][0];
	Player.Shield.ChargeRate = ShieldStats[0][Player.Shield.Body - 1][1] + ShieldStats[1][Player.Shield.Battery- 1][1] + ShieldStats[2][Player.Shield.Capacitor- 1][1];
	Player.Shield.DelayRate = 5.0 + ShieldStats[0][Player.Shield.Body - 1][2] + ShieldStats[1][Player.Shield.Battery - 1][2] + ShieldStats[2][Player.Shield.Capacitor - 1][2];
	Player.Shield.Interval = 35;
	
	// Aug Handling
	if (Player.Augs.Active[AUG_REGENERATION])
	{
		if (Player.Augs.Level[AUG_REGENERATION] >= 3)
			Player.Shield.ChargeRate *= 2;
		if (Player.Augs.Level[AUG_REGENERATION] >= 4)
			Player.Shield.DelayRate /= 2.0;
		if (Player.Augs.Level[AUG_REGENERATION] >= 5)
			Player.Shield.Interval /= 2;
	};
};

// Amp, Absorb, Adaptive, Booster, Roid, Spike, Nova, Turtle, Immunity
function void CheckShieldAccessory()
{
	fixed X, Y, Z;
	fixed Angle;
	
	if (Player.Shield.Active && Player.Shield.Accessory == 1) // Amp
		if (Player.Shield.Charge >= Player.Shield.Capacity)
		{
			int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
			
			if (Buttons & BT_ATTACK)
			{
				ActivatorSound("shield/amp", 127);
				FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.5);
				Player.Shield.Charge /= 2;
			};
			
			Player.TotalDamage *= 2;
		};
	
	if (Player.Shield.Active && Player.Shield.Accessory == 2) // Booster
		if (Player.HealthLoss > 0)
			if (Random(1, 4) <= 1)
			{
				Angle = GetActorAngle(0);
				X = GetActorX(0) + Cos(Angle) * 96.0;
				Y = GetActorY(0) + Sin(Angle) * 96.0;
				Z = GetActorZ(0) + 48.0;

				Spawn("ShieldBooster", X, Y, Z, 0, Angle);
			};
	
	if (Player.Shield.Active && Player.Shield.Accessory == 3) // Roid
		if (CheckWeapon("Fist") || CheckWeapon("Knuckle") || CheckWeapon("Melee_Attacks") || CheckWeapon("RLFistRedux"))
			Player.TotalDamage *= 2;
	
	if (Player.Shield.Accessory == 4) // Turtle
	{
		Player.Shield.Capacity *= 2;
		Player.HealthMax /= 2;
	};
	
	if (Player.Shield.Active && Player.Shield.Accessory == 6) // Reflective
		GiveInventory("ShieldReflection", 1);
	
	if (Player.Shield.Active && Player.Shield.Accessory == 7) // Ghost
		GiveInventory("ShieldGhost", 1);
};

function void ShieldNova()
{
	fixed X = GetActorX(0);
	fixed Y = GetActorY(0);
	fixed Z = GetActorZ(0);
	fixed Angle = GetActorAngle(0);
	fixed Pitch = GetActorPitch(0);
	fixed XSpeed = Cos(Angle) * 16.0;
	fixed YSpeed = Sin(Angle) * 16.0;
	fixed ZSpeed = -Sin(Pitch) * 16.0;
	fixed FireHeight = GetActorViewHeight(0) * 0.78;
	fixed Offset = 8.0;
	fixed AngleAdd;
	int Projectiles = 64;
	
	AngleAdd = 1.0 / Projectiles;

	for (int i = 0; i < Projectiles; i++)
	{
		XSpeed = Cos(Angle) * 16.0;
		YSpeed = Sin(Angle) * 16.0;
		ZSpeed = -Sin(Pitch) * 16.0;
		
		SpawnProjectile(0, "Fireball", 0, 0, 0, 0, 2001);
		SetActorVelocity(2001, XSpeed, YSpeed, ZSpeed, 0, 0);
		SetActorAngle(2001, Angle);
		SetActorPosition(2001, X, Y, Z + FireHeight + Offset, 0);
		Thing_ChangeTID(2001, UniqueTID());
		
		Angle += AngleAdd;
	};
};