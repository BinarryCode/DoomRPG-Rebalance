#include "Globals.dh"
#include "Menu.dh"
#include "Popoffs.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "ShieldData.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Utils.dh"

// Max Shield Parts per page
int[4] ShieldPartsMax = { 22; 13; 15; 29; };

script void ShieldScript()
{
    while (true)
    {
        if (Player.Shield.Active)
        {
            /* Debugging
            SetFont("BIGFONT");
            Print("%d\n%d\n%d\n",
                  Player.BeforeHealth,
                  Player.AfterHealth,
                  Player.HealthLoss); */
            
            // Inventory items for multiplayer/health bar handling
            SetInventory("DRPGShieldCharge", Player.Shield.Charge);
            SetInventory("DRPGShieldChargeMax", Player.Shield.Capacity);
            
            // Shield is Full
            if (Player.Shield.Charge >= Player.Shield.Capacity && !Player.Shield.Full)
            {
                ActivatorSound("shield/full", 127);
                Player.Shield.Full = true;
            };
            
            // Damage
            if (Player.HealthLoss > 0)
            {
                if (Player.Shield.Charge == 0)
                {
                    Player.Shield.Health -= Player.HealthLoss;
                    ToggleShield(false);
                }
                else if (Player.HealthLoss > Player.Shield.Charge)
                {
                    SetActorProperty(Player.TID, APROP_Health, Player.Shield.Health - (Player.HealthLoss - Player.Shield.Charge));
                    Player.Shield.Charge = 0;
                    if (Player.Shield.Accessory == SHIELD_ACC_NOVA2 && Random(1, 4) == 1) // NOV-A2
                        Nova("BFGBall", Random(4, 16));
                    ToggleShield(true);
                }
                else
                {
                    Player.Shield.Charge -= Player.HealthLoss;
                    SetActorProperty(Player.TID, APROP_Health, SHIELD_HEALTH);
                };
                
                Player.Shield.Timer = 35.0 * Player.Shield.DelayRate;
                Player.Shield.Full = false;
            };
            
            // Increase Charge
            if (Player.Shield.Timer == 0)
            {
                Player.Shield.Charge += Player.Shield.ChargeRate;
                Player.Shield.Timer = Player.Shield.Interval;
                
                if (Player.Shield.Accessory == SHIELD_ACC_PHD88 && Player.Shield.Charge >= Player.Shield.Capacity && Player.EP < Player.EPMax)
                    Player.EP++;
                if (Player.Shield.Accessory == SHIELD_ACC_BATTB && Player.Shield.Charge >= Player.Shield.Capacity && Player.Augs.Battery < Player.Augs.BatteryMax)
                {
                    Player.Augs.Battery++;
                    DrawBattery();
                };
                if (Player.Shield.Accessory == SHIELD_ACC_SHVRZ7 && Player.Shield.Charge >= Player.Shield.Capacity)
                {
                    GiveInventory("Clip", 1);
                    GiveInventory("Shell", 2);
                };
            };

            // Shield Timer
            if (Player.Shield.Timer > 0)
            {
                if (Player.Shield.Accessory == SHIELD_ACC_LZY200)
                {
                    if (!IsPlayerMoving())
                        Player.Shield.Timer--;
                }
                else if (!CheckInventory("PowerTimeFreezer") && !CheckInventory("DRPGMenuFreezer"))
                    Player.Shield.Timer--;
            };
        };
        
        Delay(1);
    };
};

acscript void ToggleShield(bool Destroyed) net
{
    // If you're dead, terminate
    if (GetActorProperty(Player.TID, APROP_Health) <= 0 && !Destroyed) return;
    
    // If you have no Shield parts equipped or are missing a part, terminate
    if (Player.Shield.Body == 0 || Player.Shield.Battery == 0 || Player.Shield.Capacitor == 0)
    {
        ActivatorSound("menu/error", 127);
        return;
    };
    
    FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
    
    if (!Player.Shield.Active)
    {
        GiveInventory("DRPGShieldOn", 1);
        ActivatorSound("shield/on", 127);
        Player.Shield.Health = GetActorProperty(Player.TID, APROP_Health);
        SetActorProperty(Player.TID, APROP_Health, SHIELD_HEALTH);
        Player.Shield.Timer = 35.0 * Player.Shield.DelayRate;
        Player.Shield.Active = true;
    }
    else
    {
        GiveInventory("DRPGShieldOff", 1);
        ActivatorSound("shield/off", 127);
        if (!Destroyed) SetActorProperty(Player.TID, APROP_Health, Player.Shield.Health);
        Player.Shield.Active = false;
        if (GetCVar("drpg_shield_reset"))
            Player.Shield.Charge = 0;
        GiveInventory("DRPGShieldReflectionOff", 1);
        GiveInventory("DRPGShieldGhostOff", 1);
    };
};

acscript void AddShield(int Amount)
{
    FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0, 0.25);
    Player.Shield.Charge += Amount;
};

acscript void AddShieldHealth(int Amount)
{
    Player.Shield.Health += Amount;
};

function void CheckShields()
{
    // Check to make sure the Shield has components
    if (Player.Shield.Active && (Player.Shield.Body == 0 || Player.Shield.Battery == 0 || Player.Shield.Capacitor == 0))
    {
        ActivatorSound("shield/off", 127);
        Player.Shield.Active = false;
        SetActorProperty(Player.TID, APROP_Health, Player.Shield.Health);;
        if (GetCVar("drpg_shield_reset"))
            Player.Shield.Charge = 0;
        GiveInventory("DRPGShieldOff", 1);
        GiveInventory("DRPGShieldReflectionOff", 1);
        GiveInventory("DRPGShieldGhostOff", 1);
        Player.Shield.Timer = 35 * Player.Shield.DelayRate;
    };
    
    // EP -> Shield Charging
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    
    if (Player.Shield.Active && (!Player.InMenu && !Player.InShop) && Buttons & BT_SPEED && Buttons & BT_USE && Player.Shield.Charge < Player.Shield.Capacity)
    {
        if (Player.Shield.Accessory == SHIELD_ACC_CNVRT99 && CheckInventory("Cell") > 0)
        {
            FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
            ActivatorSound("regen/shield", 64);
            TakeInventory("Cell", 1);
            Player.Shield.Charge += 10;
        }
        else if (Player.EP > 0)
        {
            FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
            ActivatorSound("regen/shield", 64);
            Player.EP--;
            Player.Shield.Charge++;
        };
    };
    
    // If a part is sold/dropped/nuked from orbit/etc, unequip it
    if (!CheckInventory(ShieldData[0][Player.Shield.Body - 1].Actor))       Player.Shield.Body = 0;
    if (!CheckInventory(ShieldData[1][Player.Shield.Battery - 1].Actor))    Player.Shield.Battery = 0;
    if (!CheckInventory(ShieldData[2][Player.Shield.Capacitor - 1].Actor))  Player.Shield.Capacitor = 0;
    if (!CheckInventory(ShieldData[3][Player.Shield.Accessory - 1].Actor))  Player.Shield.Accessory = 0;
    
    // Apply Components stats to Shield
    Player.Shield.Capacity = ShieldData[0][Player.Shield.Body - 1].Capacity + ShieldData[1][Player.Shield.Battery - 1].Capacity + ShieldData[2][Player.Shield.Capacitor - 1].Capacity;
    Player.Shield.ChargeRate = ShieldData[0][Player.Shield.Body - 1].ChargeRate + ShieldData[1][Player.Shield.Battery- 1].ChargeRate + ShieldData[2][Player.Shield.Capacitor- 1].ChargeRate;
    Player.Shield.DelayRate = 5.0 + ShieldData[0][Player.Shield.Body - 1].DelayRate + ShieldData[1][Player.Shield.Battery - 1].DelayRate + ShieldData[2][Player.Shield.Capacitor - 1].DelayRate;
    Player.Shield.Interval = 35;
    
    // Aug Handling
    if (Player.Augs.Active[AUG_REGENERATION])
    {
        if (Player.Augs.Level[AUG_REGENERATION] >= 3)
            Player.Shield.ChargeRate *= 2;
        if (Player.Augs.Level[AUG_REGENERATION] >= 4)
            Player.Shield.DelayRate /= 2.0;
        if (Player.Augs.Level[AUG_REGENERATION] >= 5)
            Player.Shield.Interval /= 2;
    };
    
    // Accessory Powerups Token handling
    SetInventory("DRPGShieldLightAmpToken", Player.Shield.LightAmp);
    SetInventory("DRPGShieldInvisibilityToken", Player.Shield.Invisibility);
    SetInventory("DRPGShieldTimeFreezerToken", Player.Shield.TimeFreezer);
};

function void CheckShieldAccessory()
{
    // X-2
    if (Player.Shield.Accessory == SHIELD_ACC_X7 && Player.Shield.Active)
        if (CheckWeapon("Fist") || CheckWeapon("Knuckle") || CheckWeapon("RLFistRedux"))
            Player.TotalDamage *= 2;
    
    // SGENX-5b
    if (Player.Shield.Accessory == SHIELD_ACC_SGENX5B && Player.Shield.Active)
        if ((Timer() % (35 / 2)) == 0)
            Player.Shield.Health++;
    
    // AMP-3000
    if (Player.Shield.Accessory == SHIELD_ACC_AMP3000 && Player.Shield.Active)
        if (Player.Shield.Charge >= Player.Shield.Capacity)
        {
            int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
            
            if (Buttons & BT_ATTACK && !Player.InMenu && !Player.InShop && !Player.OutpostMenu)
            {
                ActivatorSound("shield/amp", 127);
                FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.5);
                Player.Shield.Charge /= 2;
            };
            
            Player.TotalDamage *= 2;
        };
    
    // HRY-VP80
    if (Player.Shield.Accessory == SHIELD_ACC_HRYVP80)
    {
        Player.Shield.Capacity /= 2;
        Player.Shield.DelayRate /= 2;
    };
    
    // DEF-2
    if (Player.Shield.Accessory == SHIELD_ACC_DEF2)
    {
        Player.Shield.Capacity *= 2;
        Player.Shield.DelayRate *= 2;
    };
    
    // B1-ZUT3
    if (Player.Shield.Accessory == SHIELD_ACC_B1ZUT3)
    {
        Player.Shield.ChargeRate *= 2;
        Player.Shield.Capacity /= 2;
    };
    
    // REK-T50
    if (Player.Shield.Accessory == SHIELD_ACC_REKT50 && Player.Shield.Active)
        Player.DamageFactor *= 2;
    
    // CU-256
    if (Player.Shield.Accessory == SHIELD_ACC_CU256 && Player.Shield.Active)
        if (Player.Shield.Charge >= Player.Shield.Capacity)
        {
            SetInventory("DRPGShieldLightAmp", 1);
            UseInventory("DRPGShieldLightAmp");
            Player.Shield.LightAmp = true;
        };
    if ((!Player.Shield.Active || Player.Shield.Accessory != SHIELD_ACC_CU256 || Player.Shield.Charge < Player.Shield.Capacity) && Player.Shield.LightAmp)
    {
        TakeInventory("PowerLightAmp", 1);
        Player.Shield.LightAmp = false;
    };
    
    // WRP30-LITE
    if (Player.Shield.Accessory == SHIELD_ACC_WRP30LITE && Player.Shield.Active)
        if (Player.Shield.Charge >= Player.Shield.Capacity)
        {
            SetInventory("DRPGShieldInvisibility", 1);
            UseInventory("DRPGShieldInvisibility");
            Player.Shield.Invisibility = true;
        };
    if ((!Player.Shield.Active || Player.Shield.Accessory != SHIELD_ACC_WRP30LITE || Player.Shield.Charge < Player.Shield.Capacity) && Player.Shield.Invisibility)
    {
        TakeInventory("PowerInvisibility", 1);
        Player.Shield.Invisibility = false;
    };
    
    // LZ-Y200
    if (Player.Shield.Accessory == SHIELD_ACC_LZY200)
        Player.Shield.ChargeRate *= 2;
    
    // BST-700
    if (Player.Shield.Accessory == SHIELD_ACC_BST700 && Player.Shield.Active)
        if (Player.HealthLoss > 0)
            if (Random(1, 4) <= 1)
            {
                fixed Angle = GetActorAngle(0);
                fixed X = GetActorX(0) + Cos(Angle) * 96.0;
                fixed Y = GetActorY(0) + Sin(Angle) * 96.0;
                fixed Z = GetActorZ(0) + 48.0;

                Spawn("DRPGShieldBooster", X, Y, Z, 0, Angle);
            };
    
    // MM-12
    if (Player.Shield.Accessory == SHIELD_ACC_MM12 && Player.Shield.Active)
        Player.Shield.ChargeRate *= (1.0 + ((fixed)Player.Shield.Charge / (fixed)Player.Shield.Capacity) * 3.0);
    
    // MRTE-KRAR
    if (Player.Shield.Accessory == SHIELD_ACC_MRTEKRAR)
    {
        Player.Shield.Capacity /= 2;
        Player.TotalDamage = Player.TotalDamage * 1.5;
    };
    
    // RR-G0
    if (Player.Shield.Accessory == SHIELD_ACC_RRG0)
    {
        Player.Shield.ChargeRate += Timer() / (35 * 60);
        Player.Shield.DelayRate = Player.Shield.DelayRate - ((Timer() / (35 * 60)) * 0.1);
    };
    
    // SP-00k
    if (Player.Shield.Accessory == SHIELD_ACC_SP00K && Player.Shield.Active)
    {
        // 1/8 chance of activating
        if (Player.HealthLoss > 0)
        {
            if (Random(1, 8) == 1)
            {
                GiveInventory("DRPGShieldGhost", 1);
                Player.Shield.Ghost = true;
                Player.Shield.GhostTimer = 35 * 5;
            };
        };
        
        // Remove when time is up
        if (Player.Shield.GhostTimer <= 0)
        {
            GiveInventory("DRPGShieldGhostOff", 1);
            Player.Shield.Ghost = false;
        };
        
        // Decrease the ghost timer
        if (Player.Shield.Ghost)
            Player.Shield.GhostTimer--;
    };
    
    // E1N-T31
    if (Player.Shield.Accessory == SHIELD_ACC_E1NT31 && Player.Shield.Active)
        if (Player.HealthLoss > 0)
        {
            GiveInventory("DRPGShieldTimeFreezer", 1);
            UseInventory("DRPGShieldTimeFreezer");
            Player.Shield.TimeFreezerTimer = 35;
            Player.Shield.TimeFreezer = true;
        };
    
    // E1N-T31 - Remove when timer ends
    if (Player.Shield.TimeFreezerTimer <= 0 && Player.Shield.TimeFreezer)
    {
        TakeInventory("PowerTimeFreezer", 1);
        Player.Shield.TimeFreezer = false;
    };
    
    // E1N-T31 - Decrease Time Freeze timer
    if (Player.Shield.TimeFreezerTimer > 0)
        Player.Shield.TimeFreezerTimer--;
    
    // PATR-0T
    if (Player.Shield.Accessory == SHIELD_ACC_PATR0T)
        Player.Shield.Capacity = Player.Shield.Capacity * (1 + (Player.RankLevel * 0.125));
    
    // RNJSUS-2
    if (Player.Shield.Accessory == SHIELD_ACC_RNJSUS2 && Player.Shield.Active)
    {
        int Luck = 50 - (Player.Luck / 2);
        
        Player.CreditChance += Luck * 0.9;
        Player.HealthChance += Luck * 0.025;
        Player.EPChance += Luck * 0.025;
        Player.ArmorChance += Luck * 0.025;
        Player.PowerupChance += Luck * 0.0125;
        Player.WeaponChance += Luck * 0.0125;
        Player.TokenChance += Luck * 0.01;
        Player.AugChance += Luck * 0.0025;
        Player.ShieldChance += Luck * 0.005;
        Player.StimChance += Luck * 0.0125;
    };
    
    // SCL-AR53
    if (Player.Shield.Accessory == SHIELD_ACC_SCLAR53)
    {
        Player.Shield.Capacity = Player.Shield.Capacity * (1.0 + (Player.Capacity * 0.005)) + 1;
        Player.Shield.ChargeRate += (Player.Energy / 10);
        Player.Shield.DelayRate = Player.Shield.DelayRate - ((fixed)Player.Regeneration / 50.0);
    };
    
    // RF-CT
    if (Player.Shield.Accessory == SHIELD_ACC_RFCT && Player.Shield.Active)
        GiveInventory("DRPGShieldReflection", 1);
};

function void DrawShieldModel(int X, int Y)
{
    // Body
    if (Player.Shield.Capacitor > 0)
        PrintSprite(ShieldData[2][Player.Shield.Capacitor - 1].Icon,    0, X + 0.1, Y + 0.1, 0.05);
    
    // Battery
    if (Player.Shield.Battery > 0)
        PrintSprite(ShieldData[1][Player.Shield.Battery - 1].Icon,      0, X + 0.1, Y + 0.1, 0.05);
    
    // Capacitor
    if (Player.Shield.Body > 0)
        PrintSprite(ShieldData[0][Player.Shield.Body - 1].Icon,         0, X + 0.1, Y + 0.1, 0.05);
    
    // Accessory
    if (Player.Shield.Accessory > 0)
        PrintSprite(ShieldData[3][Player.Shield.Accessory - 1].Icon,    0, X + 0.1, Y + 0.1, 0.05);
};
