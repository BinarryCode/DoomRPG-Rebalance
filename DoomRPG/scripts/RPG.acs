#library "RPG"

#include "zcommon.acs"

#import "Stats.acs"
#import "Skills.acs"
#import "Augs.acs"
#import "Shop.acs"
#import "Menu.acs"
#import "Shield.acs"
#import "Utils.acs"
#import "XP.acs"

#libdefine MAX_NAMES		19

// Flags
global int 1 : FirstRun;
global int 41 : MapsVisited[];

// Version and Timestamp
str Version = "v0.95 Beta";
str TimeStamp = "Tuesday, January 21, 2014 at 1:16:28 PM";

// Status Effects
int StatusType;
int StatusTimer;
global int 7 : StatusTimerHUD;

// Misc
int PlayerTID = 31337;
int MapNumber;
int ParBonus;

// Init Script
script "Init" enter
{
	if (!FirstRun)
	{
		EP = 100;
		RankString = Ranks[0];
		Vitality = 10;
		Energy = 10;
		Capacity = 10;
		ComboTimer = -100;
		
		ShieldTimer = 175;
		ShieldBody = 1;
		ShieldBattery = 1;
		ShieldCapacitor = 1;
		ShieldAccessory = 0;
		
		int Tokens = 5;
		GiveInventory("StatToken", Tokens);
		GiveInventory("SkillToken", Tokens);
		DefaultLoadout();
		
		// Starting Credits
		int StartCredits;
		switch (GameSkill())
		{
			case 1: StartCredits = 1000; 	break;
			case 2: StartCredits = 500; 	break;
			case 3: StartCredits = 250; 	break;
			case 4: StartCredits = 100; 	break;
			case 5: StartCredits = 0; 		break;
		}
		GiveInventory("Credits", StartCredits);
		
		// Version Info
		Log(s:"\cnDoom RPG ", s:Version, s:" (", s:TimeStamp, s:") ", s:"loaded!");
		
		// Set the default skill indices
		for (int i = 0; i < 5; i++)
		{
			SkillCatagory[i] = -1;
			SkillIndex[i] = -1;
		}
		
		// Done first run
		FirstRun = true;
	}
	
	// Setup the XP/Rank tables
	SetupTables();
	
	// Execute Game Loops
	ACS_NamedExecuteAlways("Loop", 0);
	ACS_NamedExecuteAlways("Speed", 0);
	ACS_NamedExecuteAlways("StatRandomizer", 0);
	ACS_NamedExecuteAlways("DamageNumbers", 0);
	ACS_NamedExecuteAlways("DamageNumbersHUD", 0);
	ACS_NamedExecuteAlways("HealthBars", 0);
	
	// Remove Aura if the keep Aura CVAR is off
	if (!GetCVAR("drpg_skill_keepauras"))
	{
		Aura = 0;
		AuraTimer = 0;
		AuraTimerHUD = 0;
	}
	
	// Transport from/to Outpost Screen Fading
	if (Transported)
	{
		FadeRange(255, 255, 255, 1.0, 255, 255, 255, 0.0, 1.0);
		Transported = false;
	}
	
	// Store the current map number
	MapNumber = GetLevelInfo(LEVELINFO_LEVELNUM);
	if (MapNumber > 30)
		MapNumber = 30;
	
	// IF you have the Nova Shield Accessory and move to a new level, make sure to check the Nova flag
	if (CheckInventory("Shield") && ShieldAccessory == 5)
		Nova = false;
	
	// Flag this level as visited for the transporter
	if (!MapsVisited[GetLevelInfo(LEVELINFO_LEVELNUM)])
		MapsVisited[GetLevelInfo(LEVELINFO_LEVELNUM)] = true;
	
	// Reset the menus if they were open in the last level
	InMenu = false;
	InShop = false;
}

// Nonster Init Script
script "MonsterInit" (int Boss)
{
	// Start Damage Numbers Script
	ACS_NamedExecuteAlways("DamageNumbers", 0);
	
	// Start Monster Loop Script
	ACS_NamedExecuteAlways("MonsterLoop", 0);
	
	// Give it a Health Bar
	SetInventory("HealthBar", 1);
	
	// Monster Level System
	if (GetCVAR("drpg_monster_levels"))
	{
		int MonsterLevel;
		int MonsterCurve;
		int MonsterAura;
		int MonsterStrength;
		int MonsterDefense;
		int MonsterRegen;
		int AuraRandomizer;
		
		// level
		MonsterCurve = GetCVAR("drpg_monster_curve");
		MonsterLevel = Level + Random(-(GameSkill() * 2), GameSkill() * 2) + Random(0, MonsterCurve);
		if (MonsterLevel <= 0) MonsterLevel = 1;
		
		// Is this monster flagged as a boss?
		if (Boss) SetInventory("MonsterBoss", 1);
		
		// Strength
		MonsterStrength = Random(MonsterLevel - (GameSkill() * 2), MonsterLevel + (GameSkill() * 2));
		
		// Defense
		MonsterDefense = Random(MonsterLevel - (GameSkill() * 2), MonsterLevel + (GameSkill() * 2));
	}
	
	// Apply Aura
	if (!GetActorProperty(0, APROP_FRIENDLY) && GetActorClass(0) != "LostSoul")
	{
		AuraRandomizer = Random(-100 + ((GameSkill() * (GameSkill() * 2))), 10);
		if (AuraRandomizer > 0)
			MonsterAura = AuraRandomizer;
	}
	
	// If the monster has an Aura, double it's initial health
	if (AuraRandomizer > 0)
		SetActorProperty(0, APROP_HEALTH, GetActorProperty(0, APROP_SPAWNHEALTH) * 2);
	
	// Apply the aura effects
	switch (MonsterAura)
	{
		case 1: // Red Aura - Strength
			MonsterStrength *= 2;
			break;
		case 2: // Green Aura - Defense
			MonsterDefense *= 2;
			break;
		case 3: // White Aura - XP
			MonsterLevel *= 2;
			break;
		case 4: // Orange Aura - Agility
			SetActorProperty(0, APROP_SPEED, GetActorProperty(0, APROP_SPEED) * 2);
			break;
		case 5: // Pink Aura - Vitality
			SetActorProperty(0, APROP_HEALTH, GetActorProperty(0, APROP_SPAWNHEALTH) * 2);
			break;
		case 10: // Black Aura - Miniboss
			MonsterStrength *= 2;
			MonsterDefense *= 2;
			MonsterLevel *= 2;
			SetActorProperty(0, APROP_SPEED, GetActorProperty(0, APROP_SPEED) * 2);
			SetActorProperty(0, APROP_HEALTH, GetActorProperty(0, APROP_SPAWNHEALTH) * 4);
			break;
	}
	
	// Apply the stats to the monster
	SetInventory("MonsterLevel", MonsterLevel);
	SetInventory("MonsterAura", MonsterAura);
	SetInventory("MonsterStrength", MonsterStrength);
	SetInventory("MonsterDefense", MonsterDefense);
	SetActorProperty(0, APROP_DAMAGEFACTOR, 1.0 - FixedMul(0.075, FixedDiv(MonsterDefense, 100)));
	if (GetActorProperty(0, APROP_DAMAGEFACTOR) <= 0) SetActorProperty(0, APROP_DAMAGEFACTOR, 0.025);
}

// Monster Loop
script "MonsterLoop" (void)
{
	int X = GetActorX(0);
	int Y = GetActorY(0);
	int Z = GetActorZ(0);
	int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterBoss = CheckInventory("MonsterBoss");
	int MonsterStrength = CheckInventory("MonsterStrength");
	int AuraType = CheckInventory("MonsterAura");
	int RegenAmount;
	
	// Death
	if (GetActorProperty(0, APROP_HEALTH) <= 0)
	{
		int XPAmount = Random(GetActorProperty(0, APROP_SPAWNHEALTH), GetActorProperty(0, APROP_SPAWNHEALTH) * 2);
		int SkillDropMod = (GameSkill() - 1) * 32;
		int LuckDrops = 1;
		XPAmount *= 1 + (MonsterLevel / 100);
		
		// Aura Drops
		switch (AuraType)
		{
			case 1: // Red Aura - Strength
				DropItem(0, "RuneDropper", 1, 255 - SkillDropMod);
				break;
			case 2: // Green Aura - Defense
				DropItem(0, "UsedArmorDropper", 1, 255 - SkillDropMod);
				break;
			case 3: // White Aura - XP
				DropItem(0, "SmallTokenDropper", 1, 255 - SkillDropMod);
				XPAmount *= 2;
				break;
			case 4: // Orange Aura - Agility
				DropItem(0, "HasteRune", 1, 255 - SkillDropMod);
				DropItem(0, "HighJumpRune", 1, 255 - SkillDropMod);
				DropItem(0, "TimeSphere", 1, 255 - SkillDropMod);
				break;
			case 5: // Pink Aura - Vitality
				DropItem(0, "HealthDropper", 1, 255 - SkillDropMod);
				break;
			case 6: // Blue Aura - Energy
				DropItem(0, "EPCapsule", 1, 255 - SkillDropMod);
				DropItem(0, "BigEPCapsule", 1, 255 - SkillDropMod);
				break;
			case 7: // Purple Aura - Regeneration
				DropItem(0, "RegenSphere", 1, 255 - SkillDropMod);
				break;
			case 8: // Dark Blue Aura - Capacity
				DropItem(0, "BackpackRandomizer", 1, 255 - SkillDropMod);
				break;
			case 9: // Yellow Aura - Luck
				LuckDrops = 4;
				break;
			case 10: // Black Aura - Miniboss
				DropItem(0, "RuneDropper", 1, 255 - SkillDropMod);
				DropItem(0, "UsedArmorDropper", 1, 255 - SkillDropMod);
				DropItem(0, "SmallTokenDropper", 1, 255 - SkillDropMod);
				DropItem(0, "HasteRune", 1, 255 - SkillDropMod);
				DropItem(0, "HighJumpRune", 1, 255 - SkillDropMod);
				DropItem(0, "TimeSphere", 1, 255 - SkillDropMod);
				DropItem(0, "HealthDropper", 1, 255 - SkillDropMod);
				DropItem(0, "EPCapsule", 1, 255 - SkillDropMod);
				DropItem(0, "BigEPCapsule", 1, 255 - SkillDropMod);
				DropItem(0, "RegenSphere", 1, 255 - SkillDropMod);
				DropItem(0, "BackpackRandomizer", 1, 255 - SkillDropMod);
				LuckDrops = 4;
				XPAmount *= 4;
				break;
		}
		
		// Credit Drops
		if (Random(1, 100) <= 10 + (FixedMul(Luck, 0.9)))
			DropItem(0, "MoneyDropper", 1, 255);
		
		// Luck-based Drops
		for (int i = 0; i < LuckDrops; i++)
		{
			if (Random(1, 100) < HealthChance)	DropItem(0, "HealthDropper", 1, 255);
			if (Random(1, 100) < EPChance)		DropItem(0, "EPCapsule", 1, 255);
			if (Random(1, 100) < ArmorChance)	DropItem(0, "ArmorDropper", 1, 255);
			if (Random(1, 100) < PowerupChance)	DropItem(0, "PowerupDropper", 1, 255);
			if (Random(1, 100) < RuneChance)	DropItem(0, "RuneDropper", 1, 255);
			if (Random(1, 100) < TokenChance)	DropItem(0, "SmallTokenDropper", 1, 255);
			if (Random(1, 100) < AugChance)		DropItem(0, "AccessoryDropper", 1, 255);
			if (Random(1, 100) < ShieldChance)	DropItem(0, "ShieldDropper", 1, 255);
		}
		
		// Boss phat lewt drops
		if (MonsterBoss)
		{
			DropItem(0, "Credits1000", 1, 255);
			DropItem(0, "SoulsphereRandomizer", 1, 255);
			DropItem(0, "Continue", 1, 255 - SkillDropMod);
			DropItem(0, "TokenDropper", 1, 255 - SkillDropMod);
			DropItem(0, "RuneDropper", 1, 255 - SkillDropMod);
			DropItem(0, "AugDropper", 1, 255 - SkillDropMod);
			DropItem(0, "ShieldDropper", 1, 255 - SkillDropMod);
		}
		
		// Add XP
		if (!GetActorProperty(0, APROP_FRIENDLY))
			AddXP(XPAmount);
			
		// Add a kill to the pay kills
		PayKills++;

		terminate;
	}
	
	// Friendly Monster Aura
	if (GetActorProperty(0, APROP_FRIENDLY))
		SpawnForced("FriendlyAura", X, Y, Z + 32, 0, 0);
	
	// Aura Loop Effects
	switch (AuraType)
	{
		case 1: // Red Aura - Strength
			SpawnForced("RedAura", X, Y, Z + 32, 0, 0);
			break;
		case 2: // Green Aura - Defense
			SpawnForced("GreenAura", X, Y, Z + 32, 0, 0);
			break;
		case 3: // White Aura - XP
			SpawnForced("WhiteAura", X, Y, Z + 32, 0, 0);
			break;
		case 4: // Orange Aura - Agility
			SpawnForced("OrangeAura", X, Y, Z + 32, 0, 0);
			break;
		case 5: // Pink Aura - Vitality
			SpawnForced("PinkAura", X, Y, Z + 32, 0, 0);
			break;
		case 6: // Blue Aura - Energy
			SpawnForced("CyanAura", X, Y, Z + 32, 0, 0);
			break;
		case 7: // Purple Aura - Regeneration
			SpawnForced("PurpleAura", X, Y, Z + 32, 0, 0);
			RegenAmount = FixedMul(0.05, GetActorProperty(0, APROP_SPAWNHEALTH));
			if (RegenAmount == 0) RegenAmount = 1;
			if (GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH) && (Timer() % 35) == 1)
				HealThing(RegenAmount);
			break;
		case 8: // Dark Blue Aura - Capacity
			SpawnForced("BlueAura", X, Y, Z + 32, 0, 0);
			break;
		case 9: // Yellow Aura - Luck
			SpawnForced("YellowAura", X, Y, Z + 32, 0, 0);
			break;
		case 10: // Black Aura - Miniboss
			SpawnForced("BlackAura", X, Y, Z + 32, 0, 0);
			SetActorProperty(0, APROP_RENDERSTYLE, STYLE_FUZZY);
			RegenAmount = FixedMul(0.05, GetActorProperty(0, APROP_SPAWNHEALTH));
			if (RegenAmount == 0) RegenAmount = 1;
			if (GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH) && (Timer() % 35) == 1)
				HealThing(RegenAmount);
			break;
	}
	
	// Strength
	if (MonsterStrength >= 32000)
		SetInventory("Strength32000", 1);
	else if (MonsterStrength > 0)
		SetInventory(StrParam(s:"Strength", d:MonsterStrength), 1);
	
	Delay(1);
	restart;
}

// Loop Script
script "Loop" (void)
{
	// Update Functions
	CheckStats();
	CheckStatCaps();
	CheckLuck();
	CheckHealth();
	CheckArmorMax();
	CheckCombo();
	CheckLevel();
	CheckRank();
	CheckLevelInfo();
	CheckAugSlots();
	CheckAugs();
	CheckSkills();
	CheckSkillDescriptions();
	CheckBurnout();
	CheckShields();
	CheckShieldAccessory();
	CheckStatBounds();
	
	// Main Menu
	if (InMenu)
		MenuLoop();

	// Shop Menu
	if (InShop)
		ShopLoop();
		
	// Always Quick Heal if CVAR is set
	if (GetCVAR("drpg_auto_heal"))
		ACS_NamedExecuteAlways("QuickHeal", 0);

	// Shield Handling
	BeforeHealth = GetActorProperty(0, APROP_HEALTH);
	if (CheckInventory("Shield"))
		ACS_NamedExecuteAlways("Shield", 0);

	// Regeneration
	if (GetActorProperty(0, APROP_HEALTH) > 0)
		DoRegen();

	// Give the Strength boosting item
	if (Damage > 0 && Damage <= 16000)
		GiveInventory(StrParam(s:"Strength", d:Level + Damage), 1);

	// Apply Stats
	SetActorProperty(0, APROP_SPAWNHEALTH, HealthMax);
	SetActorProperty(0, APROP_DAMAGEFACTOR, DamageFactor);
	SetActorProperty(0, APROP_SPEED, Speed);
	SetActorProperty(0, APROP_JUMPZ, JumpHeight);

	// For EP Bar on HUD
	TakeInventory("EP", 100);
	GiveInventory("EP", FixedMul(FixedDiv(EP, EPMax), 100));
	
	// Clear your Status Effect if the timer is empty
	if (StatusTimer <= 0)
		StatusType = 0;
	
	// HUD Status Effect Timer
	if (StatusType > 0)
		StatusTimerHUD = StatusTimer / 35 + 1;
	else
		StatusTimerHUD = 0;
	
	// Make you invincible while in the Menus and if menu freezing is enabled
	if ((InMenu || InShop) && GetCVAR("drpg_menufreeze"))
		SetActorProperty(0, APROP_DAMAGEFACTOR, 0);
	
	// Loop
	Delay(1);
	
	// These need to be done in a separate tic
	AfterHealth = GetActorProperty(0, APROP_HEALTH);
	AfterArmor = CheckInventory("BasicArmor");
	
	restart;
}

// Handles Weapon Firing Speed
script "Speed" (void)
{
	int Time;
	
	if (Agility <= 100)
		Time = Abs(Round(WeaponSpeed * 0.35 - 35.0));
	else
		Time = 0;
	
	if (GetCVAR("drpg_stat_weaponspeed"))
		GiveInventory("Speed", 1);
	
	Delay(Time + 1);
	restart;
}

// Stat Token Randomizer Script
script "StatRandomizer" (void)
{
	Delay(1);

	// Only randomize your starting tokens
	if (GetCVAR("drpg_randomstatgrowth") == 1 && !RandomizedStartTokens)
	{
		if (StatTokens > 0)
			IncreaseStat(Random(1, 8));
		else if (StatTokens == 0)
			RandomizedStartTokens = true;
	}
	// Always spend Tokens, no matter how you got them
	else if (GetCVAR("drpg_randomstatgrowth") == 2)
		if (StatTokens > 0)
			IncreaseStat(Random(1, 8));

	// Spend Tokens only on level up
	if (GetCVAR("drpg_autospend"))
		while (LevelTokens > 0)
		{
			IncreaseStat(Random(1, 8));
			Delay(1);
		}
	
	restart;
}

// Handles Status Effects
script "StatusEffect" (int Type, int Time, int Intensity)
{
	StatusType = Type;
	StatusTimer = Time * 35;
	
	if (Intensity == 0)
		Intensity = 1;
	
	while (StatusTimer > 0)
	{
		if (Type == 1) // Confusion
		{
			SetActorAngle(0, GetActorAngle(0) + FixedMul(1024, cos(Timer() * (Intensity * 0.01))));
			SetActorPitch(0, FixedMul(1024 * 8, cos(Timer() * (Intensity * 0.01))));
		}
		
		if (Type == 2) // Blind
			FadeRange(0, 0, 0, (0.75 + FixedDiv(Intensity, 400)) - (FixedMul(1024 * 8, sin(Timer() * 0.01))), 0, 0, 0, 0.0, 0.5);
		
		if (Type == 3) // Poisoned
			if ((Timer() % 35) == 1 && (GetActorProperty(0, APROP_HEALTH) - Intensity) > 1)
			{
				DamageThing(Intensity);
				FadeRange(0, 255, 0, 0.25, 0, 255, 0, 0.0, (0.25 + FixedDiv(Intensity, 100)));
			}
		
		if (StatusTimer > 0)
			StatusTimer--;
		
		Delay(1);
	}
}

// Handles EP Draining from the EP Drain Orb
script "EPDrain" (int X, int Y, int Z)
{
	// TODO
}

// Quick Heal
script "QuickHeal" (int Quick)
{
	// If you're dead, terminate
	if (GetActorProperty(0, APROP_HEALTH) <= 0) terminate;
	
	int Health = GetActorProperty(0, APROP_HEALTH);
	int Percent = GetCVAR("drpg_auto_heal_percent");
	
	if ((Health < HealthMax / Percent) || Quick)
			 if (CheckInventory("StimPack")) 		UseInventory("StimPack");
		else if (CheckInventory("SmallMedikit")) 	UseInventory("SmallMedikit");
		else if (CheckInventory("Medikit")) 		UseInventory("Medikit");
		else if (CheckInventory("LargeMedikit")) 	UseInventory("LargeMedikit");
		else if (CheckInventory("XLMedikit")) 		UseInventory("XLMedikit");
		else if (CheckInventory("MedPack")) 		UseInventory("MedPack");
		else if (CheckInventory("SuperMedPack")) 	UseInventory("SuperMedPack");
		else if (CheckInventory("SurgeryKit")) 		UseInventory("SurgeryKit");
}

// Quick Armor
script "QuickArmor" (void)
{
		 if (CheckInventory("WhiteArmor")) 		UseInventory("WhiteArmor");
	else if (CheckInventory("WhiteArmorUsed")) 	UseInventory("WhiteArmorUsed");
	else if (CheckInventory("RedArmor")) 		UseInventory("RedArmor");
	else if (CheckInventory("RedArmorUsed")) 	UseInventory("RedArmorUsed");
	else if (CheckInventory("YellowArmor")) 	UseInventory("YellowArmor");
	else if (CheckInventory("YellowArmorUsed")) UseInventory("YellowArmorUsed");
	else if (CheckInventory("BlueArmor")) 		UseInventory("BlueArmor");
	else if (CheckInventory("BlueArmorUsed")) 	UseInventory("BlueArmorUsed");
	else if (CheckInventory("GreenArmor")) 		UseInventory("GreenArmor");
	else if (CheckInventory("GreenArmorUsed")) 	UseInventory("GreenArmorUsed");
}

// Buy Ammo for selected Weapon
script "QuickAmmo" (void)
{
	// Weapon, Ammo Type and Amount
	int Weapon;
	int AmmoType;
	int Amount;
	
	// Get the current Weapon to determine the ammo type
	if 		(CheckWeapon("Pistol") || CheckWeapon("ChainGun")) 		{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shotgun") || CheckWeapon("SuperShotgun")) { AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("RocketLauncher"))							{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("PlasmaRifle") || CheckWeapon("BFG9000"))	{ AmmoType = 6; Amount = 20; }
	
	// ... And the alternate Extras versions too -_-
	else if (CheckWeapon("Pistol1") || CheckWeapon("ChainGun1")) 	{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shotgun1") || CheckWeapon("SSG")) 		{ AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("RocketLauncher1"))						{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("PlasmaGun") || CheckWeapon("BFG9001"))	{ AmmoType = 6; Amount = 20; }
	
	// AND Brutal Doom -__-
	else if (CheckWeapon("BrutalPistol") || CheckWeapon("Rifle") || CheckWeapon("Mini_Gun")) 									{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shot_Gun") || CheckWeapon("SSG")) 																	{ AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("Rocket_Launcher") || CheckWeapon("Grenade_Launcher"))													{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("Plasma_Gun") || CheckWeapon("Rail_Gun") || CheckWeapon("BIG_FUCKING_GUN") || CheckWeapon("BFG10000"))	{ AmmoType = 6; Amount = 20; }
	else
	{
		ActivatorSound("menu/error", 127);
		terminate;
	}
	
	// Discount and Cost
	int Discount = FixedMul(RankLevel, 2.1);
	int Cost = ShopCosts[1][AmmoType] - ShopCosts[1][AmmoType] * Discount / 100;

	// Give ammo and take Credits
	if (CheckInventory("Credits") >= Cost && CheckInventory(Shop[1][AmmoType][0]) < GetAmmoCapacity(Shop[1][AmmoType][0]))
	{
		ActivatorSound("credits/payout", 127);
		TakeInventory("Credits", Cost);
		GiveInventory(Shop[1][AmmoType][0], Amount);
	}
	else
		ActivatorSound("menu/error", 127);
}

// Death Script
script "Death" death
{
	// Taunt the Player
	if (GetCVAR("drpg_ext_brutal"))
		ActivatorSound("Taunt", 127);
	
	while (1)
	{
		// Wipe out your entire inventory
		ClearInventory();
		
		// Kill all the player's summons
		for (int i = SummonID; i <= SummonID + MaxSummons; i++)
			Thing_Damage(i, 1000000);
		
		// Reset a metric fuckton of variables to make death look cleaner
		InMenu = false;
		InShop = false;
		Menu = 0;
		MenuIndex = 0;
		SkillPage = 0;
		ShieldPage = 0;
		ShopIndex = 0;
		ShopPage = 0;
		Strength = 0;
		Defense = 0;
		Vitality = 0;
		Energy = 0;
		Regeneration = 0;
		Agility = 0;
		Capacity = 0;
		Luck = 0;
		Level = 0;
		XP = 0;
		RankLevel = 0;
		Rank = 0;
		EP = 0;
		Combo = 0;
		ComboTimer = -100;
		TotalGained = 0;
		XPGained = 0;
		RankGained = 0;
		Aura = 0;
		AuraTimer = 0;
		AuraTimerHUD = 0;
		PayTimer = 0;
		Shield = 0;
		ShieldBody = 0;
		ShieldBattery = 0;
		ShieldCapacitor = 0;
		ShieldAccessory = 0;
		StatusType = 0;
		StatusTimer = 0;
		StatusTimerHUD = 0;
		
		Delay(1);
	}
}

// Handles Damage Numbers
script "DamageNumbers" (void)
{
	// Damage Number Translations
	CreateTranslation(1, 81 : 111 = 176 : 176);	// Overkill
	CreateTranslation(2, 81 : 111 = 112 : 112);	// Healed
	CreateTranslation(3, 81 : 111 = 100 : 100);	// Scratch

	while (GetActorProperty(0, APROP_HEALTH) > 0 && GetCVAR("drpg_damagenumbers"))
	{
		GiveInventory("MonsterHeightCheck", GetActorProperty(0, APROP_HEIGHT));
		SetInventory("MonsterCurrentHealth", GetActorProperty(0, APROP_HEALTH));
		SetInventory("MonsterHasTicked", 0);
		
		// Lag handling
		int DelayRate = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) / 100;
		Delay(1 + DelayRate + GetCVAR("drpg_damagenumbers_delay"));
		
		if (GetActorProperty(0, APROP_HEALTH) != CheckInventory("MonsterCurrentHealth"))
			if (CheckInventory("MonsterHasTicked") == 0)
			{
				int NewHealth = CheckInventory("MonsterCurrentHealth") - GetActorProperty(0, APROP_HEALTH);
				
				if (NewHealth > 9999)
					NewHealth = 9999;
				
				if (NewHealth != 0)
				{
					int Digit1 = GetDigit(Abs(NewHealth), 0);
					int Digit2 = GetDigit(Abs(NewHealth), 1);
					int Digit3 = GetDigit(Abs(NewHealth), 2);
					int Digit4 = GetDigit(Abs(NewHealth), 3);
					
					int X = GetActorX(0) + Random(-10.0, 1.0);
					int Y = GetActorY(0) + Random(-10.0, 10.0);
					int Z;
					int ActorHeight = CheckInventory("MonsterHeightCheck");
					int DigitID = Random(4000, 5000);
					bool Healed = (NewHealth < 0);
					
					if (ActorHeight > 0)
						Z = GetActorZ(0) + Random(ActorHeight, ActorHeight + 6);
					else
						Z = GetActorZ(0) + GetActorProperty(0, APROP_HEIGHT) + Random(0.0, 6.0);
					
					switch (Digit1)
					{
						case 0:	Spawn("Digit1Num0", X, Y, Z, DigitID, 0);	break;
						case 1:	Spawn("Digit1Num1", X, Y, Z, DigitID, 0);	break;
						case 2:	Spawn("Digit1Num2", X, Y, Z, DigitID, 0);	break;
						case 3:	Spawn("Digit1Num3", X, Y, Z, DigitID, 0);	break;
						case 4:	Spawn("Digit1Num4", X, Y, Z, DigitID, 0);	break;
						case 5:	Spawn("Digit1Num5", X, Y, Z, DigitID, 0);	break;
						case 6:	Spawn("Digit1Num6", X, Y, Z, DigitID, 0);	break;
						case 7:	Spawn("Digit1Num7", X, Y, Z, DigitID, 0);	break;
						case 8:	Spawn("Digit1Num8", X, Y, Z, DigitID, 0);	break;
						case 9:	Spawn("Digit1Num9", X, Y, Z, DigitID, 0);	break;
					}
					
					if (NewHealth >= 10 || NewHealth <= -10)
						switch (Digit2)
						{
							case 0:	Spawn("Digit2Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit2Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit2Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit2Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit2Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit2Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit2Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit2Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit2Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit2Num9", X, Y, Z, DigitID, 0);	break;
						}
					
					if (NewHealth >= 100 || NewHealth <= -100)
						switch (Digit3)
						{
							case 0:	Spawn("Digit3Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit3Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit3Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit3Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit3Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit3Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit3Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit3Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit3Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit3Num9", X, Y, Z, DigitID, 0);	break;
						}
					
					if (NewHealth >= 1000 || NewHealth <= -1000)
						switch (Digit4)
						{
							case 0:	Spawn("Digit4Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit4Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit4Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit4Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit4Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit4Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit4Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit4Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit4Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit4Num9", X, Y, Z, DigitID, 0);	break;
						}
					
					// Overkill
					if (NewHealth >= GetActorProperty(0, APROP_SPAWNHEALTH))
						Thing_SetTranslation(DigitID, 1);

					// Healed
					if (Healed)
						Thing_SetTranslation(DigitID, 2);

					// Scratch
					if (NewHealth == 1)
						Thing_SetTranslation(DigitID, 3);
					
					SetActorVelocity(DigitID, 0, Random(-1.0, 1.0), 0.5, 0, 0);
					SetInventory("MonsterHasTicked", 1);
				}
			}
			
		if (!GetCVAR("drpg_damagenumbers")) terminate;
	}
}

// Psuedo Damage Numbers on the HUD
script "DamageNumbersHUD" (void)
{
	int Before = GetActorProperty(0, APROP_HEALTH);
	Delay(1);

	if (GetCVAR("drpg_damagenumbers_hud"))
	{
		int Color = GetCVAR("drpg_damagenumbers_hud_color");
		int After = GetActorProperty(0, APROP_HEALTH);
		int Loss = Before - After;
		
		if (Loss == 1)
			SetFont("SMALLFONT");
		else
			SetFont("BIGFONT");
		
		if (Before > After)
			HudMessage(d:Loss; HUDMSG_FADEOUT, 0, Color, 0.4 + Random(0.0, 0.4), 0.6 + Random(0.0, 0.3), 0.5 + FixedDiv(HealthLoss, 100), 1.0);
	}

	restart;
}

// Handles HUD Health Bars
script "HealthBars" (void)
{
	while (GetCVAR("drpg_healthbars"))
	{
		Thing_ChangeTID(0, PlayerTID);
		int Activator = ActivatorTID();
		SetActivatorToTarget(PlayerTID);
		
		Delay(1);
		
		int X = GetCVAR("drpg_healthbars_x");
		int Y = GetCVAR("drpg_healthbars_y");
		str Name = "";
		bool HasHealthBar = (CheckInventory("HealthBar") > 0);
		int CurrentLevel = CheckInventory("MonsterLevel");
		int CurrentAura = CheckInventory("MonsterAura");
		int CurrentStrength = CheckInventory("MonsterStrength");
		int CurrentDefense = CheckInventory("MonsterDefense");
		int CurrentRegen = CheckInventory("MonsterRegeneration");
		int CurrentHealth = GetActorProperty(0, APROP_HEALTH);
		int MaxHealth = GetActorProperty(0, APROP_SPAWNHEALTH);
		bool Friendly = GetActorProperty(0, APROP_FRIENDLY);
		int HealthPercent;
		str FillType;
		str AuraType;
		int i;
		
		if (ActivatorTID() != Activator && GetActorProperty(PlayerTID, APROP_HEALTH) > 0)
		{
			SetActivator(Activator);
			SetActivatorToTarget(PlayerTID);
			SetActivator(Activator);
			
			if (HasHealthBar && CurrentHealth > 0 && (!InMenu && !InShop))
			{
				// Divide-by-zero check
				if (MaxHealth > 0)
					HealthPercent = (CurrentHealth * 100) / MaxHealth;
				
				if (HealthPercent > 100)
					FillType = "Fill5";
				if (HealthPercent >= 75 && HealthPercent <= 100)
					FillType = "Fill1";
				if (HealthPercent >= 50 && HealthPercent <= 74)
					FillType = "Fill2";
				if (HealthPercent >= 25 && HealthPercent <= 49)
					FillType = "Fill3";
				if (HealthPercent <= 24)
					FillType = "Fill4";
				
				SetHUDSize(800, 600, false);
				
				if (Friendly)
					if (GetCVAR("screenblocks") == 10)
						PrintSprite("HPBarSS", 4000, X, Y, 0.05);
					else
					PrintSprite("HPBar2", 4000, X, Y, 0.05);
				else
					if (GetCVAR("screenblocks") == 10)
						PrintSprite("HPBarSS", 4000, X, Y, 0.05);
					else
						PrintSprite("HPBar", 4000, X, Y, 0.05);
				
				SetFont("SMALLFONT");
				HudMessage(d:CurrentHealth, s:"/", d:MaxHealth; HUDMSG_PLAIN, 4001, CR_GREEN, X, Y, 0.05);
				
				// Stats
				if (GetCVAR("drpg_monster_levels") && CurrentLevel > 0)
				{
					SetFont("BIGFONT");
					
					HudMessage(d:CurrentLevel; HUDMSG_PLAIN, 4003, CR_WHITE, X - 96.1, Y + 21.0, 0.05);
					HudMessage(d:CurrentStrength; HUDMSG_PLAIN, 4004, CR_RED, X - 2.1, Y + 21.0, 0.05);
					HudMessage(d:CurrentDefense; HUDMSG_PLAIN, 4005, CR_GREEN, X + 54.1, Y + 21.0, 0.05);
					
					// Stat Icons
					PrintSprite("MonLevel", 0, X - 107.0, Y + 20.0, 0.05);
					PrintSprite("MonSTR", 0, X - 13.0, Y + 21.0, 0.05);
					PrintSprite("MonDEF", 0, X + 42.0, Y + 21.0, 0.05);
					// PrintSprite("MonREG", 0, X + 84.0, Y + 20.0, 0.05);
				}
				
				// Aura
				switch (CurrentAura)
				{
					case 1: 	AuraType = "AuraRed";	break;
					case 2: 	AuraType = "AuraGree";	break;
					case 3: 	AuraType = "AuraWhit";	break;
					case 4: 	AuraType = "AuraOran";	break;
					case 5: 	AuraType = "AuraPink";	break;
					case 6: 	AuraType = "AuraCyan";	break;
					case 7: 	AuraType = "AuraPurp";	break;
					case 8: 	AuraType = "AuraBlue";	break;
					case 9:		AuraType = "AuraYell";	break;
					case 10: 	AuraType = "AuraBlac";	break;
				}
				if (CurrentAura > 0)
					PrintSprite(AuraType, 0, X - 136.0, Y + 30.0, 0.05);
				
				// Prevent bar overflow
				if (HealthPercent > 100)
					HealthPercent = 100;
				
				if (GetCVAR("screenblocks") == 10)
					for (i = 0; i <= FixedMul(HealthPercent, 1.165); i++)
						PrintSprite(FillType, 4100 + i, (X - 120.0) + (i * 2.0), Y, 0.05);
				else
					for (i = 0; i <= HealthPercent; i++)
						PrintSprite(FillType, 4100 + i, (X - 97.0) + (i * 2.0), Y, 0.05);
			}
		}
	}
	
	Delay(1);
	restart;
}

// Level exit script
// Can't use NamedExecute in xlat, lame
script 30000 (int Secret)
{
	int ParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
	
	// If there's no par time, or you somehow already activated this script, terminate
	if (ParTime <= 0 || ParBonus) terminate;
	
	// Check par time and give bonus if you beat it
	if ((Timer() / 35) <= ParTime)
	{
		int RankBonus = Random(10000 * RankLevel, 10000 * RankLevel * MapNumber);
		if (RankLevel == 0) RankBonus = 10000;
		
		FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0.0, 1.0);
		ActivatorSound("misc/secret", 127);
		
		Rank += RankBonus;
		
		HudMessage(s:"Par Time Beaten!\n",
				   d:RankBonus, s:" Rank Bonus";
				   HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.5, 3.0, 2.0);
		
		ParBonus = true;
		Delay(35 * 5);
	}
	
	// Now exit the level
	if (Secret)
		Exit_Secret(0);
	else
		Exit_Normal(0);
}

function void DefaultLoadout(void)
{
	// Give Standard Shield Components
	GiveInventory("ShieldBody1", 1);
	GiveInventory("ShieldBattery1", 1);
	GiveInventory("ShieldCapacitor1", 1);
	
	// Extras Compatibility
	if (GetCVAR("drpg_ext_extras"))
		SetWeapon("Pistol1");
	
	// Brutal Doom Compatibility
	if (GetCVAR("drpg_ext_brutal"))
	{
		GiveInventory("Melee_Attacks", 1);
		GiveInventory("BrutalPistol", 1);
	}

	// DoomRL Compatibility
	if (GetCVAR("drpg_ext_doomrl"))
		SetWeapon("RLPistol");
}
