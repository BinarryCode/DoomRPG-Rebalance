#library "RPG"

#include "zcommon.acs"

#import "Stats.acs"
#import "Skills.acs"
#import "Augs.acs"
#import "Shop.acs"
#import "Menu.acs"
#import "Shield.acs"
#import "Utils.acs"
#import "XP.acs"

// Flags
global int 1 : FirstRun;

str Version = "v0.93 Beta";
str TimeStamp = "Friday, January 10, 2014 at 4:34:55 AM";

int MapNumber;
int MapTime;
int ParBonus;

// Init Script
script "Init" enter
{
	if (!FirstRun)
	{
		EP = 100;
		RankString = Ranks[0];
		Vitality = 10;
		Energy = 10;
		Capacity = 10;
		ComboTimer = -100;
		
		ShieldTimer = 175;
		ShieldBody = 1;
		ShieldBattery = 1;
		ShieldCapacitor = 1;
		ShieldAccessory = 0;
		
		int Tokens = 10 - FixedMul(GameSkill(), 0.75);
		GiveInventory("StatToken", Tokens);
		GiveInventory("SkillToken", Tokens);
		DefaultLoadout();
		
		// Starting Credits
		int StartCredits;
		switch (GameSkill())
		{
			case 1: StartCredits = 1000; 	break;
			case 2: StartCredits = 750; 	break;
			case 3: StartCredits = 500; 	break;
			case 4: StartCredits = 250; 	break;
			case 5: StartCredits = 200; 	break;
			case 6: StartCredits = 100; 	break;
			case 7: StartCredits = 0; 		break;
		}
		GiveInventory("Credits", StartCredits);
		
		// Version Info
		Log(s:"\cnDoom RPG ", s:Version, s:" (", s:TimeStamp, s:") ", s:"loaded!");
		
		// Set the default skill indices
		for (int i = 0; i < 5; i++)
		{
			SkillCatagory[i] = i;
			SkillIndex[i] = 0;
		}
		
		// Done first run
		FirstRun = true;
	}
	
	// Count all the monsters in the map and Setup the XP/Rank tables
	CountMonsters();
	SetupTables();
	
	// Execute Game Loops
	ACS_NamedExecuteAlways("Loop", 0);
	ACS_NamedExecuteAlways("Speed", 0);
	
	// Remove Aura if the keep Aura CVAR is off
	if (!GetCVAR("drpg_skill_keepauras"))
	{
		Aura = 0;
		AuraTimer = 0;
		AuraTimerHUD = 0;
	}
	
	// Transport from/to Outpost Screen Fading
	if (Transported)
	{
		FadeRange(255, 255, 255, 1.0, 255, 255, 255, 0.0, 1.0);
		Transported = false;
	}
	
	// Give the player the fake difficulty Monster Defense enhancing item
	MapNumber = GetLevelInfo(LEVELINFO_LEVELNUM);
	if 		(MapNumber == 999)	MapNumber = 1;
	else if (MapNumber > 30) 	MapNumber = 30;
	if (GetCVAR("drpg_monster_defense"))
		GiveInventory(StrParam(s:"MonsterDefense", d:MapNumber), 1);
	
	// IF you have the Nova Shield Accessory and move to a new level, make sure to check the Nova flag
	if (CheckInventory("Shield") && ShieldAccessory == 5)
		Nova = false;
	
	// Reset the menus if they were open in the last level
	InMenu = false;
	InShop = false;
}

// Loop Script
script "Loop" (void)
{
	// Update Functions
	CheckMonsters();
	CheckStats();
	CheckStatCaps();
	CheckLuck();
	CheckHealth();
	CheckArmorMax();
	CheckCombo();
	CheckLevel();
	CheckRank();
	CheckLevelInfo();
	CheckAugSlots();
	CheckAugs();
	CheckSkills();
	CheckSkillDescriptions();
	CheckBurnout();
	CheckShields();
	CheckShieldAccessory();
	CheckStatBounds();
	
	// Main Menu
	if (InMenu)
		MenuLoop();

	// Shop Menu
	if (InShop)
		ShopLoop();
		
	// Always Quick Heal if CVAR is set
	if (GetCVAR("drpg_auto_heal"))
		ACS_NamedExecuteAlways("QuickHeal", 0);

	// Shield Handling
	BeforeHealth = GetActorProperty(0, APROP_HEALTH);
	if (CheckInventory("Shield"))
		ACS_NamedExecuteAlways("Shield", 0);

	// Regeneration
	if (GetActorProperty(0, APROP_HEALTH) > 0)
		DoRegen();

	// Give the Strength boosting item
	if (Damage > 0 && Damage <= 16000)
		GiveInventory(StrParam(s:"Strength", d:Damage), 1);

	// Apply Stats
	SetActorProperty(0, APROP_SPAWNHEALTH, HealthMax);
	SetActorProperty(0, APROP_DAMAGEFACTOR, DamageFactor);
	SetActorProperty(0, APROP_SPEED, Speed);
	SetActorProperty(0, APROP_JUMPZ, JumpHeight);

	// For EP Bar on HUD
	TakeInventory("EP", 100);
	GiveInventory("EP", FixedMul(FixedDiv(EP, EPMax), 100));
	
	// Increase the monster difficulty depending on the map number if that CVAR is set
	if (GetCVAR("drpg_monster_attack"))
		SetActorProperty(0, APROP_DAMAGEFACTOR, DamageFactor + (MapNumber * 0.03125));
	
	// Make you invincible while in the Menus and if menu freezing is enabled
	if ((InMenu || InShop) && GetCVAR("drpg_menufreeze"))
		SetActorProperty(0, APROP_DAMAGEFACTOR, 0);
	
	// Increase the map timer
	MapTime++;
	
	// Loop
	Delay(1);
	
	// These need to be done in a seperate tic
	AfterHealth = GetActorProperty(0, APROP_HEALTH);
	AfterArmor = CheckInventory("BasicArmor");
	
	restart;
}

// Handles Weapon Firing Speed
script "Speed" (void)
{
	int Time;
	
	if (Agility <= 100)
		Time = Abs(Round(WeaponSpeed * 0.35 - 35.0));
	else
		Time = 0;
	
	if (GetCVAR("drpg_stat_weaponspeed"))
		GiveInventory("Speed", 1);
	
	Delay(Time + 1);
	restart;
}

// Quick Heal
script "QuickHeal" (int Quick)
{
	// If you're dead, terminate
	if (GetActorProperty(0, APROP_HEALTH) <= 0) terminate;
	
	int Health = GetActorProperty(0, APROP_HEALTH);
	int Percent = GetCVAR("drpg_auto_heal_percent");
	
	if ((Health < HealthMax / Percent) || Quick)
			 if (CheckInventory("StimPack")) 		UseInventory("StimPack");
		else if (CheckInventory("SmallMedikit")) 	UseInventory("SmallMedikit");
		else if (CheckInventory("Medikit")) 		UseInventory("Medikit");
		else if (CheckInventory("LargeMedikit")) 	UseInventory("LargeMedikit");
		else if (CheckInventory("XLMedikit")) 		UseInventory("XLMedikit");
		else if (CheckInventory("MedPack")) 		UseInventory("MedPack");
		else if (CheckInventory("SuperMedPack")) 	UseInventory("SuperMedPack");
		else if (CheckInventory("SurgeryKit")) 		UseInventory("SurgeryKit");
}

// Quick Armor
script "QuickArmor" (void)
{
		 if (CheckInventory("WhiteArmor")) 		UseInventory("WhiteArmor");
	else if (CheckInventory("WhiteArmorUsed")) 	UseInventory("WhiteArmorUsed");
	else if (CheckInventory("RedArmor")) 		UseInventory("RedArmor");
	else if (CheckInventory("RedArmorUsed")) 	UseInventory("RedArmorUsed");
	else if (CheckInventory("YellowArmor")) 	UseInventory("YellowArmor");
	else if (CheckInventory("YellowArmorUsed")) UseInventory("YellowArmorUsed");
	else if (CheckInventory("BlueArmor")) 		UseInventory("BlueArmor");
	else if (CheckInventory("BlueArmorUsed")) 	UseInventory("BlueArmorUsed");
	else if (CheckInventory("GreenArmor")) 		UseInventory("GreenArmor");
	else if (CheckInventory("GreenArmorUsed")) 	UseInventory("GreenArmorUsed");
}

// Buy Ammo for selected Weapon
script "QuickAmmo" (void)
{
	// Weapon, Ammo Type and Amount
	int Weapon;
	int AmmoType;
	int Amount;
	
	// Get the current Weapon to determine the ammo type
	if 		(CheckWeapon("Pistol") || CheckWeapon("ChainGun")) 		{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shotgun") || CheckWeapon("SuperShotgun")) { AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("RocketLauncher"))							{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("PlasmaRifle") || CheckWeapon("BFG9000"))	{ AmmoType = 6; Amount = 20; }
	
	// ... And the alternate Extras versions too -_-
	else if (CheckWeapon("Pistol1") || CheckWeapon("ChainGun1")) 	{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shotgun1") || CheckWeapon("SSG")) 		{ AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("RocketLauncher1"))						{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("PlasmaGun") || CheckWeapon("BFG9001"))	{ AmmoType = 6; Amount = 20; }
	
	// AND Brutal Doom -__-
	else if (CheckWeapon("BrutalPistol") || CheckWeapon("Rifle") || CheckWeapon("Mini_Gun")) 									{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shot_Gun") || CheckWeapon("SSG")) 																	{ AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("Rocket_Launcher") || CheckWeapon("Grenade_Launcher"))													{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("Plasma_Gun") || CheckWeapon("Rail_Gun") || CheckWeapon("BIG_FUCKING_GUN") || CheckWeapon("BFG10000"))	{ AmmoType = 6; Amount = 20; }
	else
	{
		ActivatorSound("menu/error", 127);
		terminate;
	}
	
	// Discount and Cost
	int Discount = FixedMul(RankLevel, 2.1);
	int Cost = ShopCosts[1][AmmoType] - ShopCosts[1][AmmoType] * Discount / 100;

	// Give ammo and take Credits
	if (CheckInventory("Credits") >= Cost && CheckInventory(Shop[1][AmmoType][0]) < GetAmmoCapacity(Shop[1][AmmoType][0]))
	{
		ActivatorSound("credits/payout", 127);
		TakeInventory("Credits", Cost);
		GiveInventory(Shop[1][AmmoType][0], Amount);
	}
	else
		ActivatorSound("menu/error", 127);
}

// Death Script
script "Death" death
{
	// Taunt the Player
	if (GetCVAR("drpg_ext_brutal"))
		ActivatorSound("Taunt", 127);
	
	while (1)
	{
		// Wipe out your entire inventory
		ClearInventory();
		
		// Kill all the player's summons
		for (int i = 2100; i <= SummonID; i++)
			Thing_Damage(i, 1000000);
		
		// Reset a metric fuckton of variables to make death look cleaner
		InMenu = false;
		InShop = false;
		Menu = 0;
		MenuIndex = 0;
		ShopIndex = 0;
		Strength = 0;
		Defense = 0;
		Vitality = 0;
		Energy = 0;
		Regeneration = 0;
		Agility = 0;
		Capacity = 0;
		Luck = 0;
		Level = 0;
		XP = 0;
		RankLevel = 0;
		Rank = 0;
		EP = 0;
		Combo = 0;
		ComboTimer = -100;
		TotalGained = 0;
		XPGained = 0;
		RankGained = 0;
		Aura = 0;
		AuraTimer = 0;
		AuraTimerHUD = 0;
		PayTimer = 0;
		Shield = 0;
		ShieldBody = 0;
		ShieldBattery = 0;
		ShieldCapacitor = 0;
		ShieldAccessory = 0;
		
		Delay(1);
	}
}

// Level exit script
// Can't use NamedExecute in xlat, lame
script 30000 (int Secret)
{
	int ParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
	
	// If there's no par time, or you somehow already activated this script, terminate
	if (ParTime <= 0 || ParBonus) terminate;
	
	if ((MapTime / 35) <= ParTime)
	{
		int RankBonus = Random(10000 * RankLevel, 10000 * RankLevel * MapNumber);
		if (RankLevel == 0) RankBonus = 10000;
		
		FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0.0, 1.0);
		ActivatorSound("misc/secret", 127);
		Combo++;
		RankGained += RankBonus;
		
		HudMessage(s:"Par Time Beaten!\n",
				   d:RankBonus, s:" Rank Bonus";
				   HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.5, 3.0, 2.0);
		
		ParBonus = true;
		Delay(35 * 8);
	}

	if (Secret)
		Exit_Secret(0);
	else
		Exit_Normal(0);
}

function void DefaultLoadout(void)
{
	// Fists/Melee
	if (GetCVAR("drpg_ext_brutal"))
		GiveInventory("Melee_Attacks", 1);
	else // Weapons and Ammo
	{
		GiveInventory("Fist", 1);
		GiveInventory("Clip", 30);
		GiveInventory("Pistol", 1);
		SetWeapon("Pistol");
		SetWeapon("Pistol1");
	}
	
	// Give Standard Shield Components
	GiveInventory("ShieldBody1", 1);
	GiveInventory("ShieldBattery1", 1);
	GiveInventory("ShieldCapacitor1", 1);
	
	// Brutal Doom Equipment
	if (GetCVAR("drpg_ext_brutal"))
	{
		GiveInventory("BrutalPistol", 1);
		TakeInventory("Clip", 1000000);
		GiveInventory("Clip", 100);
	}	
}
