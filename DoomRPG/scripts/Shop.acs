#library "Shop"

#include "zcommon.acs"

#import "Stats.acs"
#import "Skills.acs"
#import "Augs.acs"
#import "Shield.acs"
#import "Menu.acs"
#import "Utils.acs"

#libdefine SHOP_CATEGORIES			16
#libdefine SHOP_ITEMS				100
#libdefine SHOP_SCROLL				15

str ShopNames[SHOP_CATEGORIES] =
{
	"Weapons",
	"Ammo",
	"Health",
	"Armor",
	"Powerups",
	"Tokens",
	"Shield",
	"Augmentations"
};

// Shop Array
int Shop[SHOP_CATEGORIES][SHOP_ITEMS][2] =
{
    // Weapon
	{
		{ "Pistol", "Pistol" },
		{ "Shotgun", "Shotgun" },
		{ "SuperShotgun", "Super Shotgun" },
		{ "ChainGun", "Chaingun" },
		{ "RocketLauncher", "Rocket Launcher" },
		{ "PlasmaRifle", "Plasma Rifle" },
		{ "BFG9000", "BFG 9000" },
		{ "Chainsaw", "Chainsaw" }
//		{ "GrenadeFrag", "Frag Grenade" }
	},
    
    // Ammo
	{
		{ "Clip", "Clip" },
		{ "ClipBox", "Box of Bullets" },
		{ "Shell", "Shells" },
		{ "ShellBox", "Box of Shells" },
		{ "RocketAmmo", "Rockets" },
		{ "RocketBox", "Box of Rockets" },
		{ "Cell", "Cell" },
		{ "CellPack", "Cell Charge Pack" },
		{ "Backpack", "Backpack" },
		{ "BigBackpack", "Big Backpack" }
	},
    
    // Health
	{
		{ "HealthBonus", "Health Bonus" },
		{ "Stimpack", "Stimpack" },
		{ "SmallMedikit", "Small Medikit" },
		{ "Medikit", "Medikit" },
		{ "LargeMedikit", "Large Medikit" },
		{ "XLMedikit", "Extra-Large Medikit" },
		{ "MedPack", "Med Pack" },
		{ "SurgeryKit", "Surgery Kit" },
		{ "Soulsphere", "Soulsphere" },
		{ "AtomicHealth", "Atomic Health" },
		{ "Continue", "Continue" },
		{ "EPCapsule", "EP Capsule" },
		{ "BigEPCapsule", "Big EP Capsule" }
	},
    
    // Armor
	{
		{ "ArmorBonus", "Armor Bonus" },
		{ "GreenArmor", "Green Armor" },
		{ "UsedGreenArmor", "Green Armor (Used)" },
		{ "BlueArmor", "Blue Armor" },
		{ "UsedBlueArmor", "Blue Armor (Used)" },
		{ "YellowArmor", "Yellow Armor" },
		{ "UsedYellowArmor", "Yellow Armor (Used)" },
		{ "RedArmor", "Red Armor" },
		{ "UsedRedArmor", "Red Armor (Used)" },
		{ "WhiteArmor", "White Armor" },
		{ "UsedWhiteArmor", "White Armor (Used)" }
	},
	
	// Powerups
	{
		{ "InvulnerabilitySphere", "Invulnerability Sphere" },
		{ "InvulnerabilityCharge", "Invulnerability Charge" },
		{ "BlurSphere", "Invisibility Sphere" },
		{ "InvisibilityCharge", "Invisibility Charge" },
		{ "TimeSphere", "Time Sphere" },
		{ "RegenSphere", "Regeneration Sphere" },
		{ "RadSuit", "Radiation Suit" },
		{ "Infrared", "IR Goggles" },
		{ "Berserk", "Berserk Pack" },
		{ "AllMap", "Computer Area Map" },
		{ "Megasphere", "Megasphere" },
		{ "StrengthRune", "Strength Rune" },
		{ "DrainRune", "Drain Rune" },
		{ "EndlessRune", "Endless Rune" },
		{ "ResistanceRune", "Resistance Rune" },
		{ "RegenerationRune", "Regeneration Rune" },
		{ "FrightRune", "Fright Rune" },
		{ "GhostRune", "Ghost Rune" },
		{ "HighJumpRune", "High Jump Rune" },
		{ "HasteRune", "Haste Rune" }
	},
	
	// Tokens
	{
		{ "StatToken", "Stat Token" },
		{ "BigStatToken", "Big Stat Token" },
		{ "StatCapToken", "Stat Cap Token" },
		{ "BigStatCapToken", "Big Stat Cap Token" },
		{ "SkillToken", "Skill Token" },
		{ "BigSkillToken", "Big Skill Token" },
		{ "MegaToken", "Mega Token" },
		{ "BigMegaToken", "Big Mega Token" }
	},
	
	// Shield
	{
		// Built Dynamically
	},
	
	// Augmentations
	{
		{ "StrengthAug", "Muscle Replacer" },
		{ "DefenseAug", "Dermal Armor" },
		{ "VitalityAug", "Pain Inhibitor" },
		{ "EnergyAug", "Psi Projector" },
		{ "RegenerationAug", "Adrenaline Booster" },
		{ "AgilityAug", "Wired Reflexes" },
		{ "CapacityAug", "Weight Distributor" },
		{ "LuckAug", "Precognition Unit" },
		{ "BlackMarketAug", "Black Market Module" },
		{ "AugSlotUpgrade", "Augmentation Slot Upgrade" }
	}
};

int ShopCosts[SHOP_CATEGORIES][SHOP_ITEMS] = {
    // Weapon
	{
		20, 75, 200, 300, 750, 1500, 3000, 300, 100
	},
    // Ammo
	{
		10, 50, 25, 125, 50, 250, 200, 1000, 285, 6325
	},
    // Health
	{
		5, 10, 50, 100, 250, 500, 750, 1000, 2000, 4000, 50000, 500, 1000
	},
    // Armor
	{
		5, 100, 50, 500, 250, 1000, 500, 5000, 2500, 10000, 5000
	},
	// Artifacts
	{
		1000, 2000, 500, 1000, 200, 1000, 250, 500, 1000, 1000, 5000, 	// Powerups
		1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000			// Runes
	},
	// Tokens
	{
		25000, 100000, 25000, 100000, 25000, 100000, 250000, 500000
	},
	// Shields
	{
		// Built Dynamically
	},
	// Augmentations
	{
		25000, 25000, 25000, 25000, 25000, 25000, 25000, 25000, 250000,	// Augs
		500000
	}
};

int ShopMax[SHOP_CATEGORIES] =
{
	8, 10, 13, 11, 20, 8, 0, 10
};

bool InShop;
int ShopCategories = 8; // 8 vanilla ShopCategories, 8 reserved for compatibility
int ShopIndex;
int ShopOffset;
int ShopPage;
int SellTimer;
int ShopSpotID = 1000;

// Open the Shop
script "OpenShop" (int FromBase)
{
	// If you're dead, terminate
	if (GetActorProperty(0, APROP_HEALTH) <= 0) terminate;
	
	InMenu = false;
	
	if (InShop)
	{
		// Sanity Check to prevent the shop closing itself after buying an item in the Outpost Shop
		if (!FromBase) terminate;
		
		ActivatorSound("menu/leave", 127);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		InShop = false;
	}
	else
	{
		// Don't let you Shop Anywhere if it's disabled
		if (!InBase && !GetCVAR("drpg_shoptype")) terminate;
		
		ActivatorSound("menu/shop", 127);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		InShop = true;
	}
}

// Sell items in bulk
script "SellAll" (int SellShopPage, int Silent)
{
	int Total;
	int ItemMax = 1000;
	
	// Set font
	SetFont("BIGFONT");
	
	// Invalid ShopPages
	if (SellShopPage < 1)
	{
		print(s:"\cgInvalid Shop ShopPage");
		ActivatorSound("menu/error", 127);
		terminate;
	}
	
	// Sell Items
	for (int i = 0; i < ShopMax[SellShopPage]; i++)
		for (int j = 0; j < ItemMax; j++)
			if (CheckInventory(Shop[SellShopPage][i][0]) > 0)
			{
					// Oh god...
					if (Shop[SellShopPage][i][0] == "HealthBonus" || Shop[SellShopPage][i][0] == "ArmorBonus") continue;
					
					TakeInventory(Shop[SellShopPage][i][0], 1);
					GiveInventory("Credits", ShopCosts[SellShopPage][i] / 2);
					Total += ShopCosts[SellShopPage][i] / 2;
			}
			else continue;
	
	// Augmentation Handling
	if (SellShopPage == 7)
		for (int k = 0; k < 8; k++)
		{
			Augs[k] = false;
			AugSlotsUsed = 0;
		}

	// Display Message
	if (!Silent)
	{
		HudMessage(s:"Sold all ", s:ShopNames[SellShopPage], s:" items for ", d:Total, s:" Credits";
				   HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.5, 5.0, 5.0);
		ActivatorSound("credits/payout", 127);
	}
}

function void ShopBuildPages(void)
{
	int i, j, Index;
	
	// Shield Page
	ShopMax[6] = 0;
	for (i = 0; i < 4; i++)
	{
		str ShieldActorName = "";
		str ShieldName = "";
		int ShieldCost = 0;
		
		ShopMax[6] += ShieldPartsMax[i];
		
		switch (i)
		{
			case 0: ShieldActorName = "ShieldBody";			ShieldName = "Shield Body - ";		break;
			case 1:	ShieldActorName = "ShieldBattery";		ShieldName = "Shield Battery - ";	break;
			case 2:	ShieldActorName = "ShieldCapacitor";	ShieldName = "Shield Capacitor - ";	break;
			case 3:	ShieldActorName = "ShieldAccessory";	ShieldName = "Shield Accessory - ";	break;
		}
		
		for (j = 0; j < ShieldPartsMax[i]; j++)
		{
			// Name
			Shop[6][Index][0] = StrParam(s:ShieldActorName, d:j + 1);
			Shop[6][Index][1] = StrParam(s:ShieldName, s:ShieldData[i][j][1], s:"\c-");
			
			// Price
			if (i < 3) // Bodies, Batteries, Capacitors
			{
				ShieldCost += ShieldStats[i][j][0] * 100;
				ShieldCost += ShieldStats[i][j][1] * 1000;
				ShieldCost += Abs((ShieldStats[i][j][2] * 10000) / 35);
			}
			else // Accessories
			{
				if (j == 0) ShieldCost = 50000;
				if (j == 1) ShieldCost = 25000;
				if (j == 2) ShieldCost = 10000;
				if (j == 3) ShieldCost = 20000;
				if (j == 4) ShieldCost = 50000;
				if (j == 5) ShieldCost = 25000;
				if (j == 6) ShieldCost = 10000;
			}
			
			ShopCosts[6][Index] = ShieldCost;
			
			Index++;
		}
	}
	
	// Compatibility handling - Extras
	if (GetCVAR("drpg_ext_extras"))
	{
		// Weapons
		Shop[0][0][0] = "Pistol1";
		Shop[0][1][0] = "Shotgun1";
		Shop[0][2][0] = "SSG";
		Shop[0][3][0] = "Chaingun1";
		Shop[0][4][0] = "RocketLauncher1";
		Shop[0][5][0] = "Plasmagun";
		Shop[0][6][0] = "BFG9001";
		Shop[0][7][0] = "Chainsaw1";
	}
	
	// Compatibility handling - Brutal Doom
	if (GetCVAR("drpg_ext_brutal"))
	{
		// Weapons
		ShopMax[0] = 14;
		
		Shop[0][0][0] = "BrutalPistol";
		Shop[0][0][1] = "Pistol";
		Shop[0][1][0] = "Rifle";
		Shop[0][1][1] = "Assault Rifle";
		Shop[0][2][0] = "Shot_Gun";
		Shop[0][3][0] = "SSG";
		Shop[0][4][0] = "Mini_Gun";
		Shop[0][5][0] = "Grenade_Launcher";
		Shop[0][5][1] = "Grenade Launcher";
		Shop[0][6][0] = "Rocket_Launcher";
		Shop[0][7][0] = "Plasma_Gun";
		Shop[0][8][0] = "Rail_Gun";
		Shop[0][8][1] = "Railgun";
		Shop[0][9][0] = "BIG_FUCKING_GUN";
		Shop[0][10][0] = "BFG10000";
		Shop[0][10][0] = "BFG10000";
		Shop[0][11][0] = "HellishMissileLauncher";
		Shop[0][11][1] = "Hellish Missile Launcher";
		Shop[0][12][0] = "FlameCannon";
		Shop[0][12][1] = "Flame Cannon";
		Shop[0][13][0] = "SecretWeapon_MP40";
		Shop[0][13][1] = "MP40";
		Shop[0][14][0] = "Chain_Saw";
		
		ShopCosts[0][0] = 25;
		ShopCosts[0][1] = 100;
		ShopCosts[0][2] = 250;
		ShopCosts[0][3] = 250;
		ShopCosts[0][4] = 500;
		ShopCosts[0][5] = 1000;
		ShopCosts[0][6] = 2000;
		ShopCosts[0][7] = 3000;
		ShopCosts[0][8] = 5000;
		ShopCosts[0][9] = 10000;
		ShopCosts[0][10] = 25000;
		ShopCosts[0][11] = 5000;
		ShopCosts[0][12] = 5000;
		ShopCosts[0][13] = 1000;
		ShopCosts[0][14] = 100;
	}
	
	// Compatibility Handling - DoomRL
	if (GetCVAR("drpg_ext_doomrl"))
	{
		// Categories
		ShopCategories = 10;
		ShopNames[8] = "Mod Packs";
		ShopNames[9] = "Boots";
		
		// Weapons
		ShopMax[0] = 42;
		
		// Common Weapons
		Shop[0][0][0] = "RLChainsaw";
		Shop[0][0][1] = "Chainsaw";
		Shop[0][1][0] = "RLPistol";
		Shop[0][1][1] = "Pistol";
		Shop[0][2][0] = "RLShotgun";
		Shop[0][2][1] = "Shotgun";
		Shop[0][3][0] = "RLCombatShotgun";
		Shop[0][3][1] = "Combat Shotgun";
		Shop[0][4][0] = "RLDoubleShotgun";
		Shop[0][4][1] = "Double Shotgun";
		Shop[0][5][0] = "RLChaingun";
		Shop[0][5][1] = "Chaingun";
		Shop[0][6][0] = "RLRocketLauncher";
		Shop[0][6][1] = "Rocket Launcher";
		Shop[0][7][0] = "RLPlasmaRifle";
		Shop[0][7][1] = "Plasma Rifle";
		Shop[0][8][0] = "RLBFG9000";
		Shop[0][8][1] = "BFG9000";
		
		ShopCosts[0][0] = 100;
		ShopCosts[0][1] = 25;
		ShopCosts[0][2] = 100;
		ShopCosts[0][3] = 250;
		ShopCosts[0][4] = 500;
		ShopCosts[0][5] = 750;
		ShopCosts[0][6] = 1000;
		ShopCosts[0][7] = 2500;
		ShopCosts[0][8] = 5000;
		
		// Exotic Weapons
		Shop[0][9][0] = "RLBlaster";
		Shop[0][9][1] = "Blaster \ct[Exotic]\c-";
		Shop[0][10][0] = "RLCombatPistol";
		Shop[0][10][1] = "Combat Pistol \ct[Exotic]\c-";
		Shop[0][11][0] = "RLDesertEagle";
		Shop[0][11][1] = "Handcannon \ct[Exotic]\c-";
		Shop[0][12][0] = "RLSuperShotgun";
		Shop[0][12][1] = "Super Shotgun \ct[Exotic]\c-";
		Shop[0][13][0] = "RLAssaultShotgun";
		Shop[0][13][1] = "Assault Shotgun \ct[Exotic]\c-";
		Shop[0][14][0] = "RLUzi";
		Shop[0][14][1] = "Uzi \ct[Exotic]\c-";
		Shop[0][15][0] = "RLBattleRifle";
		Shop[0][15][1] = "Battle Rifle \ct[Exotic]\c-";
		Shop[0][16][0] = "RLMinigun";
		Shop[0][16][1] = "Minigun \ct[Exotic]\c-";
		Shop[0][17][0] = "RLMissileLauncher";
		Shop[0][17][1] = "Missile Launcher \ct[Exotic]\c-";
		Shop[0][18][0] = "RLNapalmLauncher";
		Shop[0][18][1] = "Napalm Launcher \ct[Exotic]\c-";
		Shop[0][19][0] = "RLLaserRifle";
		Shop[0][19][1] = "Laser Rifle \ct[Exotic]\c-";
		Shop[0][20][0] = "RLPlasmaShotgun";
		Shop[0][20][1] = "Plasma Shotgun \ct[Exotic]\c-";
		Shop[0][21][0] = "RLTristarBlaster";
		Shop[0][21][1] = "Tristar Blaster \ct[Exotic]\c-";
		Shop[0][22][0] = "RLNuclearPlasmaRifle";
		Shop[0][22][1] = "Nuclear Plasma Rifle \ct[Exotic]\c-";
		Shop[0][23][0] = "RLNuclearBFG9000";
		Shop[0][23][1] = "Nuclear BFG9000 \ct[Exotic]\c-";
		Shop[0][24][0] = "RLCombatTranslocator";
		Shop[0][24][1] = "Combat Translocator \ct[Exotic]\c-";
		
		ShopCosts[0][9] = 1000;
		ShopCosts[0][10] = 1500;
		ShopCosts[0][11] = 2000;
		ShopCosts[0][12] = 2500;
		ShopCosts[0][13] = 3000;
		ShopCosts[0][14] = 3000;
		ShopCosts[0][15] = 4000;
		ShopCosts[0][16] = 5000;
		ShopCosts[0][17] = 5000;
		ShopCosts[0][18] = 7500;
		ShopCosts[0][19] = 7500;
		ShopCosts[0][20] = 10000;
		ShopCosts[0][21] = 20000;
		ShopCosts[0][22] = 25000;
		ShopCosts[0][23] = 50000;
		ShopCosts[0][24] = 10000;
		
		// Unique Weapons
		Shop[0][25][0] = "RLJackhammer";
		Shop[0][25][1] = "Jackhammer \cd[Unique]\c-";
		Shop[0][26][0] = "RLRailgun";
		Shop[0][26][1] = "Railgun \cd[Unique]\c-";
		Shop[0][27][0] = "RLMysteriousMagnum";
		Shop[0][27][1] = "Mysterious Magnum \cd[Unique]\c-";
		Shop[0][28][0] = "RLBFG10K";
		Shop[0][28][1] = "BFG10K \cd[Unique]\c-";
		Shop[0][29][0] = "RLUnknownHerald";
		Shop[0][29][1] = "Unknown Herald \cd[Unique]\c-";
		Shop[0][30][0] = "RLFragShotgun";
		Shop[0][30][1] = "Frag Shotgun \cd[Unique]\c-";
		Shop[0][31][0] = "RLQuadShotgun";
		Shop[0][31][1] = "Quad Shotgun \cd[Unique]\c-";
		Shop[0][32][0] = "RLLightweaver";
		Shop[0][32][1] = "Lightweaver \cd[Unique]\c-";
		Shop[0][33][0] = "RLTrigun";
		Shop[0][33][1] = "Trigun \cd[Unique]\c-";
		Shop[0][34][0] = "RLGrammatonClericBeretta";
		Shop[0][34][1] = "Grammaton Cleric Beretta \cd[Unique]\c-";
		Shop[0][35][0] = "RLAntiFreakJackal";
		Shop[0][35][1] = "Anti-Freak Jackal \cd[Unique]\c-";
		Shop[0][36][0] = "RLTantrumCannon";
		Shop[0][36][1] = "Quantum Tantrum Cannon \cd[Unique]\c-";
		Shop[0][37][0] = "RLRevenantsLauncher";
		Shop[0][37][1] = "Revenant's Launcher \cd[Unique]\c-";
		Shop[0][38][0] = "RLNullPointer";
		Shop[0][38][1] = "Charch's Null Pointer \cd[Unique]\c-";
		
		ShopCosts[0][25] = 10000;
		ShopCosts[0][26] = 20000;
		ShopCosts[0][27] = 25000;
		ShopCosts[0][28] = 50000;
		ShopCosts[0][29] = 25000;
		ShopCosts[0][30] = 10000;
		ShopCosts[0][31] = 25000;
		ShopCosts[0][32] = 25000;
		ShopCosts[0][33] = 10000;
		ShopCosts[0][34] = 10000;
		ShopCosts[0][35] = 25000;
		ShopCosts[0][36] = 25000;
		ShopCosts[0][37] = 10000;
		ShopCosts[0][38] = 10000;
		
		// Legendary Weapons
		Shop[0][39][0] = "RLJudgeOfTheDead";
		Shop[0][39][1] = "Judge of the Dead \cf[Unique]\c-";
		Shop[0][40][0] = "RLHurricaneCannon";
		Shop[0][40][1] = "Hurricane Cannon \cf[Unique]\c-";
		Shop[0][41][0] = "RLNeuralStunner";
		Shop[0][41][1] = "Neural Stunner \cf[Unique]\c-";
		
		ShopCosts[0][39] = 50000;
		ShopCosts[0][40] = 50000;
		ShopCosts[0][41] = 50000;
		
		// Armor
		ShopMax[3] = 45;

		Shop[3][0][0] = "RLArmorBonus";
		Shop[3][0][1] = "Armor Bonus";
		Shop[3][1][0] = "RLGreenArmorPickup";
		Shop[3][1][1] = "Security Armor";
		Shop[3][2][0] = "RLBlueArmorPickup";
		Shop[3][2][1] = "Combat Armor";
		Shop[3][3][0] = "RLRedArmorPickup";
		Shop[3][3][1] = "Commando Armor";
		Shop[3][4][0] = "RLBallisticGreenArmorPickup";
		Shop[3][4][1] = "Ballistic Security Armor";
		Shop[3][5][0] = "RLBallisticBlueArmorPickup";
		Shop[3][5][1] = "Ballistic Combat Armor";
		Shop[3][6][0] = "RLBallisticRedArmorPickup";
		Shop[3][6][1] = "Ballistic Commando Armor";
		Shop[3][7][0] = "RLCyberNanoGreenArmorPickup";
		Shop[3][7][1] = "CyberNano Security Armor";
		Shop[3][8][0] = "RLCyberNanoBlueArmorPickup";
		Shop[3][8][1] = "CyberNano Combat Armor";
		Shop[3][9][0] = "RLCyberNanoRedArmorPickup";
		Shop[3][9][1] = "CyberNano Commando Armor";
		Shop[3][10][0] = "RLFireproofGreenArmorPickup";
		Shop[3][10][1] = "Fireproof Security Armor";
		Shop[3][11][0] = "RLFireproofBlueArmorPickup";
		Shop[3][11][1] = "Fireproof Combat Armor";
		Shop[3][12][0] = "RLFireproofRedArmorPickup";
		Shop[3][12][1] = "Fireproof Commando Armor";
		Shop[3][13][0] = "RLNanofiberGreenArmorPickup";
		Shop[3][13][1] = "Nanofiber Security Armor";
		Shop[3][14][0] = "RLNanofiberBlueArmorPickup";
		Shop[3][14][1] = "Nanofiber Combat Armor";
		Shop[3][15][0] = "RLNanofiberRedArmorPickup";
		Shop[3][15][1] = "Nanofiber Commando Armor";
		Shop[3][16][0] = "RLNanofiberSkinGreenArmorPickup";
		Shop[3][16][1] = "Nanofiber Skin Security Armor";
		Shop[3][17][0] = "RLNanofiberSkinBlueArmorPickup";
		Shop[3][17][1] = "Nanofiber Skin Combat Armor";
		Shop[3][18][0] = "RLNanofiberSkinRedArmorPickup";
		Shop[3][18][1] = "Nanofiber Skin Commando Armor";
		Shop[3][19][0] = "RLPowerGreenArmorPickup";
		Shop[3][19][1] = "Powered Security Armor";
		Shop[3][20][0] = "RLPowerBlueArmorPickup";
		Shop[3][20][1] = "Powered Combat Armor";
		Shop[3][21][0] = "RLPowerRedArmorPickup";
		Shop[3][21][1] = "Powered Commando Armor";
		Shop[3][22][0] = "RLCerberusArmorPickup";
		Shop[3][22][1] = "Cerberus Armor";
		Shop[3][23][0] = "RLFireShieldArmorPickup";
		Shop[3][23][1] = "Fire Shield";
		Shop[3][24][0] = "RLTowerShieldArmorPickup";
		Shop[3][24][1] = "Tower Shield";
		Shop[3][25][0] = "RLTacticalArmorPickup";
		Shop[3][25][1] = "Tactical Armor";
		Shop[3][26][0] = "RLBallisticShieldArmorPickup";
		Shop[3][26][1] = "Ballistic Shield";
		Shop[3][27][0] = "RLBallisticVestArmorPickup";
		Shop[3][27][1] = "Ballistic Vest";
		Shop[3][28][0] = "RLBulletproofVestArmorPickup";
		Shop[3][28][1] = "Bulletproof Vest";
		Shop[3][29][0] = "RLDuelistArmorPickup";
		Shop[3][29][1] = "Duelist Armor";
		Shop[3][30][0] = "RLEnergyShieldedVestArmorPickup";
		Shop[3][30][1] = "Energy-Shielded Vest";
		Shop[3][31][0] = "RLEnergyShieldArmorPickup";
		Shop[3][31][1] = "Energy Shield";
		Shop[3][32][0] = "RLGothicArmorPickup";
		Shop[3][32][1] = "Gothic Armor";
		Shop[3][33][0] = "RLMedicalArmorPickup";
		Shop[3][33][1] = "Medical Armor";
		Shop[3][34][0] = "RLPhaseshiftArmorPickup";
		Shop[3][34][1] = "Phaseshift Armor";
		Shop[3][35][0] = "RLPlasmaShieldArmorPickup";
		Shop[3][35][1] = "Plasma Shield";
		Shop[3][36][0] = "RLOnyxArmorPickup";
		Shop[3][36][1] = "Onyx Armor";
		Shop[3][37][0] = "RLBerserkerArmorPickup";
		Shop[3][37][1] = "Berserker Armor";
		Shop[3][38][0] = "RLCyberneticArmorPickup";
		Shop[3][38][1] = "Cybernetic Armor";
		Shop[3][39][0] = "RLLavaArmorPickup";
		Shop[3][39][1] = "Lava Armor";
		Shop[3][40][0] = "RLMaleksArmorPickup";
		Shop[3][40][1] = "Malek's Armor";
		Shop[3][41][0] = "RLMedicalPowerArmorPickup";
		Shop[3][41][1] = "Medical Power Armor";
		Shop[3][42][0] = "RLNecroArmorPickup";
		Shop[3][42][1] = "Necro Armor";
		Shop[3][43][0] = "RLShieldedArmorPickup";
		Shop[3][43][1] = "Shielded Armor";
		Shop[3][44][0] = "RLAngelicArmorPickup";
		Shop[3][44][1] = "Angelic Armor";
		
		ShopCosts[3][0] = 1000;
		ShopCosts[3][1] = 250;
		ShopCosts[3][2] = 500;
		ShopCosts[3][3] = 1000;
		ShopCosts[3][4] = 1250;
		ShopCosts[3][5] = 1500;
		ShopCosts[3][6] = 2000;
		ShopCosts[3][7] = 5000;
		ShopCosts[3][8] = 5000;
		ShopCosts[3][9] = 5000;
		ShopCosts[3][10] = 2000;
		ShopCosts[3][11] = 2500;
		ShopCosts[3][12] = 5000;
		ShopCosts[3][13] = 2000;
		ShopCosts[3][14] = 2500;
		ShopCosts[3][15] = 3000;
		ShopCosts[3][16] = 5000;
		ShopCosts[3][17] = 7500;
		ShopCosts[3][18] = 10000;
		ShopCosts[3][19] = 2500;
		ShopCosts[3][20] = 5000;
		ShopCosts[3][21] = 10000;
		ShopCosts[3][22] = 2500;
		ShopCosts[3][23] = 10000;
		ShopCosts[3][24] = 10000;
		ShopCosts[3][25] = 1000;
		ShopCosts[3][26] = 10000;
		ShopCosts[3][27] = 5000;
		ShopCosts[3][28] = 7500;
		ShopCosts[3][29] = 7500;
		ShopCosts[3][30] = 7500;
		ShopCosts[3][31] = 10000;
		ShopCosts[3][32] = 10000;
		ShopCosts[3][33] = 5000;
		ShopCosts[3][34] = 7500;
		ShopCosts[3][35] = 7500;
		ShopCosts[3][36] = 5000;
		ShopCosts[3][37] = 7500;
		ShopCosts[3][38] = 10000;
		ShopCosts[3][39] = 7500;
		ShopCosts[3][40] = 5000;
		ShopCosts[3][41] = 7500;
		ShopCosts[3][42] = 7500;
		ShopCosts[3][43] = 10000;
		ShopCosts[3][44] = 25000;
		
		// Powerups
		ShopMax[4] = 22;
		
		Shop[4][20][0] = "RLTrackingMap";
		Shop[4][20][1] = "Tracking Map";
		Shop[4][21][0] = "RLSupplyCrate";
		Shop[4][21][1] = "Supply Crate";
		
		ShopCosts[4][20] = 1500;
		ShopCosts[4][21] = 25000;
		
		// Mod Packs
		ShopMax[8] = 8;
		
		Shop[8][0][0] = "RLPowerModItem";
		Shop[8][0][1] = "Power Mod";
		Shop[8][1][0] = "RLBulkModItem";
		Shop[8][1][1] = "Bulk Mod";
		Shop[8][2][0] = "RLAgilityModItem";
		Shop[8][2][1] = "Agility Mod";
		Shop[8][3][0] = "RLTechnicalModItem";
		Shop[8][3][1] = "Technical Mod";
		Shop[8][4][0] = "RLSniperModItem";
		Shop[8][4][1] = "Sniper Mod";
		Shop[8][5][0] = "RLFirestormModItem";
		Shop[8][5][1] = "Firestorm Mod";
		Shop[8][6][0] = "RLNanoModItem";
		Shop[8][6][1] = "Nano Mod";
		Shop[8][7][0] = "RLOnyxModItem";
		Shop[8][7][1] = "Onyx Mod";
		
		ShopCosts[8][0] = 2500;
		ShopCosts[8][1] = 2500;
		ShopCosts[8][2] = 2500;
		ShopCosts[8][3] = 2500;
		ShopCosts[8][4] = 10000;
		ShopCosts[8][5] = 10000;
		ShopCosts[8][6] = 10000;
		ShopCosts[8][7] = 10000;
		
		// Boots
		ShopMax[9] = 23;
		
		Shop[9][0][0] = "RLSteelBootsPickup";
		Shop[9][0][1] = "Steel Boots";
		Shop[9][1][0] = "RLProtectiveBootsPickup";
		Shop[9][1][1] = "Protective Boots";
		Shop[9][2][0] = "RLPlasteelBootsPickup";
		Shop[9][2][1] = "Plasteel Boots";
		Shop[9][3][0] = "RLAntigravSteelBootsPickup";
		Shop[9][3][1] = "Anti-Grav Steel Boots";
		Shop[9][4][0] = "RLAntigravProtectiveBootsPickup";
		Shop[9][4][1] = "Anti-Grav Protective Boots";
		Shop[9][5][0] = "RLAntigravPlasteelBootsPickup";
		Shop[9][5][1] = "Anti-Grav Plasteel Boots";
		Shop[9][6][0] = "RLEnvironmentalSteelBootsPickup";
		Shop[9][6][1] = "Environmental Steel Boots";
		Shop[9][7][0] = "RLEnvironmentalProtectiveBootsPickup";
		Shop[9][7][1] = "Environmental Protective Boots";
		Shop[9][8][0] = "RLEnvironmentalPlasteelBootsPickup";
		Shop[9][8][1] = "Environmental Plasteel Boots";
		Shop[9][9][0] = "RLFireproofSteelBootsPickup";
		Shop[9][9][1] = "Fireproof Steel Boots";
		Shop[9][10][0] = "RLFireproofProtectiveBootsPickup";
		Shop[9][10][1] = "Fireproof Protective Boots";
		Shop[9][11][0] = "RLFireproofPlasteelBootsPickup";
		Shop[9][11][1] = "Fireproof Plasteel Boots";
		Shop[9][12][0] = "RLGrapplingSteelBootsPickup";
		Shop[9][12][1] = "Grappling Steel Boots";
		Shop[9][13][0] = "RLGrapplingProtectiveBootsPickup";
		Shop[9][13][1] = "Grappling Protective Boots";
		Shop[9][14][0] = "RLGrapplingPlasteelBootsPickup";
		Shop[9][14][1] = "Grappling Plasteel Boots";
		Shop[9][15][0] = "RLCerberusBootsPickup";
		Shop[9][15][1] = "Cerberus Boots";
		Shop[9][16][0] = "RLTacticalBootsPickup";
		Shop[9][16][1] = "Tactical Boots";
		Shop[9][17][0] = "RLLavaBootsPickup";
		Shop[9][17][1] = "Lava Boots";
		Shop[9][18][0] = "RLAcidProofBootsPickup";
		Shop[9][18][1] = "Acid-Proof Boots";
		Shop[9][19][0] = "RLGothicBootsPickup";
		Shop[9][19][1] = "Gothic Boots";
		Shop[9][20][0] = "RLPhaseshiftBootsPickup";
		Shop[9][20][1] = "Phaseshift Boots";
		Shop[9][21][0] = "RLEnviroBootsPickup";
		Shop[9][21][1] = "Enviro Boots";
		Shop[9][22][0] = "RLNyarlaptotepsBootsPickup";
		Shop[9][22][1] = "Nyarlaptotep's Boots";
		
		ShopCosts[9][0] = 250;
		ShopCosts[9][1] = 500;
		ShopCosts[9][2] = 750;
		ShopCosts[9][3] = 1000;
		ShopCosts[9][4] = 1500;
		ShopCosts[9][5] = 2000;
		ShopCosts[9][6] = 1000;
		ShopCosts[9][7] = 1500;
		ShopCosts[9][8] = 2000;
		ShopCosts[9][9] = 1000;
		ShopCosts[9][10] = 1500;
		ShopCosts[9][11] = 2000;
		ShopCosts[9][12] = 1000;
		ShopCosts[9][13] = 1500;
		ShopCosts[9][14] = 2000;
		ShopCosts[9][15] = 1000;
		ShopCosts[9][16] = 1000;
		ShopCosts[9][17] = 1000;
		ShopCosts[9][18] = 1000;
		ShopCosts[9][19] = 2500;
		ShopCosts[9][20] = 2500;
		ShopCosts[9][21] = 1000;
		ShopCosts[9][22] = 5000;
	}
}

function void ShopLoop(void)
{
	int Buttons = GetPlayerInput(0, INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(0, INPUT_OLDBUTTONS);
	int Discount = FixedMul(RankLevel, 2.1);
	int Cost = ShopCosts[ShopPage][ShopIndex] - ShopCosts[ShopPage][ShopIndex] * Discount / 100;
	int SellPrice = ShopCosts[ShopPage][ShopIndex] / 2;
	
	// Certain pages are built dynamically or require modifications depending on extension CVARs
	ShopBuildPages();
	
	// Some pages need modified sell behavior
	if (ShopPage == 1) SellPrice /= 4; // Ammo
	if (ShopPage == 5) SellPrice /= 5; // Tokens
	
	if (InShop)
    {
		// Freeze the game if the option is active
		if (GetCVAR("drpg_menufreeze"))
			GiveInventory("MenuFreezer", 1);
		
		// Set the HUD Size
		SetHUDSize(GetCVAR("drpg_menu_width"), GetCVAR("drpg_menu_height"), true);

		// Draw the background
		if (GetCVAR("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
		// Draw Shop
        SetFont("BIGFONT");
        HudMessage(s:"Shop - ", s:ShopNames[ShopPage],
				   s:" (", d:ShopPage + 1, s:"/", d:ShopCategories, s:")";
                   HUDMSG_PLAIN, 3000, CR_GREEN,
                   24.1, 24.0, 0.05);
        
        // Draw Price
        HudMessage(s:"\cj", d:Cost, s:" C \ci(", d:SellPrice, s:" C) \ck(Discount: ", d:Discount, s:"%)";
                   HUDMSG_PLAIN, 3000 + SHOP_ITEMS, CR_GOLD,
                   24.1, 38.0, 0.05);
        
        /* Draw Help
        SetFont("SMALLFONT");
		HudMessage(s:"Up/Down to move\nLeft/Right to change ShopPages\nUse to buy\nRun to sell\nMenu to exit";
				   HUDMSG_PLAIN, 3022, CR_RED,
				   0.1, 240.1, 0.05); */
		
		// Determine Offset
		if (ShopIndex > SHOP_SCROLL)
			ShopOffset = ShopIndex - SHOP_SCROLL;
		else
			ShopOffset = 0;
		
		// Draw Item List
        for (int i = ShopOffset; i < ShopOffset + (SHOP_SCROLL * 2) + 1; i++)
        {
			if (i > ShopMax[ShopPage] - 1) continue;
			
			SetFont("SMALLFONT");
            if (i == ShopIndex)
				if (CheckInventory(Shop[ShopPage][i][0]) > 0)
					HudMessage(s:Shop[ShopPage][i][1], s:" [", d:CheckInventory(Shop[ShopPage][i][0]), s:"]";
							   HUDMSG_PLAIN, 3001 + i, CR_GREEN,
							   24.1, 50.0 + 8.0 * (i - ShopOffset), 0.05);
				else
					HudMessage(s:Shop[ShopPage][i][1];
							   HUDMSG_PLAIN, 3001 + i, CR_GREEN,
							   24.1, 50.0 + 8.0 * (i - ShopOffset), 0.05);
            else
                if (CheckInventory("Credits") >= ShopCosts[ShopPage][i] - ShopCosts[ShopPage][i] * Discount / 100)
					if (CheckInventory(Shop[ShopPage][i][0]) > 0)
						HudMessage(s:Shop[ShopPage][i][1], s:" [", d:CheckInventory(Shop[ShopPage][i][0]), s:"]";
								   HUDMSG_PLAIN, 3001 + i, CR_WHITE,
								   24.1, 50.0 + 8.0 * (i - ShopOffset), 0.05);
					 else
						HudMessage(s:Shop[ShopPage][i][1];
								   HUDMSG_PLAIN, 3001 + i, CR_WHITE,
								   24.1, 50.0 + 8.0 * (i - ShopOffset), 0.05);
                else
					if (CheckInventory(Shop[ShopPage][i][0]) > 0)
						HudMessage(s:Shop[ShopPage][i][1], s:" [", d:CheckInventory(Shop[ShopPage][i][0]), s:"]";
								   HUDMSG_PLAIN, 3001 + i, CR_RED,
								   24.1, 50.0 + 8.0 * (i - ShopOffset), 0.05);
					else
						HudMessage(s:Shop[ShopPage][i][1];
								   HUDMSG_PLAIN, 3001 + i, CR_RED,
								   24.1, 50.0 + 8.0 * (i - ShopOffset), 0.05);
        }
        
        // Check Input
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && ShopIndex >= 0)
        {
			if (ShopIndex <= 0) ShopIndex = ShopMax[ShopPage];
            ActivatorSound("menu/move", 127);
            ShopIndex--;
        }
        if (Buttons == BT_BACK && OldButtons != BT_BACK && ShopIndex <= ShopMax[ShopPage])
        {
			if (ShopIndex >= ShopMax[ShopPage] - 1) ShopIndex = -1;
            ActivatorSound("menu/move", 127);
            ShopIndex++;
        }
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT && ShopPage >= 0) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT && ShopPage >= 0))
        {
			if (ShopPage <= 0) ShopPage = ShopCategories;
            ActivatorSound("menu/move", 127);
			ShopIndex = 0;
            ShopPage--;
        }
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT && ShopPage < ShopCategories) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT && ShopPage < ShopCategories))
        {
			if (ShopPage >= ShopCategories - 1) ShopPage = -1;
            ActivatorSound("menu/move", 127);
			ShopIndex = 0;
            ShopPage++;
        }
        if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			if (CheckInventory("Credits") >= Cost)
				BuyItem(Shop[ShopPage][ShopIndex][0], Cost);
			else
				ActivatorSound("menu/error", 127);
		}
		if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
			if (CheckInventory(Shop[ShopPage][ShopIndex][0]) > 0)
				SellItem(Shop[ShopPage][ShopIndex][0], false);
			else
				ActivatorSound("menu/error", 127);
		if (Buttons & BT_SPEED)
		{
			SellTimer++;
			
			if (SellTimer > 35 * 2 && CheckInventory(Shop[ShopPage][ShopIndex][0]) > 0)
			{
				SellItem(Shop[ShopPage][ShopIndex][0], true);
				SellTimer = 0;
			}
		}
		else
			SellTimer = 0;
    }
}

function void BuyItem(str Item, int Cost)
{
	/* If it has no price, fail
	if (Cost == 0)
	{
		ActivatorSound("menu/error", 127);
		return;
	}
	*/
	
	// If it's a Token, use alternate handling due to bullshit
	if (Item == "StatToken") 	Item = "SmallStatToken";
	if (Item == "StatCapToken") Item = "SmallStatCapToken";
	if (Item == "SkillToken")	Item = "SmallSkillToken";
	
	// Buy Type
	if (GetCVAR("drpg_shopbuytype"))
	{
		int Amount = 1;
		
		// If it's ammo, we need to get the real amounts to give if you're using the Give buy mode
		if (Item == "Clip")			Amount = 10;
		if (Item == "ClipBox")		Amount = 50;
		if (Item == "Shell")		Amount = 4;
		if (Item == "ShellBox")		Amount = 20;
		if (Item == "RocketAmmo")	Amount = 1;
		if (Item == "RocketBox")	Amount = 5;
		if (Item == "Cell")			Amount = 20;
		if (Item == "CellPack")		Amount = 100;
		
		// If it's ammo and it's the large version, just change it down to the base type
		if (Item == "ClipBox")		Item = "Clip";
		if (Item == "ShellBox")		Item = "Shell";
		if (Item == "RocketBox")	Item = "RocketAmmo";
		if (Item == "CellPack")		Item = "Cell";
		
		// If it's an instant use health item, give it the proper amount
		if (Item == "Soulsphere")	Amount = 100;
		if (Item == "AtomicHealth")	Amount = 200;
		
		// Now apply difficulty-based multipliers to the amount if it's ammo
		if (Item == "Clip" || Item == "Shell" || Item == "RocketAmmo" || Item == "Cell")
			if (GameSkill() == 1 || GameSkill() == 5)
				FixedMul(Amount, 2.0);
		
		if (CheckInventory(Item) == 0 || CheckInventory(Item) < CheckInventoryMax(Item))
			GiveInventory(Item, Amount);
		else
		{
			ActivatorSound("menu/error", 127);
			return;
		}
	}
	else
	{
		// DoomRL Compatibility
		if (GetCVAR("drpg_ext_doomrl"))
			if (ShopPage == 0) // Weapons
				Item = StrParam(s:Item, s:"Pickup");
		
		if (InBase && !GetCVAR("drpg_shoptype"))
			SpawnSpotForced(Item, ShopSpotID, 0, 0);
		else
			SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
	}
	
	ActivatorSound("menu/buy", 127);
	TakeInventory("Credits", Cost);
}

function void SellItem(str Item, bool SellAll)
{
	if (RankLevel == 0)
	{
		SetFont("BIGFONT");
		Print(s:"\cgYou cannot sell items until you reach the first rank");
		ActivatorSound("menu/error", 127);
		return;
	}
	
	int SellCost = ShopCosts[ShopPage][ShopIndex] / 2;
	int Amount = 1;
	
	if (SellAll)
		Amount = CheckInventory(Item);
	
	// Some pages need modified sell behavior
	if (ShopPage == 1) SellCost /= 4; // Ammo
	if (ShopPage == 5) SellCost /= 5; // Tokens
	
	// DoomRL Compatibility
	if (GetCVAR("drpg_ext_doomrl"))
	{
		if (ShopPage == 0) // Weapons
			TakeInventory("RLWeaponLimit", 1);
		if (ShopPage == 3) // Armor
			TakeInventory("RLArmorInInventory", 1);
		if (ShopPage == 8) // Mod Packs
			TakeInventory("RLModLimit", 1);
		if (ShopPage == 9) // Boots
			TakeInventory("RLBootsInInventory", 1);
	}
	
	// If it's an Augmentation, unequip it too
	if (ShopPage == 7 && Augs[ShopIndex])
	{
		Augs[ShopIndex] = false;
		AugSlotsUsed--;
	}
	
	// Sell the Item
	ActivatorSound("credits/payout", 127);
	TakeInventory(Item, Amount);
	GiveInventory("Credits", SellCost * Amount);
}
