#ifndef _GUI_DH_
#define _GUI_DH_

#include "Defs.dh"

library("GUI");

struct MouseInfo
{
	int X;
	int Y;
	int XAdd;
	int YAdd;
	int Buttons;
	int OldButtons;
	bool LeftButton;
	bool RightButton;
	bool LeftButtonDown;
	bool RightButtonDown;
};

// Pre-define control structs for the GUIWindow
struct GUILabel;
struct GUIIcon;
struct GUIButton;
struct GUIBar;
struct GUIList;
struct GUITooltip;

// GUI Event Function Pointers
typedef funcpointer(GUILabel *) LabelEventFunc;
typedef funcpointer(GUIIcon *) IconEventFunc;
typedef funcpointer(GUIButton *) ButtonEventFunc;
typedef funcpointer(GUIBar *) BarEventFunc;
typedef funcpointer(GUIList *) ListEventFunc;

// Tooltip Types
enum TooltipType
{
	Basic,
	Icon,
	Complex
};

struct GUIWindow
{
	str Title;
	int X;
	int Y;
	int Width;
	int Height;
	bool Dragging;
	bool Focused;
	bool Visible;
	bool RolledUp;
	bool CanClose;
	bool CanRoll;
	
	// Controls
	GUILabel 	*[MAX_CONTROLS] Labels;
	GUIIcon 	*[MAX_CONTROLS] Icons;
	GUIButton 	*[MAX_CONTROLS] Buttons;
	GUIBar 		*[MAX_CONTROLS] Bars;
	GUIList 	*[MAX_CONTROLS] Lists;
};

struct GUILabel
{
	str Text;
	int X;
	int Y;
	int Color;
	bool Big;
	
	GUIWindow *Window;
	GUITooltip *Tooltip;
};

struct GUIIcon
{
	str Texture;
	int X;
	int Y;
	int XOff;
	int YOff;
	int Width;
	int Height;
	
	GUIWindow *Window;
	GUITooltip *Tooltip;
	
	IconEventFunc OnClick;
};

struct GUIButton
{
	str Text;
	int X;
	int Y;
	int Width;
	int Height;
	int Color;
	int HoverColor;
	bool Big;
	
	GUIWindow *Window;
	GUITooltip *Tooltip;
	
	ButtonEventFunc OnClick;
};

struct GUIBar
{
	int X;
	int Y;
	int Value;
	int ValueMax;
	str Texture;
	
	GUIWindow *Window;
	GUITooltip *Tooltip;
};

struct GUIList
{
	int X;
	int Y;
	int Color;
	int HoverColor;
	int Shown;
	int Offset;
	int Selected;
	str[MAX_LIST] Entries;
	
	GUIWindow *Window;
	GUITooltip *Tooltip;
	
	ListEventFunc OnClick;
};

struct GUITooltip
{
	TooltipType Type;
	str Title;
	str Text;
	int Width;
	int Height;
	str Icon;
};

extern "ACS"
{
	script void ToggleGUI();
};

extern
{
	script void CheckCursor();
	script void CheckGUI();
};

extern
{
	// Window/Control Handling
	function void HandleWindow(GUIWindow *);
	function void HandleLabel(GUILabel *);
	function void HandleIcon(GUIIcon *);
	function void HandleButton(GUIButton *);
	function void HandleBar(GUIBar *);
	function void HandleList(GUIList *);
	
	// Window/Control Creation
	function GUIWindow *GUICreateWindow();
	function void GUIDeleteWindow(GUIWindow *);
	function GUILabel *GUICreateLabel(GUIWindow *);
	function GUIIcon *GUICreateIcon(GUIWindow *);
	function GUIButton *GUICreateButton(GUIWindow *);
	function GUIBar *GUICreateBar(GUIWindow *);
	function GUIList *GUICreateList(GUIWindow *);
	function GUITooltip *GUICreateTooltip();
	
	// Utility
	function void FocusWindow(GUIWindow *);
	function bool InTitleBar(GUIWindow *);
	function bool InRegion(int, int, int, int);
	function void DrawBorder(int, int, int, int);
};

#endif
