#ifndef _RPG_DH_
#define _RPG_DH_

#include "Defs.dh"
#include "GUI.dh"
#include "ItemData.dh"
#include "Skills.dh"

library("RPG");

// Forward Declarations
struct MonsterInfo;
struct ShieldPart;
struct ShieldAccessory;

AddressSpaceDecl MapArray ItemSpace;
AddressSpaceDecl MapArray MonsterSpace;
AddressSpaceDecl MapArray ShieldSpace;

struct MissionInfo
{
    // Basic
    bool Active;
    int Type;
    int Difficulty;
    
    // Reward
    long int RewardXP;
    long int RewardRank;
    int RewardCredits;
    int RewardModules;
    ItemInfo ItemSpace *RewardItem;
    
    // Mission Data
    ItemInfo ItemSpace *Item;
    MonsterInfo MonsterSpace *Monster;
    int Current;
    int Amount;
};

struct TurretUpgrade
{
    str Name;
    int MaxLevel;
    int Cost;
    
    str Description;
    str UpgradeInfo;
    str CommandInfo;
    
    TurretUpgrade *Prereq;
};

struct PlayerData
{
    int TID;
    int PlayerView;
    
    // Flags
    bool FirstRun;
    bool InMenu;
    bool InShop;
    bool InMinigame;
    bool CrateOpen;
    bool LastLegs;      // You're about to die, do something about it!
    
    // Primary Stats
    int Strength;       // Increases Damage
    int Defense;        // Reduces Damage taken
    int Vitality;       // Increases max Health and HP regen rate
    int PrevVitality;   // Player's Vitality from last tic
    int Energy;         // Increases max EP and EP regen rate
    int PrevEnergy;     // Player's Energy from last tic
    int Regeneration;   // Increases both HP/EP regen rate
    int Agility;        // Increases movement speed, jump height and survival bonus (and optionally weapon speed)
    int Capacity;       // Increases max ammo capacities
    int Luck;           // Increases drop chances
    int ActualHealth;   // The player's real, actual Health
    int HealthMax;      // Max player Health
    int PrevHealth;     // Player's Health from last tic
    int PrevCredits;    // Player's held Credits from last tic
    
    // Stat Bonuses
    int StrengthBonus;
    int DefenseBonus;
    int VitalityBonus;
    int EnergyBonus;
    int RegenerationBonus;
    int AgilityBonus;
    int CapacityBonus;
    int LuckBonus;
    
    // Stat XP Levels
    long int StrengthXP;
    long int DefenseXP;
    long int VitalityXP;
    long int EnergyXP;
    long int RegenerationXP;
    long int AgilityXP;
    long int CapacityXP;
    long int LuckXP;
    
    // Stat Perks
    bool[STAT_MAX] Perks;
    int AgilityTimer;
    
    // Secondary Stats
    int LevelDamage;            // Damage dependent on the player's level
    int BonusDamage;            // Damage bonus given by the Strength stat
    fixed DamageMult;           // Damage multiplier from Red Aura and Strength Aug
    int TotalDamage;            // Combined LevelDamage and BonusDamage
    fixed DamageFactor;         // General damage the player will defend against
    int Mass;                   // Player mass, for preventing knockback
    fixed StatusEffectResist;   // Chance to resist a status effect
    int AuraRange;              // The reach of your auras to affect other players
    int ToxicityRegenBonus;     // Speed at which Toxicity dissipates over time
    fixed Speed;                // Movement Speed
    fixed JumpHeight;           // Jump Height
    int WeaponSpeed;            // Weapon Speed Increase bsed on Agility
    fixed SurvivalBonus;        // Chance that you will survive a fatal hit
    int InvItems;               // How many inventory items you are currently carrying
    int StatCap;                // Current Stat Cap
    
    // Energy Points (EP)
    int EP;
    int EPMax;
    
    // Level
    int Level;
    long int XP;
    long int XPNext;
    
    // Rank
    str RankString;
    int RankLevel;
    long int Rank;
    long int RankNext;
    int PayTimer;
    int PayKills;
    int PayBonus;
    
    // Combo System
    int Combo;
    int ComboTimer;
    int BonusGained;
    int XPGained;
    int RankGained;

    // HP/EP Regen Timers
    int HPRate;
    int HPTime;
    int HPAmount;
    int EPRate;
    int EPTime;
    int EPAmount;
    int RegenBoostTimer;

    // Can Drop / Drop Chance Percentages
    bool HealthDrop;
    bool EPDrop;
    bool ArmorDrop;
    bool PowerupDrop;
    bool WeaponDrop;
    bool ModuleDrop;
    bool AugDrop;
    bool ShieldDrop;
    bool StimDrop;
    fixed HealthChance;
    fixed EPChance;
    fixed ArmorChance;
    fixed PowerupChance;
    fixed WeaponChance;
    fixed ModuleChance;
    fixed AugChance;
    fixed ShieldChance;
    fixed StimChance;
    
    // Menu Data
    bool MenuBlock;
    int Menu;
    int OutpostMenu;
    int MenuIndex;
    int StatPage;
    int SkillPage;
    int ShieldPage;
    bool[3][MAX_PARTS] NewShieldParts;
    bool[MAX_ACCESSORIES] NewShieldAccessoryParts;
    int StimSelected;
    int TurretPage;
    int ShopIndex;
    int ShopPage;
    
    // Skill Info
    SkillLevelInfo[MAX_CATEGORIES][MAX_SKILLS] SkillLevel;
    AuraInfo Aura;
    bool AuraBonus;
    fixed SkillRefundMult;
    bool SkillWheelOpen;
    int SkillSelected;
    int[MAX_SKILLKEYS] SkillCategory;
    int[MAX_SKILLKEYS] SkillIndex;
    int Summons;
    int[MAX_SUMMONS] SummonTID;
    bool[SOUL_MAX] SoulActive;
    bool OverHeal;
    int SkillCostMult;
    int SkillPowerupCooldown;
    int SkillSupplyCooldown;
    
    // Status Effects
    bool[SE_MAX] StatusType;
    int StatusTypeHUD;
    int[SE_MAX] StatusIntensity;
    int[SE_MAX] StatusTimer;
    int[SE_MAX] StatusTimerMax;
    int Toxicity;
    
    // Locker
    bool LockerMode;
    int[ITEM_CATEGORIES][ITEM_MAX] Locker;
    struct DRLAWeapon
    {
        int Total;
        int Power;
        int Bulk;
        int Agility;
        int Technical;
        int Sniper;
        int Firestorm;
        int Nano;
        int Artifacts;
    } [ITEM_MAX] WeaponMods;
    
    // GUI
    bool GUIOpen;
    MouseInfo Mouse;
    GUIWindow *[MAX_WINDOWS] Window;
    
    // Auto-Sell/Auto-Store
    int[ITEM_CATEGORIES][ITEM_MAX] ItemAutoMode;
    
    // Toxicity Meter
    int ToxicTimer;
    int ToxicOffset;
    int ToxicStage;
    
    // Crate
    int CrateID;
    int CrateIndex;
    
    // Misc
    int ShopDiscount;
    int ShopCard;
    int DelayTimer;
    int DamageType;
    bool AutosaveTimerReset;
    
    // Associated Drops
    DynamicArray DropTID;
    
    // Structception
    struct
    {
        fixed Battery;
        fixed BatteryMax;
        fixed BatteryDrain;
        int Slots;
        int SlotsUsed;
        bool[AUG_MAX] Active;
        int[AUG_MAX] Level;
    } Augs;
    
    struct
    {
        // Current Parts
        ShieldPart ShieldSpace *Body;
        ShieldPart ShieldSpace *Battery;
        ShieldPart ShieldSpace *Capacitor;
        ShieldAccessory ShieldSpace *Accessory;
        
        // Flags
        bool Active;
        bool Full;
        
        // Stats
        int Charge;
        int Capacity;
        int Interval;
        int ChargeRate;
        fixed DelayRate;
        int Timer;
        
        // Accessories
        int AccessoryBattery;
        int AccessoryTimer;
        Position AccessoryPosition;
        
        // Armor
        str ArmorType;
        int ArmorAmount;
        int ArmorMax;
    } Shield;
    
    struct
    {
        int[STIM_MAX] Vials;
        bool[STIM_MAX] ActiveBonus;
        int[STIM_MAX] Current;
        int[STIM_MAX] Last;

        int[STIM_MAX] PowerupTimer;
        int[STIM_MAX] PowerupTimerMax;
        
        int[STAT_MAX] PrevStats;
        
        bool Active;
        int Size;
        int Amount;
        int Capacity;
        int VialMax;
        int Timer;
        int TimerMax;
    } Stim;
    
    struct
    {
        // Flags
        bool Init;
        bool Active;
        bool Destroyed;
        bool Maintenance;
        
        // TID
        int TID;
        
        // Upgrades
        int[MAX_UPGRADES] Upgrade;
        
        // Health
        int Health;
        int HealthMax;
        
        // Weapons/Ammo
        int Weapon;
        int BulletAmmo;
        int BulletAmmoMax;
        int ShellAmmo;
        int ShellAmmoMax;
        int RocketAmmo;
        int RocketAmmoMax;
        int PlasmaAmmo;
        int PlasmaAmmoMax;
        int RailAmmo;
        int RailAmmoMax;
        bool Autoload;
        bool SelfDestruct;
        
        // Assist
        bool TeleportEnabled;
        
        // Sensors
        bool SensorsActive;
        int SensorMode;
        int SensorPercent;
        int ModulesCollected;
        
        struct
        {
            bool Enabled;
            DynamicArray Array;
            int CurrentPosition;
            int PulseDelay;
            int CheckDelay;
        } SensorItemData;
        
        struct
        {
            bool Enabled;
            DynamicArray Array;
            int CurrentPosition;
            int PulseDelay;
            int CheckDelay;
        } SensorCrateData;
        
        // Command
        int Command;
        
        // Battery
        int Battery;
        int BatteryMax;
        
        // Timers
        int HitTimer;
        int TeleportTimer;
        int ChargeTimer;
        int RepairTimer;
        int RefitTimer;
        
        // Offsets
        fixed AngleOffset;
        fixed DistanceOffset;
        fixed HeightOffset;
    } Turret;
    
    MissionInfo Mission;
};

extern
{
    // Version
    variable MapRegister str Version;
    
    // Flags
    variable static bool InBase;
    variable static bool Transported;
    variable static bool GlobalsInitialized;
    variable static int CompatMode;
    
    // Arrays
    variable static str[MAX_PLAYERS] PlayerWeapon;
    
    // Structs
    variable static PlayerData[MAX_PLAYERS] _PlayerData;
    
    // Item TIDs
    variable MapRegister bool ItemsInitialized;
    variable MapArray int[MAX_ITEMS] ItemTIDs;
    
    // --------------------------------------------------
    // Multiplayer HUD
    // 
    
    // HUD Item Counts
    variable GlobalArray(18) int[MAX_PLAYERS] Credits @ 0;
    
    // Energy Points (EP)
    variable GlobalArray(2)  int[MAX_PLAYERS] EP @ 0;
    
    // Shield
    variable GlobalArray(50) int[MAX_PLAYERS] Shield @ 0;
    variable GlobalArray(51) int[MAX_PLAYERS] ShieldCapacity @ 0;
    variable GlobalArray(52) int[MAX_PLAYERS] ShieldHealth @ 0;
};

extern "ACS"
{
    script void QuickHeal(bool) net;
    script void QuickEP() net;
    script void StatusEffect(int, int, int);
    script int AddHealth(int, int);
    script int AddHealthDirect(int, int);
};

extern
{
    script void GlobalInit() open;
    script void Init() enter;
    script void Loop();
    script void WeaponSpeed();
    script void PlayerDamage();
    script void StatRandomizer();
    script void AutosaveHandler();
    script void ItemHandler();
    script void ItemInit();
    script void DynamicLootGenerator(str, int = 0);
    script void Dead() death;
    script void Respawn() respawn;
};

extern
{
    function void CheckHUD();
    function void CheckKeys();
    function void DefaultLoadout();
    function void CheckCompatibility();
    function void AssignTIDs();
};

#endif
