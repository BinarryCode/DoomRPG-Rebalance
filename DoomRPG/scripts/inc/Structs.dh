#ifndef _STRUCTS_DH_
#define _STRUCTS_DH_

#include "Defs.dh"
#include "GUI.dh"

struct Augmentations
{
    int Battery;
    int BatteryMax;
    int Slots;
    int SlotsUsed;
    bool[MAX_AUGS] Active;
    int[MAX_AUGS] Level;
};

struct ShieldInfo
{
    // Current Parts
    int Body;
    int Battery;
    int Capacitor;
    int Accessory;
    
    // Flags
    bool Active;
    bool Full;

    // Stats
    int Charge;
    int Capacity;
    int Interval;
    int ChargeRate;
    int DelayRate;
    int Timer;
    int Health;
    
    // Accessories
    bool Ghost;
    int GhostTimer;
};

struct StimData
{
    int[MAX_COMPOUNDS] Vials;
    bool[MAX_COMPOUNDS] ActiveBonus;
    int[MAX_COMPOUNDS] Current;
    int[MAX_COMPOUNDS] Last;

    int[MAX_COMPOUNDS] PowerupTimer;
    int[MAX_COMPOUNDS] PowerupTimerMax;
    
    bool Active;
    int Size;
    int Amount;
    int Capacity;
    int VialMax;
    int Timer;
};

struct LockerItem
{
    str Actor;
    str Name;
};

struct LevelTeleporterInfo
{
    char[9] LumpName;
    char[48] NiceName;
};

struct LevelBonusInfo
{
    bool KillBonus;
    bool ItemsBonus;
    bool SecretsBonus;
    bool AllBonus;
};

// Item Definition
struct ItemInfo
{
    str Actor;
    str Name;
    
    int Price;
    int Rank;
    
    // Sprite information
    struct
    {
        str Name;
        int XOff;
        int YOff;
    } Sprite;
    
    // Item is not storable in the Locker
    bool Unstorable;
    
    // Only used for the Shop Special
    int Category;
};

// Loot Definition
struct LootItem
{
    str Actor;
    str Name;
    str Icon;
    int Effect;
};

// Monster Definition
struct MonsterInfo
{
    str Actor;
    str Name;
    // This monster's relative threat level as a percentage
    int Difficulty;
};

struct MissionInfo
{
    // Basic
    bool Active;
    int Type;
    int Difficulty;
    
    // Reward
    int RewardXP;
    int RewardRank;
    int RewardCredits;
    ItemInfo RewardItem;
    
    // Mission Data
    LootItem Item;
    MonsterInfo Monster;
    int Current;
    int Amount;
};

struct PlayerData
{
    int TID;
    
    // Flags
    bool FirstRun;
    bool InMenu;
    bool InShop;
    bool InMinigame;
    
    // Primary Stats
    int Strength;       // Increases Damage
    int Defense;        // Reduces Damage taken
    int Vitality;       // Increases max Health and HP regen rate
    int Energy;         // Increases max EP and EP regen rate
    int Regeneration;   // Increases both HP/EP regen rate
    int Agility;        // Increases movement speed, jump height and survival bonus (and optionally weapon speed)
    int Capacity;       // Increases max ammo capacities
    int Luck;           // Increases drop chances
    int HealthMax;      // Max player Health
    int ArmorMax;       // Max Armor that the player's current armor can go up to
    
    // Stat Bonuses
    int StrengthBonus;
    int DefenseBonus;
    int VitalityBonus;
    int EnergyBonus;
    int RegenerationBonus;
    int AgilityBonus;
    int CapacityBonus;
    int LuckBonus;
    
    // Stat Perks
    bool[STAT_MAX] Perks;
    int AgilityTimer;
    
    // Secondary Stats
    int LevelDamage;        // Damage dependent on the player's level
    int BonusDamage;        // Damage bonus given by the Strength stat
    int TotalDamage;        // Combined LevelDamage and BonusDamage
    fixed DamageFactor;     // General damage the player will defend against
    int Mass;               // Player mass, for preventing knockback
    fixed Speed;            // Movement Speed
    fixed JumpHeight;       // Jump Height
    int WeaponSpeed;        // Weapon Speed Increase bsed on Agility
    fixed SurvivalBonus;    // Chance that you will survive a fatal hit
    int InvItems;           // How many inventory items you are currently carrying
    int StatCap;            // Current Stat Cap
    
    // Energy Points (EP)
    int EP;
    int EPMax;
    
    // Level
    int Level;
    int XP;
    int XPNext;
    
    // Rank
    str RankString;
    int RankLevel;
    int Rank;
    int RankNext;
    int PayTimer;
    int PayKills;
    int PayBonus;
    
    // Combo System
    int Combo;
    int ComboTimer;
    int BonusGained;
    int XPGained;
    int RankGained;

    // HP/EP Regen Timers
    int HPRate;
    int HPTime;
    int HPAmount;
    int EPRate;
    int EPTime;
    int EPAmount;
    int ToxicityRegenBonus;
    int RegenBoostTimer;

    // Luck Chance Percentages
    fixed CreditChance;
    fixed HealthChance;
    fixed EPChance;
    fixed ArmorChance;
    fixed PowerupChance;
    fixed WeaponChance;
    fixed TokenChance;
    fixed AugChance;
    fixed ShieldChance;
    fixed StimChance;
    
    // Menu Data
    bool MenuBlock;
    int Menu;
    int OutpostMenu;
    int MenuIndex;
    int StatAmount;
    int SkillPage;
    int SkillMax;
    int ShieldPage;
    int StimSelected;
    int ShopIndex;
    int ShopPage;
    
    // Skill Info
    bool[AURA_MAX] Aura;
    int AuraTimer;
    bool AuraBonus;
    fixed SkillCostMult;
    bool SkillWheelOpen;
    int SkillSelected;
    int[MAX_SKILLKEYS] SkillCategory;
    int[MAX_SKILLKEYS] SkillIndex;
    int Summons;
    int[MAX_SUMMONS] SummonTID;
    
    // Status Effects
    int StatusType;
    int StatusTimer;
    int Toxicity;

    // Per-tic Checks
    int BeforeHealth;
    int AfterHealth;
    int HealthLoss;
    int BeforeShield;
    int AfterShield;
    int ShieldLoss;
    
    // Locker
    int[ITEM_CATEGORIES][ITEM_MAX] Locker;
    bool LockerGlobal;
    int LockerPage;
    int LockerIndex;
    
    // GUI
    bool GUIOpen;
    MouseInfo Mouse;
    GUIWindow *[MAX_WINDOWS] Window;
    
    // Auto-Sell
    bool[ITEM_CATEGORIES][ITEM_MAX] AutoSell;
    int AutoSellTimer;
    int AutoSellPay;
    
    // Toxic Meter
    int ToxicTimer;
    int ToxicOffset;
    int ToxicStage;
    
    // Password System
    int[PW_SIZE] PasswordData;
    int PasswordChecksum;
    
    // Misc
    int ShopDiscount;
    int ShopCard;
    int DelayTimer;
    int DamageType;
    
    // Structception
    Augmentations Augs;
    ShieldInfo Shield;
    StimData Stim;
    MissionInfo Mission;
};

struct MinigameData
{
    // Global Minigame vars
    bool InMinigame;
    int Bet;

    // Blackjack vars
    bool BlackjackOver;
    bool BlackjackStay;

    // Blackjack Hands
    int[MAX_HAND] Hand1;
    int[MAX_HAND] Hand2;
};

struct Skill
{
    str Name;
    int Cost;
    int MaxLevel;
    scriptpointer(Skill *, void *)->bool Use;
    str[MAX_LEVELS] Description;
    int Level;
    int CurrentLevel;
    str Icon;
};

struct ShieldPart
{
    str Actor;
    str Name;
    str Icon;
    str Description;
    
    int Capacity;
    int ChargeRate;
    int DelayRate;
};

struct AugInfo
{
    str Name;
    int MaxLevel;
    str[MAX_AUG_LEVEL] Description;
};

// Used by DropInventory()
struct DroppedItem
{
    str Actor;
    bool NoDrop;
    bool TakeAll;
    int Max;
};

#endif
