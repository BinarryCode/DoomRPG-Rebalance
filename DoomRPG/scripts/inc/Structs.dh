#ifndef _STRUCTS_DH_
#define _STRUCTS_DH_

#include "Defs.dh"

struct Augmentations
{
	int Slots;
	int SlotsUsed;
	bool[MAX_AUGS] Active;
	int[MAX_AUGS] Level;
};

struct ShieldInfo
{
	// Current Parts
	int	Body;
	int	Battery;
	int	Capacitor;
	int	Accessory;
	
	// Flags
	bool Active;
	bool Full;

	// Stats
	int	Charge;
	int	Capacity;
	int Interval;
	int ChargeRate;
	int DelayRate;
	int Timer;
	int Health;
	
	// Accessories
	bool Ghost;
	int GhostTimer;
};

struct StimData
{
	int[MAX_COMPOUNDS] Vials;
	bool[MAX_COMPOUNDS] ActiveBonus;
	int[MAX_COMPOUNDS] Current;
	int[MAX_COMPOUNDS] Last;
	
	bool Active;
	int Size;
	int Amount;
	int Capacity;
	int VialMax;
	int Timer;
};

struct LockerItem
{
	str Actor;
	str Name;
};

struct LevelTeleporterInfo
{
	char[9] LumpName;
	char[32] NiceName;
};

struct LevelBonusInfo
{
	bool KillBonus;
	bool ItemsBonus;
	bool SecretsBonus;
	bool AllBonus;
};

struct PlayerData
{
	int TID;
	
	// Flags
	bool FirstRun;
	bool InMenu;
	bool InShop;
	bool InMinigame;
	
	// Primary Stats
	int	Strength;		// Increases Damage
	int	Defense;		// Reduces Damage taken
	int	Vitality;		// Increases max Health and HP regen rate
	int	Energy;			// Increases max EP and EP regen rate
	int	Regeneration;	// Increases both HP/EP regen rate
	int	Agility;		// Increases movement speed, jump height and survival bonus (and optionally weapon speed)
	int	Capacity;		// Increases max ammo capacities
	int	Luck;			// Increases drop chances
	int	HealthMax;		// Max player Health
	int	ArmorMax;		// Max Armor that the player's current armor can go up to
	
	// Stat Bonuses
	int StrengthBonus;
	int DefenseBonus;
	int VitalityBonus;
	int EnergyBonus;
	int RegenerationBonus;
	int AgilityBonus;
	int CapacityBonus;
	int LuckBonus;

	// Secondary Stats
	int LevelDamage;		// Damage dependent on the player's level
	int BonusDamage;		// Damage bonus given by the Strength stat
	int TotalDamage;		// Combined LevelDamage and BonusDamage
	fixed DamageFactor;		// General damage the player will defend against
	int Mass;				// Player mass, for preventing knockback
	fixed Speed;			// Movement Speed
	fixed JumpHeight;		// Jump Height
	int WeaponSpeed;		// Weapon Speed Increase bsed on Agility
	fixed SurvivalBonus;	// Chance that you will survive a fatal hit
	int InvItems;			// How many inventory items you are currently carrying
	int StatCap;			// Current Stat Cap
	
	// Energy Points (EP)
	int EP;
	int EPMax;
	
	// Level
	int	Level;
	long int XP;
	long int XPNext;
	int LevelTokens;
	
	// Rank
	str	RankString;
	int	RankLevel;
	int	Rank;
	int	RankNext;
	int	PayTimer;
	int	PayKills;
	int PayBonus;
	
	// Combo System
	int Combo;
	int ComboTimer;
	long int BonusGained;
	long int XPGained;
	long int RankGained;

	// HP/EP Regen Timers
	int HPRate;
	int HPTime;
	int HPAmount;
	int EPRate;
	int EPTime;
	int EPAmount;
	int LowHealthTimer;
	int RegenBoostTimer;

	// Luck Chance Percentages
	fixed CreditChance;
	fixed HealthChance;
	fixed EPChance;
	fixed ArmorChance;
	fixed PowerupChance;
	fixed WeaponChance;
	fixed TokenChance;
	fixed AugChance;
	fixed ShieldChance;
	fixed StimChance;
	
	// Menu Data
	bool MenuBlock;
	int Menu;
	int OutpostMenu;
	int MenuIndex;
	int StatAmount;
	int SkillPage;
	int SkillMax;
	int ShieldPage;
	int StimSelected;
	int ShopIndex;
	int ShopOffset;
	int ShopPage;
	int ShopDiscount;

	// Skill Info
	int	Aura;
	int	AuraTimer;
	fixed SkillCostMult;
	bool AuraBonus;
	int Summons;
	int[MAX_SUMMONS] SummonTID;
	int[MAX_CATEGORIES]	SkillCatagory;
	int[MAX_CATEGORIES]	SkillIndex;
	
	// Status Effects
	int StatusType;
	int StatusTimer;

	// Health Checks
	int BeforeHealth;
	int AfterHealth;
	int HealthLoss;
	
	// Locker
	int[LOCKER_CATEGORIES][MAX_LOCKER] Locker;
	bool LockerGlobal;
	int LockerPage;
	int LockerIndex;
	
	// Misc
	int DelayTimer;
	
	// Structception
	Augmentations Augs;
	ShieldInfo Shield;
	StimData Stim;
};

struct MinigameData
{
	// Global Minigame vars
	bool InMinigame;
	int Bet;

	// Blackjack vars
	bool BlackjackOver;
	bool BlackjackStay;

	// Blackjack Hands
	int[MAX_HAND] Hand1;
	int[MAX_HAND] Hand2;
};

struct Skill
{
	str Name;
	int Cost;
	int MaxLevel;
	str[MAX_LEVELS] Description;
	int Level;
	int CurrentLevel;
};

struct ShieldPart
{
	str Name;
	str Actor;
	str Icon;
	str Description;
	
	int Capacity;
	int ChargeRate;
	int DelayRate;
};

struct ShopItem
{
	str Actor;
	str Name;
	
	int Price;
	int Rank;
	int Held;
	
	// Only used for the Shop Special
	int Category;
};

// Used by DropInventory()
struct DroppedItem
{
	str Actor;
	bool NoDrop;
	bool TakeAll;
	int Max;
};

#endif
