#ifndef _STRUCTS_DH_
#define _STRUCTS_DH_

#include "Defs.dh"

struct Augmentation
{
	int MaxAugSlots;
	bool[MAX_AUGS] Active;
};

struct ShieldParts
{
	// Current Parts
	int	Body;
	int	Battery;
	int	Capacitor;
	int	Accessory;
	
	// Stats
	int	Charge;
	int	Capacity;
	int Interval;
	int ChargeRate;
	int DelayRate;
	int Timer;
	
	// Comparisons
	int BeforeHealth;
	int AfterHealth;
	int HealthLoss;
	int BeforeArmor;
	int AfterArmor;
	int ArmorLoss;
	
	// Flags
	bool Full;
	bool Nova;
	
	// Saved Armor
	str	ArmorType;
	int	ArmorAmount;
};

struct Stims
{
	int[MAX_COMPONENTS] Vials;
	int[MAX_COMPONENTS] CurrentStim;
	int[MAX_COMPONENTS] LastStim;
	bool StimActive;
	int StimSize;
	int StimAmount;
	int StimCapacity;
	int StimTimer;
};

struct Player
{
	// Flags
	bool FirstRun;
	bool InMenu;
	bool InShop;
	
	// Primary Stats
	int	Strength;		// Increases Damage
	int	Defense;		// Reduces Damage taken
	int	Vitality;		// Increases max Health and HP regen rate
	int	Energy;			// Increases max EP and EP regen rate
	int	Regeneration;	// Increases both HP/EP regen rate
	int	Agility;		// Increases movement speed, jump height and survival bonus (and optionally weapon speed)
	int	Capacity;		// Increases max ammo capacities
	int	Luck;			// Increases drop chances
	int	HealthMax;		// Max player Health
	int	ArmorMax;		// Max Armor that the player's current armor can go up to
	
	// Secondary Stats
	int LevelDamage;	// Damage dependent on the player's level
	int BonusDamage;	// Damage bonus given by the Strength stat
	int TotalDamage;	// Combined LevelDamage and BonusDamage
	fixed DamageFactor;	// General damage the player will defend against
	int Mass;			// Player mass, for preventing knockback
	fixed Speed;		// Movement Speed
	fixed JumpHeight;	// Jump Height
	int WeaponSpeed;	// Weapon Speed Increase bsed on Agility
	int SurvivalBonus;	// Chance that you will survive a fatal hit
	
	// Energy Points (EP)
	int EP;
	int EPMax;
	
	// Level
	int	Level;
	long int XP;
	long int XPNext;
	
	// Rank
	str	RankString;
	int	RankLevel;
	int	Rank;
	int	RankNext;
	int	PayTimer;
	int	PayKills;
	
	// Combo System
	int Combo;
	int ComboTimer;
	int TotalGained;
	int XPGained;
	int	RankGained;
	
	// HP/EP Regen Timers
	int HPRate;
	int HPTime;
	int HPAmount;
	int EPRate;
	int EPTime;
	int EPAmount;
	int LowHealthTimer;
	int RegenBoostTimer;

	// Luck Chance Percentages
	fixed CreditChance;
	fixed HealthChance;
	fixed ArmorChance;
	fixed PowerupChance;
	fixed RuneChance;
	fixed TokenChance;
	fixed AugChance;
	fixed ShieldChance;
	fixed EPChance;
	
	// Skill Info
	int	Aura;
	int	AuraTimer;
	int[MAX_CATEGORIES]	SkillCatagory;
	int[MAX_CATEGORIES]	SkillIndex;
	
	// Structception
	Augmentation Augs;
	ShieldParts Shield;
	Stims Stim;
};

struct Skill
{
	str Name;
	str[MAX_LEVELS] Description;
	int Cost;
	int Level;
	int CurrentLevel;
	int MaxLevel;
};

#endif
