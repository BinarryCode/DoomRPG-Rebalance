#ifndef _MAP_DH_
#define _MAP_DH_

#include "Monsters.dh"

struct LevelInfo
{
    // MAPINFO Level Number
    int LevelNum;
    
    // If we start in the Outpost, we set this on MAP01 to tell ourselves that
    // we need to replace the placeholder info with real info.
    bool NeedsRealInfo;
    
    // Name data
    str LumpName;
    str NiceName;
    
    // Level stats
    bool Completed;
    
    int MaxMonstersKilled;
    int MaxTotalMonsters;
    int MaxMonsterPercentage;
    int MaxItemsFound;
    int MaxTotalItems;
    int MaxItemPercentage;
    int MaxSecretsFound;
    int MaxTotalSecrets;
    int MaxSecretPercentage;
    int ShortestTime;
    int UniqueSecrets;
    
    // Par/Sucks time
    int Par;
    int Sucks;
    
    // 100% Bonuses
    bool KillBonus;
    bool ItemsBonus;
    bool SecretsBonus;
    bool AllBonus;
    bool ParBonus;
    
    // Event stuff
    DynamicArray MonsterPositions;
    unsigned int Event;
    
    // Megaboss Event
    MegabossInfoPtr MegabossActor;
    
    // Environmental Hazard Event
    int HazardLevel;
    int RadLeft;
    int GeneratorFuel;
    
    // Thermonuclear Bomb event
    int BombTime;
    bool BombExplode;
    bool BombAnnouncing;
    bool[MAX_NUKE_KEYS] BombKeyActive;
    bool[MAX_NUKE_KEYS] BombKeyDisarming;
    int[MAX_NUKE_KEYS] BombKeyTimer;
    
    // Low Power Event
    bool PowerGeneratorActive;
    
    // One Monster Event
    MonsterInfoPtr SelectedMonster;
    
    // Hell Unleashed Event
    int HellUnleashedActive;
    int PandoraBoxTID;
    fixed LevelAdd;
    fixed RareAdd;
};

extern
{
    variable static LevelInfo *CurrentLevel;
    variable static DynamicArray KnownLevels;
    variable static int LastVisitedLevel;
    variable static int AllBonusMaps;
    variable static int CurrentSkill;
};

extern
{
    script void MapInit() open;
    script void MapLoop();
    script void CalculateBonusMaps();
    script void DecideMapEvent(LevelInfo *);
    script void SetupMapEvent();
    script void SetupOutpostEvent();

    // Event Scripts
    // --------------------------------------------------
    
    // Megaboss
    script void MegaBossEvent();
    
    // Environmental Hazard
    script void EnvironmentalHazard();
    script void EnvironmentalHazardSetColors();
    script void EnvironmentalHazardDamage();
    script void EnvironmentalHazardRefillGenerator();
    script void EnvironmentalHazardDisarm();
    
    // Thermonuclear Bomb
    script void ThermonuclearBombEvent();
    script void ThermonuclearBombAnnounce(int);
    script void ThermonuclearBombActivate();
    script void ThermonuclearBombExplode();
    
    // Low Power
    script void LowPowerEvent();
    script void PowerGeneratorActivate();
    
    // One Monster
    script void OneMonsterEvent();
    
    // Hell Unleashed
    script void HellUnleashedEvent();
    script void HellUnleashedStart();
    script void HellUnleashedSpawnMonsters();
    
    // Rainbows
    script void RainbowEvent();
};

extern "ACS"
{
    script void MapExit(bool) @ MAP_EXIT_SCRIPTNUM;
};

extern
{
    function bool SpawnEventActor(str, int);
    function bool CheckMapEvent(int);
    function int FindLevelInfoIndex(int = 0);
};

#endif
