#ifndef _DEFS_DH_
#define _DEFS_DH_

#include <stdlib.h>
#include <ds_def.h>

#include <zcommon.acs>

// Scripts
#define acscript                extscript "ACS"
#define acfunc                  extfunc "ACS"
#define enter                   __enter
#define open                    __open
#define death                   __death
#define respawn                 __respawn
#define net                     __net

// Aliases
#define Print                   __printf<__printf_print>
#define PrintBold               __printf<__printf_bold>
#define Log                     __printf<__printf_log>
#define CallACS(script)         ACS_NamedExecuteWithResult((script))
#define Arbitrator              (PlayerNumber() == 0)
#define InMultiplayer           (GameType() == GAME_NET_COOPERATIVE)
#define GetMonsterID(N)         GetActorProperty((N), APROP_Score)
#define SetMonsterID(N, O)      SetActorProperty((N), APROP_Score, (O))

// Struct Aliases
#define Players(N)              _PlayerData[(N)]
#define Player                  _PlayerData[PlayerNumber()]
#define Skill(N)                _SkillData[(N)]
#define Skills                  _SkillData[PlayerNumber()]

// Deunderscoreification
#define HudMessage              __printf<__printf_hud>
#define HudMessageBold          __printf<__printf_hud_bold>
#define StrParam                __printf<__printf_string>
#define Output                  __output
#define FuncPtr                 __func_t
#define ScriptPtr               __script_t
#define AddressSpace            address_space
#define AddressSpaceDecl        address_space_decl
#define MapRegister             map_register
#define MapArray                map_array
#define GlobalArray             __global_array
#define WorldArray              __world_array

// Multiplayer
#define MAX_PLAYERS             8
#define PLAYER_TID              31337

// Constants
#define PI                      3.14159265359

// Boolean
#define true                    1
#define false                   0

// --------------------------------------------------
// Macro Functions
// 

// Verify a PlayerNumber() call
#if DEBUG
#define NEEDVALIDPLAYER if (PlayerNumber() < 0) \
{ \
    PrintBold("\cjERROR: \ciAn invalid player number was encountered on %i of %s.\c-\n", __LINE__, __FILE__); \
    return; \
}
#else
#define NEEDVALIDPLAYER {}
#endif

// Create a dynamic HUD ID given 4 words
#define MAKE_ID(a, b, c, d)	    ((DWORD)((a) | ((b) << 8) | ((c) << 16) | ((d) << 24)

// --------------------------------------------------
// Arena
// 

#define MAX_MODS                1
#define MAX_ENVIRONMENTS        4
#define MAX_BONUS               11
#define ARENA_INTERMISSION      1
#define ARENA_WAITING           2
#define ARENA_READY             3
#define ARENA_ACTIVE            4

// --------------------------------------------------
// Augmentations
// 

#define MAX_AUG_LEVEL           5

enum EAugTypes
{
    AUG_STRENGTH,
    AUG_DEFENSE,
    AUG_VITALITY,
    AUG_ENERGY,
    AUG_REGENERATION,
    AUG_AGILITY,
    AUG_CAPACITY,
    AUG_LUCK,
    AUG_BATTERY,
    MAX_AUGS,
};

// --------------------------------------------------
// Health Bars
// 

#define HBAR_ID                 11300

// --------------------------------------------------
// HUD
// 

#define STAT_ID                 11400

// --------------------------------------------------
// Item Data
// 

#define ITEM_CATEGORIES         16
#define ITEM_MAX                256

enum ECategoryFlags
{
    CF_NONE     = 0x0,
    CF_NOSELL   = 0x1,
    CF_NOBUY    = 0x2
};

// --------------------------------------------------
// Map
// 

#define MAP_EXIT_SCRIPTNUM      30000

// --------------------------------------------------
// Menu
// 

#define MAX_MENU                6
#define MENU_SCROLL             15
#define MENU_ID                 10000

enum EMenuPages
{
    MENUPAGE_MAIN,
    MENUPAGE_STATS,
    MENUPAGE_AUGS,
    MENUPAGE_SKILLS,
    MENUPAGE_SHIELD,
    MENUPAGE_STIMS,
    MENUPAGE_MAX
};

enum EStatPages
{
    STATPAGE_STATS,
    STATPAGE_PERKS,
    STATPAGE_TEAM,
    STATPAGE_MAX
};

// --------------------------------------------------
// Minigame
// 

#define MINIGAME_ID             12000
#define MAX_ROULETTE_ITEMS      20

// --------------------------------------------------
// Mission
// 

#define MAX_MISSIONS            20
#define MISSION_ID              11500
#define MAX_DIFFICULTIES        9
#define MAX_LOOT                9

enum EMissionTypes
{
    MT_COLLECT,
    MT_KILL,
    MT_KILLUNIQUES,
    MT_REINFORCEMENTS,
    MT_ASSASSINATION,
    MT_SECRETS,
    MT_ITEMS,
    MT_COMBO,
    MAX_MISSION_TYPES
};

// --------------------------------------------------
// Monsters
// 
#define MAX_MONSTERS            16384
#define MAX_DEF_MONSTERS        17
#define MAX_DEF_MONSTERS_DRLA   46
#define MAX_HUMANS              19

enum EMonsterFlags
{
    MF_BOSS         = 0x01,
    MF_NOXP         = 0x02,
    MF_NEGATIVEXP   = 0x04,
    MF_NOSTATS      = 0x08,
    MF_NOAURA       = 0x10,
    MF_NOPAYKILL    = 0x20,
    MF_NODROPS      = 0x40,
    MF_NOHEALTHBAR  = 0x80
};

enum EMonsterStatFlags
{
    SF_PLAYERTARGET = 0x01,
    SF_RECREATE     = 0x02
};

// --------------------------------------------------
// Namegen
// 

#define NAME_MAX_SHARED         91
#define NAME_MAX_DEMON_NAMES    106
#define NAME_MAX_BOSS_SUFFIXES  27
#define NAME_MAX_COLORS         20
#define NAME_MAX_ZOMBIE_RANK    9
#define NAME_MAX_MARINE_RANK    24
#define NAME_MAX_MALE           56
#define NAME_MAX_FEMALE         57
#define NAME_MAX_LAST           97
#define NAME_MAX_SUIT           4

// --------------------------------------------------
// Outpost
// 

#define OMENU_LEVELTRANSPORT    1
#define OMENU_SKILLCOMPUTER     2
#define OMENU_TOKENCONVERTER    3
#define OMENU_WAVESELECTOR      4
#define OMENU_SHOPSPECIAL       5
#define OMENU_BONUSSELECTOR     6
#define OMENU_LOCKER            7
#define OMENU_BBS               8
#define OMENU_MINIGAMES         9
#define SHOP_SPECIAL_TIMER      35 * 60 * 10
#define MAX_OUTPOST_ID          201
#define MAX_OUTPOST_MUSIC       2
#define MAX_COMBAT_MUSIC        5
#define MAX_BOSS_MUSIC          5
#define MAX_CREDITS_MUSIC       3
#define OUTPOST_MUSIC_NORMAL    0
#define OUTPOST_MUSIC_COMBAT    1
#define OUTPOST_MUSIC_BOSS      2
#define OUTPOST_MUSIC_CREDITS   3

// --------------------------------------------------
// Password
// 

#define PW_VERSION              7
#define PW_SIZE                 50
#define PW_COMPAT_SIZE          16
#define PW_MAX_ASSEMBLIES       34
#define PW_COMPAT_EXTRAS        1
#define PW_COMPAT_DOOMRL        2
#define PW_COMPAT_BRUTAL        3

// --------------------------------------------------
// Popoffs
// 

#define DNUM_DIGITS             7
#define DNUM_MONSTER_DIV        500

enum EDamageNumberTypes
{
    DNUM_NORMAL,
    DNUM_CRITICAL,
    DNUM_HEAL,
    DNUM_SCRATCH,
    DNUM_CREDGAIN,
    DNUM_CREDLOSS,
    DNUM_EPGAIN,
    DNUM_EPLOSS,
    DNUM_SHIELDGAIN,
    DNUM_SHIELDLOSS
};

// --------------------------------------------------
// RPG
// 

#define ASAVE_SAFETIME          20 * 35
#define ASAVE_RETRYTIME         5 * 35
#define MAX_DROPS               65535

enum EDamageTypes
{
    DT_NONE = -1,
    DT_NORMAL = 0,
    DT_TOXIC,
    DT_MELEE,
    DT_FIRE,
    DT_PLASMA,
    DT_LIGHTNING
};

// --------------------------------------------------
// Shield
// 

#define SHIELD_HEALTH           1000000
#define MAX_PARTS               29

enum EShieldAccessory
{
    SHIELD_ACC_NONE,
    SHIELD_ACC_X7,
    SHIELD_ACC_SGENX5B,
    SHIELD_ACC_AMP3000,
    SHIELD_ACC_HRYVP80,
    SHIELD_ACC_DEF2,
    SHIELD_ACC_B1ZUT3,
    SHIELD_ACC_CNVRT99,
    SHIELD_ACC_REKT50,
    SHIELD_ACC_UW0T,
    SHIELD_ACC_CU256,
    SHIELD_ACC_TXBGONN,
    SHIELD_ACC_WRP30LITE,
    SHIELD_ACC_NOVA2,
    SHIELD_ACC_LZY200,
    SHIELD_ACC_BST700,
    SHIELD_ACC_PHD88,
    SHIELD_ACC_BATTB,
    SHIELD_ACC_SHVRZ7,
    SHIELD_ACC_MM12,
    SHIELD_ACC_MRTEKRAR,
    SHIELD_ACC_SP00K,
    SHIELD_ACC_RRG0,
    SHIELD_ACC_E1NT31,
    SHIELD_ACC_PATR0T,
    SHIELD_ACC_RNJSUS2,
    SHIELD_ACC_PWAA9001,
    SHIELD_ACC_AWG01,
    SHIELD_ACC_SCLAR53,
    SHIELD_ACC_RFCT
};

// --------------------------------------------------
// Skills
// 

#define WHEEL_ID                20000
#define MAX_CATEGORIES          6
#define MAX_SKILLS              17
#define MAX_LEVELS              16
#define MAX_SUMMONS             10
#define MAX_SKILLKEYS           8

enum EAuraTypes
{
    AURA_RED,
    AURA_GREEN,
    AURA_WHITE,
    AURA_PINK,
    AURA_BLUE,
    AURA_PURPLE,
    AURA_ORANGE,
    AURA_DARKBLUE,
    AURA_YELLOW,
    AURA_MAX
};

enum ESoulTypes
{
    SOUL_RED,
    SOUL_GREEN,
    SOUL_WHITE,
    SOUL_PINK,
    SOUL_BLUE,
    SOUL_PURPLE,
    SOUL_ORANGE,
    SOUL_DARKBLUE,
    SOUL_YELLOW,
    SOUL_MAX
};

// --------------------------------------------------
// Stats
// 

#define MAX_LEVEL               100
#define MAX_RANK                24
#define COMBO_MAX               (35 * 4)
#define COMBO_STOP              (35 * 2)
#define CONFUSION_ID            75000
#define CONFUSION_NONSENSE_ID   60000

enum EStatTypes
{
    STAT_STRENGTH,
    STAT_DEFENSE,
    STAT_VITALITY,
    STAT_ENERGY,
    STAT_REGENERATION,
    STAT_AGILITY,
    STAT_CAPACITY,
    STAT_LUCK,
    STAT_MAX
};

enum EStatusEffects
{
    SE_BLIND,
    SE_CONFUSION,
    SE_POISON,
    SE_CORROSION,
    SE_FATIGUE,
    SE_VIRUS,
    SE_SILENCE,
    SE_CURSE,
    SE_EMP,
    SE_MAX
};

// --------------------------------------------------
// Stim
// 

enum EStimCompounds
{
    STIM_STRENGTH,
    STIM_DEFENSE,
    STIM_VITALITY,
    STIM_ENERGY,
    STIM_REGENERATION,
    STIM_AGILITY,
    STIM_CAPACITY,
    STIM_LUCK,
    STIM_PURIFIER,
    STIM_POTENCY,
    STIM_INDESTRUCTIBLE,
    STIM_SHADOW,
    STIM_INFINITY,
    STIM_CHRONO,
    STIM_ADRENALINE,
    STIM_GRAVITY,
    STIM_VAMPIRE,
    STIM_RAGE,
    STIM_MAGNETIC,
    MAX_COMPOUNDS
};

// --------------------------------------------------
// Utils
// 

#define PAY_ID                  11000
#define TOXMETER_ID             11100
#define BATTERY_ID              11200
#define IG_STORE                0
#define IG_LOCKER               1

enum EKeyStates
{
    KEY_PRESSED,
    KEY_ONLYPRESSED,
    KEY_UP,
    KEY_DOWN
};

enum ELogLevels
{
    LOG_NORMAL,
    LOG_DEBUG,
    LOG_WARNING,
    LOG_ERROR
};

#endif
