__library("Defs");
#include <zcommon.acs>

#define script			__extscript "ACS"
#define enter			__enter
#define true			1
#define false			0
#define CallACS(arg1)	ACS_NamedExecuteAlways((arg1), 0)
#define Print			__printf<__printf_print>
#define Log				__printf<__printf_log>
#define GlobalArr		__global_array
#define GlobalReg		__global_register
#define AddrSpace		__address_space
#define function		__function
#define lib				__library

#define MAX_NAMES		19

// Monster Flags
#define MF_BOSS			1
#define MF_NOXP			2
#define MF_NEGATIVEXP	4
#define MF_NOSTATS		8
#define MF_NOAURA		16
#define MF_NOPAYKILL	32
#define MF_NODROPS		64

#define V_VERS			0
#define V_TIME			1

#define MAX_CATEGORIES	6
#define MAX_SKILLS		17
#define MAX_LEVELS		10
#define MAX_PARTS		12

#define MAX_LEVEL		100
#define MAX_RANK		24

#define MAX_MENU		6

// Arena defines
#define MAX_MODS			1
#define MAX_ENVIRONMENTS	4
#define MAX_BONUS			9

// Arena State Defines
#define ARENA_INTERMISSION	1
#define ARENA_WAITING		2
#define ARENA_READY			3
#define ARENA_ACTIVE		4

#define MAX_COMPONENTS		10

// Aug stuff
#define AUG_STRENGTH		0
#define AUG_DEFENSE			1
#define AUG_VITALITY		2
#define AUG_ENERGY			3
#define AUG_REGENERATION	4
#define AUG_AGILITY			5
#define AUG_CAPACITY		6
#define AUG_LUCK			7

#define MAX_AUGS			8
#define AUG_LEVELS			5

/******************
*** GLOBAL VARS ***
*******************/

// All of these globalvars are used in SBARINFO:
// 2, 3, 7, 18, 19, 20, 22, 23, 24, 25, 39, 40, 42, 50, 51
// SO DON'T TOUCH 'EM

AddrSpace GlobalArr GlobalVar;

// Flags
GlobalVar		int FirstRun;

// Energy Points (EP)
GlobalReg(2)	int EP;
GlobalReg(3)	int EPMax;

// CVARS/Options
// Whether the tokens given at the beginning of the game have been used
GlobalVar		int RandomizedStartTokens;

GlobalReg(7)	int StatusTimerHUD;
// Level & XP
GlobalVar		int Level;
GlobalVar		int XP;
GlobalVar		int XPNext;

// Rank
GlobalVar		str RankString;
GlobalVar		int RankLevel;
GlobalVar		int Rank;
GlobalVar		int RankNext;
GlobalVar		int PayTimer;
GlobalVar		int PayKills;

// HUD Stuff
GlobalReg(18)	int Credits;
GlobalReg(19)	int Continues;

// Combo System
GlobalReg(20)	int Combo;
GlobalVar		int ComboTimer;
GlobalReg(22)	int TotalGained;
GlobalReg(23)	int XPGained;
GlobalReg(24)	int RankGained;

// Skill-related vars
GlobalVar		int Aura;
GlobalVar		int AuraTimer;
GlobalReg(25)	int AuraTimerHUD;
GlobalVar		int[] SkillCatagory;
GlobalVar		int[] SkillIndex;
GlobalVar		int[] SkillLevel;
GlobalVar		int[] CurrentSkillLevel;

GlobalVar		int ArenaMaxWave;

// Primary Stats
GlobalVar		int Strength;		// Increases Damage
GlobalVar		int Defense;		// Reduces Damage taken
GlobalVar		int Vitality;		// Increases max Health and HP regen rate
GlobalVar		int Energy;			// Increases max EP and EP regen rate
GlobalVar		int Regeneration;	// Increases both HP/EP regen rate
GlobalVar		int Agility;		// Increases movement speed and jump height (and optionally weapon speed)
GlobalVar		int Capacity;		// Increases max ammo capacities
GlobalVar		int Luck;			// Increases Survivability bonus and drop chances
GlobalReg(39)	int HealthMax;		// Max player Health
GlobalReg(40)	int ArmorMax;		// Max Armor that the player's current armor can go up to
GlobalVar		int[] MapsVisited;

GlobalReg(42)	int StimTimerHUD;
GlobalVar		int[] Vials;
GlobalVar		int[] Stim;
GlobalVar		int[] LastStim;
GlobalVar		int StimSize;

GlobalVar		int[] Augs;
GlobalVar		int[] AugLevels;
GlobalVar		int AugSlotsUsed;

GlobalReg(50)	int Shield;
GlobalReg(51)	int ShieldCapacity;
GlobalVar		int ShieldBody;
GlobalVar		int ShieldBattery;
GlobalVar		int ShieldCapacitor;
GlobalVar		int ShieldAccessory;
GlobalVar		str ArmorType;
GlobalVar		int ArmorAmount;

// Level and Flags
GlobalVar		int LevelNum;		// track the level number for the transport system and monster difficulty scaling
GlobalVar		int InBase;			// Whether you are at the UAC Outpost or not
GlobalVar		int Transported;	// True if you are using the Transportation System

/***************
*** MAP VARS ***
****************/

bool Overdrive;
int SummonID = 2100;
int MaxSummons;
int SkillCostMult;
int BulletTimeMode;
int BulletTimeTimer;

int StatusType;
int StatusTimer;

int PlayerTID = 31337;
int MapNumber;
int ParBonus;

// Stat Bonuses
int StrengthBonus;
int DefenseBonus;
int VitalityBonus;
int EnergyBonus;
int RegenerationBonus;
int AgilityBonus;
int CapacityBonus;
int LuckBonus;

// Secondary Stats
int LevelDamage;				// Damage dependent on the player's level
int BonusDamage;				// Damage bonus given by the Strength stat
int TotalDamage;				// Combined LevelDamage and BonusDamage
int DamageFactor;				// General damage the player will defend against
int Mass;						// Player mass, for preventing knockback
bool AuraBonus;					// Whether to double the max Aura timer
int Speed;						// Movement Speed
int JumpHeight;					// Jump Height
int WeaponSpeed;				// Weapon Speed Increase bsed on Agility
int SurvivalBonus;				// Chance that you will survive a fatal hit

// Misc stat/token stuff
int StatTokens;					// Current Stat Tokens
int SkillTokens;				// Current Skill Tokens
int StatCap;					// Current Stat Cap
int SoftStatCap = 100;			// Soft Stat Cap, this cannot be passed with tokens
int HardStatCap = 400;			// Hard Stat Cap, this cap cannot be passed period

// 100% Bonuses
int Kills;
bool KillBonus;
int Items;
bool ItemsBonus;
int SecretsFound;
bool SecretsBonus;
bool AllBonus;

// HP/EP Regen Timers
int HPRate;
int HPTime;
int HPAmount;
int EPRate;
int EPTime;
int EPAmount;
int LowHealthTimer;
int RegenBoostTimer;

// XP & Rank Tables
int[MAX_LEVEL + 1] XPTable;
int[MAX_RANK + 1] RankTable;

// Luck Chance Percentages
int CreditChance;
int HealthChance;
int ArmorChance;
int PowerupChance;
int RuneChance;
int TokenChance;
int AugChance;
int ShieldChance;
int EPChance;

// Randomizer
int LevelTokens;

// Max Shield Parts per page
int[4] ShieldPartsMax = { 7; 7; 5; 7; };

int ShieldChargeRate;
int ShieldDelayRate;
int BeforeHealth;
int AfterHealth;
int HealthLoss;
int BeforeArmor;
int AfterArmor;
int ArmorLoss;

int ShieldTimer = 175;
int ShieldInterval = 35;
bool ShieldFull = false;
bool Nova = true;

bool InMenu;
int Menu;
int MenuX;
int MenuY;
int MenuIndex;
bool MenuBlock;
int StatAmount;
bool AugSelected;
int SkillPage;
int SkillMax;
int ShieldPage;
int StimSelected;

bool InShop;
int ShopCategories = 8; // 8 vanilla ShopCategories, 8 reserved for compatibility
int ShopIndex;
int ShopOffset;
int ShopPage;
int ShopSpotID = 1000;

bool ArenaActive = false;
bool ArenaTimerActive = false;
int ArenaState = ARENA_READY;
int ArenaSpotSpawns = 1100;
int ArenaSectorTag = 100;

int ArenaWave;
int ArenaTimer;
int ArenaCount;
int ArenaMod;
int ArenaEnvironment;

bool StimActive;
int StimAmount;
int StimCapacity;
int StimTimer;

/*****************
*** MAP ARRAYS ***
******************/

// Rank strings
str[25] Ranks = {
	"None";
	"Pvt"; "Pvt +";
	"PFC"; "PFC +";
	"LCpl"; "LCpl +";
	"Cpl"; "Cpl +";
	"Sgt"; "Sgt +";
	"SSgt"; "SSgt +";
	"GySgt"; "GySgt +";
	"MSgt"; "MSgt +";
	"1stSgt"; "1stSgt +";
	"MGySgt"; "MGySgt +";
	"SgtMaj"; "SgtMaj +";
	"SgtMajMarCor"; "MSgtMarCor";
};

str[25] LongRanks = {
	"None";
	"Private"; "Private +";
	"Private First Class"; "Private First Class +";
	"Lance Corporal"; "Lance Corporal +";
	"Corporal"; "Corporal +";
	"Sergeant"; "Sergeant +";
	"Staff Sergeant"; "Staff Sergeant +";
	"Gunnery Sergeant"; "Gunnery Sergeant +";
	"Master Sergeant"; "Master Sergeant +";
	"First Sergeant"; "First Sergeant +";
	"Master Gunnery Sergeant"; "Master Gunnery Sergeant +";
	"Sergeant Major"; "Sergeant Major +";
	"Sergeant Major of the Marine Corps"; "Master Sergeant Major of the Marine Corps";
};

// Skill Level Names
str[5] SkillLevels =
{
	"Easy";
	"Normal";
	"Hard";
	"Nightmare";
	"Hell";
};

// Version and Timestamp
str[2] Ver =
{
	"v0.95 Beta";
	"Thursday, February 13, 2014 at 11:44:20 AM";
};

str[MAX_MENU] MainMenu =
{
	"Stats"; "Augmentations"; "Skills"; "Shield"; "Stims"; "Shop";
};

int[MAX_MENU] MainMenuColor =
{
	CR_RED; CR_GREEN; CR_LIGHTBLUE; CR_CYAN; CR_GRAY; CR_GOLD;
};

/****************
*** FUNCTIONS ***
*****************/

function void DefaultLoadout(void)
{
	// Extras Compatibility
	if(GetCVar("drpg_ext_extras"))
		SetWeapon("Pistol1");
	
	// Brutal Doom Compatibility
	if (GetCVar("drpg_ext_brutal"))
	{
		GiveInventory("Melee_Attacks", 1);
		GiveInventory("BrutalPistol", 1);
	};

	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SetWeapon("RLPistol");
};

// Setup XP & Rank Tables
function void SetupTables(void)
{
	// XP Table
	for (int i = 0; i < MAX_LEVEL; i++)
		XPTable[i] = 2000 + XPTable[i - 1] * 1.125;
	
	// Rank Table
	for (int i = 0; i < MAX_RANK; i++)
		if (GameSkill() == 5)
			{RankTable[i] = 100000 + (100000 * i * i);}
		else if (GameSkill() > 2)
			{RankTable[i] = 50000 + (50000 * i * i);}
		else
			{RankTable[i] = 25000 + (25000 * i * i);};
};

function int SetInventory(str Item, int Count)
{
	int n = Count - CheckInventory(Item);
	
	if (n > 0)
		{GiveInventory(Item, n);}
	else if (n < 0)
		{TakeInventory(Item, -n);};
	
	return n;
};

function void AddCompound(int Type, int Amount)
{
	Vials[Type] += Amount;
	
	if (Vials[Type] > 100)
		Vials[Type] = 100;
};

function void CheckStim(void)
{
	// Stim maximum capacities
	if (StimSize == 1)
		StimCapacity = 20;
	if (StimSize == 2)
		StimCapacity = 50;
	if (StimSize == 3)
		StimCapacity = 100;
	
	// Calculate the current Stim amount
	StimAmount = 0;
	for (int i = 0; i < MAX_COMPONENTS; i++)
		StimAmount += Stim[i];
	
	// Calculate timer for HUD
	StimTimerHUD = StimTimer / 35 + 1;
	
	// Set StimActive dummy item for the HUD
	SetInventory("StimActive", StimActive);
	
	// Decrease Stim Timer
	if (StimTimer > 0); StimTimer--;
	
	// Remove bonuses when Stim has expired
	if (StimTimer <= 0 && StimActive)
	{
		StrengthBonus = -LastStim[0];
		DefenseBonus = -LastStim[1];
		VitalityBonus = -LastStim[2];
		EnergyBonus = -LastStim[3];
		RegenerationBonus = -LastStim[4];
		AgilityBonus = -LastStim[5];
		CapacityBonus = -LastStim[6];
		LuckBonus = -LastStim[7];
		StimActive = false;
	};
};

function void MixStim(int Type)
{
	// You need at least 5% for mixing and the stim can't be full
	if (Vials[Type] < 5 || StimAmount > StimCapacity - 5)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Add from vial to stim
	ActivatorSound("menu/move", 127);
	Vials[Type] -= 5;
	Stim[Type] += 5;
};

function void SetStim(int Type)
{
	if ((Type == 0 && !CheckInventory("StimSmall")) || 
	    (Type == 1 && !CheckInventory("StimMedium")) ||
		(Type == 2 && !CheckInventory("StimLarge")))
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	StimSize = Type + 1;
	ActivatorSound("menu/move", 127);
	
	if (Type == 0) TakeInventory("StimSmall", 1);
	if (Type == 1) TakeInventory("StimMedium", 1);
	if (Type == 2) TakeInventory("StimLarge", 1);
};

function int GetSkillSlot(int Slot)
{
	return (SkillCatagory[Slot] * MAX_SKILLS) + SkillIndex[Slot];
};

function int GetSkillID(int Catagory, int ID)
{
	return (Catagory * MAX_SKILLS) + ID;
};

function int ScaleEPCost(int Cost)
{
	if (!GetCVar("drpg_skill_costscale")) return Cost;

	switch (GameSkill())
	{
		case 1: Cost = FixedMul(Cost, 0.5); break;
		case 2: Cost = FixedMul(Cost, 1.0); break;
		case 3: Cost = FixedMul(Cost, 1.5); break;
		case 4: Cost = FixedMul(Cost, 2.0); break;
		case 5: Cost = FixedMul(Cost, 2.5); break;
	};
	
	return Cost;
};

// Gets Max EP after all bonuses are applied to it
function int GetEPMax(void)
{
	int MaxEP = EPMax;
	
	// Max EP Checks for Augs
	if (Augs[AUG_ENERGY])
		MaxEP *= 2;
	
	return MaxEP;
};