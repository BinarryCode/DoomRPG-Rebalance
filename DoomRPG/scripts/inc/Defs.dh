#ifndef _DEFS_DH_
#define _DEFS_DH_

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <z_zone.h>
#include <ds_def.h>

#include <zcommon.acs>

// Scripts
#define acscript                extscript "ACS"
#define acfunc                  extfunc "ACS"
#define enter                   __enter
#define open                    __open
#define death                   __death
#define respawn                 __respawn
#define net                     __net

// Aliases
#define Print                   __printf<__printf_print>
#define PrintBold               __printf<__printf_bold>
#define Log                     __printf<__printf_log>
#define CallACS(script)         ACS_NamedExecuteWithResult((script))
#define Arbitrator              (PlayerNumber() == 0)
#define InMultiplayer           (GameType() == GAME_NET_COOPERATIVE)
#define GetMonsterID(N)         GetActorProperty((N), APROP_Score)
#define SetMonsterID(N, O)      SetActorProperty((N), APROP_Score, (O))

// Struct Aliases
#define Players(N)              _PlayerData[(N)]
#define Player                  _PlayerData[PlayerNumber()]
#define Skills                  SkillData // Temporary until I'm not lazy

// Deunderscoreification
#define HudMessage              __printf<__printf_hud>
#define HudMessageBold          __printf<__printf_hud_bold>
#define StrParam                __printf<__printf_string>
#define Output                  __output
#define FuncPtr                 __func_t
#define ScriptPtr               __script_t
#define AddressSpace            address_space
#define AddressSpaceDecl        address_space_decl
#define MapRegister             map_register
#define MapArray                map_array
#define GlobalArray             __global_array
#define WorldArray              __world_array

// Multiplayer
#define MAX_PLAYERS             8
#define PLAYER_TID              31337

// Constants
#define INT_MAX                 2147483647
#define PI                      3.14159265359

// Boolean
#define true                    1
#define false                   0

// --------------------------------------------------
// Macro Functions
// 

// Verify a PlayerNumber() call
#if DEBUG
#define NEEDVALIDPLAYER if (PlayerNumber() < 0) \
{ \
    PrintBold("\cjERROR: \ciAn invalid player number was encountered on %i of %s.\c-\n", __LINE__, __FILE__); \
    return; \
}
#else
#define NEEDVALIDPLAYER {}
#endif

// Create a dynamic HUD ID given 4 words
#define MAKE_ID(a, b, c, d)	    ((int)((a) | ((b) << 8) | ((c) << 16) | ((d) << 24)))

// Create a blank Dynamic Array
#define BLANKDYNAMICARRAY       { { '\x00'; '\x00'; '\x00'; '\x00'; '\x00'; }; 0; 0; 0; nullptr; }

// --------------------------------------------------
// Arena
// 

enum EArenaStates
{
    ARENA_INTERMISSION,
    ARENA_WAITING,
    ARENA_READY,
    ARENA_ACTIVE
};

enum EArenaModTypes
{
	AMOD_NONE,
    AMOD_NOREGEN,
    AMOD_MAX
};

enum EArenaEventTypes
{
	AEVENT_RANDOM = -1,
    AEVENT_NONE = 0,
    AEVENT_BLACKOUT,
    AEVENT_FOGGY,
    AEVENT_LAVA,
    AEVENT_GRAYSCALE,
    AEVENT_MAX
};

enum EArenaBonusTypes
{
    ABONUS_SELECT,
    ABONUS_FULLEP,
    ABONUS_MONEYDROP,
    ABONUS_CHIPDROP,
    ABONUS_AMMODROP,
    ABONUS_HEALTHDROP,
    ABONUS_ARMORDROP,
    ABONUS_WEAPONDROP,
    ABONUS_POWERUPDROP,
    ABONUS_STIMDROP,
    ABONUS_MODDROP,
    ABONUS_KEYDROP,
    ABONUS_MAX
};

// --------------------------------------------------
// Augmentations
// 

#define MAX_AUG_LEVEL           5

enum EAugTypes
{
    AUG_STRENGTH,
    AUG_DEFENSE,
    AUG_VITALITY,
    AUG_ENERGY,
    AUG_REGENERATION,
    AUG_AGILITY,
    AUG_CAPACITY,
    AUG_LUCK,
    AUG_BATTERY,
    MAX_AUGS,
};

// --------------------------------------------------
// CharSave
// 

#define CHARSAVE_VERSION        4
#define CHARSAVE_MAXSIZE        224
#define CHARSAVE_MAXCVARS       16
#define DRLA_MODPACK_SIZE       9
#define DRLA_MAX_ASSEMBLIES     34
#define DEPOSIT_ID              (MAKE_ID('D', 'P', 'S', 'T'))

// --------------------------------------------------
// Crate
// 

#define CRATE_MAX               64
#define CRATE_MAX_ITEMS         54

// --------------------------------------------------
// Health Bars
// 

#define HBAR_ID                 (MAKE_ID('H', 'B', 'A', 'R'))

// --------------------------------------------------
// HUD
// 

#define STAT_ID                 (MAKE_ID('S', 'T', 'A', 'T'))

// --------------------------------------------------
// Item Data
// 

#define ITEM_CATEGORIES         16
#define ITEM_MAX                256

enum ECategoryFlags
{
    CF_NONE     = 0x0,
    CF_NOSELL   = 0x1,
    CF_NOBUY    = 0x2
};

// --------------------------------------------------
// Map
// 

#define MAP_EXIT_SCRIPTNUM      30000

enum EMapEvents
{
    MAPEVENT_NONE,
    
    MAPEVENT_MEGABOSS,
    MAPEVENT_TOXICHAZARD,
    MAPEVENT_NUCLEARBOMB,
    MAPEVENT_LOWPOWER,
    MAPEVENT_ALLAURAS,
    MAPEVENT_ONEMONSTER,
    MAPEVENT_HELLUNLEASHED,
    
    MAPEVENT_BONUS_RAINBOWS,
    
    MAPEVENT_DRLA_NIGHTMARE,
    MAPEVENT_DRLA_TECHNOPHOBIA,
    MAPEVENT_DRLA_ARMAGEDDON,
    
    MAPEVENT_MAX
};

enum EUACOutpostEvents
{
    UACEVENT_NONE,
    
    UACEVENT_INVASION,
    UACEVENT_LOWPOWER,
    
    UACEVENT_MAX
};

// --------------------------------------------------
// Menu
// 

#define MAX_MENU                6
#define MENU_SCROLL             15
#define MENU_ID                 (MAKE_ID('M', 'E', 'N', 'U'))

enum EMenuPages
{
    MENUPAGE_MAIN,
    MENUPAGE_STATS,
    MENUPAGE_AUGS,
    MENUPAGE_SKILLS,
    MENUPAGE_SHIELD,
    MENUPAGE_STIMS,
    MENUPAGE_MAX
};

enum EStatPages
{
    STATPAGE_STATS,
    STATPAGE_STATXP,
    STATPAGE_PERKS,
    STATPAGE_TEAM,
    STATPAGE_MAX
};

// --------------------------------------------------
// Minigame
// 

#define MINIGAME_ID             12000
#define MAX_ROULETTE_ITEMS      20

// --------------------------------------------------
// Mission
// 

#define MAX_MISSIONS            20
#define MISSION_ID              (MAKE_ID('M', 'I', 'S', 'S'))
#define MAX_DIFFICULTIES        9
#define MAX_LOOT                13

enum EMissionTypes
{
    MT_COLLECT,
    MT_KILL,
    MT_KILLAURAS,
    MT_REINFORCEMENTS,
    MT_ASSASSINATION,
    MT_SECRETS,
    MT_ITEMS,
    MT_COMBO,
    MAX_MISSION_TYPES
};

// --------------------------------------------------
// Monsters
// 
#define MAX_MONSTERS            16384
#define MAX_DEF_MONSTERS        17
#define MAX_DEF_MONSTERS_DRLA   46
#define MAX_HUMANS              19
#define MAX_MEGABOSSES          1

enum EMonsterFlags
{
    MF_BOSS         = 0x0001,
    MF_NOXP         = 0x0002,
    MF_NOSTATS      = 0x0004,
    MF_NOAURA       = 0x0008,
    MF_NOPAYKILL    = 0x0010,
    MF_NODROPS      = 0x0020,
    MF_NOHEALTHBAR  = 0x0040,
    MF_NOWEAKEN     = 0x0080,
    MF_MEGABOSS     = 0x0100,
    MF_NAMEGEN      = 0x0200
};

enum EMonsterStatFlags
{
    SF_PLAYERTARGET = 0x01,
    SF_RECREATE     = 0x02
};

// --------------------------------------------------
// Namegen
// 

#define NAME_MAX_SHARED         91
#define NAME_MAX_DEMON_NAMES    106
#define NAME_MAX_BOSS_SUFFIXES  27
#define NAME_MAX_COLORS         20
#define NAME_MAX_ZOMBIE_RANK    9
#define NAME_MAX_MARINE_RANK    24
#define NAME_MAX_MALE           56
#define NAME_MAX_FEMALE         57
#define NAME_MAX_LAST           97
#define NAME_MAX_SUIT           3

// --------------------------------------------------
// Outpost
// 

#define SHOP_SPECIAL_TIMER      35 * 60 * 10
#define MAX_OUTPOST_ID          201
#define MAX_OUTPOST_MUSIC       2
#define MAX_COMBAT_MUSIC        5
#define MAX_BOSS_MUSIC          5
#define MAX_CREDITS_MUSIC       3

// TODO: 0-based
enum EOutpostMenu
{
    OMENU_LEVELTRANSPORT = 1,
    OMENU_SKILLCOMPUTER,
    OMENU_TOKENCONVERTER,
    OMENU_WAVESELECTOR,
    OMENU_SHOPSPECIAL,
    OMENU_BONUSSELECTOR,
    OMENU_BBS,
    OMENU_MINIGAMES,
    OMENU_MAX
};

enum EOutpostMusicType
{
    OUTPOST_MUSIC_NORMAL,
    OUTPOST_MUSIC_COMBAT,
    OUTPOST_MUSIC_BOSS,
    OUTPOST_MUSIC_CREDITS,
    OUTPOST_MUSIC_MAX
};

// TODO: 0-based
enum EOutpostRegenType
{
    OREGEN_HEALTH = 1,
    OREGEN_ARMOR,
    OREGEN_EP,
    OREGEN_AUG,
    OREGEN_MAX
};

// --------------------------------------------------
// Popoffs
// 

#define DNUM_DIGITS             7
#define DNUM_MONSTER_DIV        500

enum EDamageNumberTypes
{
    DNUM_NORMAL,
    DNUM_CRITICAL,
    DNUM_HEAL,
    DNUM_SCRATCH,
    DNUM_CREDGAIN,
    DNUM_CREDLOSS,
    DNUM_EPGAIN,
    DNUM_EPLOSS,
    DNUM_SHIELDGAIN,
    DNUM_SHIELDLOSS
};

// --------------------------------------------------
// RPG
// 

#define ASAVE_SAFETIME          20 * 35
#define ASAVE_RETRYTIME         5 * 35

enum ECompatibilityMode
{
    COMPAT_NONE,
    COMPAT_EXTRAS,
    COMPAT_DRLA,
    COMPAT_BRUTAL
};

enum EDamageTypes
{
    DT_NONE = -1,
    DT_NORMAL = 0,
    DT_TOXIC,
    DT_RADIATION,
    DT_MELEE,
    DT_FIRE,
    DT_PLASMA,
    DT_LIGHTNING,
    DT_MAX
};

// --------------------------------------------------
// Shield
// 

#define SHIELD_HEALTH           1000000
#define MAX_PARTS               22
#define MAX_ACCESSORIES         66

enum EShieldPassive
{
    SHIELD_PASS_NONE,
    SHIELD_PASS_KILLSCHARGE,
    SHIELD_PASS_AUGSLOT,
    SHIELD_PASS_HYPERION,
    SHIELD_PASS_DATAURA,
    SHIELD_PASS_AVENGER,
    SHIELD_PASS_EPICMEGACASH,
    SHIELD_PASS_SURVIVECHARGE,
    SHIELD_PASS_SKILLPLUS,
    SHIELD_PASS_NOTOXIC,
    SHIELD_PASS_FRIENDSHIPISDEFENSE,
    SHIELD_PASS_ROULETTE,
    SHIELD_PASS_DOSHMAGNET,
    SHIELD_PASS_MORESKILLS,
    SHIELD_PASS_SKILLTOSHIELD,
    SHIELD_PASS_EPOVERFLOW,
    SHIELD_PASS_BLOODYSHIELDSOREAL,
    SHIELD_PASS_HATEHATEHATE,
    SHIELD_PASS_MAX
};

// --------------------------------------------------
// Shop
// 

#define LOCKER_EPRATE           (Player.EPMax * 100 / 10000)

enum EItemAutoTypes
{
    AT_NONE,
    AT_SELL,
    AT_STORE,
    AT_MAX
};

// --------------------------------------------------
// Skills
// 

#define WHEEL_ID                (MAKE_ID('W', 'H', 'E', 'E'))
#define MAX_CATEGORIES          6
#define MAX_SKILLS              17
#define MAX_LEVELS              16
#define MAX_SUMMONS             10
#define MAX_SKILLKEYS           8

enum EAuraTypes
{
    AURA_RED,
    AURA_GREEN,
    AURA_WHITE,
    AURA_PINK,
    AURA_BLUE,
    AURA_PURPLE,
    AURA_ORANGE,
    AURA_DARKBLUE,
    AURA_YELLOW,
    AURA_MAX
};

enum ESoulTypes
{
    SOUL_RED,
    SOUL_GREEN,
    SOUL_WHITE,
    SOUL_PINK,
    SOUL_BLUE,
    SOUL_PURPLE,
    SOUL_ORANGE,
    SOUL_DARKBLUE,
    SOUL_YELLOW,
    SOUL_MAX
};

// --------------------------------------------------
// Stats
// 

#define MAX_LEVEL               100
#define MAX_RANK                24
#define COMBO_MAX               (35 * 4)
#define COMBO_STOP              (35 * 2)
#define LEVELUP_ID              (MAKE_ID('L', 'V', 'U', 'P'))
#define RANKUP_ID               (MAKE_ID('R', 'K', 'U', 'P'))
#define CONFUSION_ID            (MAKE_ID('C', 'O', 'N', 'F'))
#define CONFUSION_NONSENSE_ID   (MAKE_ID('C', 'O', 'N', '2'))

#define LUCK_HEALTHDROP         10
#define LUCK_EPDROP             15
#define LUCK_ARMORDROP          20
#define LUCK_WEAPONDROP         25
#define LUCK_POWERUPDROP        50
#define LUCK_STIMDROP           75
#define LUCK_TOKENDROP          100
#define LUCK_SHIELDDROP         125
#define LUCK_AUGDROP            150

#define LUCK_HEALTHCHANCE       0.025
#define LUCK_EPCHANCE           0.025
#define LUCK_ARMORCHANCE        0.025
#define LUCK_WEAPONCHANCE       0.0125
#define LUCK_POWERUPCHANCE      0.0125
#define LUCK_STIMCHANCE         0.0125
#define LUCK_TOKENCHANCE        0.01
#define LUCK_SHIELDCHANCE       0.005
#define LUCK_AUGCHANCE          0.0025

#define LUCK_MAXHEALTHCHANCE    16.163076
#define LUCK_MAXEPCHANCE        14.641911
#define LUCK_MAXARMORCHANCE     13.064138
#define LUCK_MAXWEAPONCHANCE    5.712424
#define LUCK_MAXPOWERUPCHANCE   5.3415475
#define LUCK_MAXSTIMCHANCE      4.9230437
#define LUCK_MAXTOKENCHANCE     3.5358825
#define LUCK_MAXSHIELDCHANCE    0.73634326
#define LUCK_MAXAUGCHANCE       1.0753031

#define LUCK_HEALTHINC       	0.0025
#define LUCK_EPINC           	0.0025
#define LUCK_ARMORINC        	0.0025
#define LUCK_WEAPONINC       	0.00125
#define LUCK_POWERUPINC      	0.00125
#define LUCK_STIMINC         	0.00125
#define LUCK_TOKENINC        	0.001
#define LUCK_SHIELDINC       	0.0005
#define LUCK_AUGINC          	0.00025

#define AURA_CALCTIME           (((35 * 30) + (Player.Energy * 5.25)) * (Player.AuraBonus + 1))

enum EStatTypes
{
    STAT_STRENGTH,
    STAT_DEFENSE,
    STAT_VITALITY,
    STAT_ENERGY,
    STAT_REGENERATION,
    STAT_AGILITY,
    STAT_CAPACITY,
    STAT_LUCK,
    STAT_MAX
};

enum EStatusEffects
{
    SE_BLIND,
    SE_CONFUSION,
    SE_POISON,
    SE_CORROSION,
    SE_FATIGUE,
    SE_VIRUS,
    SE_SILENCE,
    SE_CURSE,
    SE_EMP,
    SE_RADIATION,
    SE_MAX
};

// --------------------------------------------------
// Stim
// 

enum EStimCompounds
{
    STIM_STRENGTH,
    STIM_DEFENSE,
    STIM_VITALITY,
    STIM_ENERGY,
    STIM_REGENERATION,
    STIM_AGILITY,
    STIM_CAPACITY,
    STIM_LUCK,
    STIM_PURIFIER,
    STIM_POTENCY,
    STIM_INDESTRUCTIBLE,
    STIM_SHADOW,
    STIM_INFINITY,
    STIM_CHRONO,
    STIM_ADRENALINE,
    STIM_GRAVITY,
    STIM_VAMPIRE,
    STIM_RAGE,
    STIM_MAGNETIC,
    MAX_COMPOUNDS
};

// --------------------------------------------------
// Turret
// 

enum ETurretPages
{
    TURRETPAGE_MAIN,
    TURRETPAGE_UPGRADE,
    TURRETPAGE_MOVE,
    TURRETPAGE_MAX
};

// --------------------------------------------------
// Utils
// 

#define STAT_LEVELUP_ID         (MAKE_ID('S', 'T', 'U', 'P'))
#define PAY_ID                  (MAKE_ID('P', 'A', 'Y', 'O'))
#define TOXMETER_ID             (MAKE_ID('T', 'O', 'X', 'I'))
#define BATTERY_ID              (MAKE_ID('B', 'A', 'T', 'T'))
#define ERROR_ID                (MAKE_ID('E', 'R', 'O', 'R'))

enum EAmmoTypes
{
    AMMO_CLIP = 1,
    AMMO_SHELL,
    AMMO_ROCKET,
    AMMO_CELL
};

enum EKeyStates
{
    KEY_PRESSED,
    KEY_ONLYPRESSED,
    KEY_UP,
    KEY_DOWN
};

enum ELogLevels
{
    LOG_NORMAL,
    LOG_DEBUG,
    LOG_WARNING,
    LOG_ERROR
};

// --------------------------------------------------
// Common Structures
// 
// These have to be here to prevent complaining about incomplete types

struct DynamicArray
{
    char[5] Name;
    int Position;
    int Size;
    int ItemSize;
    void *Data;
};

struct Position
{
    fixed X;
    fixed Y;
    fixed Z;
    fixed Angle;
    fixed Pitch;
};

struct AuraInfo
{
    int Time;
    int CostMult;
    fixed Range;
    bool Team;
    bool DefenseBoost;
    
    struct
    {
        bool Active;
        int Level;
    } [AURA_MAX] Type;
};

#endif
