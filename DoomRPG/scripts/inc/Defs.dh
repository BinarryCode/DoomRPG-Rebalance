#ifndef _DEFS_DH_
#define _DEFS_DH_

#include <stdlib.h>
#include <ds_def.h>

#include <zcommon.acs>

// Scripts
#define acscript                extscript "ACS"
#define acfunc                  extfunc "ACS"
#define enter                   __enter
#define open                    __open
#define death                   __death
#define respawn                 __respawn
#define net                     __net

// Aliases
#define Print                   __printf<__printf_print>
#define PrintBold               __printf<__printf_bold>
#define Log                     __printf<__printf_log>
#define CallACS(script)         ACS_NamedExecuteWithResult(script)
#define Arbitrator              PlayerNumber() == 0
#define InMultiplayer           GameType() == GAME_NET_COOPERATIVE
#define GetMonsterID(N)         GetActorProperty(N, APROP_Score)
#define SetMonsterID(N, O)      SetActorProperty(N, APROP_Score, O)

// Struct Aliases
#define Players(N)              _PlayerData[N]
#define Player                  _PlayerData[PlayerNumber()]
#define Minigame                _MinigameData[PlayerNumber()]
#define Skill(N)                _SkillData[N]
#define Skills                  _SkillData[PlayerNumber()]

// Deunderscoreification
#define HudMessage              __printf<__printf_hud>
#define HudMessageBold          __printf<__printf_hud_bold>
#define StrParam                __printf<__printf_string>
#define output                  __output
#define funcpointer             __func_t
#define scriptpointer           __script_t
#define AddressSpace            address_space
#define AddressSpaceDecl        address_space_decl
#define MapRegister             map_register
#define MapArray                map_array
#define GlobalArray             __global_array

// Multiplayer
#define MAX_PLAYERS             8
#define PLAYER_TID              31337

// Constants
#define PI                      3.14159265359

#if DEBUG
#define NEEDVALIDPLAYER if (PlayerNumber() < 0) \
{ \
    PrintBold("\cjERROR: \ciAn invalid player number was encountered on %i of %s.\c-\n", __LINE__, __FILE__); \
    return; \
}
#else
#define NEEDVALIDPLAYER {}
#endif

// Misc
#define true                    1
#define false                   0

// Augmentations
#define MAX_AUG_LEVEL           5

enum EAugTypes
{
    AUG_STRENGTH,
    AUG_DEFENSE,
    AUG_VITALITY,
    AUG_ENERGY,
    AUG_REGENERATION,
    AUG_AGILITY,
    AUG_CAPACITY,
    AUG_LUCK,
    AUG_BATTERY,
    MAX_AUGS,
};

// Outpost Info
#define OMENU_LEVELTRANSPORT    1
#define OMENU_SKILLCOMPUTER     2
#define OMENU_TOKENCONVERTER    3
#define OMENU_WAVESELECTOR      4
#define OMENU_SHOPSPECIAL       5
#define OMENU_BONUSSELECTOR     6
#define OMENU_LOCKER            7
#define SHOP_SPECIAL_TIMER      35 * 60 * 10
#define MAX_OUTPOST_ID          201
#define MAX_OUTPOST_MUSIC       2
#define MAX_COMBAT_MUSIC        5
#define MAX_BOSS_MUSIC          5
#define MAX_CREDITS_MUSIC       3
#define OUTPOST_MUSIC_NORMAL    0
#define OUTPOST_MUSIC_COMBAT    1
#define OUTPOST_MUSIC_BOSS      2
#define OUTPOST_MUSIC_CREDITS   3

// Stats
#define MAX_LEVEL               100
#define MAX_RANK                24
#define COMBO_MAX               35 * 4
#define COMBO_STOP              35 * 2

enum EStatTypes
{
    STAT_STRENGTH,
    STAT_DEFENSE,
    STAT_VITALITY,
    STAT_ENERGY,
    STAT_REGENERATION,
    STAT_AGILITY,
    STAT_CAPACITY,
    STAT_LUCK,
    STAT_MAX
};

// Skills
#define WHEEL_ID                20000
#define MAX_CATEGORIES          6
#define MAX_SKILLS              17
#define MAX_LEVELS              16
#define MAX_SUMMONS             10
#define MAX_SKILLKEYS           8

enum EAuraTypes
{
    AURA_RED,
    AURA_GREEN,
    AURA_WHITE,
    AURA_PINK,
    AURA_BLUE,
    AURA_PURPLE,
    AURA_ORANGE,
    AURA_DARKBLUE,
    AURA_YELLOW,
    AURA_MAX
};

// Loot/Mission Data
#define MISSION_ID              11500
#define MAX_DIFFICULTIES        9
#define MAX_LOOT                9
#define MAX_MISSION_TYPES       3

enum EMissionTypes
{
    MT_COLLECT,
    MT_KILL,
    MT_REINFORCEMENTS
};

// Item Data
#define ITEM_CATEGORIES         16
#define ITEM_MAX                256

enum ECategoryFlags
{
    CF_NONE     = 0x0,
    CF_NOSELL   = 0x1,
    CF_NOBUY    = 0x2
};

// Character Password Stuff
#define PW_VERSION              6
#define PW_SIZE                 45
#define PW_COMPAT_SIZE          16
#define PW_MAX_ASSEMBLIES       34
#define PW_COMPAT_EXTRAS        1
#define PW_COMPAT_DOOMRL        2
#define PW_COMPAT_BRUTAL        3

// Stim System
enum EStimCompounds
{
    STIM_STRENGTH,
    STIM_DEFENSE,
    STIM_VITALITY,
    STIM_ENERGY,
    STIM_REGENERATION,
    STIM_AGILITY,
    STIM_CAPACITY,
    STIM_LUCK,
    STIM_PURIFIER,
    STIM_POTENCY,
    STIM_INDESTRUCTIBLE,
    STIM_SHADOW,
    STIM_INFINITY,
    STIM_CHRONO,
    STIM_ADRENALINE,
    STIM_GRAVITY,
    STIM_VAMPIRE,
    STIM_RAGE,
    STIM_MAGNETIC,
    MAX_COMPOUNDS
};

// Monster Flags
enum EMonsterFlags
{
    MF_BOSS         = 0x01,
    MF_NOXP         = 0x02,
    MF_NEGATIVEXP   = 0x04,
    MF_NOSTATS      = 0x08,
    MF_NOAURA       = 0x10,
    MF_NOPAYKILL    = 0x20,
    MF_NODROPS      = 0x40,
    MF_NOHEALTHBAR  = 0x80
};

// Damage Types
enum EDamageTypes
{
    DT_NONE = -1,
    DT_NORMAL = 0,
    DT_TOXIC,
    DT_MELEE,
    DT_FIRE,
    DT_PLASMA,
    DT_LIGHTNING
};

// Stat Flags
enum EStatFlags
{
    SF_PLAYERTARGET =   0x01,
    SF_RECREATE =       0x02
};

// Menu Defs
#define MAX_MENU                6
#define MENU_SCROLL             15
#define MENU_ID                 10000

// Damage Numbers
#define DNUM_DIGITS             7
#define DNUM_MONSTER_DIV        500

enum EDamageNumberTypes
{
    DNUM_NORMAL,
    DNUM_CRITICAL,
    DNUM_HEAL,
    DNUM_SCRATCH,
    DNUM_CREDGAIN,
    DNUM_CREDLOSS,
    DNUM_EPGAIN,
    DNUM_EPLOSS,
    DNUM_SHIELDGAIN,
    DNUM_SHIELDLOSS
};

// Status Effects

enum EStatusEffects
{
    SE_BLIND,
    SE_CONFUSION,
    SE_POISON,
    SE_CORROSION,
    SE_FATIGUE,
    SE_VIRUS,
    SE_SILENCE,
    SE_EMP,
    SE_MAX
};

#endif
