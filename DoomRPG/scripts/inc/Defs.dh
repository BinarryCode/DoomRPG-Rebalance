#ifndef _DEFS_DH_
#define _DEFS_DH_

#include <stdlib.h>

#include <zcommon.acs>

// Scripts
#define script					__extscript "ACS"
#define enter					__enter
#define death					__death
#define net						__net

// Aliases
#define Print					__printf<__printf_print>
#define Log						__printf<__printf_log>
#define CallACS(arg1)			ACS_NamedExecuteAlways(arg1, 0)

// Struct Aliases
// #define Skills[i][j]			_Skills[PlayerNumber()][i][j]

// Deunderscoreification
#define HudMessage				__printf<__printf_hud>
#define StrParam				__printf<__printf_string>
#define GlobalArray				__global_array
#define GlobalRegister			__global_register
#define AddressSpace			__address_space
#define Variable				__variable
#define MapRegister				__map_register
#define MapArray				__map_array
#define function				__function
#define library					__library

// Multiplayer
#define MAX_PLAYERS				8

// Misc
#define true					1
#define false					0

// Monster Flags
#define MF_BOSS					1
#define MF_NOXP					2
#define MF_NEGATIVEXP			4
#define MF_NOSTATS				8
#define MF_NOAURA				16
#define MF_NOPAYKILL			32
#define MF_NODROPS				64

// Arena
#define MAX_MODS				1
#define MAX_ENVIRONMENTS		4
#define MAX_BONUS				9
#define ARENA_INTERMISSION		1
#define ARENA_WAITING			2
#define ARENA_READY				3
#define ARENA_ACTIVE			4

// Augs
#define MAX_AUGS				8
#define AUG_LEVELS				5
#define AUG_STRENGTH			0
#define AUG_DEFENSE				1
#define AUG_VITALITY			2
#define AUG_ENERGY				3
#define AUG_REGENERATION		4
#define AUG_AGILITY				5
#define AUG_CAPACITY			6
#define AUG_LUCK				7

// Menu
#define MAX_MENU				6

// Minigame
#define MAX_HAND				8

// Shield
#define MAX_PARTS				12

// Shop
#define SHOP_CATEGORIES			16
#define SHOP_ITEMS				100
#define SHOP_SCROLL				15
#define DIR_UP					1
#define DIR_DOWN				2
#define DIR_LEFT				3
#define DIR_RIGHT				4

// Skills
#define MAX_CATEGORIES			6
#define MAX_SKILLS				17
#define MAX_LEVELS				10

// Stats
#define MAX_LEVEL				100
#define MAX_RANK				24

// Stim
#define MAX_COMPONENTS			10

// Structs
struct Augmentation
{
	int MaxAugSlots;
	bool[MAX_AUGS] Active;
};

struct ShieldParts
{
	// Current Parts
	int	Body;
	int	Battery;
	int	Capacitor;
	int	Accessory;
	
	// Stats
	int	Charge;
	int	Capacity;
	int Interval;
	int ChargeRate;
	int DelayRate;
	int Timer;
	
	// Comparisons
	int BeforeHealth;
	int AfterHealth;
	int HealthLoss;
	int BeforeArmor;
	int AfterArmor;
	int ArmorLoss;
	
	// Flags
	bool Full;
	bool Nova;
	
	// Saved Armor
	str	ArmorType;
	int	ArmorAmount;
};

struct Stims
{
	int[MAX_COMPONENTS] Vials;
	int[MAX_COMPONENTS] CurrentStim;
	int[MAX_COMPONENTS] LastStim;
	bool StimActive;
	int StimSize;
	int StimAmount;
	int StimCapacity;
	int StimTimer;
};

struct Player
{
	// Primary Stats
	int	Strength;		// Increases Damage
	int	Defense;		// Reduces Damage taken
	int	Vitality;		// Increases max Health and HP regen rate
	int	Energy;			// Increases max EP and EP regen rate
	int	Regeneration;	// Increases both HP/EP regen rate
	int	Agility;		// Increases movement speed and jump height (and optionally weapon speed)
	int	Capacity;		// Increases max ammo capacities
	int	Luck;			// Increases Survivability bonus and drop chances
	int	HealthMax;		// Max player Health
	int	ArmorMax;		// Max Armor that the player's current armor can go up to
	
	// Secondary Stats
	int LevelDamage;	// Damage dependent on the player's level
	int BonusDamage;	// Damage bonus given by the Strength stat
	int TotalDamage;	// Combined LevelDamage and BonusDamage
	fixed DamageFactor;	// General damage the player will defend against
	int Mass;			// Player mass, for preventing knockback
	fixed Speed;		// Movement Speed
	fixed JumpHeight;	// Jump Height
	int WeaponSpeed;	// Weapon Speed Increase bsed on Agility
	int SurvivalBonus;	// Chance that you will survive a fatal hit
	
	// Energy Points (EP)
	int EP;
	int EPMax;
	
	// Level
	int	Level;
	long int XP;
	long int XPNext;
	
	// Rank
	str	RankString;
	int	RankLevel;
	int	Rank;
	int	RankNext;
	int	PayTimer;
	int	PayKills;
	
	// Combo System
	int Combo;
	int ComboTimer;
	int TotalGained;
	int XPGained;
	int	RankGained;
	
	// HP/EP Regen Timers
	int HPRate;
	int HPTime;
	int HPAmount;
	int EPRate;
	int EPTime;
	int EPAmount;
	int LowHealthTimer;
	int RegenBoostTimer;

	// Luck Chance Percentages
	fixed CreditChance;
	fixed HealthChance;
	fixed ArmorChance;
	fixed PowerupChance;
	fixed RuneChance;
	fixed TokenChance;
	fixed AugChance;
	fixed ShieldChance;
	fixed EPChance;
	
	// Structception
	Augmentation Augs;
	ShieldParts Shield;
	Stims Stim;
};

struct Skill
{
	str Name;
	str[MAX_LEVELS] Description;
	int Cost;
	int Level;
	int CurrentLevel;
	int MaxLevel;
};

#endif
