__library("Defs");
#include <zcommon.acs>

#define script __extscript "ACS"
#define enter __enter
#define true 1
#define false 0
#define CallACS(arg1) ACS_NamedExecuteAlways((arg1), 0)
#define Print(arg1) __printf<__printf_print>(arg1)
#define Log __printf<__printf_log>
#define GlobalArray(arg1) __global_array((arg1))
#define GlobalRegister(arg1) __global_register((arg1))

#define MAX_NAMES		19

// Monster Flags
#define MF_BOSS			1
#define MF_NOXP			2
#define MF_NEGATIVEXP	4
#define MF_NOSTATS		8
#define MF_NOAURA		16
#define MF_NOPAYKILL	32
#define MF_NODROPS		64

#define V_VERS			0
#define V_TIME			1

#define M_PTID			0
#define M_MAPN			1
#define M_PBON			2

#define MAX_CATEGORIES	6
#define MAX_SKILLS		17
#define MAX_LEVELS		10

// Energy Points (EP)
GlobalRegister(2) int EP;
GlobalRegister(3) int EPMax;

// Skill-related vars
GlobalRegister(5) int Aura;
GlobalRegister(6) int AuraTimer;
GlobalRegister(25) int AuraTimerHUD;
GlobalArray(26) int[] SkillCatagory;
GlobalArray(27) int[] SkillIndex;
GlobalArray(28) int[] SkillLevel;
GlobalArray(29) int[] CurrentSkillLevel;

bool Overdrive;
int SummonID = 2100;
int MaxSummons;
int SkillCostMult;
int BulletTimeMode;
int BulletTimeTimer;

// Flags
GlobalRegister(1) int FirstRun;
GlobalArray(41) int[] MapsVisited;

// Version and Timestamp
str[2] Ver =
{
	"v0.95 Beta";
	"Thursday, February 13, 2014 at 11:44:20 AM";
};

// Previously StatusType, StatusTimer
int[2] StatusArray;

GlobalRegister(7) int StatusTimerHUD;

// Previously PlayerTID, MapNumber, ParBonus
int[3] MiscArray = {31337;0;0;};

#define MAX_LEVEL	100
#define MAX_RANK	24

// CVARS/Options
// Whether the tokens given at the beginning of the game have been used
GlobalRegister(4) int RandomizedStartTokens;

// Level & XP
GlobalRegister(8) int Level;
GlobalRegister(9) int XP;
GlobalRegister(10) int XPNext;

// Rank
GlobalRegister(11) str RankString;
GlobalRegister(12) int RankLevel;
GlobalRegister(13) int Rank;
GlobalRegister(14) int RankNext;
GlobalRegister(15) int PayTimer;
GlobalRegister(16) int PayKills;

// HUD Stuff
GlobalRegister(18) int Credits;
GlobalRegister(19) int Continues;

// Combo System
GlobalRegister(20) int Combo;
GlobalRegister(21) int ComboTimer;
GlobalRegister(22) int TotalGained;
GlobalRegister(23) int XPGained;
GlobalRegister(24) int RankGained;

// Primary Stats
GlobalRegister(31) int Strength;		// Increases Damage
GlobalRegister(32) int Defense;			// Reduces Damage taken
GlobalRegister(33) int Vitality;		// Increases max Health and HP regen rate
GlobalRegister(34) int Energy;			// Increases max EP and EP regen rate
GlobalRegister(35) int Regeneration;	// Increases both HP/EP regen rate
GlobalRegister(36) int Agility;			// Increases movement speed and jump height (and optionally weapon speed)
GlobalRegister(37) int Capacity;		// Increases max ammo capacities
GlobalRegister(38) int Luck;			// Increases Survivability bonus and drop chances
GlobalRegister(39) int HealthMax;		// Max player Health
GlobalRegister(40) int ArmorMax;		// Max Armor that the player's current armor can go up to

// Stat Bonuses
int StrengthBonus;
int DefenseBonus;
int VitalityBonus;
int EnergyBonus;
int RegenerationBonus;
int AgilityBonus;
int CapacityBonus;
int LuckBonus;

// Secondary Stats
int LevelDamage;				// Damage dependent on the player's level
int BonusDamage;				// Damage bonus given by the Strength stat
int TotalDamage;				// Combined LevelDamage and BonusDamage
int DamageFactor;				// General damage the player will defend against
int Mass;						// Player mass, for preventing knockback
bool AuraBonus;					// Whether to double the max Aura timer
int Speed;						// Movement Speed
int JumpHeight;					// Jump Height
int WeaponSpeed;				// Weapon Speed Increase bsed on Agility
int SurvivalBonus;				// Chance that you will survive a fatal hit

// Misc stat/token stuff
int StatTokens;					// Current Stat Tokens
int SkillTokens;				// Current Skill Tokens
int StatCap;					// Current Stat Cap
int SoftStatCap = 100;			// Soft Stat Cap, this cannot be passed with tokens
int HardStatCap = 400;			// Hard Stat Cap, this cap cannot be passed period

// 100% Bonuses
int Kills;
bool KillBonus;
int Items;
bool ItemsBonus;
int SecretsFound;
bool SecretsBonus;
bool AllBonus;

// HP/EP Regen Timers
int HPRate;
int HPTime;
int HPAmount;
int EPRate;
int EPTime;
int EPAmount;
int LowHealthTimer;
int RegenBoostTimer;

// XP & Rank Tables
int[MAX_LEVEL + 1] XPTable;
int[MAX_RANK + 1] RankTable;

// Luck Chance Percentages
// Previously CreditChance, HealthChance, ArmorChance, PowerupChance, RuneChance, TokenChance, AugChance, ShieldChance, EPChance
int[9] LuckChances;

// Randomizer
int LevelTokens;

// Rank strings
str[25] Ranks = {
	"None";
	"Pvt"; "Pvt +";
	"PFC"; "PFC +";
	"LCpl"; "LCpl +";
	"Cpl"; "Cpl +";
	"Sgt"; "Sgt +";
	"SSgt"; "SSgt +";
	"GySgt"; "GySgt +";
	"MSgt"; "MSgt +";
	"1stSgt"; "1stSgt +";
	"MGySgt"; "MGySgt +";
	"SgtMaj"; "SgtMaj +";
	"SgtMajMarCor"; "MSgtMarCor";
};

str[25] LongRanks = {
	"None";
	"Private"; "Private +";
	"Private First Class"; "Private First Class +";
	"Lance Corporal"; "Lance Corporal +";
	"Corporal"; "Corporal +";
	"Sergeant"; "Sergeant +";
	"Staff Sergeant"; "Staff Sergeant +";
	"Gunnery Sergeant"; "Gunnery Sergeant +";
	"Master Sergeant"; "Master Sergeant +";
	"First Sergeant"; "First Sergeant +";
	"Master Gunnery Sergeant"; "Master Gunnery Sergeant +";
	"Sergeant Major"; "Sergeant Major +";
	"Sergeant Major of the Marine Corps"; "Master Sergeant Major of the Marine Corps";
};

__function void DefaultLoadout(void)
{
	// Extras Compatibility
	if(GetCVar("drpg_ext_extras"))
		SetWeapon("Pistol1");
	
	// Brutal Doom Compatibility
	if (GetCVar("drpg_ext_brutal"))
	{
		GiveInventory("Melee_Attacks", 1);
		GiveInventory("BrutalPistol", 1);
	};

	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SetWeapon("RLPistol");
};

// Setup XP & Rank Tables
function void SetupTables(void)
{
	int i;
	
	// XP Table
	for (i = 0; i < MAX_LEVEL; i++)
		XPTable[i] = 2000 + XPTable[i - 1] * 1.125;
	
	// Rank Table
	for (i = 0; i < MAX_RANK; i++)
		if (GameSkill() == 5)
			{RankTable[i] = 100000 + (100000 * i * i);}
		else if (GameSkill() > 2)
			{RankTable[i] = 50000 + (50000 * i * i);}
		else
			{RankTable[i] = 25000 + (25000 * i * i);};
};