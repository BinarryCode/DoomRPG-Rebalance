#ifndef _MONSTERS_DH_
#define _MONSTERS_DH_

#define MAX_MONSTERS            16384
#define MAX_DEF_MONSTERS        17
#define MAX_DEF_MONSTERS_DRLA   46
#define MAX_HUMANS              19

struct MonsterStats
{
    // Basic
    int Flags;
    int RenderStyle;
    int SpawnHealth;
    int HealthMax;
    
    // Properties
    fixed Speed;
    fixed Height;
    fixed Radius;
    
    // Flags
    bool Init;
    bool HealthBar;
    bool Named;
    bool Reinforcement;
    
    // Stats
    int Level;
    int Aura;
    int Threat;
    int Strength;
    int Defense;
    int Vitality;
    int Energy;
    int Regeneration;
    int Agility;
    int Capacity;
    int Luck;
};

struct MonsterInfo
{
    str Actor;
    str Name;
    
    // This monster's relative threat level as a percentage
    int Difficulty;
    int ThreatLevel;
};

AddressSpaceDecl map_array MonsterSpace;
typedef MonsterInfo MonsterSpace *MonsterInfoPtr;

AddressSpaceDecl map_array MonsterStatsSpace;
MonsterStatsSpace MonsterStats[MAX_MONSTERS] Monsters;
typedef MonsterStats MonsterStatsSpace *MonsterStatsPtr;

extern
{
    variable map_register int MonsterID;
    variable MonsterSpace MonsterInfo[MAX_DEF_MONSTERS] MonsterData;
    variable MonsterSpace MonsterInfo[MAX_DEF_MONSTERS] MonsterDataBrutal;
    variable MonsterSpace MonsterInfo[MAX_DEF_MONSTERS_DRLA] MonsterDataDRLA;
    variable MonsterSpace str[MAX_HUMANS][2] MonsterHumanData;
};

extern "ACS"
{
    script void MonsterInit(int);
    script void MonsterSet(int, int, int);
    script void MonsterDump();
    script void MonsterDamage(int, int);
    script void MonsterTransport(int, int, int);
};

extern
{
    script void MonsterInitStats(int = 0);
    script void MonsterStatsHandler();
    script void MonsterAuraDisplayHandler();
    script void MonsterLevelupHandler(bool = false);
    script void MonsterEPDrainHandler();
    script void MonsterRegenerationHandler();
    script void MonsterMoneyDrainHandler();
    script void MonsterDeathCheck();
    script void MonsterDeath();
    script int WhoKilledMe();
};

extern
{
    function int CalculateMonsterThreatLevel(MonsterStatsPtr);
    function int CalculateMonsterMaxHealth(MonsterStatsPtr);
    function fixed CalculateMonsterSpeed(MonsterStatsPtr);
};

#endif
