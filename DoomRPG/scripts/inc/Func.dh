lib("Func");

function void DefaultLoadout(void)
{
	// Extras Compatibility
	if(GetCVar("drpg_ext_extras"))
		SetWeapon("Pistol1");
	
	// Brutal Doom Compatibility
	if (GetCVar("drpg_ext_brutal"))
	{
		GiveInventory("Melee_Attacks", 1);
		GiveInventory("BrutalPistol", 1);
	};

	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SetWeapon("RLPistol");
};

// Setup XP & Rank Tables
function void SetupTables(void)
{
	// XP Table
	for (int i = 0; i < MAX_LEVEL; i++)
		XPTable[i] = 2000 + XPTable[i - 1] * 1.125;
	
	// Rank Table
	for (int i = 0; i < MAX_RANK; i++)
		if (GameSkill() == 5)
			{RankTable[i] = 100000 + (100000 * i * i);}
		else if (GameSkill() > 2)
			{RankTable[i] = 50000 + (50000 * i * i);}
		else
			{RankTable[i] = 25000 + (25000 * i * i);};
};

function int SetInventory(str Item, int Count)
{
	int n = Count - CheckInventory(Item);
	
	if (n > 0)
		{GiveInventory(Item, n);}
	else if (n < 0)
		{TakeInventory(Item, -n);};
	
	return n;
};

function void AddCompound(int Type, int Amount)
{
	Vials[Type] += Amount;
	
	if (Vials[Type] > 100)
		Vials[Type] = 100;
};

function void CheckStim(void)
{
	// Stim maximum capacities
	if (StimSize == 1)
		StimCapacity = 20;
	if (StimSize == 2)
		StimCapacity = 50;
	if (StimSize == 3)
		StimCapacity = 100;
	
	// Calculate the current Stim amount
	StimAmount = 0;
	for (int i = 0; i < MAX_COMPONENTS; i++)
		StimAmount += Stim[i];
	
	// Calculate timer for HUD
	StimTimerHUD = StimTimer / 35 + 1;
	
	// Set StimActive dummy item for the HUD
	SetInventory("StimActive", StimActive);
	
	// Decrease Stim Timer
	if (StimTimer > 0); StimTimer--;
	
	// Remove bonuses when Stim has expired
	if (StimTimer <= 0 && StimActive)
	{
		StrengthBonus = -LastStim[0];
		DefenseBonus = -LastStim[1];
		VitalityBonus = -LastStim[2];
		EnergyBonus = -LastStim[3];
		RegenerationBonus = -LastStim[4];
		AgilityBonus = -LastStim[5];
		CapacityBonus = -LastStim[6];
		LuckBonus = -LastStim[7];
		StimActive = false;
	};
};

function void MixStim(int Type)
{
	// You need at least 5% for mixing and the stim can't be full
	if (Vials[Type] < 5 || StimAmount > StimCapacity - 5)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Add from vial to stim
	ActivatorSound("menu/move", 127);
	Vials[Type] -= 5;
	Stim[Type] += 5;
};

function void SetStim(int Type)
{
	if ((Type == 0 && !CheckInventory("StimSmall")) || 
	    (Type == 1 && !CheckInventory("StimMedium")) ||
		(Type == 2 && !CheckInventory("StimLarge")))
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	StimSize = Type + 1;
	ActivatorSound("menu/move", 127);
	
	if (Type == 0) TakeInventory("StimSmall", 1);
	if (Type == 1) TakeInventory("StimMedium", 1);
	if (Type == 2) TakeInventory("StimLarge", 1);
};

function int GetSkillSlot(int Slot)
{
	return (SkillCatagory[Slot] * MAX_SKILLS) + SkillIndex[Slot];
};

function int GetSkillID(int Catagory, int ID)
{
	return (Catagory * MAX_SKILLS) + ID;
};

function int ScaleEPCost(int Cost)
{
	if (!GetCVar("drpg_skill_costscale")) return Cost;

	switch (GameSkill())
	{
		case 1: Cost = FixedMul(Cost, 0.5); break;
		case 2: Cost = FixedMul(Cost, 1.0); break;
		case 3: Cost = FixedMul(Cost, 1.5); break;
		case 4: Cost = FixedMul(Cost, 2.0); break;
		case 5: Cost = FixedMul(Cost, 2.5); break;
	};
	
	return Cost;
};

// Gets Max EP after all bonuses are applied to it
function int GetEPMax(void)
{
	int MaxEP = EPMax;
	
	// Max EP Checks for Augs
	if (Augs[AUG_ENERGY])
		MaxEP *= 2;
	
	return MaxEP;
};

// This function can be used to return the absolute value of a negative integer. 
function int Abs(int x)
{
    if (x < 0)
        return -x;

    return x;
};

// Returns integer value
function int Round(int fixedNumber)
{
	fixed r1 = fixedNumber + 0.5;
	int ret = r1;
	return ret;
};

