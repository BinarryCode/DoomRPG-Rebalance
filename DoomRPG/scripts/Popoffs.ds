#include "RPG.dh"

#include "Monsters.dh"
#include "Popoffs.dh"
#include "Shield.dh"
#include "Utils.dh"

// Handles Damage Numbers
script void DamageNumbers()
{
    Start:
    
    // Initial delay so we don't show max health being calculated or other nonsense
    Delay(4);
    
    while (GetCVar("drpg_damagenumbers"))
    {
        // Pointer
        MonsterStatsPtr Stats = &Monsters[GetMonsterID(0)];
        
        int TID = UniqueTID();
        int Health = GetActorProperty(0, APROP_Health);
        bool ShieldActive = CheckInventory("DRPGShield");
        int Shield = Player.Shield.Charge;
        int Color;
        int OldTID;
        
        // Lag handling
        Delay(1 + GetDamageNumbersDelay());
        
        // Check Health
        Health = Health - GetActorProperty(0, APROP_Health);
        
        // Nullify Health if a Shield is active
        if (CheckInventory("DRPGShield") || GetActorProperty(0, APROP_Health) >= SHIELD_HEALTH - GetActorProperty(0, APROP_SpawnHealth))
            Health = 0;
        
        // Shield breaking hits will cause a major health drop, don't show this
        if (Health >= (SHIELD_HEALTH / 1000) - GetActorProperty(0, APROP_SpawnHealth))
            Health = 0;
        
        // Shield checks
        if (CheckInventory("DRPGShield"))
            Shield = Shield - Player.Shield.Charge;
        
        if (Health != 0 || Shield != 0)
        {
            if (Health >= GetActorProperty(0, APROP_SpawnHealth)) // Critical
                Color = DNUM_CRITICAL
            else if (Health < 0 && !CheckInventory("DRPGShield")) // Healed
                Color = DNUM_HEAL
            else if (Health == 1) // Scratch
                Color = DNUM_SCRATCH
            else if (ShieldActive && Shield > 0) // Shield Loss
                Color = DNUM_SHIELDLOSS
            else if (ShieldActive && Shield < 0) // Shield Gain
                Color = DNUM_SHIELDGAIN
            else // Normal
                Color = DNUM_NORMAL;
            
            // Store the old TID if it has one
            if (ActivatorTID() > 0)
                OldTID = ActivatorTID();
            
            // Give the activator a TID
            Thing_ChangeTID(0, TID);
            
            // Damage Popoff
            if (CheckInventory("DRPGShield"))
                Popoff(TID, Shield, Color)
            else
                Popoff(TID, Health, Color);
            
            // Change the TID back
            if (OldTID > 0)
                Thing_ChangeTID(TID, OldTID)
            else
                Thing_ChangeTID(TID, 0);
        };
            
        // Terminate if the Actor is dead
        if (ClassifyActor(0) & ACTOR_DEAD) return;
    };
    
    Delay(35);
    goto Start;
};

// Handles informational popoffs
script void InfoPopoffs()
{
    Start:
    
    while (GetCVar("drpg_popoffs"))
    {
        int BeforeCredits;
        int AfterCredits;
        int BeforeEP;
        int AfterEP;
        
        // Before Checks
        BeforeCredits = CheckInventory("DRPGCredits");
        BeforeEP = Player.EP;
        
        Delay(1);
        
        // After Checks
        AfterCredits = CheckInventory("DRPGCredits");
        AfterEP = Player.EP;
        
        // Credits Popoffs
        if (AfterCredits > BeforeCredits)
            Popoff(Player.TID, AfterCredits - BeforeCredits, DNUM_CREDGAIN);
        if (AfterCredits < BeforeCredits)
            Popoff(Player.TID, AfterCredits - BeforeCredits, DNUM_CREDLOSS);
        
        // EP Popoffs
        if (AfterEP > BeforeEP)
            Popoff(Player.TID, AfterEP - BeforeEP, DNUM_EPGAIN);
        if (AfterEP < BeforeEP)
            Popoff(Player.TID, AfterEP - BeforeEP, DNUM_EPLOSS);
            
        // Terminate if the Player is dead
        if (ClassifyActor(0) & ACTOR_DEAD) return;
    };
    
    Delay(1);
    goto Start;
};

// Spawn a popoff number
function Popoff(int TID, int Value, int Color)
{
    int[] Digits;
    int DigitTID = UniqueTID();
    int DigitBase = 1;
    fixed X = GetActorX(TID);
    fixed Y = GetActorY(TID);
    fixed Z = GetActorZ(TID) + Monsters[GetMonsterID(TID)].Height;
    
    // Re-check Z if it's a Player TID
    for (int i = PLAYER_TID; i < MAX_PLAYERS; i++)
        if (TID == i)
        {
            Z = GetActorZ(TID) + GetActorPropertyFixed(TID, APROP_Height);
            break;
        };
    
    // Prevent digit overflow
    if (Value > 9999999)
        Value = 9999999;
    
    // Put the digits into the array
    for (int i = 0; i < DNUM_DIGITS; i++)
        Digits[i] = GetDigit(Abs(Value), i);
    
    // Digit Spawning
    for (int i = 0; i < DNUM_DIGITS; i++)
    {
        str DigitActor = StrParam("DRPGDigit%dNum%d\n", i + 1, Digits[i]);
        
        if (Value >= DigitBase || Value <= -DigitBase)
            switch (Digits[1])
            {
                case 0: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 1: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 2: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 3: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 4: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 5: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 6: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 7: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 8: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
                case 9: Spawn(DigitActor, X, Y, Z, DigitTID, 0);    break;
            };
        
        DigitBase *= 10;
    };
    
    // Color
    if (Color > 0)
        Thing_SetTranslation(DigitTID, Color);
    
    // Set Fade Speed
    SetUserVariable(DigitTID, "user_fade", GetCVar("drpg_damagenumbers_fade"));
    
    // Float away
    SetActorVelocity(DigitTID, RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0), 0.5, 0, 0);
};

function int GetDigit(int Num, int Digit)
{
    return (Num / Pow(10, Digit)) % 10;
};

function int GetDamageNumbersDelay()
{
    int Monsters = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
    int TotalMonsters = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS);
    
    return (TotalMonsters - Monsters) / DNUM_MONSTER_DIV;
};
