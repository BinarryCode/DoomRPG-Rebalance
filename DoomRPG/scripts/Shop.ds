#include "Globals.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Utils.dh"

int ShopCategories = 8; // 8 vanilla ShopCategories, 8 reserved for compatibility
int ShopSpotID = 1000;

str[SHOP_CATEGORIES] ShopNames =
{
	"Weapons";
	"Ammo";
	"Health";
	"Armor";
	"Powerups";
	"Tokens";
	"Shield Parts";
	"Augmentations";
};

int[SHOP_CATEGORIES] ShopMax =
{
	8; 11; 9; 11; 24; 8; 0; 3;
};

ShopItem[SHOP_CATEGORIES][SHOP_ITEMS] Shop =
{
	// Name, Actor, Price, Minimum Rank
    
	// Weapons
	{
		{ "Pistol"; 				"Pistol"; 							25; 		0;	};
		{ "Shotgun"; 				"Shotgun"; 							100; 		0;	};
		{ "SuperShotgun";			"Super Shotgun";					500;		0;	};
		{ "Chaingun";				"Chaingun";							750;		0;	};
		{ "RocketLauncher";			"Rocket Launcher";					1000;		0;	};
		{ "PlasmaRifle";			"Plasma Rifle";						2500;		0;	};
		{ "BFG9000";				"BFG9000";							5000;		0;	};
		{ "Chainsaw";				"Chainsaw";							300;		0;	};
	};
	
	// Ammo
	{
		{ "Clip";					"Clip";								10;			0;	};
		{ "ClipBox";				"Box of Bullets";					50;			0;	};
		{ "Shell";					"Shells";							25;			0;	};
		{ "ShellBox";				"Box of Shells";					125;		0;	};
		{ "RocketAmmo";				"Rockets";							50;			0;	};
		{ "RocketBox";				"Box of Rockets";					250;		0;	};
		{ "Cell";					"Cells";							200;		0;	};
		{ "CellPack";				"Cell Pack";						1000;		0;	};
		{ "SmallBackpack";			"Small Backpack";					285;		0;	};
		{ "Backpack";				"Backpack";							1425;		0;	};
		{ "BigBackpack";			"Big Backpack";						6325;		0;	};
	};

    // Health
	{
		{ "HealthBonus"; 			"Health Bonus"; 					1; 			0;	};
		{ "Stimpack"; 				"Stimpack"; 						50; 		0; 	};
		{ "Medikit"; 				"Medikit"; 							100; 		0; 	};
		{ "LargeMedikit"; 			"Large Medikit"; 					250; 		0; 	};
		{ "XLMedikit"; 				"Extra-Large Medikit"; 				500; 		0; 	};
		{ "MedPack"; 				"Med Pack"; 						750; 		0; 	};
		{ "SurgeryKit"; 			"Surgery Kit"; 						1000; 		0; 	};
		{ "Soulsphere"; 			"Soulsphere"; 						2000; 		0; 	};
		{ "Continue"; 				"Continue"; 						50000; 		0; 	};
	};

    // Armor
	{
		{ "ArmorBonus"; 			"Armor Bonus";						1; 			0; 	};
		{ "GreenArmor"; 			"Green Armor"; 						100; 		0; 	};
		{ "UsedGreenArmor"; 		"Green Armor (Used)"; 				50; 		0; 	};
		{ "BlueArmor"; 				"Blue Armor"; 						500; 		0; 	};
		{ "UsedBlueArmor"; 			"Blue Armor (Used)"; 				250; 		0; 	};
		{ "YellowArmor"; 			"Yellow Armor"; 					1000; 		0; 	};
		{ "UsedYellowArmor"; 		"Yellow Armor (Used)"; 				500; 		0; 	};
		{ "RedArmor"; 				"Red Armor"; 						5000; 		0; 	};
		{ "UsedRedArmor"; 			"Red Armor (Used)"; 				2500; 		0; 	};
		{ "WhiteArmor"; 			"White Armor"; 						10000; 		0; 	};
		{ "UsedWhiteArmor"; 		"White Armor (Used)"; 				5000; 		0; 	};
	};
	
	// Powerups
	{
		{ "InvulnerabilitySphere";	"Invulnerability Sphere"; 			5000; 		0; 	};
		{ "InvulnerabilityCharge"; 	"Invulnerability Charge"; 			10000; 		0; 	};
		{ "BlurSphere"; 			"Invisibility Sphere"; 				1000;		0;	};
		{ "InvisibilityCharge"; 	"Invisibility Charge"; 				2000;		0;	};
		{ "TimeSphere"; 			"Time Sphere"; 						1000;		0;	};
		{ "RegenSphere"; 			"Regeneration Sphere"; 				1000;		0;	};
		{ "RadSuit"; 				"Radiation Suit"; 					250;		0;	};
		{ "Infrared"; 				"IR Goggles"; 						500;		0;	};
		{ "Berserk"; 				"Berserk Pack"; 					1000;		0;	};
		{ "AllMap"; 				"Computer Area Map"; 				1000;		0;	};
		{ "Wings"; 					"Wings"; 							1000;		0;	};
		{ "StimSmall"; 				"Small Stim"; 						2000;		0;	};
		{ "StimMedium"; 			"Medium Stim"; 						5000;		0;	};
		{ "StimLarge"; 				"Large Stim"; 						10000;		0;	};
		{ "Megasphere"; 			"Megasphere"; 						10000;		0;	};
		{ "StrengthRune"; 			"Strength Rune"; 					2500;		0;	};
		{ "DrainRune"; 				"Drain Rune"; 						2500;		0;	};
		{ "EndlessRune"; 			"Endless Rune"; 					5000;		0;	};
		{ "ResistanceRune"; 		"Resistance Rune"; 					2500;		0;	};
		{ "RegenerationRune"; 		"Regeneration Rune"; 				2500;		0;	};
		{ "FrightRune"; 			"Fright Rune"; 						1000;		0;	};
		{ "GhostRune"; 				"Ghost Rune"; 						2500;		0;	};
		{ "HighJumpRune"; 			"High Jump Rune"; 					1000;		0;	};
		{ "HasteRune"; 				"Haste Rune"; 						1000;		0;	};
	};

	// Tokens
	{
		{ "StatToken"; 				"Stat Token"; 						25000;		0;	};
		{ "BigStatToken"; 			"Big Stat Token"; 					100000;		0;	};
		{ "StatCapToken"; 			"Stat Cap Token"; 					25000;		0;	};
		{ "BigStatCapToken"; 		"Big Stat Cap Token"; 				100000;		0;	};
		{ "SkillToken"; 			"Skill Token"; 						25000;		0;	};
		{ "BigSkillToken"; 			"Big Skill Token"; 					100000;		0;	};
		{ "MegaToken"; 				"Mega Token"; 						250000;		0;	};
		{ "BigMegaToken"; 			"Big Mega Token"; 					500000;		0;	};
	};
	
	// Shield Parts - Built Dynamically
	{};

	// Augmentations
	{
		{ "AugCanister";			"Augmentation Canister"; 			1000000;	0;	};
		{ "AugUpgradeCanister";		"Augmentation Upgrade Canister"; 	1000000;	0;	};
		{ "AugSlotUpgrade";			"Augmentation Slot Upgrade"; 		2000000;	0;	};
	};
};

// Open the Shop
acscript OpenShop(bool FromBase) net
{
	// If you're dead, return
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	// If you're in any minigames, return
	if (Player.InMinigame) return;
	
	// Close the main menu if it's open
	Player.InMenu = false;
	
	if (Player.InShop)
	{
		// Sanity Check to prevent the shop closing itself after buying an item in the Outpost Shop
		if (!FromBase) return;
		
		ActivatorSound("menu/leave", 127);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		Player.InShop = false;
	}
	else
	{
		// Don't let you Shop Anywhere if it's disabled
		if (!InBase && !GetCVar("drpg_shoptype")) return;
		
		ActivatorSound("menu/shop", 127);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		Player.InShop = true;
	};
};

// Sell items in bulk
acscript SellAllPage(int SellPage, bool Silent)
{
	int Total;
	
	// Set font
	SetFont("BIGFONT");
	
	// Invalid Player.ShopPages
	if (SellPage < 0 || SellPage > SHOP_CATEGORIES)
	{
		Print("\cgInvalid Shop Page\n");
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Sell Items
	for (int i = 0; i < ShopMax[SellPage]; i++)
		if (CheckInventory(Shop[SellPage][i].Actor) > 0)
			Total += SellItem(Shop[SellPage][i].Actor, true)
		else continue;
	
	// Display Message
	if (!Silent)
	{
		HudMessage("Sold all %s items for %d Credits\n",
				   ShopNames[SellPage], Total,
				   HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.5, 5.0, 5.0);
		ActivatorSound("credits/payout", 127);
	};
};

function void ShopBuildPages()
{
	int Index;
	
	// Shield Page
	ShopMax[6] = 0;
	for (int i = 0; i < 4; i++)
	{
		str ShieldActorName = "";
		str ShieldName = "";
		int ShieldCost = 0;
		
		ShopMax[6] += ShieldPartsMax[i];
		
		switch (i)
		{
			case 0: ShieldActorName = "ShieldBody";			ShieldName = "Shield Body - ";		break;
			case 1:	ShieldActorName = "ShieldBattery";		ShieldName = "Shield Battery - ";	break;
			case 2:	ShieldActorName = "ShieldCapacitor";	ShieldName = "Shield Capacitor - ";	break;
			case 3:	ShieldActorName = "ShieldAccessory";	ShieldName = "Shield Accessory - ";	break;
		};
		
		for (int j = 0; j < ShieldPartsMax[i]; j++)
		{
			// Name
			Shop[6][Index].Actor = StrParam("%s%d\n", ShieldActorName, j + 1);
			Shop[6][Index].Name = StrParam("%s%s\c-\n", ShieldName, ShieldData[i][j][1]);
			
			// Price
			if (i < 3) // Bodies, Batteries, Capacitors
			{
				ShieldCost += ShieldStats[i][j][0] * 100;
				ShieldCost += ShieldStats[i][j][1] * 1000;
				ShieldCost += Abs((ShieldStats[i][j][2] * 20000.0));
			}
			else // Accessories
			{
				if (j == 0) ShieldCost = 50000;
				if (j == 1) ShieldCost = 25000;
				if (j == 2) ShieldCost = 10000;
				if (j == 3) ShieldCost = 20000;
				if (j == 4) ShieldCost = 50000;
				if (j == 5) ShieldCost = 25000;
				if (j == 6) ShieldCost = 10000;
			};
			
			Shop[6][Index].Price = ShieldCost;
			
			Index++;
		};
	};
	
	// Compatibility handling - Extras
	if (GetCVar("drpg_ext_extras"))
	{
		// Weapons
		Shop[0][0].Actor = "Pistol1";
		Shop[0][1].Actor = "Shotgun1";
		Shop[0][2].Actor = "SSG";
		Shop[0][3].Actor = "Chaingun1";
		Shop[0][4].Actor = "RocketLauncher1";
		Shop[0][5].Actor = "Plasmagun";
		Shop[0][6].Actor = "BFG9001";
		Shop[0][7].Actor = "Chainsaw1";
	};
	
	// Compatibility handling - Brutal Doom
	if (GetCVar("drpg_ext_brutal"))
	{
		// Weapons
		ShopMax[0] = 14;
		
		Shop[0] =
		{
			{ "BrutalPistol"; 			"Pistol"; 					25; 	0; 	};
			{ "Rifle"; 					"Assault Rifle"; 			100; 	0; 	};
			{ "Shot_Gun"; 				"Shotgun"; 					250; 	0; 	};
			{ "SSG"; 					"Super Shotgun"; 			500; 	0; 	};
			{ "Mini_Gun"; 				"Minigun"; 					750; 	0; 	};
			{ "Grenade_Launcher"; 		"Grenade Launcher"; 		1000; 	0; 	};
			{ "Rocket_Launcher"; 		"Rocket Launcher"; 			2000; 	0; 	};
			{ "Plasma_Gun"; 			"Plasma Rifle"; 			3000; 	0; 	};
			{ "Rail_Gun"; 				"Railgun"; 					5000; 	0; 	};
			{ "BIG_FUCKING_GUN"; 		"BFG9000"; 					10000;	0; 	};
			{ "BFG10000"; 				"BFG10k"; 					25000; 	0; 	};
			{ "HellishMissileLauncher";	"Hellish Missile Launcher";	5000; 	0; 	};
			{ "FlameCannon";			"Flame Cannon"; 			5000; 	0; 	};
			{ "SecretWeapon_MP40"; 		"MP40"; 					1000; 	0; 	};
			{ "Chain_Saw"; 				"Chainsaw"; 				300; 	0; 	};
		};
	};
	
	// Compatibility Handling - DoomRL
	if (GetCVar("drpg_ext_doomrl"))
	{
		// Categories
		ShopCategories = 10;
		ShopNames[8] = "Mod Packs";
		ShopNames[9] = "Boots";
		
		// Maximums
		ShopMax[0] = 43; // Weapons
		ShopMax[3] = 42; // Armor
		ShopMax[4] = 26; // Powerups
		ShopMax[8] = 9;	 // Mod Packs
		ShopMax[9] = 23; // Boots
		
		// Weapons
		Shop[0] =
		{
			// Common Weapons
			{ "RLChainsaw"; 							"Chainsaw"; 								100;	0; 	};
			{ "RLPistol"; 								"Pistol"; 									25;		0; 	};
			{ "RLShotgun"; 								"Shotgun"; 									100; 	0; 	};
			{ "RLCombatShotgun"; 						"Combat Shotgun"; 							250; 	0; 	};
			{ "RLDoubleShotgun"; 						"Double Shotgun"; 							500; 	0; 	};
			{ "RLChaingun"; 							"Chaingun"; 								750; 	0; 	};
			{ "RLRocketLauncher"; 						"Rocket Launcher"; 							1000; 	0; 	};
			{ "RLPlasmaRifle"; 							"Plasma Rifle"; 							2500; 	0; 	};
			{ "RLBFG9000"; 								"BFG9000"; 									5000; 	0;	};
			
			// Exotic Weapons
			{ "RLBlaster"; 								"Blaster \ct[Exotic]\c-"; 					1000; 	0; 	};
			{ "RLCombatPistol"; 						"Combat Pistol \ct[Exotic]\c-"; 			1500; 	0; 	};
			{ "RLDesertEagle"; 							"Handcannon \ct[Exotic]\c-"; 				2000; 	0; 	};
			{ "RLSuperShotgun"; 						"Super Shotgun \ct[Exotic]\c-"; 			2500; 	0; 	};
			{ "RLAssaultShotgun"; 						"Assault Shotgun \ct[Exotic]\c-"; 			3000; 	0; 	};
			{ "RLUzi"; 									"Uzi \ct[Exotic]\c-"; 						3000; 	0; 	};
			{ "RLBattleRifle"; 							"Battle Rifle \ct[Exotic]\c-"; 				4000; 	0; 	};
			{ "RLMinigun"; 								"Minigun \ct[Exotic]\c-"; 					5000; 	0; 	};
			{ "RLMissileLauncher"; 						"Missile Launcher \ct[Exotic]\c-"; 			5000; 	0; 	};
			{ "RLNapalmLauncher"; 						"Napalm Launcher \ct[Exotic]\c-"; 			7500; 	0; 	};
			{ "RLLaserRifle"; 							"Laser Rifle \ct[Exotic]\c-"; 				7500; 	0; 	};
			{ "RLPlasmaShotgun"; 						"Plasma Shotgun \ct[Exotic]\c-"; 			10000; 	0; 	};
			{ "RLTristarBlaster"; 						"Tristar Blaster \ct[Exotic]\c-"; 			20000; 	0; 	};
			{ "RLNuclearPlasmaRifle"; 					"Nuclear Plasma Rifle \ct[Exotic]\c-";		25000; 	0; 	};
			{ "RLNuclearBFG9000"; 						"Nuclear BFG9000 \ct[Exotic]\c-"; 			50000; 	0; 	};
			{ "RLCombatTranslocator"; 					"Combat Translocator \ct[Exotic]\c-"; 		10000; 	0; 	};
			
			// Unique Weapons
			{ "RLJackhammer"; 							"Jackhammer \cd[Unique]\c-"; 				10000;	0; 	};
			{ "RLRailgun"; 								"Railgun \cd[Unique]\c-"; 					20000; 	0; 	};
			{ "RLMysteriousMagnum"; 					"Mysterious Magnum \cd[Unique]\c-"; 		25000; 	0; 	};
			{ "RLBFG10k"; 								"BFG10k \cd[Unique]\c-"; 					50000; 	0; 	};
			{ "RLUnknownHerald"; 						"Unknown Herald \cd[Unique]\c-"; 			25000; 	0; 	};
			{ "RLFragShotgun"; 							"Frag Shotgun \cd[Unique]\c-"; 				10000; 	0; 	};
			{ "RLQuadShotgun"; 							"Quad Shotgun \cd[Unique]\c-"; 				25000; 	0; 	};
			{ "RLLightweaver"; 							"Lightweaver \cd[Unique]\c-"; 				25000; 	0; 	};
			{ "RLTrigun"; 								"Trigun \cd[Unique]\c-"; 					10000; 	0; 	};
			{ "RLGrammatonClericBeretta"; 				"Grammaton Cleric Beretta \cd[Unique]\c-";	10000; 	0; 	};
			{ "RLAntiFreakJackel"; 						"Anti-Freak Jackel \cd[Unique]\c-"; 		25000; 	0; 	};
			{ "RLTantrumCannon"; 						"Quantum Tantrum Cannon \cd[Unique]\c-"; 	25000; 	0; 	};
			{ "RLRevenantsLauncher"; 					"Revenant's Launcher \cd[Unique]\c-"; 		10000; 	0; 	};
			{ "RLNullPointer"; 							"Charch's Null Pointer \cd[Unique]\c-"; 	10000; 	0; 	};
			{ "RLParticleBeamCannon"; 					"Particle Beam Cannon \cd[Unique]\c-"; 		25000; 	0; 	};
			
			// Legendary Weapons
			{ "RLJudgeOfTheDead"; 						"Judge Of The Dead \cf[Legendary]\c-"; 		50000; 	0; 	};
			{ "RLHurricaneCannon"; 						"Hurricane Cannon \cf[Legendary]\c-"; 		50000; 	0; 	};
			{ "RLNeuralStunner"; 						"Neural Stunner \cf[Legendary]\c-"; 		50000; 	0; 	};
		};
		
		// Armors
		Shop[3] =
		{
			{ "RLArmorBonusPickup"; 					"Armor Bonus"; 								1000; 	0; 	};
			{ "RLGreenArmorPickup"; 					"Security Armor"; 							250; 	0; 	};
			{ "RLBlueArmorPickup";						"Combat Armor"; 							500; 	0; 	};
			{ "RLRedArmorPickup"; 						"Commando Armor"; 							1000; 	0; 	};
			{ "RLBallisticGreenArmorPickup"; 			"Ballistic Security Armor"; 				1250; 	0; 	};
			{ "RLBallisticBlueArmorPickup"; 			"Ballistic Combat Armor"; 					1500; 	0; 	};
			{ "RLBallisticRedArmorPickup"; 				"Ballistic Commando Armor"; 				2000; 	0; 	};
			{ "RLCyberNanoGreenArmorPickup"; 			"CyberNano Security Armor"; 				5000; 	0; 	};
			{ "RLCyberNanoBlueArmorPickup"; 			"CyberNano Combat Armor"; 					7500; 	0; 	};
			{ "RLCyberNanoRedArmorPickup"; 				"CyberNano Commando Armor~"; 				10000; 	0; 	};
			{ "RLFireproofGreenArmorPickup"; 			"Fireproof Security Armor"; 				2000; 	0; 	};
			{ "RLFireproofBlueArmorPickup"; 			"Fireproof Combat Armor"; 					2500; 	0; 	};
			{ "RLFireproofRedArmorPickup"; 				"Fireproof Commando Armor"; 				5000; 	0; 	};
			{ "RLNanofiberGreenArmorPickup"; 			"Nanofiber Security Armor"; 				2000; 	0; 	};
			{ "RLNanofiberBlueArmorPickup"; 			"Nanofiber Combat Armor"; 					2500; 	0; 	};
			{ "RLNanofiberRedArmorPickup"; 				"Nanofiber Commando Armor"; 				3000; 	0; 	};
			{ "RLNanofiberSkinGreenArmorPickup"; 		"Nanofiber Skin Security Armor"; 			5000; 	0; 	};
			{ "RLNanofiberSkinBlueArmorPickup"; 		"Nanofiber Skin Combat Armor"; 				7500; 	0; 	};
			{ "RLNanofiberSkinRedArmorPickup"; 			"Nanofiber Skin Commando Armor"; 			10000; 	0; 	};
			{ "RLPowerGreenArmorPickup"; 				"Powered Security Armor"; 					2500; 	0; 	};
			{ "RLPowerBlueArmorPickup"; 				"Powered Combat Armor"; 					5000; 	0; 	};
			{ "RLPowerRedArmorPickup"; 					"Powered Commando Armor"; 					10000; 	0; 	};
			{ "RLCerberusArmorPickup"; 					"Cerberus Armor"; 							2500; 	0; 	};
			{ "RLFireShieldArmorPickup"; 				"Fire Shield"; 								10000; 	0; 	};
			{ "RLTacticalArmorPickup"; 					"Tactical Armor"; 							1000; 	0; 	};
			{ "RLBallisticShieldArmorPickup"; 			"Ballistic Shield"; 						10000; 	0; 	};
			{ "RLBallisticVestArmorPickup"; 			"Ballistic Vest"; 							5000; 	0; 	};
			{ "RLBulletproofVestArmorPickup"; 			"Bulletproof Vest"; 						7500; 	0; 	};
			{ "RLDuelistArmorPickup"; 					"Duelist Armor"; 							7500; 	0; 	};
			{ "RLEnergyShieldedVestArmorPickup"; 		"Energy-Shielded Vest"; 					7500; 	0; 	};
			{ "RLEnergyShieldArmorPickup"; 				"Energy Shield"; 							10000; 	0; 	};
			{ "RLGothicArmorPickup"; 					"Gothic Armor"; 							10000; 	0; 	};
			{ "RLMedicalArmorPickup"; 					"Medical Armor"; 							5000; 	0; 	};
			{ "RLPhaseshiftArmorPickup"; 				"Phaseshift Armor"; 						7500; 	0; 	};
			{ "RLPlasmaShieldArmorPickup"; 				"Plasma Shield"; 							7500; 	0; 	};
			{ "RLOnyxArmorPickup"; 						"Onyx Armor"; 								5000; 	0; 	};
			{ "RLCyberneticArmorPickup"; 				"Cybernetic Armor"; 						10000; 	0; 	};
			{ "RLLavaArmorPickup"; 						"Lava Armor"; 								7500; 	0; 	};
			{ "RLMaleksArmorPickup"; 					"Malek's Armor"; 							5000; 	0; 	};
			{ "RLMedicalPowerArmorPickup"; 				"Medical Power Armor"; 						7500; 	0; 	};
			{ "RLNecroArmorPickup"; 					"Necro Armor"; 								7500; 	0; 	};
			{ "RLShieldedArmorPickup"; 					"Shielded Armor"; 							10000; 	0; 	};
		};
		
		// Powerups
		Shop[4][0].Actor = "InvulnerabilitySphere2";
		Shop[4][6].Actor = "RadSuit2";
		Shop[4][7].Actor = "Infrared2";
		Shop[4][8].Actor = "Berserk2";
		Shop[4][ShopMax[4] - 2] = { "RLTrackingMap"; "Tracking Map"; 2000; 0; };
		Shop[4][ShopMax[4] - 1] = { "RLSupplyCrate"; "Supply Crate"; 25000; 0; };
		
		// Mod Packs
		Shop[8] =
		{
			{ "RLPowerModItem"; 						"Power Modpack"; 							2500; 	0; 	};
			{ "RLBulkModItem"; 							"Bulk Modpack"; 							2500; 	0; 	};
			{ "RLAgilityModItem"; 						"Agility Modpack"; 							2500; 	0; 	};
			{ "RLTechnicalModItem"; 					"Technical Modpack"; 						2500; 	0; 	};
			{ "RLSniperModItem"; 						"Sniper Modpack"; 							10000; 	0; 	};
			{ "RLFirestormModItem"; 					"Firestorm Modpack"; 						10000; 	0; 	};
			{ "RLNanoModItem"; 							"Nano Modpack"; 							10000; 	0; 	};
			{ "RLArmorModItem"; 						"Armor Modpack"; 							5000;	0; 	};
		};
		
		// Boots
		Shop[9] =
		{
			{ "RLSteelBootsPickup"; 					"Steel Boots";								250; 0; };
			{ "RLProtectiveBootsPickup"; 				"Protective Boots"; 						500; 0; };
			{ "RLPlasteelBootsPickup"; 					"Plasteel Boots"; 							750; 0; };
			{ "RLAntigravSteelBootsPickup"; 			"Anti-Grav Steel Boots"; 					1000; 0; };
			{ "RLAntigravProtectiveBootsPickup"; 		"Anti-Grav Protective Boots"; 				1500; 0; };
			{ "RLAntigravPlasteelBootsPickup"; 			"Anti-Grav Plasteel Boots"; 				2000; 0; };
			{ "RLEnviromentalSteelBootsPickup"; 		"Environmental Steel Boots"; 				1000; 0; };
			{ "RLEnviromentalProtectiveBootsPickup";	"Environmental Protective Boots"; 			1500; 0; };
			{ "RLEnviromentalPlasteelBootsPickup"; 		"Environmental Plasteel Boots"; 			2000; 0; };
			{ "RLFireproofSteelBootsPickup"; 			"Fireproof Steel Boots"; 					1000; 0; };
			{ "RLFireproofProtectiveBootsPickup"; 		"Fireproof Protective Boots"; 				1500; 0; };
			{ "RLFireproofPlasteelBootsPickup"; 		"Fireproof Plasteel Boots"; 				2000; 0; };
			{ "RLGrapplingSteelBootsPickup"; 			"Grappling Steel Boots"; 					1000; 0; };
			{ "RLGrapplingProtectiveBootsPickup"; 		"Grappling Protective Boots"; 				1500; 0; };
			{ "RLGrapplingPlasteelBootsPickup"; 		"Grappling Plasteel Boots"; 				2000; 0; };
			{ "RLCerberusBootsPickup"; 					"Cerberus Boots"; 							1000; 0; };
			{ "RLTacticalBootsPickup"; 					"Tactical Boots"; 							1500; 0; };
			{ "RLLavaBootsPickup"; 						"Lava Boots"; 								2500; 0; };
			{ "RLAcidProofBootsPickup"; 				"Acid-Proof Boots"; 						2000; 0; };
			{ "RLGothicBootsPickup"; 					"Gothic Boots"; 							2500; 0; };
			{ "RLPhaseshiftBootsPickup"; 				"Phaseshift Boots"; 						2500; 0; };
			{ "RLEnviroBootsPickup"; 					"Enviro Boots"; 							1000; 0; };
			{ "RLNyarlaptotepsBootsPickup"; 			"Nyarlaptotep's Boots"; 					5000; 0; };
		};
	};
};

function void ShopLoop()
{
	int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
	int Discount = (int)(Player.RankLevel * 2.1);
	int Cost = Shop[Player.ShopPage][Player.ShopIndex].Price - Shop[Player.ShopPage][Player.ShopIndex].Price * Discount / 100;
	int SellPrice;
	str Name;
	int Held;
	
	// Certain pages are built dynamically or require modifications depending on extension CVARs
	ShopBuildPages();
	
	// Calculate the held amounts for the shop items
	for (int i = 0; i < ShopCategories; i++)
		for (int j = 0; j < ShopMax[i]; j++)
			Shop[i][j].Held = CheckInventory(Shop[i][j].Actor);
	
	// Get the sell price
	if (Player.ShopPage == 1) // Ammo
		SellPrice = GetSellPrice(GetAmmoAmount(Shop[Player.ShopPage][Player.ShopIndex].Actor))
	else
		SellPrice = GetSellPrice(1);
	
	// Freeze the game if the option is active
	if (GetCVar("drpg_menufreeze"))
		GiveInventory("MenuFreezer", 1);
	
	// Set the HUD Size
	SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);

	// Draw the background
	if (GetCVar("drpg_menudim"))
		FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
	
	// Draw Shop
	SetFont("BIGFONT");
	HudMessage("Shop - %s (%d/%d)\n",
			   ShopNames[Player.ShopPage], Player.ShopPage + 1, ShopCategories,
			   HUDMSG_PLAIN, 3000, CR_GREEN,
			   24.1, 24.0, 0.05);
	
	// Draw Price
	if (Player.ShopPage == 5) // Tokens
		HudMessage("\cj%d C \ck(Discount: %d%%)\n",
				   Cost, Discount,
				   HUDMSG_PLAIN, 3000 + SHOP_ITEMS, CR_GOLD,
				   24.1, 38.0, 0.05)
	else
		HudMessage("\cj%d C \ci(%d C) \ck(Discount: %d%%)\n",
				   Cost, SellPrice, Discount,
				   HUDMSG_PLAIN, 3000 + SHOP_ITEMS, CR_GOLD,
				   24.1, 38.0, 0.05);
	
	// Determine Offset
	if (Player.ShopIndex > SHOP_SCROLL)
		Player.ShopOffset = Player.ShopIndex - SHOP_SCROLL
	else
		Player.ShopOffset = 0;
	
	// Draw Item List
	for (int i = Player.ShopOffset; i < Player.ShopOffset + (SHOP_SCROLL * 2) + 1; i++)
	{
		if (i > ShopMax[Player.ShopPage] - 1) continue;
		
		Name = Shop[Player.ShopPage][i].Name;
		Cost = Shop[Player.ShopPage][i].Price;
		Held = Shop[Player.ShopPage][i].Held;
		
		SetFont("SMALLFONT");
		
		if (i == Player.ShopIndex)
			if (Held > 0)
				HudMessage("%s \cd[%d]\n", Name, Held,
						   HUDMSG_PLAIN, 3001 + i, MenuCursorColor,
						   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
			else
				HudMessage("%s\n", Name,
						   HUDMSG_PLAIN, 3001 + i, MenuCursorColor,
						   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
		else
			if (CheckInventory("Credits") >= Cost - Cost * Discount / 100)
				if (Held > 0)
					HudMessage("%s \cd[%d]\n", Name, Held,
							   HUDMSG_PLAIN, 3001 + i, CR_WHITE,
							   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
				 else
					HudMessage("%s\n", Name,
							   HUDMSG_PLAIN, 3001 + i, CR_WHITE,
							   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
			else
				if (Held > 0)
					HudMessage("%s \cd[%d]\n", Name, Held,
							   HUDMSG_PLAIN, 3001 + i, CR_RED,
							   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
				else
					HudMessage("%s\n", Name,
							   HUDMSG_PLAIN, 3001 + i, CR_RED,
							   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05);
	};
	
	// Check cursor movement for repeating
	if (Buttons == BT_FORWARD)
	{
		Player.DelayTimer++;
		if (Player.DelayTimer > 35)
			MoveCursor(DIR_UP);
	};
	if (Buttons == BT_BACK)
	{
		Player.DelayTimer++;
		if (Player.DelayTimer > 35)
			MoveCursor(DIR_DOWN);
	};
	
	// Check Input
	if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD)
		MoveCursor(DIR_UP);
	if (Buttons == BT_BACK && OldButtons != BT_BACK)
		MoveCursor(DIR_DOWN);
	if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
		(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
		MoveCursor(DIR_LEFT);
	if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
		(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
		MoveCursor(DIR_RIGHT);
	if (Buttons == BT_USE && OldButtons != BT_USE && !Player.MenuBlock)
	{
		if (CheckInventory("Credits") >= Shop[Player.ShopPage][Player.ShopIndex].Price)
			BuyItem(Shop[Player.ShopPage][Player.ShopIndex].Actor)
		else
			ActivatorSound("menu/error", 127);
	};
	if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
		if (Shop[Player.ShopPage][Player.ShopIndex].Held > 0)
			SellItem(Shop[Player.ShopPage][Player.ShopIndex].Actor, false)
		else
			ActivatorSound("menu/error", 127);
	if (Buttons & BT_SPEED)
	{
		Player.DelayTimer++;
		
		if (Player.DelayTimer > 35 * 2 && Shop[Player.ShopPage][Player.ShopIndex].Held > 0)
		{
			SellItem(Shop[Player.ShopPage][Player.ShopIndex].Actor, true);
			Player.DelayTimer = 0;
		};
	};
	
	// Reset the Delay Timer if no buttons are pressed
	if (Buttons == 0 && OldButtons == 0)
		Player.DelayTimer = 0;
	
	// Reset the menu block
	Player.MenuBlock = false;	
};

function void MoveCursor(int Direction)
{
	if (Direction == DIR_UP)
	{
		if (Player.ShopIndex <= 0) Player.ShopIndex = ShopMax[Player.ShopPage];
		ActivatorSound("menu/move", 127);
		Player.ShopIndex--;
	};
	if (Direction == DIR_DOWN)
	{
		if (Player.ShopIndex >= ShopMax[Player.ShopPage] - 1) Player.ShopIndex = -1;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex++;
	};
	if (Direction == DIR_LEFT)
	{
		if (Player.ShopPage <= 0) Player.ShopPage = ShopCategories;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex = 0;
		Player.ShopPage--;
	};
	if (Direction == DIR_RIGHT)
	{
		if (Player.ShopPage >= ShopCategories - 1) Player.ShopPage = -1;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex = 0;
		Player.ShopPage++;
	};
};

function int GetAmmoAmount(str Item)
{
	int Amount = 1;
	
	// If it's ammo, we need to get the real amounts to give if you're using the Give buy mode
	if (Item == "Clip")			Amount = 10;
	if (Item == "ClipBox")		Amount = 50;
	if (Item == "Shell")		Amount = 4;
	if (Item == "ShellBox")		Amount = 20;
	if (Item == "RocketAmmo")	Amount = 1;
	if (Item == "RocketBox")	Amount = 5;
	if (Item == "Cell")			Amount = 20;
	if (Item == "CellPack")		Amount = 100;
	
	// If it's ammo and it's the large version, just change it down to the base type
	if (Item == "ClipBox")		Item = "Clip";
	if (Item == "ShellBox")		Item = "Shell";
	if (Item == "RocketBox")	Item = "RocketAmmo";
	if (Item == "CellPack")		Item = "Cell";
	
	// Now apply difficulty-based multipliers to the amount if it's ammo
	if (Item == "Clip" || Item == "Shell" || Item == "RocketAmmo" || Item == "Cell")
		if (GameSkill() == 1 || GameSkill() >= 5)
			Amount *= 2;
	
	return Amount;
};

function void BuyItem(str Item)
{
	int Cost = Shop[Player.ShopPage][Player.ShopIndex].Price;
	
	// If it has no price, fail
	if (Cost == 0)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// If it's a Token, use alternate handling due to bullshit
	if (Item == "StatToken") 	Item = "SmallStatToken";
	if (Item == "StatCapToken") Item = "SmallStatCapToken";
	if (Item == "SkillToken")	Item = "SmallSkillToken";
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		if (Player.ShopPage == 0) // Weapons
			Item = StrParam("%sPickup\n", Item);
	
	if (InBase && !GetCVar("drpg_shoptype"))
		SpawnSpotForced(Item, ShopSpotID, 0, 0)
	else
	{
		SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
		SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
	};
	
	ActivatorSound("menu/buy", 127);
	TakeInventory("Credits", Cost);
};

function int GetSellPrice(int Amount)
{
	int SellCost = Shop[Player.ShopPage][Player.ShopIndex].Price;
	
	// Some pages need modified sell behavior
	if (Player.ShopPage == 1) // Ammo
	{
		Amount = GetAmmoAmount(Shop[Player.ShopPage][Player.ShopIndex].Actor);
		if (Player.ShopIndex == 4) // GROSS HACK for Rockets
			SellCost /= Amount * 5
		else
			SellCost /= Amount;
	};
	
	SellCost /= 10;
	
	// Make sure you always get at least 1 Credit from a sale
	if (SellCost == 0) SellCost = 1;
	
	return SellCost;
};

function int SellItem(str Item, bool SellAll)
{
	int Amount = 1;
	int SellCost;

	// You must be at least Rank 1 or in the Outpost to sell items
	if (Player.RankLevel == 0 && !InBase)
	{
		SetFont("BIGFONT");
		Print("\cgYou cannot sell items outside the Outpost until you reach the first rank\n");
		ActivatorSound("menu/error", 127);
		return 0;
	};
	
	// Page blacklist
	if (Player.ShopPage == 5) // Tokens
	{
		ActivatorSound("menu/error", 127);
		return 0;
	};
	
	if (SellAll)
		Amount = CheckInventory(Item);
	
	if (Player.ShopPage == 1) // Ammo
		Amount = GetAmmoAmount(Item);
	
	// Get Sell Price
	SellCost = GetSellPrice(Amount);

	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		for (int i = 1; i <= Amount; i++)
		{
			if (Player.ShopPage == 0) // Weapons
				TakeInventory("RLWeaponLimit", 1);
			if (Player.ShopPage == 3) // Armor
				TakeInventory("RLArmorInInventory", 1);
			if (Player.ShopPage == 8) // Mod Packs
				if (Player.ShopIndex == 8) // Special handling case for Armor Modpack
					TakeInventory("RLArmorModItemInInventory", 1)
				else
					if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
						TakeInventory("RLScavengerModLimit", 1)
					else
						TakeInventory("RLModLimit", 1);
			if (Player.ShopPage == 9) // Boots
				TakeInventory("RLBootsInInventory", 1);
		};
	
	// Sell the Item
	if (CheckInventory(Item) >= Amount)
	{
		ActivatorSound("credits/payout", 127);
		TakeInventory(Item, Amount);
		GiveInventory("Credits", SellCost * Amount);
	}
	else
		ActivatorSound("menu/error", 127);
	
	return SellCost;
};
