#include "Globals.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Utils.dh"

int ShopCategories = 8; // 8 vanilla ShopCategories, 8 reserved for compatibility
int ShopSpotID = 1000;

str[SHOP_CATEGORIES] ShopNames =
{
	"Weapons";
	"Ammo";
	"Health";
	"Armor";
	"Powerups";
	"Tokens";
	"Shield";
	"Augmentations";
};

// Shop Array
str[SHOP_CATEGORIES][SHOP_ITEMS][2] Shop =
{
    // Weapon
	{
		{ "Pistol"; "Pistol"; };
		{ "Shotgun"; "Shotgun"; };
		{ "SuperShotgun"; "Super Shotgun"; };
		{ "ChainGun"; "Chaingun"; };
		{ "RocketLauncher"; "Rocket Launcher"; };
		{ "PlasmaRifle"; "Plasma Rifle"; };
		{ "BFG9000"; "BFG 9000"; };
		{ "Chainsaw"; "Chainsaw"; };
	};
    
    // Ammo
	{
		{ "Clip"; "Clip"; };
		{ "ClipBox"; "Box of Bullets"; };
		{ "Shell"; "Shells"; };
		{ "ShellBox"; "Box of Shells"; };
		{ "RocketAmmo"; "Rockets"; };
		{ "RocketBox"; "Box of Rockets"; };
		{ "Cell"; "Cell"; };
		{ "CellPack"; "Cell Charge Pack"; };
		{ "SmallBackpack"; "Small Backpack"; };
		{ "Backpack"; "Backpack"; };
		{ "BigBackpack"; "Big Backpack"; };
	};
    
    // Health
	{
		{ "HealthBonus"; "Health Bonus"; };
		{ "Stimpack"; "Stimpack"; };
		{ "Medikit"; "Medikit"; };
		{ "LargeMedikit"; "Large Medikit"; };
		{ "XLMedikit"; "Extra-Large Medikit"; };
		{ "MedPack"; "Med Pack"; };
		{ "SurgeryKit"; "Surgery Kit"; };
		{ "Soulsphere"; "Soulsphere"; };
		{ "Continue"; "Continue"; };
	};
    
    // Armor
	{
		{ "ArmorBonus"; "Armor Bonus"; };
		{ "GreenArmor"; "Green Armor"; };
		{ "UsedGreenArmor"; "Green Armor (Used)"; };
		{ "BlueArmor"; "Blue Armor"; };
		{ "UsedBlueArmor"; "Blue Armor (Used)"; };
		{ "YellowArmor"; "Yellow Armor"; };
		{ "UsedYellowArmor"; "Yellow Armor (Used)"; };
		{ "RedArmor"; "Red Armor"; };
		{ "UsedRedArmor"; "Red Armor (Used)"; };
		{ "WhiteArmor"; "White Armor"; };
		{ "UsedWhiteArmor"; "White Armor (Used)"; };
	};
	
	// Powerups
	{
		{ "InvulnerabilitySphere"; "Invulnerability Sphere"; };
		{ "InvulnerabilityCharge"; "Invulnerability Charge"; };
		{ "BlurSphere"; "Invisibility Sphere"; };
		{ "InvisibilityCharge"; "Invisibility Charge"; };
		{ "TimeSphere"; "Time Sphere"; };
		{ "RegenSphere"; "Regeneration Sphere"; };
		{ "RadSuit"; "Radiation Suit"; };
		{ "Infrared"; "IR Goggles"; };
		{ "Berserk"; "Berserk Pack"; };
		{ "AllMap"; "Computer Area Map"; };
		{ "Megasphere"; "Megasphere"; };
		{ "StrengthRune"; "Strength Rune"; };
		{ "DrainRune"; "Drain Rune"; };
		{ "EndlessRune"; "Endless Rune"; };
		{ "ResistanceRune"; "Resistance Rune"; };
		{ "RegenerationRune"; "Regeneration Rune"; };
		{ "FrightRune"; "Fright Rune"; };
		{ "GhostRune"; "Ghost Rune"; };
		{ "HighJumpRune"; "High Jump Rune"; };
		{ "HasteRune"; "Haste Rune"; };
		{ "StimSmall"; "Small Stim"; };
		{ "StimMedium"; "Medium Stim"; };
		{ "StimLarge"; "Large Stim"; };
		{ "Wings"; "Wings"; };
	};
	
	// Tokens
	{
		{ "StatToken"; "Stat Token"; };
		{ "BigStatToken"; "Big Stat Token"; };
		{ "StatCapToken"; "Stat Cap Token"; };
		{ "BigStatCapToken"; "Big Stat Cap Token"; };
		{ "SkillToken"; "Skill Token"; };
		{ "BigSkillToken"; "Big Skill Token"; };
		{ "MegaToken"; "Mega Token"; };
		{ "BigMegaToken"; "Big Mega Token"; };
	};
	
	// Shield - Built Dynamically
	{};
	
	// Augmentations
	{
		{ "AugCanister"; "Augmentation Canister"; };
		{ "AugUpgradeCanister"; "Augmentation Upgrade Canister"; };
		{ "AugSlotUpgrade"; "Augmentation Slot Upgrade"; };
	};
};

int[SHOP_CATEGORIES][SHOP_ITEMS] ShopCosts =
{
    // Weapon
	{
		25; 100; 500; 750; 1000; 2500; 5000; 300;
	};
	
    // Ammo
	{
		10; 50; 25; 125; 50; 250; 200; 1000; 285; 1425; 6325;
	};
	
    // Health
	{
		1; 50; 100; 250; 500; 750; 1000; 2000; 50000;
	};
	
    // Armor
	{
		1; 100; 50; 500; 250; 1000; 500; 5000; 2500; 10000; 5000;
	};
	
	// Powerups
	{
		5000; 10000; 1000; 2000; 1000; 1000; 250; 500; 1000; 1000; 10000;	// Powerups
		2500; 2500; 5000; 2500; 2500; 1000; 2500; 1000; 1000;				// Runes
		200; 500; 1000;														// Stims
		1000;
	};
	
	// Tokens
	{
		25000; 100000; 25000; 100000; 25000; 100000; 250000; 500000;
	};
	
	// Shields - Built Dynamically
	{};
	
	// Augmentations
	{
		1000000; 1000000; 2000000;
	};
};

int[SHOP_CATEGORIES] ShopMax =
{
	8; 11; 9; 11; 24; 8; 0; 3;
};

// Open the Shop
script OpenShop(bool FromBase) net
{
	// If you're dead, return
	if (GetActorProperty(PlayerTID, APROP_Health) <= 0) return;
	
	// If you're in any minigames, return
	if (Player.InMinigame) return;
	
	// Close the main menu if it's open
	Player.InMenu = false;
	
	if (Player.InShop)
	{
		// Sanity Check to prevent the shop closing itself after buying an item in the Outpost Shop
		if (!FromBase) return;
		
		ActivatorSound("menu/leave", 127);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		Player.InShop = false;
	}
	else
	{
		// Don't let you Shop Anywhere if it's disabled
		if (!InBase && !GetCVar("drpg_shoptype")) return;
		
		ActivatorSound("menu/shop", 127);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		Player.InShop = true;
	};
};

// Sell items in bulk
script SellAllPage(int SellPage, bool Silent)
{
	int Total;
	
	// Set font
	SetFont("BIGFONT");
	
	// Invalid Player.ShopPages
	if (SellPage < 0 || SellPage > SHOP_CATEGORIES)
	{
		Print("\cgInvalid Shop Page\n");
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Sell Items
	for (int i = 0; i < ShopMax[SellPage]; i++)
		if (CheckInventory(Shop[SellPage][i][0]) > 0)
			Total += SellItem(Shop[SellPage][i][0], true)
		else continue;
	
	// Display Message
	if (!Silent)
	{
		HudMessage("Sold all %s items for %d Credits\n",
				   ShopNames[SellPage], Total,
				   HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.5, 5.0, 5.0);
		ActivatorSound("credits/payout", 127);
	};
};

function void ShopBuildPages()
{
	int Index;
	
	// Shield Page
	ShopMax[6] = 0;
	for (int i = 0; i < 4; i++)
	{
		str ShieldActorName = "";
		str ShieldName = "";
		int ShieldCost = 0;
		
		ShopMax[6] += ShieldPartsMax[i];
		
		switch (i)
		{
			case 0: ShieldActorName = "ShieldBody";			ShieldName = "Shield Body - ";		break;
			case 1:	ShieldActorName = "ShieldBattery";		ShieldName = "Shield Battery - ";	break;
			case 2:	ShieldActorName = "ShieldCapacitor";	ShieldName = "Shield Capacitor - ";	break;
			case 3:	ShieldActorName = "ShieldAccessory";	ShieldName = "Shield Accessory - ";	break;
		};
		
		for (int j = 0; j < ShieldPartsMax[i]; j++)
		{
			// Name
			Shop[6][Index][0] = StrParam("%s%d\n", ShieldActorName, j + 1);
			Shop[6][Index][1] = StrParam("%s%s\c-\n", ShieldName, ShieldData[i][j][1]);
			
			// Price
			if (i < 3) // Bodies, Batteries, Capacitors
			{
				ShieldCost += ShieldStats[i][j][0] * 100;
				ShieldCost += ShieldStats[i][j][1] * 1000;
				ShieldCost += Abs((ShieldStats[i][j][2] * 20000.0));
			}
			else // Accessories
			{
				if (j == 0) ShieldCost = 50000;
				if (j == 1) ShieldCost = 25000;
				if (j == 2) ShieldCost = 10000;
				if (j == 3) ShieldCost = 20000;
				if (j == 4) ShieldCost = 50000;
				if (j == 5) ShieldCost = 25000;
				if (j == 6) ShieldCost = 10000;
			};
			
			ShopCosts[6][Index] = ShieldCost;
			
			Index++;
		};
	};
	
	// Compatibility handling - Extras
	if (GetCVar("drpg_ext_extras"))
	{
		// Weapons
		Shop[0][0][0] = "Pistol1";
		Shop[0][1][0] = "Shotgun1";
		Shop[0][2][0] = "SSG";
		Shop[0][3][0] = "Chaingun1";
		Shop[0][4][0] = "RocketLauncher1";
		Shop[0][5][0] = "Plasmagun";
		Shop[0][6][0] = "BFG9001";
		Shop[0][7][0] = "Chainsaw1";
	};
	
	// Compatibility handling - Brutal Doom
	if (GetCVar("drpg_ext_brutal"))
	{
		// Weapons
		ShopMax[0] = 14;
		
		Shop[0][0][0] = "BrutalPistol";
		Shop[0][0][1] = "Pistol";
		Shop[0][1][0] = "Rifle";
		Shop[0][1][1] = "Assault Rifle";
		Shop[0][2][0] = "Shot_Gun";
		Shop[0][2][1] = "Shotgun";
		Shop[0][3][0] = "SSG";
		Shop[0][3][1] = "Super Shotgun";
		Shop[0][4][0] = "Mini_Gun";
		Shop[0][4][1] = "Minigun";
		Shop[0][5][0] = "Grenade_Launcher";
		Shop[0][5][1] = "Grenade Launcher";
		Shop[0][6][0] = "Rocket_Launcher";
		Shop[0][6][1] = "Rocket Launcher";
		Shop[0][7][0] = "Plasma_Gun";
		Shop[0][7][1] = "Plasma Rifle";
		Shop[0][8][0] = "Rail_Gun";
		Shop[0][8][1] = "Railgun";
		Shop[0][9][0] = "BIG_FUCKING_GUN";
		Shop[0][9][1] = "BFG 9000";
		Shop[0][10][0] = "BFG10000";
		Shop[0][10][1] = "BFG 10000";
		Shop[0][11][0] = "HellishMissileLauncher";
		Shop[0][11][1] = "Hellish Missile Launcher";
		Shop[0][12][0] = "FlameCannon";
		Shop[0][12][1] = "Flame Cannon";
		Shop[0][13][0] = "SecretWeapon_MP40";
		Shop[0][13][1] = "MP40";
		Shop[0][14][0] = "Chain_Saw";
		Shop[0][14][0] = "Chainsaw";
		
		ShopCosts[0][0] = 25;
		ShopCosts[0][1] = 100;
		ShopCosts[0][2] = 250;
		ShopCosts[0][3] = 250;
		ShopCosts[0][4] = 500;
		ShopCosts[0][5] = 1000;
		ShopCosts[0][6] = 2000;
		ShopCosts[0][7] = 3000;
		ShopCosts[0][8] = 5000;
		ShopCosts[0][9] = 10000;
		ShopCosts[0][10] = 25000;
		ShopCosts[0][11] = 5000;
		ShopCosts[0][12] = 5000;
		ShopCosts[0][13] = 1000;
		ShopCosts[0][14] = 100;
	};
	
	// Compatibility Handling - DoomRL
	if (GetCVar("drpg_ext_doomrl"))
	{
		// Categories
		ShopCategories = 10;
		ShopNames[8] = "Mod Packs";
		ShopNames[9] = "Boots";
		
		// Weapons
		ShopMax[0] = 43;
		
		// Common Weapons
		Shop[0][0][0] = "RLChainsaw";
		Shop[0][0][1] = "Chainsaw";
		Shop[0][1][0] = "RLPistol";
		Shop[0][1][1] = "Pistol";
		Shop[0][2][0] = "RLShotgun";
		Shop[0][2][1] = "Shotgun";
		Shop[0][3][0] = "RLCombatShotgun";
		Shop[0][3][1] = "Combat Shotgun";
		Shop[0][4][0] = "RLDoubleShotgun";
		Shop[0][4][1] = "Double Shotgun";
		Shop[0][5][0] = "RLChaingun";
		Shop[0][5][1] = "Chaingun";
		Shop[0][6][0] = "RLRocketLauncher";
		Shop[0][6][1] = "Rocket Launcher";
		Shop[0][7][0] = "RLPlasmaRifle";
		Shop[0][7][1] = "Plasma Rifle";
		Shop[0][8][0] = "RLBFG9000";
		Shop[0][8][1] = "BFG9000";
		
		ShopCosts[0][0] = 100;
		ShopCosts[0][1] = 25;
		ShopCosts[0][2] = 100;
		ShopCosts[0][3] = 250;
		ShopCosts[0][4] = 500;
		ShopCosts[0][5] = 750;
		ShopCosts[0][6] = 1000;
		ShopCosts[0][7] = 2500;
		ShopCosts[0][8] = 5000;
		
		// Exotic Weapons
		Shop[0][9][0] = "RLBlaster";
		Shop[0][9][1] = "Blaster \ct[Exotic]\c-";
		Shop[0][10][0] = "RLCombatPistol";
		Shop[0][10][1] = "Combat Pistol \ct[Exotic]\c-";
		Shop[0][11][0] = "RLDesertEagle";
		Shop[0][11][1] = "Handcannon \ct[Exotic]\c-";
		Shop[0][12][0] = "RLSuperShotgun";
		Shop[0][12][1] = "Super Shotgun \ct[Exotic]\c-";
		Shop[0][13][0] = "RLAssaultShotgun";
		Shop[0][13][1] = "Assault Shotgun \ct[Exotic]\c-";
		Shop[0][14][0] = "RLUzi";
		Shop[0][14][1] = "Uzi \ct[Exotic]\c-";
		Shop[0][15][0] = "RLBattleRifle";
		Shop[0][15][1] = "Battle Rifle \ct[Exotic]\c-";
		Shop[0][16][0] = "RLMinigun";
		Shop[0][16][1] = "Minigun \ct[Exotic]\c-";
		Shop[0][17][0] = "RLMissileLauncher";
		Shop[0][17][1] = "Missile Launcher \ct[Exotic]\c-";
		Shop[0][18][0] = "RLNapalmLauncher";
		Shop[0][18][1] = "Napalm Launcher \ct[Exotic]\c-";
		Shop[0][19][0] = "RLLaserRifle";
		Shop[0][19][1] = "Laser Rifle \ct[Exotic]\c-";
		Shop[0][20][0] = "RLPlasmaShotgun";
		Shop[0][20][1] = "Plasma Shotgun \ct[Exotic]\c-";
		Shop[0][21][0] = "RLTristarBlaster";
		Shop[0][21][1] = "Tristar Blaster \ct[Exotic]\c-";
		Shop[0][22][0] = "RLNuclearPlasmaRifle";
		Shop[0][22][1] = "Nuclear Plasma Rifle \ct[Exotic]\c-";
		Shop[0][23][0] = "RLNuclearBFG9000";
		Shop[0][23][1] = "Nuclear BFG9000 \ct[Exotic]\c-";
		Shop[0][24][0] = "RLCombatTranslocator";
		Shop[0][24][1] = "Combat Translocator \ct[Exotic]\c-";
		
		ShopCosts[0][9] = 1000;
		ShopCosts[0][10] = 1500;
		ShopCosts[0][11] = 2000;
		ShopCosts[0][12] = 2500;
		ShopCosts[0][13] = 3000;
		ShopCosts[0][14] = 3000;
		ShopCosts[0][15] = 4000;
		ShopCosts[0][16] = 5000;
		ShopCosts[0][17] = 5000;
		ShopCosts[0][18] = 7500;
		ShopCosts[0][19] = 7500;
		ShopCosts[0][20] = 10000;
		ShopCosts[0][21] = 20000;
		ShopCosts[0][22] = 25000;
		ShopCosts[0][23] = 50000;
		ShopCosts[0][24] = 10000;
		
		// Unique Weapons
		Shop[0][25][0] = "RLJackhammer";
		Shop[0][25][1] = "Jackhammer \cd[Unique]\c-";
		Shop[0][26][0] = "RLRailgun";
		Shop[0][26][1] = "Railgun \cd[Unique]\c-";
		Shop[0][27][0] = "RLMysteriousMagnum";
		Shop[0][27][1] = "Mysterious Magnum \cd[Unique]\c-";
		Shop[0][28][0] = "RLBFG10K";
		Shop[0][28][1] = "BFG10K \cd[Unique]\c-";
		Shop[0][29][0] = "RLUnknownHerald";
		Shop[0][29][1] = "Unknown Herald \cd[Unique]\c-";
		Shop[0][30][0] = "RLFragShotgun";
		Shop[0][30][1] = "Frag Shotgun \cd[Unique]\c-";
		Shop[0][31][0] = "RLQuadShotgun";
		Shop[0][31][1] = "Quad Shotgun \cd[Unique]\c-";
		Shop[0][32][0] = "RLLightweaver";
		Shop[0][32][1] = "Lightweaver \cd[Unique]\c-";
		Shop[0][33][0] = "RLTrigun";
		Shop[0][33][1] = "Trigun \cd[Unique]\c-";
		Shop[0][34][0] = "RLGrammatonClericBeretta";
		Shop[0][34][1] = "Grammaton Cleric Beretta \cd[Unique]\c-";
		Shop[0][35][0] = "RLAntiFreakJackal";
		Shop[0][35][1] = "Anti-Freak Jackal \cd[Unique]\c-";
		Shop[0][36][0] = "RLTantrumCannon";
		Shop[0][36][1] = "Quantum Tantrum Cannon \cd[Unique]\c-";
		Shop[0][37][0] = "RLRevenantsLauncher";
		Shop[0][37][1] = "Revenant's Launcher \cd[Unique]\c-";
		Shop[0][38][0] = "RLNullPointer";
		Shop[0][38][1] = "Charch's Null Pointer \cd[Unique]\c-";
		Shop[0][39][0] = "RLParticleBeamCannon";
		Shop[0][39][1] = "Particle Beam Cannon \cd[Unique]\c-";
		
		ShopCosts[0][25] = 10000;
		ShopCosts[0][26] = 20000;
		ShopCosts[0][27] = 25000;
		ShopCosts[0][28] = 50000;
		ShopCosts[0][29] = 25000;
		ShopCosts[0][30] = 10000;
		ShopCosts[0][31] = 25000;
		ShopCosts[0][32] = 25000;
		ShopCosts[0][33] = 10000;
		ShopCosts[0][34] = 10000;
		ShopCosts[0][35] = 25000;
		ShopCosts[0][36] = 25000;
		ShopCosts[0][37] = 10000;
		ShopCosts[0][38] = 10000;
		ShopCosts[0][39] = 25000;
		
		// Legendary Weapons
		Shop[0][40][0] = "RLJudgeOfTheDead";
		Shop[0][40][1] = "Judge of the Dead \cf[Legendary]\c-";
		Shop[0][41][0] = "RLHurricaneCannon";
		Shop[0][41][1] = "Hurricane Cannon \cf[Legendary]\c-";
		Shop[0][42][0] = "RLNeuralStunner";
		Shop[0][42][1] = "Neural Stunner \cf[Legendary]\c-";
		
		ShopCosts[0][40] = 50000;
		ShopCosts[0][41] = 50000;
		ShopCosts[0][42] = 50000;
		
		// Armor
		ShopMax[3] = 45;

		Shop[3][0][0] = "RLArmorBonusPickup";
		Shop[3][1][0] = "RLGreenArmorPickup";
		Shop[3][1][1] = "Security Armor";
		Shop[3][2][0] = "RLBlueArmorPickup";
		Shop[3][2][1] = "Combat Armor";
		Shop[3][3][0] = "RLRedArmorPickup";
		Shop[3][3][1] = "Commando Armor";
		Shop[3][4][0] = "RLBallisticGreenArmorPickup";
		Shop[3][4][1] = "Ballistic Security Armor";
		Shop[3][5][0] = "RLBallisticBlueArmorPickup";
		Shop[3][5][1] = "Ballistic Combat Armor";
		Shop[3][6][0] = "RLBallisticRedArmorPickup";
		Shop[3][6][1] = "Ballistic Commando Armor";
		Shop[3][7][0] = "RLCyberNanoGreenArmorPickup";
		Shop[3][7][1] = "CyberNano Security Armor";
		Shop[3][8][0] = "RLCyberNanoBlueArmorPickup";
		Shop[3][8][1] = "CyberNano Combat Armor";
		Shop[3][9][0] = "RLCyberNanoRedArmorPickup";
		Shop[3][9][1] = "CyberNano Commando Armor";
		Shop[3][10][0] = "RLFireproofGreenArmorPickup";
		Shop[3][10][1] = "Fireproof Security Armor";
		Shop[3][11][0] = "RLFireproofBlueArmorPickup";
		Shop[3][11][1] = "Fireproof Combat Armor";
		Shop[3][12][0] = "RLFireproofRedArmorPickup";
		Shop[3][12][1] = "Fireproof Commando Armor";
		Shop[3][13][0] = "RLNanofiberGreenArmorPickup";
		Shop[3][13][1] = "Nanofiber Security Armor";
		Shop[3][14][0] = "RLNanofiberBlueArmorPickup";
		Shop[3][14][1] = "Nanofiber Combat Armor";
		Shop[3][15][0] = "RLNanofiberRedArmorPickup";
		Shop[3][15][1] = "Nanofiber Commando Armor";
		Shop[3][16][0] = "RLNanofiberSkinGreenArmorPickup";
		Shop[3][16][1] = "Nanofiber Skin Security Armor";
		Shop[3][17][0] = "RLNanofiberSkinBlueArmorPickup";
		Shop[3][17][1] = "Nanofiber Skin Combat Armor";
		Shop[3][18][0] = "RLNanofiberSkinRedArmorPickup";
		Shop[3][18][1] = "Nanofiber Skin Commando Armor";
		Shop[3][19][0] = "RLPowerGreenArmorPickup";
		Shop[3][19][1] = "Powered Security Armor";
		Shop[3][20][0] = "RLPowerBlueArmorPickup";
		Shop[3][20][1] = "Powered Combat Armor";
		Shop[3][21][0] = "RLPowerRedArmorPickup";
		Shop[3][21][1] = "Powered Commando Armor";
		Shop[3][22][0] = "RLCerberusArmorPickup";
		Shop[3][22][1] = "Cerberus Armor";
		Shop[3][23][0] = "RLFireShieldArmorPickup";
		Shop[3][23][1] = "Fire Shield";
		Shop[3][24][0] = "RLTowerShieldArmorPickup";
		Shop[3][24][1] = "Tower Shield";
		Shop[3][25][0] = "RLTacticalArmorPickup";
		Shop[3][25][1] = "Tactical Armor";
		Shop[3][26][0] = "RLBallisticShieldArmorPickup";
		Shop[3][26][1] = "Ballistic Shield";
		Shop[3][27][0] = "RLBallisticVestArmorPickup";
		Shop[3][27][1] = "Ballistic Vest";
		Shop[3][28][0] = "RLBulletproofVestArmorPickup";
		Shop[3][28][1] = "Bulletproof Vest";
		Shop[3][29][0] = "RLDuelistArmorPickup";
		Shop[3][29][1] = "Duelist Armor";
		Shop[3][30][0] = "RLEnergyShieldedVestArmorPickup";
		Shop[3][30][1] = "Energy-Shielded Vest";
		Shop[3][31][0] = "RLEnergyShieldArmorPickup";
		Shop[3][31][1] = "Energy Shield";
		Shop[3][32][0] = "RLGothicArmorPickup";
		Shop[3][32][1] = "Gothic Armor";
		Shop[3][33][0] = "RLMedicalArmorPickup";
		Shop[3][33][1] = "Medical Armor";
		Shop[3][34][0] = "RLPhaseshiftArmorPickup";
		Shop[3][34][1] = "Phaseshift Armor";
		Shop[3][35][0] = "RLPlasmaShieldArmorPickup";
		Shop[3][35][1] = "Plasma Shield";
		Shop[3][36][0] = "RLOnyxArmorPickup";
		Shop[3][36][1] = "Onyx Armor";
		Shop[3][37][0] = "RLBerserkerArmorPickup";
		Shop[3][37][1] = "Berserker Armor";
		Shop[3][38][0] = "RLCyberneticArmorPickup";
		Shop[3][38][1] = "Cybernetic Armor";
		Shop[3][39][0] = "RLLavaArmorPickup";
		Shop[3][39][1] = "Lava Armor";
		Shop[3][40][0] = "RLMaleksArmorPickup";
		Shop[3][40][1] = "Malek's Armor";
		Shop[3][41][0] = "RLMedicalPowerArmorPickup";
		Shop[3][41][1] = "Medical Power Armor";
		Shop[3][42][0] = "RLNecroArmorPickup";
		Shop[3][42][1] = "Necro Armor";
		Shop[3][43][0] = "RLShieldedArmorPickup";
		Shop[3][43][1] = "Shielded Armor";
		Shop[3][44][0] = "RLAngelicArmorPickup";
		Shop[3][44][1] = "Angelic Armor";
		
		ShopCosts[3][0] = 1000;
		ShopCosts[3][1] = 250;
		ShopCosts[3][2] = 500;
		ShopCosts[3][3] = 1000;
		ShopCosts[3][4] = 1250;
		ShopCosts[3][5] = 1500;
		ShopCosts[3][6] = 2000;
		ShopCosts[3][7] = 5000;
		ShopCosts[3][8] = 5000;
		ShopCosts[3][9] = 5000;
		ShopCosts[3][10] = 2000;
		ShopCosts[3][11] = 2500;
		ShopCosts[3][12] = 5000;
		ShopCosts[3][13] = 2000;
		ShopCosts[3][14] = 2500;
		ShopCosts[3][15] = 3000;
		ShopCosts[3][16] = 5000;
		ShopCosts[3][17] = 7500;
		ShopCosts[3][18] = 10000;
		ShopCosts[3][19] = 2500;
		ShopCosts[3][20] = 5000;
		ShopCosts[3][21] = 10000;
		ShopCosts[3][22] = 2500;
		ShopCosts[3][23] = 10000;
		ShopCosts[3][24] = 10000;
		ShopCosts[3][25] = 1000;
		ShopCosts[3][26] = 10000;
		ShopCosts[3][27] = 5000;
		ShopCosts[3][28] = 7500;
		ShopCosts[3][29] = 7500;
		ShopCosts[3][30] = 7500;
		ShopCosts[3][31] = 10000;
		ShopCosts[3][32] = 10000;
		ShopCosts[3][33] = 5000;
		ShopCosts[3][34] = 7500;
		ShopCosts[3][35] = 7500;
		ShopCosts[3][36] = 5000;
		ShopCosts[3][37] = 7500;
		ShopCosts[3][38] = 10000;
		ShopCosts[3][39] = 7500;
		ShopCosts[3][40] = 5000;
		ShopCosts[3][41] = 7500;
		ShopCosts[3][42] = 7500;
		ShopCosts[3][43] = 10000;
		ShopCosts[3][44] = 25000;
		
		// Powerups
		ShopMax[4] = 26;
		
		Shop[4][0][0] = "InvulnerabilitySphere2";
		Shop[4][6][0] = "RadSuit2";
		Shop[4][7][0] = "Infrared2";
		Shop[4][8][0] = "Berserk2";
		Shop[4][0][0] = "InvulnerabilitySphere2";
		Shop[4][24][0] = "RLTrackingMap";
		Shop[4][24][1] = "Tracking Map";
		Shop[4][25][0] = "RLSupplyCrate";
		Shop[4][25][1] = "Supply Crate";
		
		ShopCosts[4][24] = 1500;
		ShopCosts[4][25] = 25000;
		
		// Mod Packs
		ShopMax[8] = 9;
		
		Shop[8][0][0] = "RLPowerModItem";
		Shop[8][0][1] = "Power Modpack";
		Shop[8][1][0] = "RLBulkModItem";
		Shop[8][1][1] = "Bulk Modpack";
		Shop[8][2][0] = "RLAgilityModItem";
		Shop[8][2][1] = "Agility Modpack";
		Shop[8][3][0] = "RLTechnicalModItem";
		Shop[8][3][1] = "Technical Modpack";
		Shop[8][4][0] = "RLSniperModItem";
		Shop[8][4][1] = "Sniper Modpack";
		Shop[8][5][0] = "RLFirestormModItem";
		Shop[8][5][1] = "Firestorm Modpack";
		Shop[8][6][0] = "RLNanoModItem";
		Shop[8][6][1] = "Nano Modpack";
		Shop[8][7][0] = "RLOnyxModItem";
		Shop[8][7][1] = "Onyx Modpack";
		Shop[8][8][0] = "RLArmorModItem";
		Shop[8][8][1] = "Armor Modpack";
		
		ShopCosts[8][0] = 2500;
		ShopCosts[8][1] = 2500;
		ShopCosts[8][2] = 2500;
		ShopCosts[8][3] = 2500;
		ShopCosts[8][4] = 10000;
		ShopCosts[8][5] = 10000;
		ShopCosts[8][6] = 10000;
		ShopCosts[8][7] = 10000;
		ShopCosts[8][8] = 2500;
		
		// Boots
		ShopMax[9] = 23;
		
		Shop[9][0][0] = "RLSteelBootsPickup";
		Shop[9][0][1] = "Steel Boots";
		Shop[9][1][0] = "RLProtectiveBootsPickup";
		Shop[9][1][1] = "Protective Boots";
		Shop[9][2][0] = "RLPlasteelBootsPickup";
		Shop[9][2][1] = "Plasteel Boots";
		Shop[9][3][0] = "RLAntigravSteelBootsPickup";
		Shop[9][3][1] = "Anti-Grav Steel Boots";
		Shop[9][4][0] = "RLAntigravProtectiveBootsPickup";
		Shop[9][4][1] = "Anti-Grav Protective Boots";
		Shop[9][5][0] = "RLAntigravPlasteelBootsPickup";
		Shop[9][5][1] = "Anti-Grav Plasteel Boots";
		Shop[9][6][0] = "RLEnviromentalSteelBootsPickup";
		Shop[9][6][1] = "Environmental Steel Boots";
		Shop[9][7][0] = "RLEnviromentalProtectiveBootsPickup";
		Shop[9][7][1] = "Environmental Protective Boots";
		Shop[9][8][0] = "RLEnviromentalPlasteelBootsPickup";
		Shop[9][8][1] = "Environmental Plasteel Boots";
		Shop[9][9][0] = "RLFireproofSteelBootsPickup";
		Shop[9][9][1] = "Fireproof Steel Boots";
		Shop[9][10][0] = "RLFireproofProtectiveBootsPickup";
		Shop[9][10][1] = "Fireproof Protective Boots";
		Shop[9][11][0] = "RLFireproofPlasteelBootsPickup";
		Shop[9][11][1] = "Fireproof Plasteel Boots";
		Shop[9][12][0] = "RLGrapplingSteelBootsPickup";
		Shop[9][12][1] = "Grappling Steel Boots";
		Shop[9][13][0] = "RLGrapplingProtectiveBootsPickup";
		Shop[9][13][1] = "Grappling Protective Boots";
		Shop[9][14][0] = "RLGrapplingPlasteelBootsPickup";
		Shop[9][14][1] = "Grappling Plasteel Boots";
		Shop[9][15][0] = "RLCerberusBootsPickup";
		Shop[9][15][1] = "Cerberus Boots";
		Shop[9][16][0] = "RLTacticalBootsPickup";
		Shop[9][16][1] = "Tactical Boots";
		Shop[9][17][0] = "RLLavaBootsPickup";
		Shop[9][17][1] = "Lava Boots";
		Shop[9][18][0] = "RLAcidProofBootsPickup";
		Shop[9][18][1] = "Acid-Proof Boots";
		Shop[9][19][0] = "RLGothicBootsPickup";
		Shop[9][19][1] = "Gothic Boots";
		Shop[9][20][0] = "RLPhaseshiftBootsPickup";
		Shop[9][20][1] = "Phaseshift Boots";
		Shop[9][21][0] = "RLEnviroBootsPickup";
		Shop[9][21][1] = "Enviro Boots";
		Shop[9][22][0] = "RLNyarlaptotepsBootsPickup";
		Shop[9][22][1] = "Nyarlaptotep's Boots";
		
		ShopCosts[9][0] = 250;
		ShopCosts[9][1] = 500;
		ShopCosts[9][2] = 750;
		ShopCosts[9][3] = 1000;
		ShopCosts[9][4] = 1500;
		ShopCosts[9][5] = 2000;
		ShopCosts[9][6] = 1000;
		ShopCosts[9][7] = 1500;
		ShopCosts[9][8] = 2000;
		ShopCosts[9][9] = 1000;
		ShopCosts[9][10] = 1500;
		ShopCosts[9][11] = 2000;
		ShopCosts[9][12] = 1000;
		ShopCosts[9][13] = 1500;
		ShopCosts[9][14] = 2000;
		ShopCosts[9][15] = 1000;
		ShopCosts[9][16] = 1000;
		ShopCosts[9][17] = 1000;
		ShopCosts[9][18] = 1000;
		ShopCosts[9][19] = 2500;
		ShopCosts[9][20] = 2500;
		ShopCosts[9][21] = 1000;
		ShopCosts[9][22] = 5000;
	};
};

function void ShopLoop()
{
	int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
	int Discount = (int)(Player.RankLevel * 2.1);
	int Cost = ShopCosts[Player.ShopPage][Player.ShopIndex] - ShopCosts[Player.ShopPage][Player.ShopIndex] * Discount / 100;
	int SellPrice;
	
	// Certain pages are built dynamically or require modifications depending on extension CVARs
	ShopBuildPages();
	
	// Get the sell price
	if (Player.ShopPage == 1) // Ammo
		SellPrice = GetSellPrice(GetAmmoAmount(Shop[Player.ShopPage][Player.ShopIndex][0]))
	else
		SellPrice = GetSellPrice(1);
	
	if (Player.InShop)
    {
		// Freeze the game if the option is active
		if (GetCVar("drpg_menufreeze"))
			GiveInventory("MenuFreezer", 1);
		
		// Set the HUD Size
		SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);

		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
		// Draw Shop
        SetFont("BIGFONT");
        HudMessage("Shop - %s (%d/%d)\n",
				   ShopNames[Player.ShopPage], Player.ShopPage + 1, ShopCategories,
                   HUDMSG_PLAIN, 3000, CR_GREEN,
                   24.1, 24.0, 0.05);
        
        // Draw Price
		if (Player.ShopPage == 5) // Tokens
			HudMessage("\cj%d C \ck(Discount: %d%%)\n",
					   Cost, Discount,
					   HUDMSG_PLAIN, 3000 + SHOP_ITEMS, CR_GOLD,
					   24.1, 38.0, 0.05)
		else
			HudMessage("\cj%d C \ci(%d C) \ck(Discount: %d%%)\n",
					   Cost, SellPrice, Discount,
					   HUDMSG_PLAIN, 3000 + SHOP_ITEMS, CR_GOLD,
					   24.1, 38.0, 0.05);
        
        /* Draw Help
        SetFont("SMALLFONT");
		HudMessage(s:"Up/Down to move\nLeft/Right to change Player.ShopPages\nUse to buy\nRun to sell\nMenu to exit";
				   HUDMSG_PLAIN, 3022, CR_RED,
				   0.1, 240.1, 0.05); */
		
		// Determine Offset
		if (Player.ShopIndex > SHOP_SCROLL)
			Player.ShopOffset = Player.ShopIndex - SHOP_SCROLL
		else
			Player.ShopOffset = 0;
		
		// Draw Item List
        for (int i = Player.ShopOffset; i < Player.ShopOffset + (SHOP_SCROLL * 2) + 1; i++)
        {
			if (i > ShopMax[Player.ShopPage] - 1) continue;
			
			SetFont("SMALLFONT");
			
            if (i == Player.ShopIndex)
				if (CheckInventory(Shop[Player.ShopPage][i][0]) > 0)
					HudMessage("%s \cd[%d]\n",
							   Shop[Player.ShopPage][i][1], CheckInventory(Shop[Player.ShopPage][i][0]),
							   HUDMSG_PLAIN, 3001 + i, MenuCursorColor,
							   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
				else
					HudMessage("%s\n",
							   Shop[Player.ShopPage][i][1],
							   HUDMSG_PLAIN, 3001 + i, MenuCursorColor,
							   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
            else
                if (CheckInventory("Credits") >= ShopCosts[Player.ShopPage][i] - ShopCosts[Player.ShopPage][i] * Discount / 100)
					if (CheckInventory(Shop[Player.ShopPage][i][0]) > 0)
						HudMessage("%s \cd[%d]\n",
								   Shop[Player.ShopPage][i][1], CheckInventory(Shop[Player.ShopPage][i][0]),
								   HUDMSG_PLAIN, 3001 + i, CR_WHITE,
								   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
					 else
						HudMessage("%s\n",
								   Shop[Player.ShopPage][i][1],
								   HUDMSG_PLAIN, 3001 + i, CR_WHITE,
								   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
                else
					if (CheckInventory(Shop[Player.ShopPage][i][0]) > 0)
						HudMessage("%s \cd[%d]\n",
								   Shop[Player.ShopPage][i][1], CheckInventory(Shop[Player.ShopPage][i][0]),
								   HUDMSG_PLAIN, 3001 + i, CR_RED,
								   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05)
					else
						HudMessage("%s\n",
								   Shop[Player.ShopPage][i][1],
								   HUDMSG_PLAIN, 3001 + i, CR_RED,
								   24.1, 50.0 + 8.0 * (i - Player.ShopOffset), 0.05);
        };
        
		// Check cursor movement for repeating
        if (Buttons == BT_FORWARD)
		{
			Player.DelayTimer++;
			if (Player.DelayTimer > 35)
				MoveCursor(DIR_UP);
		};
        if (Buttons == BT_BACK)
		{
			Player.DelayTimer++;
			if (Player.DelayTimer > 35)
				MoveCursor(DIR_DOWN);
		};
		
        // Check Input
        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD)
			MoveCursor(DIR_UP);
        if (Buttons == BT_BACK && OldButtons != BT_BACK)
			MoveCursor(DIR_DOWN);
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
			MoveCursor(DIR_LEFT);
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
			MoveCursor(DIR_RIGHT);
        if (Buttons == BT_USE && OldButtons != BT_USE && !Player.MenuBlock)
		{
			if (CheckInventory("Credits") >= Cost)
				BuyItem(Shop[Player.ShopPage][Player.ShopIndex][0], Cost)
			else
				ActivatorSound("menu/error", 127);
		};
		if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
			if (CheckInventory(Shop[Player.ShopPage][Player.ShopIndex][0]) > 0)
				SellItem(Shop[Player.ShopPage][Player.ShopIndex][0], false)
			else
				ActivatorSound("menu/error", 127);
		if (Buttons & BT_SPEED)
		{
			Player.DelayTimer++;
			
			if (Player.DelayTimer > 35 * 2 && CheckInventory(Shop[Player.ShopPage][Player.ShopIndex][0]) > 0)
			{
				SellItem(Shop[Player.ShopPage][Player.ShopIndex][0], true);
				Player.DelayTimer = 0;
			};
		};
		
		// Reset the Delay Timer if no buttons are pressed
		if (Buttons == 0 && OldButtons == 0)
			Player.DelayTimer = 0;
		
		// Reset the menu block
		Player.MenuBlock = false;	
    };
};

function void MoveCursor(int Direction)
{
	if (Direction == DIR_UP)
	{
		if (Player.ShopIndex <= 0) Player.ShopIndex = ShopMax[Player.ShopPage];
		ActivatorSound("menu/move", 127);
		Player.ShopIndex--;
	};
	if (Direction == DIR_DOWN)
	{
		if (Player.ShopIndex >= ShopMax[Player.ShopPage] - 1) Player.ShopIndex = -1;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex++;
	};
	if (Direction == DIR_LEFT)
	{
		if (Player.ShopPage <= 0) Player.ShopPage = ShopCategories;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex = 0;
		Player.ShopPage--;
	};
	if (Direction == DIR_RIGHT)
	{
		if (Player.ShopPage >= ShopCategories - 1) Player.ShopPage = -1;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex = 0;
		Player.ShopPage++;
	};
};

function int GetAmmoAmount(str Item)
{
	int Amount = 1;
	
	// If it's ammo, we need to get the real amounts to give if you're using the Give buy mode
	if (Item == "Clip")			Amount = 10;
	if (Item == "ClipBox")		Amount = 50;
	if (Item == "Shell")		Amount = 4;
	if (Item == "ShellBox")		Amount = 20;
	if (Item == "RocketAmmo")	Amount = 1;
	if (Item == "RocketBox")	Amount = 5;
	if (Item == "Cell")			Amount = 20;
	if (Item == "CellPack")		Amount = 100;
	
	// If it's ammo and it's the large version, just change it down to the base type
	if (Item == "ClipBox")		Item = "Clip";
	if (Item == "ShellBox")		Item = "Shell";
	if (Item == "RocketBox")	Item = "RocketAmmo";
	if (Item == "CellPack")		Item = "Cell";
	
	// Now apply difficulty-based multipliers to the amount if it's ammo
	if (Item == "Clip" || Item == "Shell" || Item == "RocketAmmo" || Item == "Cell")
		if (GameSkill() == 1 || GameSkill() == 5)
			Amount *= 2;
	
	return Amount;
};

function void BuyItem(str Item, int Cost)
{
	// If it has no price, fail
	if (Cost == 0)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// If it's a Token, use alternate handling due to bullshit
	if (Item == "StatToken") 	Item = "SmallStatToken";
	if (Item == "StatCapToken") Item = "SmallStatCapToken";
	if (Item == "SkillToken")	Item = "SmallSkillToken";
	
	/* Buy Type
	if (GetCVar("drpg_shopbuytype"))
	{
		int Amount = 1;
		
		// Run through the ammo checker just in case
		Amount = GetAmmoAmount(Item);
		
		// If it's an instant use health item, give it the proper amount
		if (Item == "Soulsphere")	Amount = 100;
		if (Item == "AtomicHealth")	Amount = 200;
		
		if (CheckInventory(Item) == 0 || CheckInventory(Item) < CheckInventoryMax(Item))
			GiveInventory(Item, Amount);
		else
		{
			ActivatorSound("menu/error", 127);
			return;
		};
	}
	else
	{};
	*/
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		if (Player.ShopPage == 0) // Weapons
			Item = StrParam("%sPickup\n", Item);
	
	if (InBase && !GetCVar("drpg_shoptype"))
		SpawnSpotForced(Item, ShopSpotID, 0, 0)
	else
	{
		SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
		SetActorVelocity(PlayerTID, 0.01, 0.01, 0, true, false);
	};
	
	ActivatorSound("menu/buy", 127);
	TakeInventory("Credits", Cost);
};

function int GetSellPrice(int Amount)
{
	int SellCost = ShopCosts[Player.ShopPage][Player.ShopIndex];
	int SellAmount = Amount;
	
	// Some pages need modified sell behavior
	if (Player.ShopPage == 1) // Ammo
	{
		SellAmount = GetAmmoAmount(Shop[Player.ShopPage][Player.ShopIndex][0]);
		if (Player.ShopIndex == 4) // GROSS HACK for Rockets
			SellCost /= Amount * 5
		else
			SellCost /= Amount;
	};
	
	SellCost /= 10;
	
	// Make sure you always get at least 1 Credit from a sale
	if (SellCost == 0) SellCost = 1;
	
	return SellCost;
};

function int SellItem(str Item, bool SellAll)
{
	// You must be at least Rank 1 or in the Outpost to sell items
	if (Player.RankLevel == 0 && !InBase)
	{
		SetFont("BIGFONT");
		Print("\cgYou cannot sell items outside the Outpost until you reach the first rank\n");
		ActivatorSound("menu/error", 127);
		return 0;
	};
	
	// Page blacklist
	if (Player.ShopPage == 5) // Tokens
	{
		ActivatorSound("menu/error", 127);
		return 0;
	};
	
	int Amount = 1;
	
	if (SellAll)
		Amount = CheckInventory(Item);
	
	if (Player.ShopPage == 1) // Ammo
		Amount = GetAmmoAmount(Item);
	
	int SellCost = GetSellPrice(Amount);

	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		for (int i = 1; i <= Amount; i++)
		{
			if (Player.ShopPage == 0) // Weapons
				TakeInventory("RLWeaponLimit", 1);
			if (Player.ShopPage == 3) // Armor
				TakeInventory("RLArmorInInventory", 1);
			if (Player.ShopPage == 8) // Mod Packs
				if (PlayerClass(PlayerIndex) == 2) // Special handling case for Technician
					TakeInventory("RLScavengerModLimit", 1)
				else
					TakeInventory("RLModLimit", 1);
			if (Player.ShopPage == 9) // Boots
				TakeInventory("RLBootsInInventory", 1);
		};
	
	// Sell the Item
	if (CheckInventory(Item) >= Amount)
	{
		ActivatorSound("credits/payout", 127);
		TakeInventory(Item, Amount);
		GiveInventory("Credits", SellCost * Amount);
	}
	else
		ActivatorSound("menu/error", 127);
	
	return SellCost;
};
