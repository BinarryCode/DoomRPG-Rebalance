#include "Globals.dh"
#include "ItemData.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Utils.dh"

int ShopSpotID = 1000;

// Open the Shop
acscript OpenShop(bool FromBase) net
{
	// If you're dead, return
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	// If you're in any minigames, return
	if (Player.InMinigame) return;
	
	// Close the main menu if it's open
	Player.InMenu = false;
	
	if (Player.OutpostMenu == OMENU_LOCKER) // Locker
	{
		Player.LockerGlobal = !Player.LockerGlobal;
		ActivatorSound("menu/move", 127);
		return;
	};
	
	if (Player.InShop)
	{
		// Sanity Check to prevent the shop closing itself after buying an item in the Outpost Shop
		if (!FromBase) return;
		
		ActivatorSound("menu/leave", 127);
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		Player.InShop = false;
	}
	else
	{
		// Don't let you Shop Anywhere if it's disabled
		if (!InBase && !GetCVar("drpg_shoptype")) return;
		
		ActivatorSound("menu/shop", 127);
		Player.InShop = true;
	};
};

// Sell items in bulk
acscript SellAllPage(int SellPage, bool Silent)
{
	int Total;
	
	// Set font
	SetFont("BIGFONT");
	
	// Invalid Player.ShopPages
	if (SellPage < 0 || SellPage > ITEM_CATEGORIES)
	{
		HudMessage("Invalid Shop Page\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 1.0);
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Sell Items
	for (int i = 0; i < ItemMax[SellPage]; i++)
		if (CheckInventory(ItemData[SellPage][i].Actor) > 0)
			Total += SellItem(ItemData[SellPage][i].Actor, true)
		else continue;
	
	// Display Message
	if (!Silent)
	{
		HudMessage("Sold all %s items for %d Credits\n",
				   ItemCategoryNames[SellPage], Total,
				   HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.5, 5.0, 5.0);
		ActivatorSound("credits/payout", 127);
	};
};

function void ShopLoop()
{
	int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
	fixed X = 24.1;
	fixed Y = 50.0;
	int Cost = ItemData[Player.ShopPage][Player.ShopIndex].Price - ItemData[Player.ShopPage][Player.ShopIndex].Price * Player.ShopDiscount / 100;
	int SellPrice;
	int Color;
	int Available;
	str Name;
	str Item;
	int Held;
	int Rank;
	
	// Freeze the Player
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);

	// Certain pages are built dynamically or require modifications depending on extension CVARs
	BuildItemData();

#if DEBUG
	// Remove rank limitations in Debug Mode
	for (int i = 0; i < ItemCategories; i++)
		for (int j = 0; j < ItemMax[i]; j++)
			ItemData[i][j].Rank = 0;
#endif
	
	// Calculate the held amounts for the shop items
	for (int i = 0; i < ItemCategories; i++)
		for (int j = 0; j < ItemMax[i]; j++)
			ItemData[i][j].Held = CheckInventory(ItemData[i][j].Actor);
			
	// Calculate a total of how many of the items are actually available for buying or selling depending on your Rank
	for (int i = 0; i < ItemMax[Player.ShopPage]; i++)
		if (ItemData[Player.ShopPage][i].Rank <= Player.RankLevel) Available++;
	
	// Get the sell price
	SellPrice = GetSellPrice(1);
	
	// Set the HUD Size
	SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);

	// Draw Shop
	SetFont("BIGFONT");
	HudMessage("Shop - %s (%d/%d)\n",
			   ItemCategoryNames[Player.ShopPage], Player.ShopPage + 1, ItemCategories,
			   HUDMSG_PLAIN, 0, CR_GREEN,
			   24.1, 24.0, 0.05);
	
	// Draw Price
	if (Player.ShopPage == 1 || Player.ShopPage == 5) // Tokens
		HudMessage("\cj%d C \ck(Discount: %d%%)\n",
				   Cost, Player.ShopDiscount,
				   HUDMSG_PLAIN, 0, CR_GOLD,
				   24.1, 38.0, 0.05)
	else
		HudMessage("\cj%d C \ci(%d C) \ck(Discount: %d%%)\n",
				   Cost, SellPrice, Player.ShopDiscount,
				   HUDMSG_PLAIN, 0, CR_GOLD,
				   24.1, 38.0, 0.05);
	
	// Determine Offset
	if (Player.ShopIndex > SHOP_SCROLL && Available > SHOP_SCROLL)
		Player.ShopOffset = Player.ShopIndex - SHOP_SCROLL
	else
		Player.ShopOffset = 0;
	
	// Draw Item List
	for (int i = Player.ShopOffset; i < Player.ShopOffset + (SHOP_SCROLL * 2) + 1; i++)
	{
		Name = ItemData[Player.ShopPage][i].Name;
		Cost = ItemData[Player.ShopPage][i].Price;
		Held = ItemData[Player.ShopPage][i].Held;
		Rank = ItemData[Player.ShopPage][i].Rank;
		
		// Stop if we're at the end of the list
		if (i > ItemMax[Player.ShopPage] - 1) continue;
		
		// Continue past this item if we don't have the rank to buy/sell it
		if ((Rank > 0 && Player.RankLevel < Rank) || Rank == -1) continue;
		
		SetFont("SMALLFONT");
		
		// Set the Color
		if (i == Player.ShopIndex)
			Color = MenuCursorColor
		else if (CheckInventory("Credits") >= Cost - Cost * Player.ShopDiscount / 100)
			Color = CR_WHITE
		else
			Color = CR_RED;
		
		// Set the Item String
		if (Held > 0)
			Item = StrParam("%s \cd[%d]\n", Name, Held)
		else
			Item = StrParam("%s\n", Name);
		
		// Display the item string
		HudMessage("%s\n", Item, HUDMSG_PLAIN, 0, Color, X, Y, 0.05);
		
		// Move down Y
		Y += 8.0;
	};
		
	// Check cursor movement for repeating
	if (Buttons == BT_FORWARD)
	{
		Player.DelayTimer++;
		if (Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat"))
			MoveCursor(DIR_UP);
	};
	if (Buttons == BT_BACK)
	{
		Player.DelayTimer++;
		if (Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat"))
			MoveCursor(DIR_DOWN);
	};
	
	// Check Input
	if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD)
		MoveCursor(DIR_UP);
	if (Buttons == BT_BACK && OldButtons != BT_BACK)
		MoveCursor(DIR_DOWN);
	if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
		(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
		MoveCursor(DIR_LEFT);
	if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
		(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
		MoveCursor(DIR_RIGHT);
	if (Buttons == BT_USE && OldButtons != BT_USE && !Player.MenuBlock)
	{
		if (CheckInventory("Credits") >= ItemData[Player.ShopPage][Player.ShopIndex].Price - ItemData[Player.ShopPage][Player.ShopIndex].Price * Player.ShopDiscount / 100)
			BuyItem(ItemData[Player.ShopPage][Player.ShopIndex].Actor)
		else
			ActivatorSound("menu/error", 127);
	};
	if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
		if (ItemData[Player.ShopPage][Player.ShopIndex].Held > 0)
			SellItem(ItemData[Player.ShopPage][Player.ShopIndex].Actor, false)
		else
			ActivatorSound("menu/error", 127);
	if (Buttons & BT_SPEED)
	{
		Player.DelayTimer++;
		
		if (Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat") && ItemData[Player.ShopPage][Player.ShopIndex].Held > 0)
		{
			SellItem(ItemData[Player.ShopPage][Player.ShopIndex].Actor, true);
			Player.DelayTimer = 0;
		};
	};
	
	// Reset the Delay Timer if no buttons are pressed
	if (Buttons == 0 && OldButtons == 0)
		Player.DelayTimer = 0;
	
	// Reset the menu block
	Player.MenuBlock = false;	
};

function void MoveCursor(int Direction)
{
	if (Direction == DIR_UP)
	{
		if (Player.ShopIndex <= 0) Player.ShopIndex = ItemMax[Player.ShopPage];
		ActivatorSound("menu/move", 127);
		Player.ShopIndex--;
		while (ItemData[Player.ShopPage][Player.ShopIndex].Rank > Player.RankLevel || ItemData[Player.ShopPage][Player.ShopIndex].Rank == -1)
			if (Player.ShopIndex <= 0)
				Player.ShopIndex = ItemMax[Player.ShopPage]
			else
				Player.ShopIndex--;
	}
	else if (Direction == DIR_DOWN)
	{
		if (Player.ShopIndex >= ItemMax[Player.ShopPage] - 1) Player.ShopIndex = -1;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex++;
		while (ItemData[Player.ShopPage][Player.ShopIndex].Rank > Player.RankLevel || ItemData[Player.ShopPage][Player.ShopIndex].Rank == -1)
			if (Player.ShopIndex >= ItemMax[Player.ShopPage] - 1)
				Player.ShopIndex = 0
			else
				Player.ShopIndex++;
	}
	else if (Direction == DIR_LEFT)
	{
		if (Player.ShopPage <= 0) Player.ShopPage = ItemCategories;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex = 0;
		Player.ShopPage--;
	}
	else if (Direction == DIR_RIGHT)
	{
		if (Player.ShopPage >= ItemCategories - 1) Player.ShopPage = -1;
		ActivatorSound("menu/move", 127);
		Player.ShopIndex = 0;
		Player.ShopPage++;
	};
};

function void BuyItem(str Item)
{
	int Cost = ItemData[Player.ShopPage][Player.ShopIndex].Price - ItemData[Player.ShopPage][Player.ShopIndex].Price * Player.ShopDiscount / 100;
	
	// If you aren't the required rank, fail
	if (ItemData[Player.ShopPage][Player.ShopIndex].Rank > Player.RankLevel) return;
	
	// If it has no price, fail
	if (Cost == 0)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		if (Player.ShopPage == 0) // Weapons
			Item = StrParam("%sPickup\n", Item);
	
	if (InBase && !GetCVar("drpg_shoptype"))
		SpawnSpotForced(Item, ShopSpotID, 0, 0)
	else
	{
		SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
		SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
	};
	
	ActivatorSound("menu/buy", 127);
	TakeInventory("Credits", Cost);
};

function int GetSellPrice(int Amount)
{
	int SellCost = ItemData[Player.ShopPage][Player.ShopIndex].Price;
	
	// 1/10th normal buying price
	SellCost /= 10;
	
	// Make sure you always get at least 1 Credit from a sale
	if (SellCost == 0) SellCost = 1;
	
	return SellCost;
};

function int SellItem(str Item, bool SellAll)
{
	int Amount = 1;
	int SellCost;

	// You must be at least Rank 1 or in the Outpost to sell items
	if (Player.RankLevel == 0 && !InBase)
	{
		SetHudSize(0, 0, false);
		SetFont("BIGFONT");
		HudMessage("You cannot sell items outside the Outpost until you reach the first rank\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
		ActivatorSound("menu/error", 127);
		return 0;
	};
	
	// Page blacklist
	if (Player.ShopPage == 1 || Player.ShopPage == 5) // Ammo and Tokens
	{
		ActivatorSound("menu/error", 127);
		return 0;
	};
	
	if (SellAll)
		Amount = CheckInventory(Item);
	
	if (Player.ShopPage == 1) // Ammo
		Amount = GetAmmoAmount(Item);
	
	// Get Sell Price
	SellCost = GetSellPrice(Amount);

	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		for (int i = 1; i <= Amount; i++)
		{
			if (Player.ShopPage == 0) // Weapons
				TakeInventory("RLWeaponLimit", 1);
			if (Player.ShopPage == 3) // Armor
				TakeInventory("RLArmorInInventory", 1);
			if (Player.ShopPage == 8) // Mod Packs
				if (Player.ShopIndex == 8) // Special handling case for Armor Modpack
					TakeInventory("RLArmorModItemInInventory", 1)
				else
					if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
						TakeInventory("RLScavengerModLimit", 1)
					else
						TakeInventory("RLModLimit", 1);
			if (Player.ShopPage == 9) // Boots
				TakeInventory("RLBootsInInventory", 1);
		};
	
	// Sell the Item
	if (CheckInventory(Item) >= Amount)
	{
		ActivatorSound("credits/payout", 127);
		TakeInventory(Item, Amount);
		GiveInventory("Credits", SellCost * Amount);
	}
	else
		ActivatorSound("menu/error", 127);
	
	return SellCost;
};
