#include "RPG.dh"

#include "ItemData.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Utils.dh"

// Global Shop Card Rank
static int GlobalShopCard;

int ShopSpotID = 1000;

// Open the Shop
acscript void OpenShop(bool FromBase) net
{
    // If you're dead, return
    if (GetActorProperty(0, APROP_Health) <= 0) return;
    
    // If you're in an Outpost menu, return
    if (Player.OutpostMenu > 0) return;
    
    // If you're in any minigames, return
    if (Player.InMinigame) return;
    
    // Close the main menu if it's open
    Player.InMenu = false;
    
    if (Player.InShop)
    {
        // Sanity Check to prevent the shop closing itself after buying an item in the Outpost Shop
        if (!FromBase) return;
        
        ActivatorSound("menu/leave", 127);
        SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
        Player.InShop = false;
    }
    else
    {
        ActivatorSound("menu/shop", 127);
        Player.InShop = true;
    };
};

script void AutoSellHandler()
{
    while (true)
    {
        if (Player.RankLevel > 0 || InBase)
            for (int i = 0; i < ItemCategories; i++)
                for (int j = 0; j < ItemMax[i]; j++)
                {
                    ItemInfoPtr Item = &ItemData[i][j];
                    
                    if (Player.AutoSell[i][j] && CheckInventory(Item->Actor) > 0)
                    {
                        // DoomRL Compatibility
                        if (CompatMode == COMPAT_DRLA)
                        {
                            if (i == 0) // Weapons
                                TakeInventory("RLWeaponLimit", CheckInventory(Item->Actor));
                            if (i == 3) // Armor
                                TakeInventory("RLArmorInInventory", CheckInventory(Item->Actor));
                            if (i == 9) // Mod Packs
                                if (j == 8) // Special handling case for Armor Modpack
                                    TakeInventory("RLArmorModItemInInventory", CheckInventory(Item->Actor))
                                else
                                    if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
                                        TakeInventory("RLScavengerModLimit", CheckInventory(Item->Actor))
                                    else
                                        TakeInventory("RLModLimit", CheckInventory(Item->Actor));
                            if (i == 10) // Boots
                                TakeInventory("RLBootsInInventory", CheckInventory(Item->Actor));
                        };
                        
                        Player.AutoSellPay += SellItem(Item->Actor, true, true);
                        DrawPay(Player.AutoSellPay);
                        Player.AutoSellTimer = 35 * 6;
                    };
                };
        
        if (Player.AutoSellTimer <= 0)
            Player.AutoSellPay = 0;
        
        Delay(1);
    };
};

function void ShopLoop()
{
    ItemInfoPtr ItemPtr = &ItemData[Player.ShopPage][Player.ShopIndex];
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
    int Cost = ItemPtr->Price - ItemPtr->Price * Player.ShopDiscount / 100;
    int Rank = ItemPtr->Rank;
    int SellPrice;
    int Color;
    
    // Freeze the Player
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);

    // Get the sell price
    SellPrice = GetSellPrice(nullptr, 1);
    
    // Set the HUD Size
    SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);

    // Force Locker mode if the Shop Anywhere CVAR is off
    if (!GetCVar("drpg_shoptype"))
        Player.LockerMode = true;
    
    SetFont("BIGFONT");
    if (Player.LockerMode)
    {
        // Title and Page
        HudMessage("Locker - %s (%d/%d)\n",
                   ItemCategoryNames[Player.ShopPage], Player.ShopPage + 1, ItemCategories,
                   HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05);
        
        // EP Cost/Inventory Count
        if (GetCVar("drpg_inv_capacity"))
            HudMessage("%s%d EP \c-(Inventory: %d/%d)\n",
                       (InBase ? "\cc" : "\cn"), LOCKER_EPRATE, Player.InvItems, CheckInventoryMax(),
                       HUDMSG_PLAIN, 0, CR_WHITE, 24.1, 38.0, 0.05)
        else
            HudMessage("%s%d EP\n",
                       (InBase ? "\cc" : "\cn"), LOCKER_EPRATE,
                       HUDMSG_PLAIN, 0, CR_WHITE, 24.1, 38.0, 0.05);
    }
    else
    {
        // Title and Page
        HudMessage("Shop - %s (%d/%d)\n",
                   ItemCategoryNames[Player.ShopPage], Player.ShopPage + 1, ItemCategories,
                   HUDMSG_PLAIN, 0, CR_GREEN,
                   24.1, 24.0, 0.05);
        
        // Price
        if (CategoryFlags[Player.ShopPage] & CF_NOSELL) // No Selling
            HudMessage("\cj%d C \ck(Discount: %d%%)\n",
                       Cost, Player.ShopDiscount,
                       HUDMSG_PLAIN, 0, CR_GOLD,
                       24.1, 38.0, 0.05)
        else if (CategoryFlags[Player.ShopPage] & CF_NOBUY || Rank == -1) // No Buying
            HudMessage("\ci%d C \ck(Discount: %d%%)\n",
                       SellPrice, Player.ShopDiscount,
                       HUDMSG_PLAIN, 0, CR_GOLD,
                       24.1, 38.0, 0.05)
        else // Normal
            HudMessage("\cj%d C \ci(%d C) \ck(Discount: %d%%)\n",
                       Cost, SellPrice, Player.ShopDiscount,
                       HUDMSG_PLAIN, 0, CR_GOLD,
                       24.1, 38.0, 0.05);
    };
    
    // Item Grid
    DrawItemGrid();
    
    // Draw Shop Card
    if (Player.ShopCard > 0)
    {
        str CardSprite;
        
        SetFont("BIGFONT");
        HudMessage("+%d%%\n", Player.ShopCard * 5, HUDMSG_PLAIN, 0, (InBase ? CR_YELLOW : CR_GREY), 436.4, 364.0, 0.05);
        if (ItemRanksRemoved)
        {
            SetFont("SMALLFONT");
            HudMessage("No Rank\nLimits\n", HUDMSG_PLAIN, 0, CR_CYAN, 433.4, 382.0, 0.05);
        };
        
        if (Player.ShopCard == 1)
            CardSprite = "UCRDA0"
        else if (Player.ShopCard == 2)
            CardSprite = "UCRDB0"
        else if (Player.ShopCard == 3)
            CardSprite = "UCRDC0"
        else if (Player.ShopCard == 4)
            CardSprite = "UCRDD0"
        else if (Player.ShopCard == 5)
            CardSprite = "UCRDE0";
        
        if (InBase)
            PrintSprite(CardSprite, 0, 458.0, 384.0, 0.05)
        else
            PrintSpritePulse(CardSprite, 0, 458.0, 384.0, 0.5, 64.0, 0.5);
    };
    
    // Check Input
    if (Buttons & BT_FORWARD && !(OldButtons & BT_FORWARD))
    {
        ActivatorSound("menu/move", 127);
        if (Buttons & BT_SPEED)
            Player.ShopIndex -= 54
        else
            Player.ShopIndex -= 9;
        if (Player.ShopIndex < 0) Player.ShopIndex = 0;
    };
    if (Buttons & BT_BACK && !(OldButtons & BT_BACK))
    {
        ActivatorSound("menu/move", 127);
        if (Buttons & BT_SPEED)
            Player.ShopIndex += 54
        else
            Player.ShopIndex += 9;
        if (Player.ShopIndex > ItemMax[Player.ShopPage] - 1) Player.ShopIndex = ItemMax[Player.ShopPage] - 1;
    };
    if ((Buttons & BT_LEFT && !(OldButtons & BT_LEFT)) ||
        (Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT)))
        if (Buttons & BT_SPEED)
        {
            ActivatorSound("menu/move", 127);
            Player.ShopPage--;
            Player.ShopIndex = 0;
            if (Player.ShopPage < 0) Player.ShopPage = ItemCategories - 1;
        }
        else
        {
            ActivatorSound("menu/move", 127);
            Player.ShopIndex--;
            if (Player.ShopIndex < 0) Player.ShopIndex = 0;
        };
    if ((Buttons & BT_RIGHT && !(OldButtons & BT_RIGHT)) ||
        (Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT)))
        if (Buttons & BT_SPEED)
        {
            ActivatorSound("menu/move", 127);
            Player.ShopPage++;
            Player.ShopIndex = 0;
            if (Player.ShopPage > ItemCategories - 1) Player.ShopPage = 0;
        }
        else
        {
            ActivatorSound("menu/move", 127);
            Player.ShopIndex++;
            if (Player.ShopIndex > ItemMax[Player.ShopPage] - 1) Player.ShopIndex = ItemMax[Player.ShopPage] - 1;
        };
    if (Buttons & BT_USE && (Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat") ? true : !(OldButtons & BT_USE)) && !Player.MenuBlock)
        if (Buttons & BT_SPEED)
        {
            if (Player.LockerMode)
                WithdrawItem()
            else
                SellItem(ItemPtr->Actor, false, false);
        }
        else
        {
            if (Player.LockerMode)
                DepositItem()
            else if (!Player.AutoSell[Player.ShopPage][Player.ShopIndex])
                BuyItem(ItemPtr->Actor);
        };
    if (Buttons & BT_JUMP && !(OldButtons & BT_JUMP) && GetCVar("drpg_shoptype"))
    {
        Player.LockerMode = !Player.LockerMode;
        ActivatorSound("menu/move", 127);
    };
    if (Buttons & BT_ZOOM && !(OldButtons & BT_ZOOM))
        if (CheckInventory(ItemPtr->Actor) > 0 && !(CompatMode == COMPAT_DRLA && (Player.ShopPage == 0 || Player.ShopPage == 3 || Player.ShopPage == 9 || Player.ShopPage == 10)))
        {
            int Success = DropPlayerItem(ItemPtr->Actor);
            if (Success)
                TakeInventory(ItemPtr->Actor, 1);
        }
        else
            ActivatorSound("menu/error", 127);
    if (Buttons & BT_USE || (Buttons & BT_USE && Buttons & BT_SPEED))
        Player.DelayTimer++;
    if (Buttons == BT_ATTACK && OldButtons != BT_ATTACK)
        if (!(CategoryFlags[Player.ShopPage] & CF_NOSELL) && !Player.LockerMode)
        {
            Player.AutoSell[Player.ShopPage][Player.ShopIndex] = !Player.AutoSell[Player.ShopPage][Player.ShopIndex];
            ActivatorSound("menu/move", 127);
        };
    
    // Reset the Delay Timer if no buttons are pressed
    if (Buttons == 0 && OldButtons == 0)
        Player.DelayTimer = 0;
    
    // Reset the menu block
    Player.MenuBlock = false;   
};

function void BuyItem(str Item)
{
    ItemInfoPtr ItemPtr = &ItemData[Player.ShopPage][Player.ShopIndex];
    int Cost = ItemPtr->Price - ItemPtr->Price * Player.ShopDiscount / 100;
    int Spawned;
    
    // If you're not the required rank, return
    if (ItemPtr->Rank > Player.RankLevel)
    {
        if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
        {
            SetHudSize(0, 0, false);
            SetFont("BIGFONT");
            HudMessage("You are not a high enough Rank to buy this item\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
            ActivatorSound("menu/error", 127);
        };
        
        return;
    };
    
    // If the item (or category) is flagged to never be buyable, return
    if (ItemPtr->Rank == -1 || CategoryFlags[Player.ShopPage] & CF_NOBUY)
    {
        if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
        {
            SetHudSize(0, 0, false);
            SetFont("BIGFONT");
            HudMessage("You cannot buy this item\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
            ActivatorSound("menu/error", 127);
        };
        
        return;
    };
    
    // If you don't have enough Credits, return
    if (CheckInventory("DRPGCredits") < ItemPtr->Price - ItemPtr->Price * Player.ShopDiscount / 100)
    {
        if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
        {
            SetHudSize(0, 0, false);
            SetFont("BIGFONT");
            HudMessage("You don't have enough Credits to buy this item\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
            ActivatorSound("menu/error", 127);
        };
        
        return;
    };
    
    // If the item has no cost, return
    if (Cost == 0)
    {
        if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
            ActivatorSound("menu/error", 127);
        
        return;
    };
    
    // DoomRL Compatibility
    if (CompatMode == COMPAT_DRLA)
        if (Player.ShopPage == 0) // Weapons
            Item = StrParam("%sPickup\n", Item);
    
    if (InBase && !GetCVar("drpg_shoptype"))
        Spawned = SpawnSpotForced(Item, ShopSpotID, 0, 0)
    else
    {
        Spawned = SpawnForced(Item, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
        SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
    };
    
    if (Spawned > 0)
    {
        ActivatorSound("menu/buy", 127);
        TakeInventory("DRPGCredits", Cost);
    }
    else if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
        ActivatorSound("menu/error", 127);
};

function int GetSellPrice(str Item, int Amount)
{
    ItemInfoPtr ItemPtr = &ItemData[Player.ShopPage][Player.ShopIndex];
    int SellCost;
    
    // Just use the current index if item is blank
    if (Item == nullptr)
        SellCost = ItemPtr->Price;
    
    // Iterate to find the item
    for (int i = 0; i < ItemCategories; i++)
        for (int j = 0; j < ItemMax[i]; j++)
        {
            ItemInfoPtr ItemIterPtr = &ItemData[i][j];
            
            if (ItemIterPtr->Actor == Item)
            {
                SellCost = ItemIterPtr->Price;
                break;
            };
        };
    
    // 1/10th normal buying price
    SellCost /= 10;
    
    // Multiply by amount
    SellCost *= Amount;
    
    // Make sure you always get at least 1 Credit from a sale
    if (SellCost == 0) SellCost = 1;
    
    return SellCost;
};

function int SellItem(str Item, bool SellAll, bool AutoSold)
{
    int Amount = 1;
    int SellCost;

    // You must be at least Rank 1 or in the Outpost to sell items
    if (Player.RankLevel == 0 && !InBase)
    {
        if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
        {
            SetHudSize(0, 0, false);
            SetFont("BIGFONT");
            HudMessage("You cannot sell items outside the Outpost until you reach the first rank\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
            ActivatorSound("menu/error", 127);
        };
        
        return 0;
    };
    
    // If you're on a page that doesn't allow selling or you don't have any of the required item, fail
    if (!AutoSold && (CheckInventory(Item) == 0 || CategoryFlags[Player.ShopPage] & CF_NOSELL))
    {
        if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
            ActivatorSound("menu/error", 127);
        
        return 0;
    };
    
    if (SellAll)
        Amount = CheckInventory(Item);
    
    // Get Sell Price
    SellCost = GetSellPrice(Item, Amount);
    
    // DoomRL Compatibility
    if (CompatMode == COMPAT_DRLA && !AutoSold)
        for (int i = 1; i <= Amount; i++)
        {
            if (Player.ShopPage == 0) // Weapons
                TakeInventory("RLWeaponLimit", 1);
            if (Player.ShopPage == 3) // Armor
                TakeInventory("RLArmorInInventory", 1);
            if (Player.ShopPage == 9) // Mod Packs
                if (Player.ShopIndex == 8) // Special handling case for Armor Modpack
                    TakeInventory("RLArmorModItemInInventory", 1)
                else
                    if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
                        TakeInventory("RLScavengerModLimit", 1)
                    else
                        TakeInventory("RLModLimit", 1);
            if (Player.ShopPage == 10) // Boots
                TakeInventory("RLBootsInInventory", 1);
        };
    
    // Sell the Item
    if (CheckInventory(Item) >= Amount)
    {
        if (AutoSold)
            ActivatorSound("credits/autosell", 127)
        else
            ActivatorSound("credits/payout", 127);
        TakeInventory(Item, Amount);
        GiveInventory("DRPGCredits", SellCost);
    }
    else if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
        ActivatorSound("menu/error", 127);
    
    return SellCost;
};

function void DepositItem()
{
    ItemInfoPtr ItemPtr = &ItemData[Player.ShopPage][Player.ShopIndex];
    
    if (Player.EP >= LOCKER_EPRATE && CheckInventory(ItemPtr->Actor) > 0)
    {
       // DoomRL Compatibility
       if (CompatMode == COMPAT_DRLA)
       {
           if (Player.ShopPage == 0) // Weapons
           {
                // You can only store one of a weapon type
                if (Player.Locker[Player.ShopPage][Player.ShopIndex] > 0)
                {
                    ActivatorSound("menu/error", 127);
                    return;
                };
                
                // Store the weapons modpack data
                Player.WeaponMods[Player.ShopIndex] =
                {
                    CheckInventory(StrParam("%sModLimit\n", ItemPtr->Actor));
                    CheckInventory(StrParam("%sPowerMod\n", ItemPtr->Actor));
                    CheckInventory(StrParam("%sBulkMod\n", ItemPtr->Actor));
                    CheckInventory(StrParam("%sAgilityMod\n", ItemPtr->Actor));
                    CheckInventory(StrParam("%sTechnicalMod\n", ItemPtr->Actor));
                    CheckInventory(StrParam("%sSniperMod\n", ItemPtr->Actor));
                    CheckInventory(StrParam("%sFirestormMod\n", ItemPtr->Actor));
                    CheckInventory(StrParam("%sNanoMod\n", ItemPtr->Actor));
                };
                
                // Wipe the modpacks off the weapon
                SetInventory(StrParam("%sModLimit\n", ItemPtr->Actor), 0);
                SetInventory(StrParam("%sPowerMod\n", ItemPtr->Actor), 0);
                SetInventory(StrParam("%sBulkMod\n", ItemPtr->Actor), 0);
                SetInventory(StrParam("%sAgilityMod\n", ItemPtr->Actor), 0);
                SetInventory(StrParam("%sTechnicalMod\n", ItemPtr->Actor), 0);
                SetInventory(StrParam("%sSniperMod\n", ItemPtr->Actor), 0);
                SetInventory(StrParam("%sFirestormMod\n", ItemPtr->Actor), 0);
                SetInventory(StrParam("%sNanoMod\n", ItemPtr->Actor), 0);
                
                // Decrease DRLA's weapon total
                TakeInventory("RLWeaponLimit", 1);
                
                // Weapon portion of Nuclear Set Bonus Checking
                if (!CheckInventory("RLNuclearPlasmaPistol") || !CheckInventory("RLHighPowerNuclearPlasmaPistol") || !CheckInventory("RLStormNuclearPlasmaPistol") || CheckInventory("RLSuperchargedNuclearPlasmaPistol") ||
                    !CheckInventory("RLNuclearPlasmaRifle") || !CheckInventory("RLHighPowerNuclearPlasmaRifle") || !CheckInventory("RLAssaultRifleNuclearPlasmaRifle") || !CheckInventory("RLBurstCannonNuclearPlasmaRifle") ||
                    !CheckInventory("RLNuclearBFG9000") || !CheckInventory("RLHighPowerNuclearBFG9000") || !CheckInventory("RLNuclearVBFG9000") || !CheckInventory("RLNuclearBiggestFuckingGun"))
                {
                    TakeInventory("RLNuclearWeaponSetBonusWeapon", 1);
                    TakeInventory("RLNuclearWeaponSetBonusActive", 1);
                };
                
                // Tristar blaster Set Bonus Checking
                if (!CheckInventory("RLTristarBlaster") || !CheckInventory("RLHighPowerTristarBlaster") || !CheckInventory("RLNanomanufactureAmmoTristarBlaster"))
                    TakeInventory("RLCerberusSetBonusTristarBlaster", 1);
            }
            else if (Player.ShopPage == 3) // Armor
                TakeInventory("RLArmorInInventory", 1)
            else if (Player.ShopPage == 9) // Mod Packs
            {
                if (Player.ShopIndex == 8) // Special handling case for Armor Modpack
                    TakeInventory("RLArmorModItemInInventory", 1)
                else
                {
                    if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
                        TakeInventory("RLScavengerModLimit", 1)
                    else
                        TakeInventory("RLModLimit", 1);
                };
            }
            else if (Player.ShopPage == 10) // Boots
                TakeInventory("RLBootsInInventory", 1);
        };
        
        TakeInventory(ItemPtr->Actor, 1);
        if (!InBase)
            Player.EP -= LOCKER_EPRATE;
        Player.Locker[Player.ShopPage][Player.ShopIndex]++;
        ActivatorSound("menu/move", 127);
    }
    else if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
        ActivatorSound("menu/error", 127);
};

function void WithdrawItem()
{
    ItemInfoPtr ItemPtr = &ItemData[Player.ShopPage][Player.ShopIndex];
    
    // Spawning
    if (Player.EP >= LOCKER_EPRATE && Player.Locker[Player.ShopPage][Player.ShopIndex] > 0)
    {
        if (CompatMode == COMPAT_DRLA && Player.ShopPage == 0) // Weapons
        {
            // Don't let you withdraw the weapon if you're already holding one
            if (CheckInventory(ItemPtr->Actor))
            {
                ActivatorSound("menu/error", 127);
                return;
            };
            
            // Re-add the mods onto the weapon
            SetInventory(StrParam("%sModLimit\n", ItemPtr->Actor), Player.WeaponMods[Player.ShopIndex].Total);
            SetInventory(StrParam("%sPowerMod\n", ItemPtr->Actor), Player.WeaponMods[Player.ShopIndex].Power);
            SetInventory(StrParam("%sBulkMod\n", ItemPtr->Actor), Player.WeaponMods[Player.ShopIndex].Bulk);
            SetInventory(StrParam("%sAgilityMod\n", ItemPtr->Actor), Player.WeaponMods[Player.ShopIndex].Agility);
            SetInventory(StrParam("%sTechnicalMod\n", ItemPtr->Actor), Player.WeaponMods[Player.ShopIndex].Technical);
            SetInventory(StrParam("%sSniperMod\n", ItemPtr->Actor), Player.WeaponMods[Player.ShopIndex].Sniper);
            SetInventory(StrParam("%sFirestormMod\n", ItemPtr->Actor), Player.WeaponMods[Player.ShopIndex].Firestorm);
            SetInventory(StrParam("%sNanoMod\n", ItemPtr->Actor), Player.WeaponMods[Player.ShopIndex].Nano);
            
            SpawnForced(StrParam("%sPickup\n", ItemPtr->Actor), GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
        }
        else if (Player.ShopPage == 1) // Ammo
            GiveInventory(ItemPtr->Actor, 1)
        else // Everything else
            SpawnForced(ItemPtr->Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
        
        SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
        Player.Locker[Player.ShopPage][Player.ShopIndex]--;
        if (!InBase)
            Player.EP -= LOCKER_EPRATE;
        ActivatorSound("menu/move", 127);
    }
    else if (Player.DelayTimer <= 35.0 * GetCVarFixed("drpg_menu_repeat"))
        ActivatorSound("menu/error", 127);
};

function void DrawItemGrid()
{
    // Width/Height
    int Width = 9;
    int Height = 6;
    
    // Coordinates
    fixed BaseX;
    fixed BaseY;
    fixed BoxX;
    fixed BoxY;
    fixed X;
    fixed Y;
    fixed IconX;
    fixed IconY;
    
    for (int i = 0; i < Height; i++)
    {
        // Reset base X
        BaseX = 0.0;
        
        for (int j = 0; j < Width; j++)
        {
            int Index = j + (i * Width);
            
            // Calculate offset
            if (Player.ShopIndex >= Height * Width)
                Index += (Player.ShopIndex / (Height * Width)) * (Height * Width);
            
            ItemInfo ItemSpace *Item = &ItemData[Player.ShopPage][Index];
            str Icon = Item->Sprite.Name;
            str Name = Item->Name;
            int IconXOff = Item->Sprite.XOff;
            int IconYOff = Item->Sprite.YOff;
            int Held = CheckInventory(Item->Actor);
            int Stored = Player.Locker[Player.ShopPage][Index];
            int Rank = Item->Rank;
            int Price = Item->Price;
            bool Unlocked = !((Rank > 0 && Player.RankLevel < Rank));
            bool CanBuy = !(Rank == -1);
            bool CanAfford = (CheckInventory("DRPGCredits") >= Price - Price * Player.ShopDiscount / 100);
            bool AutoSell = Player.AutoSell[Player.ShopPage][Index];
            
            // Stop if we're at the end of the list
            if (Index > ItemMax[Player.ShopPage] - 1) break;
            
            // Placeholder Icon
            if (StrLen(Icon) == 0)
                Icon = "SprNone";
            
            // Setup X and Y
            X = 26.0 + BaseX;
            Y = 50.0 + BaseY;
            BoxX = 48.0 + BaseX;
            BoxY = 72.0 + BaseY;
            IconX = 48.0 + BaseX;
            IconY = 72.0 + BaseY;
            IconX += IconXOff;
            IconY += IconYOff;
            
            // Amount
            if (Held > 0)
            {
                SetFont("BIGFONT");
                HudMessage("%d\n", Held, HUDMSG_PLAIN, 0, CR_GREEN, X + 44.2, Y + 44.2, 0.05);
            };
            if (Stored > 0)
            {
                SetFont("BIGFONT");
                HudMessage("%d\n", Stored, HUDMSG_PLAIN, 0, CR_YELLOW, X + 44.2, Y + 12.2, 0.05);
            };
            
            // Auto-Sell Icon
            if (Player.AutoSell[Player.ShopPage][Index])
                PrintSpritePulse("SELLICN", 0, X - 2.0 + 0.1, Y + 0.1, 0.75, 128.0, 0.25, false);
            
            // Mod Info
            if (CompatMode == COMPAT_DRLA && Player.LockerMode && Player.Locker[Player.ShopPage][Index] > 0)
            {
                SetFont("SMALLFONT");
                HudMessage("%d\n", Player.WeaponMods[Index].Power, HUDMSG_PLAIN, 0, CR_RED, X + 4.0, Y + 36.2, 0.05);
                HudMessage("%d\n", Player.WeaponMods[Index].Bulk, HUDMSG_PLAIN, 0, CR_BLUE, X + 12.0, Y + 36.2, 0.05);
                HudMessage("%d\n", Player.WeaponMods[Index].Agility, HUDMSG_PLAIN, 0, CR_GREEN, X + 20.0, Y + 36.2, 0.05);
                HudMessage("%d\n", Player.WeaponMods[Index].Technical, HUDMSG_PLAIN, 0, CR_YELLOW, X + 28.0, Y + 36.2, 0.05);
                HudMessage("%d\n", Player.WeaponMods[Index].Sniper, HUDMSG_PLAIN, 0, CR_PURPLE, X + 8.0, Y + 44.2, 0.05);
                HudMessage("%d\n", Player.WeaponMods[Index].Firestorm, HUDMSG_PLAIN, 0, CR_ORANGE, X + 16.0, Y + 44.2, 0.05);
                HudMessage("%d\n", Player.WeaponMods[Index].Nano, HUDMSG_PLAIN, 0, CR_WHITE, X + 24.0, Y + 44.2, 0.05);
            };
            
            // Icon
            SetHudClipRect(X, Y, 44, 44);
            if (Player.ShopIndex == Index)
            {
                if (Unlocked || Player.LockerMode)
                    PrintSpritePulse(Icon, 0, IconX, IconY, 0.75, 32.0, 0.25)
                else
                    PrintSpritePulse(Icon, 0, IconX, IconY, 0.25, 32.0, 0.25);
            }
            else
            {
                if (Unlocked || Player.LockerMode)
                    PrintSprite(Icon, 0, IconX, IconY, 0.05)
                else
                    PrintSpriteAlpha(Icon, 0, IconX, IconY, 0.05, 0.25);
            };
            SetHudClipRect(0, 0, 0, 0);
            
            // Box
            if (Player.ShopIndex == Index)
                if ((!CanAfford || !Unlocked || !CanBuy) && !Player.LockerMode)
                    PrintSprite("ItemBoxR", 0, BoxX, BoxY, 0.05)
                else if (Player.LockerMode)
                    PrintSprite("ItemBoxL", 0, BoxX, BoxY, 0.05)
                else
                    PrintSprite("ItemBoxH", 0, BoxX, BoxY, 0.05);
            PrintSprite("ItemBoxB", 0, BoxX, BoxY, 0.05);
            
            // Item Name
            if (Player.ShopIndex == Index)
            {
                SetFont("BIGFONT");
                HudMessage("%s\n", Name, HUDMSG_PLAIN, 0, ((!Player.LockerMode && CanAfford) || Player.LockerMode ? CR_WHITE : CR_RED), 24.1, 344.1, 0.05);
            };
            
            // Increment X
            BaseX += 48.0;
        };
        
        // Increment Y
        BaseY += 48.0;
    };
};

function void CheckShopCard()
{
    Player.ShopCard = CheckInventory("DRPGUACCard");
    if (CheckInventory("DRPGDiamondUACCard"))
        Player.ShopCard = 5;
    
    if (Player.ShopCard == 5 && !ItemRanksRemoved)
        RemoveItemRanks();
    
    for (int i = 0; i < MAX_PLAYERS; i++)
        if (Players(i).ShopCard > GlobalShopCard)
            GlobalShopCard = Players(i).ShopCard;
};
