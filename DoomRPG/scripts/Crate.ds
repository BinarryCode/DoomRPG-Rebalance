#include "RPG.dh"

#include "Crate.dh"
#include "ItemData.dh"
#include "Stats.dh"
#include "Utils.dh"

static str[MAX_DIFFICULTIES] CrateRarityNames =
{
    "\ccBasic";
    "\cjCommon";
    "\cdUncommon";
    "\cdSuperior";
    "\cnRare";
    "\cnVery Rare";
    "\ciElite";
    "\ctLegendary";
    "\cfSupreme";
};

int CrateID = 0;
ItemSpace CrateInfo[CRATE_MAX] Crates;

script void CrateLoop() open
{
    while (true)
    {
        for (int i = 0; i < CrateID; i++)
        {
            // Hacking cooldown timer handling
            if (Crates[i].HackingCooldown > 0)
                Crates[i].HackingCooldown--;
        
            // Supply Drop spawned crates should never have a firewall
            if (Crates[i].SupplyDrop && Crates[i].Firewall)
            {
                Crates[i].Firewall = false;
                SetActorState(Crates[i].TID, "Normal");
            };
        };
        
        Delay(1);
    };
};

acscript void InitCrate()
{
    int TID = UniqueTID();
    int Amount = 3;
    int LuckMod = (AveragePlayerLevel() + AveragePlayerLuck()) / 20;
    int Rarity = 0;
    int Firewall = 0;
    
    if (CrateID >= CRATE_MAX)
    {
        Log("\cgERROR:\c- Maximum Crate ID exceeded!\n");
        Thing_Remove(0);
        return;
    };
    
    // Calculate Rarity
    for (int i = Rarity; i < MAX_DIFFICULTIES - 1; i++)
        if (Random(0, (MAX_DIFFICULTIES + (MAX_DIFFICULTIES / 3)) - LuckMod) <= 0)
            Rarity++;
    if (Rarity < 0) // Make sure the Rarity still isn't -1, or else bad things will happen
        Rarity = 0;
    if (Rarity > MAX_DIFFICULTIES - 1)
        Rarity = MAX_DIFFICULTIES - 1;
    
    // Calculate Amount
    for (int i = Amount; i < CRATE_MAX_ITEMS; i++)
        if (Random(0, i) <= 0)
            Amount++;
    Amount += PlayerCount() - 1;      // Add +1 per extra player in-game
    if (Amount > CRATE_MAX_ITEMS - 1) // Make sure we don't overflow
        Amount = CRATE_MAX_ITEMS;
    
    // Calculate Firewall odds
    Firewall = Rarity * 10;
    if (Firewall <= 10)
        Firewall = 10;
    if (Firewall > 100)
        Firewall = 100;
    
    // Setup Crate
    Crates[CrateID].Firewall = (RandomFixed(0.0, 100.0) <= Firewall);
    Crates[CrateID].TID = TID;
    Crates[CrateID].Amount = Amount;
    Crates[CrateID].Rarity = Rarity;
    Crates[CrateID].Hacking = -1;
    Thing_ChangeTID(0, TID);
    SetUserVariable(0, "user_id", CrateID);
    SetUserVariable(0, "user_firewall", (int)Crates[CrateID].Firewall);
    if (Crates[CrateID].Firewall)
        SetActorState(0, "Firewall")
    else
        SetActorState(0, "Normal");
    
    CrateID++;
};

acscript void UseCrate(int ID)
{
    // Hackity hacks so you can't open the crate yet if the rewards list is not done being generated
    if (!RewardsInit) return;
    
    SetActivator(GetActorProperty(0, APROP_TargetTID));
    
    // Someone else is hacking the crate
    if (Crates[ID].Hacking >= 0)
    {
        if (Crates[ID].Hacking != PlayerNumber())
        {
            PrintError(StrParam("%N\c- is already hacking an item in this crate\n", Crates[Player.CrateID].Hacking + 1));
            ActivatorSound("menu/error", 127);
        };
        
        return;
    };
    
    // Check if you're in a menu
    if (Player.InMenu || Player.InShop || Player.CrateOpen) return;
    
    // Check if the crate is empty
    if (Crates[ID].Generated && CrateEmpty(ID)) return;
    
    // Check if the crate is firewalled, if so, initiate hacking
    if (Crates[ID].Firewall)
    {
        if (Crates[ID].HackingCooldown > 0)
        {
            PrintError(StrParam("Security Lockdown Triggered\n\nYou must wait %s before reattemtping the hack\n", FormatTime(Crates[ID].HackingCooldown)));
            ActivatorSound("menu/error", 127);
        }
        else
        {
            Player.CrateID = ID;
            CrateHack();
        };
        return;
    };
    
    // Generate the crate contents
    if (!Crates[ID].Generated)
    {
        GenerateCrate(ID, Crates[ID].Amount);
        Crates[ID].Generated = true;
    };
    
    Player.CrateOpen = true;
    Player.CrateID = ID;
    Player.CrateIndex = 0;
    
    ActivatorSound("crate/open", 127);
    
    Delay(1);
    
    while (Player.CrateOpen)
    {
        SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
        
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        
        DrawCrate();
        CrateInput();
        
        Delay(1);
    };
    
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
};

acscript void CrateHack()
{
    static int[NODE_MAX] NodeMax =
    {
        8; 8; 1; 2; 2; 1; 1; 1;
    };
    
    HackNode[MAX_NODES] Nodes;
    bool Hacking = true;
    int GenTotal = 0;
    int GenType = 0;
    int[NODE_MAX] GenNodes;
    int Tries = 3;
    int X = Random(25, 275);
    int Direction = (Random(1, 2) == 1 ? -1 : 1);
    
    // Initialize things
    for (int i = 0; i < MAX_NODES; i++)
        Nodes[i].Active = false;
    for (int i = 0; i < NODE_MAX; i++)
        GenNodes[i] = 0;
    
    // Generate Nodes
    while (GenType < NODE_MAX)
    {
        bool Conflict = false;
        int Start = Random(0, 300 - 12);
        int End = 4 * Random(1, 2);
        
        // Make sure we don't generate over the max amount of allowed node types
        if (GenNodes[GenType] >= NodeMax[GenType])
        {
            GenType++;
            continue;
        };
        
        // Make sure there are no node conflicts
        for (int i = 0; i < MAX_NODES; i++)
            if (Nodes[i].Active && !Conflict)
                for (int j = 0; j < End; j++)
                    if (Start + j >= Nodes[i].Start && Start + j <= Nodes[i].Start + Nodes[i].End)
                    {
                        Conflict = true;
                        break;
                    };
        
        // Get new coordinates due to a conflict
        if (Conflict)
            continue;
        
        // Setup Node
        Nodes[GenTotal].Active = true;
        Nodes[GenTotal].Type = GenType;
        Nodes[GenTotal].Start = Start;
        Nodes[GenTotal].End = End;
        
        GenTotal++;
        GenNodes[GenType]++;
        
        if ((Timer() % 5) == 0)
            Delay(1);
    };
    
    Delay(4);
    
    ActivatorSound("hacking/begin", 127);
    
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    Crates[Player.CrateID].Hacking = PlayerNumber();
    
    while (Hacking)
    {
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        
        SetHudSize(320, 240, false);
        
        // HACKIFICATIONS
        SetFont("SMALLFONT");
        HudMessage("HACKING IN PROGRESS...\n", HUDMSG_PLAIN, 0, CR_GREEN, 160.0, 100.0, 0.05);
        for (int i = 0; i < 16; i++)
        HudMessage("%c\n", (Random(1, 2) == 1 ? '0' : '1'), HUDMSG_FADEOUT, 0, CR_GREEN, 10.0 + (8.0 * Random(1, 36)), 150.0 + (8.0 * Random(1, 10)), 0.25, 0.75);
        
        // Cursor
        PrintSprite("HackCurs", 0, 10.1 + X, 120.0, 0.05);
        
        // Nodes
        for (int i = 0; i < MAX_NODES; i++)
            if (Nodes[i].Active)
                DrawBar(StrParam("HackNod%d\n", Nodes[i].Type + 1), 10 + Nodes[i].Start, 120, Nodes[i].End, true);
        
        // Back
        DrawBar(StrParam("HackBor%d\n", Tries), 10, 120, 300, true);
        PrintSprite("HackBack", 0, 10.1, 120.0, 0.05);
        
        // Move Cursor
        X += Direction;
        if ((Crates[Player.CrateID].Rarity / 3) > 0)
            X += ((Crates[Player.CrateID].Rarity / 3) * Direction);
        if (X < 0)
        {
            X = 0;
            Direction = -Direction;
        }
        else if (X > 300)
        {
            X = 300;
            Direction = -Direction;
        };
        
        // Input
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            bool HitNothing = true;
            int XPBonus = XPTable[Player.Level] / 100;
            int RankBonus = RankTable[Player.RankLevel] / 100;
            
            // Check Nodes
            for (int i = 0; i < MAX_NODES; i++)
                if (Nodes[i].Active)
                    if (X >= Nodes[i].Start && X <= Nodes[i].Start + Nodes[i].End)
                    {
                        HitNothing = false;
                        Nodes[i].Active = false;
                        
                        switch (Nodes[i].Type)
                        {
                        case NODE_CRITFAIL:
                            ActivatorSound("hacking/critfail", 127);
                            SetFont("SMALLFONT");
                            HudMessage("Security Lockdown Triggered!\n", HUDMSG_FADEOUT, 0, CR_RED, 160.0, 140.0, 2.0, 1.0);
                            Crates[Player.CrateID].HackingCooldown += 35 * 60;
                            Hacking = false;
                            break;
                        case NODE_EXPLODE:
                            ActivatorSound("hacking/critfail", 127);
                            SetFont("SMALLFONT");
                            HudMessage("Explosive Device Triggered!\n", HUDMSG_FADEOUT, 0, CR_ORANGE, 160.0, 140.0, 2.0, 1.0);
                            SetActorState(Crates[Player.CrateID].TID, "Explode");
                            Hacking = false;
                            Player.CrateOpen = false;
                            break;
                        case NODE_UNLOCK:
                            ActivatorSound("hacking/success", 127);
                            SetFont("SMALLFONT");
                            HudMessage("Hack Successful\n", HUDMSG_FADEOUT, 0, CR_GREEN, 160.0, 140.0, 2.0, 1.0);
                            Crates[Player.CrateID].Firewall = false;
                            SetActorState(Crates[Player.CrateID].TID, "Normal");
                            SetUserVariable(Crates[Player.CrateID].TID, "user_firewall", (int)Crates[CrateID].Firewall);
                            Hacking = false;
                            break;
                        case NODE_XP:
                            ActivatorSound("hacking/select", 127);
                            SetFont("SMALLFONT");
                            HudMessage("+%ld XP\n", XPBonus, HUDMSG_FADEOUT, 0, CR_WHITE, 160.0, 140.0, 2.0, 1.0);
                            Player.XP += XPBonus;
                            break;
                        case NODE_RANK:
                            ActivatorSound("hacking/select", 127);
                            SetFont("SMALLFONT");
                            HudMessage("+%ld Rank\n", RankBonus, HUDMSG_FADEOUT, 0, CR_YELLOW, 160.0, 140.0, 2.0, 1.0);
                            Player.Rank += RankBonus;
                            break;
                        case NODE_RETRY:
                            ActivatorSound("hacking/select", 127);
                            SetFont("SMALLFONT");
                            HudMessage("Extra Try\n", HUDMSG_FADEOUT, 0, CR_BLUE, 160.0, 140.0, 2.0, 1.0);
                            if (Tries < 3)
                                Tries++;
                            break;
                        case NODE_ADD:
                            ActivatorSound("hacking/select", 127);
                            SetFont("SMALLFONT");
                            HudMessage("Extra Item!\n", HUDMSG_FADEOUT, 0, CR_CYAN, 160.0, 140.0, 2.0, 1.0);
                            if (Crates[Player.CrateID].Amount < CRATE_MAX_ITEMS - 1)
                                Crates[Player.CrateID].Amount++;
                            break;
                        case NODE_RARITY:
                            ActivatorSound("hacking/select", 127);
                            SetFont("SMALLFONT");
                            HudMessage("Rarity Upgrade!\n", HUDMSG_FADEOUT, 0, CR_PURPLE, 160.0, 140.0, 2.0, 1.0);
                            if (Crates[Player.CrateID].Rarity < MAX_DIFFICULTIES - 1)
                                Crates[Player.CrateID].Rarity++;
                            break;
                        };
                        
                        break;
                    };
            
            if (HitNothing)
            {
                ActivatorSound("hacking/select", 127);
                Tries--;
                
                // You fail it
                if (Tries <= 0)
                {
                    ActivatorSound("hacking/fail", 127);
                    Crates[Player.CrateID].HackingCooldown += 35 * 30;
                    Hacking = false;
                };
            };
        };
        if (Buttons & BT_SPEED)
        {
            ActivatorSound("hacking/select", 127);
            Hacking = false;
        };
        
        Delay(1);
    };
    
    Delay(4);
    
    SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
    Crates[Player.CrateID].Hacking = -1;
};

function void GenerateCrate(int ID, int Amount)
{
    int i;
    int Firewalls;
    
    if (Crates[ID].SupplyDrop)
    {
        int NumPlayers = 0;
        
        // Count the number of players
        for (int j = 0; j < MAX_PLAYERS; j++)
            if (PlayerInGame(j))
                NumPlayers++;
        
        // Create a backpack for every player in the game
        for (int j = 0; j < NumPlayers; j++)
        {
            Crates[ID].Active[i] = true;
            Crates[ID].Item[i] = FindItem("DRPGBigBackpack");
            i++;
        };
    };
    
    for (; i < Amount; i++)
    {
        Crates[ID].Active[i] = true;
        Crates[ID].Item[i] = GetRewardItem(Crates[ID].Rarity);
    };
};

function void CrateTakeItem()
{
    bool Spawned = SpawnForced(Crates[Player.CrateID].Item[Player.CrateIndex]->Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
    
    if (Spawned)
    {
        SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
        
        Crates[Player.CrateID].Active[Player.CrateIndex] = false;
        Crates[Player.CrateID].Item[Player.CrateIndex] = nullptr;
    };
};

function bool CrateEmpty(int ID)
{
    for (int i = 0; i < CRATE_MAX_ITEMS; i++)
        if (Crates[ID].Active[i])
            return false;
    
    return true;
};

// TODO: Tried to make this a more generic ItemSpace CrateInfo *FindCrate, but DH-ACC bitched, yell at David
function bool CrateEmptyTID(int TID)
{
    for (int i = 0; i < CrateID; i++)
        if (Crates[i].TID == TID)
            return Crates[i].Empty;
    
    return false;
};

function void DrawCrate()
{
    // Width/Height
    int Width = 9;
    int Height = 6;
    
    // Coordinates
    fixed BaseX;
    fixed BaseY;
    fixed BoxX;
    fixed BoxY;
    fixed X;
    fixed Y;
    fixed IconX;
    fixed IconY;
    
    // Title
    SetFont("BIGFONT");
    HudMessage("UAC Supply Crate (%s\c-)\n", CrateRarityNames[Crates[Player.CrateID].Rarity], HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05);
    
    for (int i = 0; i < Height; i++)
    {
        // Reset base X
        BaseX = 0.0;
        
        for (int j = 0; j < Width; j++)
        {
            int Index = j + (i * Width);
            
            ItemInfoPtr ItemSpace *Item = &Crates[Player.CrateID].Item[Index];
            bool Active = Crates[Player.CrateID].Active[Index];
            str Icon = (* Item)->Sprite.Name;
            str Name = (* Item)->Name;
            int IconXOff = (* Item)->Sprite.XOff;
            int IconYOff = (* Item)->Sprite.YOff;
            
            // Setup X and Y
            X = 26.0 + BaseX;
            Y = 50.0 + BaseY;
            BoxX = 48.0 + BaseX;
            BoxY = 72.0 + BaseY;
            IconX = 48.0 + BaseX;
            IconY = 72.0 + BaseY;
            IconX += IconXOff;
            IconY += IconYOff;
            
            // Icon
            SetHudClipRect(X, Y, 44, 44);
            if (Active)
                if (Player.CrateIndex == Index)
                    PrintSpritePulse(Icon, 0, IconX, IconY, 0.75, 32.0, 0.25)
                else
                    PrintSprite(Icon, 0, IconX, IconY, 0.05);
            SetHudClipRect(0, 0, 0, 0);
            
            // Box
            if (Player.CrateIndex == Index)
            {
                if (Active)
                    PrintSprite("ItemBoxH", 0, BoxX, BoxY, 0.05)
                else
                    PrintSprite("ItemBoxR", 0, BoxX, BoxY, 0.05);
            };
            PrintSprite("ItemBoxB", 0, BoxX, BoxY, 0.05);
            
            // Item Name
            if (Player.CrateIndex == Index && Active)
            {
                SetFont("BIGFONT");
                HudMessage("%s\n", Name, HUDMSG_PLAIN, 0, CR_WHITE, 24.1, 344.1, 0.05);
            };
            
            // Increment X
            BaseX += 48.0;
        };
        
        // Increment Y
        BaseY += 48.0;
    };
};

function void CrateInput()
{
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
    
    if (Buttons & BT_SPEED && !(OldButtons & BT_SPEED))
    {
        ActivatorSound("crate/close", 127);
        Player.CrateOpen = false;
        
        // Set the crate to it's inactive state if it's empty
        if (CrateEmpty(Player.CrateID))
        {
            SetActorState(Crates[Player.CrateID].TID, "Empty");
            Crates[Player.CrateID].Empty = true;
        };
    };
    if (Buttons & BT_USE && !(OldButtons & BT_USE))
    {
        ActivatorSound("menu/move", 127);
        CrateTakeItem();
    };
    if (Buttons & BT_FORWARD && !(OldButtons & BT_FORWARD))
    {
        ActivatorSound("menu/move", 127);
        Player.CrateIndex -= 9;
        if (Player.CrateIndex < 0) Player.CrateIndex = 0;
    };
    if (Buttons & BT_BACK && !(OldButtons & BT_BACK))
    {
        ActivatorSound("menu/move", 127);
        Player.CrateIndex += 9;
        if (Player.CrateIndex > CRATE_MAX_ITEMS - 1) Player.CrateIndex = CRATE_MAX_ITEMS - 1;
    };
    if ((Buttons & BT_LEFT && !(OldButtons & BT_LEFT)) ||
        (Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT)))
    {
        ActivatorSound("menu/move", 127);
        Player.CrateIndex--;
        if (Player.CrateIndex < 0) Player.CrateIndex = 0;
    };
    if ((Buttons & BT_RIGHT && !(OldButtons & BT_RIGHT)) ||
        (Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT)))
    {
        ActivatorSound("menu/move", 127);
        Player.CrateIndex++;
        if (Player.CrateIndex > CRATE_MAX_ITEMS - 1) Player.CrateIndex = CRATE_MAX_ITEMS - 1;
    };
};

acscript void DumpCrate()
{
    for (int i = 0; i < CrateID; i++)
    {
        Log("\cd  ===== Crate %d =====\n", i);
        Log("Amount: %d\n", Crates[i].Amount);
        Log("Rarity: %d\n", Crates[i].Rarity);
        
        for (int j = 0; j < CRATE_MAX_ITEMS; j++)
        {
            if (!Crates[i].Active[j]) continue;
            
            Log("  %s (%s)\n", Crates[i].Item[j]->Name, Crates[i].Item[j]->Actor);
        };
    };
};
