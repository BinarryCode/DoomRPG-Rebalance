#include "Arena.dh"
#include "Globals.dh"
#include "Menu.dh"
#include "Outpost.dh"
#include "RPG.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Utils.dh"

// Spawn Spots and TIDs
int ShopSpecialTID = 1001;
int SecretTeleportTID = 1010;
int MarineSpotTID = 1300;
int MarineTID = 1301;

// Choices
int LevelChoice = 0;
int SkillChoice = 0;
int WaveChoice = 1;

// Invasion
bool Invasion = false;

// Locker Data
LockerItem[][] LockerItems =
{
	// Weapons
	{
		// Common Weapons
		{ "RLChainsaw"; 							"Chainsaw"; 											};
		{ "RLPistol"; 								"Pistol"; 												};
		{ "RLShotgun"; 								"Shotgun"; 												};
		{ "RLCombatShotgun"; 						"Combat Shotgun"; 										};
		{ "RLDoubleShotgun"; 						"Double Shotgun"; 										};
		{ "RLChaingun"; 							"Chaingun"; 											};
		{ "RLRocketLauncher"; 						"Rocket Launcher"; 										};
		{ "RLPlasmaRifle"; 							"Plasma Rifle"; 										};
		{ "RLBFG9000"; 								"BFG9000"; 												};
		
		// Basic Assembled Weapons
		{ "RLSpeedloaderPistol"; 					"Revolver \cv[Assembled]\c-"; 							};
		{ "RLElephantGun"; 							"Elephant Gun \cv[Assembled]\c-"; 						};
		{ "RLGatlingGun"; 							"Gatling Gun \cv[Assembled]\c-"; 						};
		{ "RLMicroLauncher"; 						"Micro Launcher \cv[Assembled]\c-"; 					};
		{ "RLTacticalShotgun"; 						"Tactical Shotgun \cv[Assembled]\c-"; 					};
		{ "RLHeavyShotgun"; 						"Heavy Shotgun \cv[Assembled]\c-"; 						};
		{ "RLHeavyDoubleShotgun"; 					"Heavy Double Shotgun \cv[Assembled]\c-"; 				};
		
		// High Power Assembled Weapons
		{ "RLHighPowerPistol"; 						"High Power Pistol \cv[Assembled]\c-"; 					};
		{ "RLHighPowerChaingun"; 					"High Power Chaingun \cv[Assembled]\c-"; 				};
		{ "RLHighPowerPlasmaRifle"; 				"High Power Plasma Rifle \cv[Assembled]\c-"; 			};
		{ "RLHighPowerBFG9000"; 					"High Power BFG9000 \cv[Assembled]\c-"; 				};
		{ "RLHighPowerBlaster"; 					"High Power Blaster \cv[Assembled]\c-"; 				};
		{ "RLHighPowerCombatPistol"; 				"High Power Combat Pistol \cv[Assembled]\c-"; 			};
		{ "RLHighPowerDesertEagle"; 				"High Power Handcannon \cv[Assembled]\c-"; 				};
		{ "RLHighPowerTristarBlaster"; 				"High Power Tristar Blaster \cv[Assembled]\c-"; 		};
		{ "RLHighPowerMinigun"; 					"High Power Minigun \cv[Assembled]\c-"; 				};
		{ "RLHighPowerLaserRifle"; 					"High Power Laser Rifle \cv[Assembled]\c-"; 			};
		{ "RLHighPowerNuclearPlasmaRifle"; 			"High Power Nuclear Plasma Rifle \cv[Assembled]\c-"; 	};
		{ "RLHighPowerNuclearBFG9000"; 				"High Power Nuclear BFG9000 \cv[Assembled]\c-"; 		};
		{ "RLHighPowerUzi"; 						"High Power Uzi \cv[Assembled]\c-"; 					};
		{ "RLHighPowerBattleRifle"; 				"High Power Battle Rifle \cv[Assembled]\c-"; }			;
		
		// Plasmatic Shrapnel Assembled Weapons
		{ "RLPlasmaticShrapnelShotgun"; 			"Plasmatic Shotgun \cv[Assembled]\c-"; 					};
		{ "RLPlasmaticShrapnelCombatShotgun"; 		"Plasmatic Combat Shotgun \cv[Assembled]\c-"; 			};
		{ "RLPlasmaticShrapnelDoubleShotgun"; 		"Plasmatic Double Shotgun \cv[Assembled]\c-"; 			};
		{ "RLPlasmaticShrapnelSuperShotgun"; 		"Plasmatic Super Shotgun \cv[Assembled]\c-"; 			};
		{ "RLPlasmaticShrapnelAssaultShotgun"; 		"Plasmatic Assault Shotgun \cv[Assembled]\c-"; 			};
		{ "RLPlasmaticShrapnelPlasmaShotgun"; 		"Overcharged Plasma Shotgun \cv[Assembled]\c-"; 		};
		
		// Advanced Assembled Weapons
		{ "RLDoubleChainsaw"; 						"Double Chainsaw \cv[Assembled]\c-"; 					};
		{ "RLTacticalRocketLauncher"; 				"Tactical Rocket Launcher \cv[Assembled]\c-"; 			};
		{ "RLStormPistol"; 							"Storm Pistol \cv[Assembled]\c-"; 						};
		{ "RLStormCombatPistol"; 					"Storm Combat Pistol \cv[Assembled]\c-"; 				};
		{ "RLPlasmaPistol"; 						"Plasma Pistol \cv[Assembled]\c-"; 						};
		{ "RLPlasmaCombatPistol"; 					"Plasma Combat Pistol \cv[Assembled]\c-"; 				};
		{ "RLVBFG9000"; 							"VBFG9000 \cv[Assembled]\c-"; 							};
		{ "RLNuclearVBFG9000"; 						"Nuclear VBFG9000 \cv[Assembled]\c-"; 					};
		{ "RLFocusedDoubleShotgun"; 				"Focused Double Shotgun \cv[Assembled]\c-"; 			};
		{ "RLHyperBlaster"; 						"Hyper Blaster \cv[Assembled]\c-"; 						};
		{ "RLBulletstormChaingun"; 					"Bulletstorm Chaingun \cv[Assembled]\c-"; 				};
		{ "RLAutoshotgun"; 							"Auto Shotgun \cv[Assembled]\c-"; 						};
		{ "RLAutoDoubleShotgun"; 					"Auto Double Shotgun \cv[Assembled]\c-"; 				};
		{ "RLMiniMissilePistol"; 					"Mini-Missile Pistol \cv[Assembled]\c-"; 				};
		{ "RLPlasmaRifleMkII"; 						"Plasma Rifle Mk.II \cv[Assembled]\c-"; 				};
		
		// Assault Assembled Weapons
		{ "RLAssaultRifleChaingun"; 				"Assault Chaingun \cv[Assembled]\c-"; 					};
		{ "RLAssaultRiflePlasmaRifle"; 				"Assault Plasma Rifle \cv[Assembled]\c-"; 				};
		{ "RLAssaultRifleMinigun"; 					"Assault Minigun \cv[Assembled]\c-"; 					};
		{ "RLAssaultRifleLaserRifle"; 				"Assault Laser Rifle \cv[Assembled]\c-"; 				};
		{ "RLAssaultRifleNuclearPlasmaRifle"; 		"Assault Nuclear Plasma Rifle \cv[Assembled]\c-"; 		};
		{ "RLAssaultRifleUzi"; 						"Assault Uzi \cv[Assembled]\c-"; 						};
		{ "RLAssaultRifleBattleRifle"; 				"Assault Battle Rifle \cv[Assembled]\c-"; 				};
		
		// Burst Assembled Weapons
		{ "RLBurstCannonChaingun"; 					"Burst Chaingun \cv[Assembled]\c-"; 					};
		{ "RLBurstCannonPlasmaRifle"; 				"Burst Plasma Rifle \cv[Assembled]\c-"; 				};
		{ "RLBurstCannonMinigun"; 					"Burst Minigun \cv[Assembled]\c-"; 						};
		{ "RLBurstCannonLaserRifle"; 				"Burst Laser Rifle \cv[Assembled]\c-"; 					};
		{ "RLBurstCannonNuclearPlasmaRifle"; 		"Burst Nuclear Plasma Rifle \cv[Assembled]\c-"; 		};
		{ "RLBurstCannonUzi"; 						"Burst Uzi \cv[Assembled]\c-"; 							};
		{ "RLBurstCannonBattleRifle"; 				"Burst-Fire Battle Rifle \cv[Assembled]\c-"; 			};
		
		// Nano Shrapnel Assembled Weapons
		{ "RLNanoShrapnelShotgun"; 					"Nano Shotgun \cv[Assembled]\c-"; 						};
		{ "RLNanoShrapnelCombatShotgun"; 			"Nano Combat Shotgun \cv[Assembled]\c-"; 				};
		{ "RLNanoShrapnelDoubleShotgun"; 			"Nano Double Shotgun \cv[Assembled]\c-"; 				};
		{ "RLNanoShrapnelSuperShotgun"; 			"Nano Super Shotgun \cv[Assembled]\c-"; 				};
		{ "RLNanoShrapnelAssaultShotgun"; 			"Nano Assault Shotgun \cv[Assembled]\c-"; 				};
		{ "RLNanoShrapnelPlasmaShotgun"; 			"Nano Plasma Shotgun \cv[Assembled]\c-"; 				};
		
		// Master Assembled Weapons
		{ "RLRipper"; 								"Ripper \cv[Assembled]\c-"; 							};
		{ "RLBiggestFuckingGun"; 					"Biggest Fucking Gun \cv[Assembled]\c-"; 				};
		{ "RLNuclearBiggestFuckingGun"; 			"Nuclear Biggest Fucking Gun \cv[Assembled]\c-"; 		};
		{ "RLMotherInLaw"; 							"Mother-In-Law \cv[Assembled]\c-"; 						};
		{ "RLAutocannon"; 							"Autocannon \cv[Assembled]\c-"; 						};
		{ "RLPlasmaRefractor"; 						"Plasma Refractor \cv[Assembled]\c-"; 					};
		
		// Nanomanufacture Assembled Weapons
		{ "RLNanoManufactureAmmoPistol"; 			"Nanomachic Pistol \cv[Assembled]\c-"; 					};
		{ "RLNanoManufactureAmmoChaingun"; 			"Nanomachic Chaingun \cv[Assembled]\c-"; 				};
		{ "RLNanoManufactureAmmoRocketLauncher"; 	"Nanomachic Rocket Launcher \cv[Assembled]\c-"; 		};
		{ "RLNanoManufactureAmmoPlasmaRifle"; 		"Nanomachic Plasma Rifle \cv[Assembled]\c-"; 			};
		{ "RLNanoManufactureAmmoBlaster"; 			"Nanomachic Blaster \cv[Assembled]\c-"; 				};
		{ "RLNanoManufactureAmmoCombatPistol"; 		"Nanomachic Combat Pistol \cv[Assembled]\c-"; 			};
		{ "RLNanoManufactureAmmoDesertEagle"; 		"Nanomachic Handcannon \cv[Assembled]\c-"; 				};
		{ "RLNanoManufactureAmmoTristarBlaster"; 	"Nanomachic Tristar Blaster \cv[Assembled]\c-"; 		};
		{ "RLNanoManufactureAmmoMinigun"; 			"Nanomachic Minigun \cv[Assembled]\c-"; 				};
		{ "RLNanoManufactureAmmoMissileLauncher"; 	"Nanomachic Missile Launcher \cv[Assembled]\c-"; 		};
		{ "RLNanoManufactureAmmoLaserRifle"; 		"Nanomachic Laser Rifle \cv[Assembled]\c-"; 			};
		{ "RLNanoManufactureAmmoUzi"; 				"Nanomachic Uzi \cv[Assembled]\c-"; 					};
		{ "RLNanomanufactureAmmoBattleRifle"; 		"Nanomachic Battle Rifle \cv[Assembled]\c-"; 			};
		{ "RLNanoManufactureAmmoNapalmLauncher"; 	"Nanomachic Napalm Launcher \cv[Assembled]\c-"; 		};
		
		// Demolition Ammo Assembled Weapons
		{ "RLDemolitionAmmoPistol"; 				"Demolition Ammo Pistol \cv[Assembled]\c-"; 			};
		{ "RLDemolitionAmmoChaingun"; 				"Demolition Ammo Chaingun \cv[Assembled]\c-"; 			};
		{ "RLDemolitionAmmoCombatPistol"; 			"Demolition Ammo Combat Pistol \cv[Assembled]\c-"; 		};
		{ "RLDemolitionAmmoDesertEagle"; 			"Demolition Ammo Handcannon \cv[Assembled]\c-"; 		};
		{ "RLDemolitionAmmoMinigun"; 				"Demolition Ammo Minigun \cv[Assembled]\c-"; 			};
		{ "RLDemolitionAmmoUzi"; 					"Demolition Ammo Uzi \cv[Assembled]\c-"; 				};
		{ "RLDemolitionAmmoBattleRifle"; 			"Demolition Ammo Battle Rifle \cv[Assembled]\c-"; 		};
		
		// Exotic Weapons
		{ "RLBlaster"; 								"Blaster \ct[Exotic]\c-"; 								};
		{ "RLCombatPistol"; 						"Combat Pistol \ct[Exotic]\c-"; 						};
		{ "RLDesertEagle"; 							"Handcannon \ct[Exotic]\c-"; 							};
		{ "RLSuperShotgun"; 						"Super Shotgun \ct[Exotic]\c-"; 						};
		{ "RLAssaultShotgun"; 						"Assault Shotgun \ct[Exotic]\c-"; 						};
		{ "RLUzi"; 									"Uzi \ct[Exotic]\c-"; 									};
		{ "RLBattleRifle"; 							"Battle Rifle \ct[Exotic]\c-"; 							};
		{ "RLMinigun"; 								"Minigun \ct[Exotic]\c-"; 								};
		{ "RLMissileLauncher"; 						"Missile Launcher \ct[Exotic]\c-"; 						};
		{ "RLNapalmLauncher"; 						"Napalm Launcher \ct[Exotic]\c-"; 						};
		{ "RLLaserRifle"; 							"Laser Rifle \ct[Exotic]\c-"; 							};
		{ "RLPlasmaShotgun"; 						"Plasma Shotgun \ct[Exotic]\c-"; 						};
		{ "RLTristarBlaster"; 						"Tristar Blaster \ct[Exotic]\c-"; 						};
		{ "RLNuclearPlasmaRifle"; 					"Nuclear Plasma Rifle \ct[Exotic]\c-";					};
		{ "RLNuclearBFG9000"; 						"Nuclear BFG9000 \ct[Exotic]\c-"; 						};
		{ "RLCombatTranslocator"; 					"Combat Translocator \ct[Exotic]\c-"; 					};
		
		// Unique Weapons
		{ "RLJackhammer"; 							"Jackhammer \cd[Unique]\c-"; 							};
		{ "RLRailgun"; 								"Railgun \cd[Unique]\c-"; 								};
		{ "RLMysteriousMagnum"; 					"Mysterious Magnum \cd[Unique]\c-"; 					};
		{ "RLBFG10k"; 								"BFG10k \cd[Unique]\c-"; 								};
		{ "RLUnknownHerald"; 						"Unknown Herald \cd[Unique]\c-"; 						};
		{ "RLFragShotgun"; 							"Frag Shotgun \cd[Unique]\c-"; 							};
		{ "RLQuadShotgun"; 							"Quad Shotgun \cd[Unique]\c-"; 							};
		{ "RLLightweaver"; 							"Lightweaver \cd[Unique]\c-"; 							};
		{ "RLTrigun"; 								"Trigun \cd[Unique]\c-"; 								};
		{ "RLGrammatonClericBeretta"; 				"Grammaton Cleric Beretta \cd[Unique]\c-";				};
		{ "RLAntiFreakJackal"; 						"Anti-Freak Jackal \cd[Unique]\c-"; 					};
		{ "RLTantrumCannon"; 						"Quantum Tantrum Cannon \cd[Unique]\c-"; 				};
		{ "RLRevenantsLauncher"; 					"Revenant's Launcher \cd[Unique]\c-"; 					};
		{ "RLNullPointer"; 							"Charch's Null Pointer \cd[Unique]\c-"; 				};
		{ "RLParticleBeamCannon"; 					"Particle Beam Cannon \cd[Unique]\c-"; 					};
		
		// Legendary Weapons
		{ "RLJudgeOfTheDead"; 						"Judge Of The Dead \cf[Legendary]\c-"; 					};
		{ "RLHurricaneCannon"; 						"Hurricane Cannon \cf[Legendary]\c-"; 					};
		{ "RLNeuralStunner"; 						"Neural Stunner \cf[Legendary]\c-"; 					};
		
		// Sentinel (Indicates end of list)
		{ ""; ""; };
	};
	
	// Ammo
	{
		{ "Clip"; 									"Bullets"; 												};
		{ "Shell"; 									"Shells"; 												};
		{ "RocketAmmo"; 							"Rockets"; 												};
		{ "Cell"; 									"Cell"; 												};
		
		// Sentinel (Indicates end of list)
		{ ""; ""; };
	};
	
	// Armor
	{
		// Common Armors
		{ "RLGreenArmorPickup"; 					"Security Armor"; 										};
		{ "RLBlueArmorPickup";						"Combat Armor"; 										};
		{ "RLRedArmorPickup"; 						"Commando Armor"; 										};
		
		// Assembled Armors
		{ "RLBallisticGreenArmorPickup"; 			"Ballistic Security Armor \cv[Assembled]\c-"; 			};
		{ "RLBallisticBlueArmorPickup"; 			"Ballistic Combat Armor \cv[Assembled]\c-"; 			};
		{ "RLBallisticRedArmorPickup"; 				"Ballistic Commando Armor \cv[Assembled]\c-"; 			};
		{ "RLCyberNanoGreenArmorPickup"; 			"CyberNano Security Armor \cv[Assembled]\c-"; 			};
		{ "RLCyberNanoBlueArmorPickup"; 			"CyberNano Combat Armor \cv[Assembled]\c-"; 			};
		{ "RLCyberNanoRedArmorPickup"; 				"CyberNano Commando Armor \cv[Assembled]\c-"; 			};
		{ "RLFireproofGreenArmorPickup"; 			"Fireproof Security Armor \cv[Assembled]\c-"; 			};
		{ "RLFireproofBlueArmorPickup"; 			"Fireproof Combat Armor \cv[Assembled]\c-"; 			};
		{ "RLFireproofRedArmorPickup"; 				"Fireproof Commando Armor \cv[Assembled]\c-"; 			};
		{ "RLNanofiberGreenArmorPickup"; 			"Nanofiber Security Armor \cv[Assembled]\c-"; 			};
		{ "RLNanofiberBlueArmorPickup"; 			"Nanofiber Combat Armor \cv[Assembled]\c-"; 			};
		{ "RLNanofiberRedArmorPickup"; 				"Nanofiber Commando Armor \cv[Assembled]\c-"; 			};
		{ "RLNanofiberSkinGreenArmorPickup"; 		"Nanofiber Skin Security Armor \cv[Assembled]\c-"; 		};
		{ "RLNanofiberSkinBlueArmorPickup"; 		"Nanofiber Skin Combat Armor \cv[Assembled]\c-"; 		};
		{ "RLNanofiberSkinRedArmorPickup"; 			"Nanofiber Skin Commando Armor \cv[Assembled]\c-"; 		};
		{ "RLPowerGreenArmorPickup"; 				"Powered Security Armor \cv[Assembled]\c-"; 			};
		{ "RLPowerBlueArmorPickup"; 				"Powered Combat Armor \cv[Assembled]\c-"; 				};
		{ "RLPowerRedArmorPickup"; 					"Powered Commando Armor \cv[Assembled]\c-"; 			};
		{ "RLCerberusArmorPickup"; 					"Cerberus Armor \cv[Assembled]\c-"; 					};
		{ "RLFireShieldArmorPickup"; 				"Fire Shield \cv[Assembled]\c-"; 						};
		{ "RLTacticalArmorPickup"; 					"Tactical Armor \cv[Assembled]\c-"; 					};
		
		// Exotic Armors
		{ "RLBallisticShieldArmorPickup"; 			"Ballistic Shield \ct[Exotic]\c-"; 						};
		{ "RLBallisticVestArmorPickup"; 			"Ballistic Vest \ct[Exotic]\c-"; 						};
		{ "RLBulletproofVestArmorPickup"; 			"Bulletproof Vest \ct[Exotic]\c-"; 						};
		{ "RLDuelistArmorPickup"; 					"Duelist Armor \ct[Exotic]\c-"; 						};
		{ "RLEnergyShieldedVestArmorPickup"; 		"Energy-Shielded Vest \ct[Exotic]\c-"; 					};
		{ "RLEnergyShieldArmorPickup"; 				"Energy Shield \ct[Exotic]\c-"; 						};
		{ "RLGothicArmorPickup"; 					"Gothic Armor \ct[Exotic]\c-"; 							};
		{ "RLMedicalArmorPickup"; 					"Medical Armor \ct[Exotic]\c-"; 						};
		{ "RLPhaseshiftArmorPickup"; 				"Phaseshift Armor \ct[Exotic]\c-"; 						};
		{ "RLPlasmaShieldArmorPickup"; 				"Plasma Shield \ct[Exotic]\c-"; 						};
		{ "RLOnyxArmorPickup"; 						"Onyx Armor \ct[Exotic]\c-"; 							};
		
		// Onyx-Modded Armors
		{ "RLOModGreenArmorPickup";					"Security Armor \cc[Onyx]\c-";							};
		{ "RLOModBlueArmorPickup";					"Combat Armor \cc[Onyx]\c-";							};
		{ "RLOModRedArmorPickup";					"Commando Armor \cc[Onyx]\c-";							};
		{ "RLOModBallisticVestArmorPickup";			"Ballistic Vest \ct[Exotic] \cc[Onyx]\c-";				};
		{ "RLOModBulletProofVestArmorPickup";		"Bulletproof Vest \ct[Exotic] \cc[Onyx]\c-";			};
		{ "RLOModDuelistArmorPickup";				"Duelist Armor \ct[Exotic] \cc[Onyx]\c-";				};
		{ "RLOModEnergyShieldedVestArmorPickup";	"Energy-Shielded Vest \ct[Exotic] \cc[Onyx]\c-";		};
		{ "RLOModGothicArmorPickup";				"Gothic Armor \ct[Exotic] \cc[Onyx]\c-";				};
		{ "RLOModMedicalArmorPickup";				"Medical Armor \ct[Exotic] \cc[Onyx]\c-";				};
		{ "RLOModPhaseshiftArmorPickup";			"Phaseshift Armor \ct[Exotic] \cc[Onyx]\c-";			};
		
		// Unique Armors
		{ "RLCyberneticArmorPickup"; 				"Cybernetic Armor \cd[Unique]\c-"; 						};
		{ "RLLavaArmorPickup"; 						"Lava Armor \cd[Unique]\c-"; 							};
		{ "RLMaleksArmorPickup"; 					"Malek's Armor \cd[Unique]\c-"; 						};
		{ "RLMedicalPowerArmorPickup"; 				"Medical Power Armor \cd[Unique]\c-"; 					};
		{ "RLNecroArmorPickup"; 					"Necro Armor \cd[Unique]\c-"; 							};
		{ "RLShieldedArmorPickup"; 					"Shielded Armor \cd[Unique]\c-"; 						};
		
		// Sentinel (Indicates end of list)
		{ ""; ""; };
	};
	
	// Mod Packs
	{
		// Normal Modpacks
		{ "RLPowerModItem"; 						"Power Modpack"; 										};
		{ "RLBulkModItem"; 							"Bulk Modpack"; 										};
		{ "RLAgilityModItem"; 						"Agility Modpack"; 										};
		{ "RLTechnicalModItem"; 					"Technical Modpack"; 									};
		
		// Exotic Modpacks
		{ "RLSniperModItem"; 						"Sniper Modpack"; 										};
		{ "RLFirestormModItem"; 					"Firestorm Modpack"; 									};
		{ "RLNanoModItem"; 							"Nano Modpack"; 										};
		{ "RLOnyxModItem"; 							"Onyx Modpack"; 										};
		{ "RLArmorModItem"; 						"Armor Modpack"; 										};
		
		// Sentinel (Indicates end of list)
		{ ""; ""; };
	};
	
	// Boots
	{
		// Common Boots
		{ "RLSteelBootsPickup"; 					"Steel Boots";											};
		{ "RLProtectiveBootsPickup"; 				"Protective Boots"; 									};
		{ "RLPlasteelBootsPickup"; 					"Plasteel Boots"; 										};
		
		// Assembled Boots
		{ "RLAntigravSteelBootsPickup"; 			"Anti-Grav Steel Boots \cv[Assembled]\c-"; 				};
		{ "RLAntigravProtectiveBootsPickup"; 		"Anti-Grav Protective Boots \cv[Assembled]\c-"; 		};
		{ "RLAntigravPlasteelBootsPickup"; 			"Anti-Grav Plasteel Boots \cv[Assembled]\c-"; 			};
		{ "RLEnviromentalSteelBootsPickup"; 		"Environmental Steel Boots \cv[Assembled]\c-"; 			};
		{ "RLEnviromentalProtectiveBootsPickup";	"Environmental Protective Boots \cv[Assembled]\c-"; 	};
		{ "RLEnviromentalPlasteelBootsPickup"; 		"Environmental Plasteel Boots \cv[Assembled]\c-"; 		};
		{ "RLFireproofSteelBootsPickup"; 			"Fireproof Steel Boots \cv[Assembled]\c-"; 				};
		{ "RLFireproofProtectiveBootsPickup"; 		"Fireproof Protective Boots \cv[Assembled]\c-"; 		};
		{ "RLFireproofPlasteelBootsPickup"; 		"Fireproof Plasteel Boots \cv[Assembled]\c-"; 			};
		{ "RLGrapplingSteelBootsPickup"; 			"Grappling Steel Boots \cv[Assembled]\c-"; 				};
		{ "RLGrapplingProtectiveBootsPickup"; 		"Grappling Protective Boots \cv[Assembled]\c-"; 		};
		{ "RLGrapplingPlasteelBootsPickup"; 		"Grappling Plasteel Boots \cv[Assembled]\c-"; 			};
		{ "RLCerberusBootsPickup"; 					"Cerberus Boots \cv[Assembled]\c-"; 					};
		{ "RLTacticalBootsPickup"; 					"Tactical Boots \cv[Assembled]\c-"; 					};
		
		// Exotic Boots
		{ "RLAcidProofBootsPickup"; 				"Acid-Proof Boots \ct[Exotic]\c-"; 						};
		{ "RLGothicBootsPickup"; 					"Gothic Boots \ct[Exotic]\c-"; 							};
		{ "RLPhaseshiftBootsPickup"; 				"Phaseshift Boots \ct[Exotic]\c-"; 						};
		
		// Unique Boots
		{ "RLLavaBootsPickup"; 						"Lava Boots \cd[Unique]\c-"; 							};
		{ "RLEnviroBootsPickup"; 					"Enviro Boots \cd[Unique]\c-"; 							};
		{ "RLNyarlaptotepsBootsPickup"; 			"Nyarlaptotep's Boots \cd[Unique]\c-"; 					};
		
		// Sentinel (Indicates end of list)
		{ ""; ""; };
	};
};

// Pages
str[] LockerPages =
{
	"Weapons";
	"Ammo";
	"Armor";
	"Mod Packs";
	"Boots";
};

// Set Weapons - Weapons which are part of Set Bonuses
str[2][] LockerSetWeapons =
{
	// Plasma Rifles
	{
		"RLNuclearPlasmaRifle";
		"RLHighPowerNuclearPlasmaRifle";
		"RLAssaultRifleNuclearPlasmaRifle";
		"RLBurstCannonNuclearPlasmaRifle";
		
		// Sentinel (Indicates end of list)
		{ ""; ""; };
	};
	
	// BFGs
	{
		"RLNuclearBFG9000";
		"RLHighPowerNuclearBFG9000";
		"RLNuclearVBFG9000";
		"RLNuclearBiggestFuckingGun";
		
		// Sentinel (Indicates end of list)
		{ ""; ""; };
	};
};

// Base costs for wireless page access
int[] LockerWirelessCosts =
{
	100;	// Weapons
	1;		// Ammo
	50;		// Armor
	50;		// Mod Packs
	50;		// Boots
};

function void CheckShopSpecial()
{
	// Reset the item
	if (ShopSpecialTimer <= 0)
	{
		int Category;
		int Index;
		bool ValidItem;

#if DEBUG
		if (Arbitrator) Log("\cdDEBUG: Shop Special expired! Switching...\n");
#endif
		
		// Item Blacklist
		int[][2] ItemBlacklist =
		{
			// Category, Index
			
			// Ammo
			{ 1;	0; 	};	// Clip
			{ 1;	1; 	};	// Box of Bullets
			{ 1;	2; 	};	// Shells
			{ 1;	3; 	};	// Box of Shells
			{ 1;	4; 	};	// Rockets
			{ 1;	5; 	};	// Box of Rockets
			{ 1;	6; 	};	// Cell
			{ 1;	7; 	};	// Cell Pack
			{ 1;	8; 	};	// Small Backpack
			{ 1;	9; 	};	// Backpack
			
			// Health
			{ 2;	0;	};	// Health Bonus
			
			// Armor
			{ 3;	0;	};	// Armor Bonus
			
			// Powerups
			{ 4;	4;	};	// Time Sphere
			{ 4;	10;	};	// Wings
			{ 4;	15;	};	// Strength Rune
			{ 4;	16;	};	// Drain Rune
			{ 4;	17;	};	// Endless Rune
			{ 4;	18;	};	// Resistance Rune
			{ 4;	19;	};	// Regeneration Rune
			{ 4;	20;	};	// Fright Rune
			{ 4;	21;	};	// Ghost Rune
			{ 4;	22;	};	// High Jump Rune
			{ 4;	23;	};	// Haste Rune
			
			// Sentinel (Indicates end of list)
			{ -1;   -1; };
		};
		
		while (!ValidItem)
		{
			// Pick an item
			ShopBuildPages();
			Category = Random(0, ShopCategories - 1);
			Index = Random(0, ShopMax[Category] - 1);
			
			// Check the item against the blacklist
			for (int i = 0; ItemBlacklist[i][0] != -1; ++i)
			{
				ValidItem = true;
				if (Category == ItemBlacklist[i][0] && Index == ItemBlacklist[i][1])
				{
					ValidItem = false;
					break;
				};
			};
		};
		
		// Assign the item to the Shop Special item
		ShopSpecialItem = Shop[Category][Index];
		ShopSpecialItem.Category = Category;
		
		// Spawn the item if you're in the Outpost
		SpawnShopSpecialItem();
		
		// Reset the timer and bought status
		ShopSpecialTimer = SHOP_SPECIAL_TIMER;
		ShopSpecialBought = false;
	};
	
	// Remove the item if it was bought
	if (InBase && ShopSpecialBought)
		Thing_Remove(ShopSpecialTID + 1);
	
	// Decrease the timer
	ShopSpecialTimer--;
};

function void SpawnShopSpecialItem()
{
	if (InBase)
	{
		// DoomRL Compatibility
		if (GetCVar("drpg_ext_doomrl"))
			if (ShopSpecialItem.Category == 0) // Weapons
				ShopSpecialItem.Actor = StrParam("%sPickup\n", ShopSpecialItem.Actor);
		
		Thing_Remove(ShopSpecialTID + 1);
		SpawnSpotForced("TeleportFog", ShopSpecialTID, 0, 0);
		SpawnSpotForced(ShopSpecialItem.Actor, ShopSpecialTID, ShopSpecialTID + 1, 0);
		SetActorProperty(ShopSpecialTID + 1, APROP_Invulnerable, true);
	};
};

acscript EnterOutpost()
{
	InBase = true;
	
	// Assign the current level to the level choice
	for (int i = 0; i < NumVisitedLevels; ++i)
	{
		if (!StrICmp(StrParam("%s\n", LastVisited), StrParam("%s\n", VisitedLevels[i].LumpName)))
		{
			LevelChoice = i;
			break;
		};
	};
	
	// Assign the current skill level to the skill choice
	SkillChoice = GameSkill() - 1;
	
	// Set the current wave to the max wave
	ArenaWave = ArenaMaxWave;
	
	// Spawn the Shop Special item
	SpawnShopSpecialItem();
};

acscript RegenArea(int ID)
{
	// If you're dead, terminate
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	Start:
	// Input
	int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
	int Interval;
	
	if (Buttons & BT_SPEED) Interval = 2 else Interval = 10;
	
	// Health
	if (ID == 1)
	{
		if (CheckInventory("Credits") < 5)
			return;
		if (GetActorProperty(Player.TID, APROP_Health) >= GetActorProperty(Player.TID, APROP_SpawnHealth))
			return;
		
		HealThing(5);
		TakeInventory("Credits", 5);

		FadeRange(255, 0, 0, 0.1, 255, 0, 0, 0.0, 0.1);
		
		AmbientSound("regen/health", 127);
		
		Delay(Interval);
		goto Start;
	};
	
	// Armor
	if (ID == 2)
	{
		if (CheckInventory("Credits") < 5)
			return;
		if (CheckInventory("Armor") >= Player.ArmorMax)
			return;
		
		GiveInventory("ArmorBonus", 5);
		TakeInventory("Credits", 5);
		
		FadeRange(0, 255, 0, 0.1, 0, 255, 0, 0.0, 0.1);
		AmbientSound("regen/armor", 127);
		
		Delay(Interval);
		goto Start;
	};
	
	// EP
	if (ID == 3)
	{
		if (!CheckInventory("Credits"))
			return;
		if (Player.EP < Player.EPMax)
		{
			Player.EP += 5;
			if (Player.EP > Player.EPMax)
				Player.EP = Player.EPMax;
		}
		else if (Player.EP >= Player.EPMax)
			return;
		
		FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.1);
		AmbientSound("regen/ep", 127);
		
		TakeInventory("Credits", 1);
		
		Delay(Interval);
		goto Start;
	};
};

acscript LevelTransport()
{
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_LEVELTRANSPORT) return;
	
	SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
	Player.OutpostMenu = OMENU_LEVELTRANSPORT;
	
	if (!NumVisitedLevels)
	{
		SetFont("BIGFONT");
		HudMessage("The teleporter has been disabled.\n", HUDMSG_FADEOUT, MENU_ID, CR_RED, 0.5, 0.5, 2.0, 0.5);
		return;
	};
	
	while (true)
	{
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);

		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		// Stop Underflow
		if (LevelChoice < 0)
			LevelChoice = 0;
		
		// And Overflow
		if (LevelChoice >= NumVisitedLevels)
			LevelChoice = NumVisitedLevels - 1;
		
		// Text
		SetFont("BIGFONT");
		HudMessage("Choose Level:\n\cf%s: %s\n", VisitedLevels[LevelChoice].LumpName, VisitedLevels[LevelChoice].NiceName, HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 1.5, 0.5, 0.05, 0.5);
		
		// Input
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && LevelChoice > 0)
		{
			ActivatorSound("menu/move", 127);
			LevelChoice--;
		};
		if (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT && LevelChoice > 0)
		{
			ActivatorSound("menu/move", 127);
			LevelChoice -= 10;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && LevelChoice < NumVisitedLevels - 1)
		{
			ActivatorSound("menu/move", 127);
			LevelChoice++;
		};
		if (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT && LevelChoice < NumVisitedLevels - 1)
		{
			ActivatorSound("menu/move", 127);
			LevelChoice += 10;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			FadeRange(255, 255, 255, 0.0, 255, 255, 255, 1.0, 2.0);
			Delay(105);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			InBase = false;
			Transported = true;
			Player.OutpostMenu = 0;
			ChangeLevel(StrParam("%s\n", VisitedLevels[LevelChoice].LumpName), 0, CHANGELEVEL_NOINTERMISSION, -1);
			break;
		};
		if (Buttons == BT_SPEED)
		{
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		Delay(1);
	};
};

acscript SkillComputer()
{
	// Terminate if you aren't the Arbitrator
	if (InMultiplayer && !Arbitrator) return;
	
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_SKILLCOMPUTER) return;
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SkillLevels[5] = "Armegeddon";
	
	ActivatorSound("misc/edgar", 127);
	
	Player.OutpostMenu = OMENU_SKILLCOMPUTER;
	SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
	
	while (true)
	{
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;

		// Text
		SetFont("BIGFONT");
		HudMessage("Skill Level: \cg%d (%s)\n", SkillChoice + 1, SkillLevels[SkillChoice],
				   HUDMSG_FADEOUT, MENU_ID, CR_GOLD, 0.5, 0.5, 0.05, 0.5);
		
		// Input
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && SkillChoice > 0)
		{
			ActivatorSound("menu/move", 127);
			SkillChoice--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && SkillChoice < (GetCVar("drpg_ext_doomrl") ? 5 : 4))
		{
			ActivatorSound("menu/move", 127);
			SkillChoice++;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			SetSkill(SkillChoice);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		if (Buttons == BT_SPEED)
		{
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		Delay(1);
	};
};

acscript ToggleArena()
{
	if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;
	
	ArenaActive = !ArenaActive;
	ActivatorSound("misc/secret", 127);
	
	SetFont("BIGFONT");
	
	if (ArenaActive)
	{
		HudMessage("Arena Active\n", HUDMSG_FADEOUT, MENU_ID, CR_GREEN, 0.5, 0.5, 2.0, 1.0);
		ArenaPlayerNumber = PlayerNumber();
	}
	else
	{
		HudMessage("Arena Inactive\n", HUDMSG_FADEOUT, MENU_ID, CR_RED, 0.5, 0.5, 2.0, 1.0);
		ArenaPlayerNumber = -1;
	};
};

acscript PassArenaLine()
{
	if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;
	
	if (ArenaActive)
	{
		Ceiling_LowerToFloor(99, 64);
		ArenaLoop();
	};
};

acscript SelectArenaWave()
{
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_TOKENCONVERTER) return;
	
	if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;

	ActivatorSound("menu/move", 127);
	Player.OutpostMenu = OMENU_WAVESELECTOR;

	if (ArenaMaxWave == 0) ArenaMaxWave = 1;
	WaveChoice = ArenaMaxWave;
	
	Delay(1);

	while (true)
	{
		SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
		
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		// Text
		SetFont("BIGFONT");
		HudMessage("Wave: \cd%d\c-/\cd%d\n", WaveChoice, ArenaMaxWave,
				   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 0.5, 0.5, 0.05, 1.0);
		
		// Input
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && WaveChoice > 1)
		{
			ActivatorSound("menu/move", 127);
			WaveChoice--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && WaveChoice < ArenaMaxWave)
		{
			ActivatorSound("menu/move", 127);
			WaveChoice++;
		};
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
		{
			ActivatorSound("menu/move", 127);
			WaveChoice -= 10;
			if (WaveChoice <= 0) WaveChoice = 1;
		};
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
		{
			ActivatorSound("menu/move", 127);
			WaveChoice += 10;
			if (WaveChoice > ArenaMaxWave) WaveChoice = ArenaMaxWave;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			if (WaveChoice > 1)
				ArenaWave = WaveChoice - 1
			else
				ArenaWave = 1;
			
			ActivatorSound("menu/move", 127);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		if (Buttons == BT_SPEED)
		{
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		Delay(1);
	};
};

acscript PissOffMarines()
{
	SetMusic("Outpost2", 3);
	Thing_Activate(1);
	SetActorProperty(1, APROP_Friendly, 0);
	Thing_Hate(1, 0, 6);
	Thing_ChangeTID(1, 1201);
	
	while (true)
	{
		// You are dead, NO BIG SURPRISE
		if (GetActorProperty(Player.TID, APROP_Health) <= 0)
		{
			SetMusic("Outpost2", 1);
			return;
		};
		
		// Teleport in new Marines
		if ((Timer() % (35 * 10)) == 1)
		{
			SpawnSpot("TeleportFog", MarineSpotTID, 0, 0);
			SpawnSpotFacing("MarineRandomizer", MarineSpotTID, MarineTID);
		};

		Delay(1);
	};
};

acscript TokenConverter()
{
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_TOKENCONVERTER) return;
	
	int StatWorth = 1;
	int StatCapWorth = 10;
	int SkillWorth = 5;
	int InAmount = 1;
	int Amount1;
	int Amount2;
	int MaxAmount;
	int Type;
	int Cost;
	str Text;
	
	// Rank Check
	if (Player.RankLevel == 0)
	{
		SetFont("BIGFONT");
		HudMessage("\cgYou must be at least Rank 1 to use the Token Converter\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
		ActivatorSound("menu/error", 127);
		return;
	};
	
	SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
	ActivatorSound("menu/move", 127);
	Player.OutpostMenu = OMENU_TOKENCONVERTER;

	while (true)
	{
		int StatTokens = CheckInventory("StatToken");
		int StatCapTokens = CheckInventory("StatCapToken");
		int SkillTokens = CheckInventory("SkillToken");
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		switch (Type)
		{
			case 0: // Stat -> Skill
				Amount1 = InAmount * SkillWorth;
				Amount2 = InAmount;
				MaxAmount = StatTokens / SkillWorth;
				Cost = 5000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cg%d Stat Tokens \cj-> \cd%d Skill Tokens\n", Cost, Amount1, Amount2);
				break;
			case 1: // Stat -> Stat Cap
				Amount1 = InAmount * StatCapWorth;
				Amount2 = InAmount;
				MaxAmount = StatTokens / StatCapWorth;
				Cost = 1000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cg%d Stat Tokens \cj-> \ck%d Stat Cap Tokens\n", Cost, Amount1, Amount2);
				break;
			case 2: // Skill -> Stat
				Amount1 = InAmount * StatWorth;
				Amount2 = InAmount * SkillWorth;
				MaxAmount = SkillTokens;
				Cost = 25000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cd%d Skill Tokens \cj-> \cg%d Stat Tokens\n", Cost, Amount1, Amount2);
				break;
			case 3: // Skill -> Stat Cap
				Amount1 = InAmount * (StatCapWorth / SkillWorth);
				Amount2 = InAmount;
				MaxAmount = SkillTokens / 2;
				Cost = 12500 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cd%d Skill Tokens \cj-> \ck%d Stat Cap Tokens\n", Cost, Amount1, Amount2);
				break;
			case 4: // Stat Cap -> Stat
				Amount1 = InAmount;
				Amount2 = InAmount * StatCapWorth;
				MaxAmount = StatCapTokens;
				Cost = 25000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\ck%d Stat Cap Tokens \cj-> \cg%d Stat Tokens\n", Cost, Amount1, Amount2);
				break;
			case 5: // Stat Cap -> Skill
				Amount1 = InAmount;
				Amount2 = InAmount * (StatCapWorth / SkillWorth);
				MaxAmount = StatCapTokens;
				Cost = 10000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\ck%d Stat Cap Tokens \cj-> \cd%d Skill Tokens\n", Cost, Amount1, Amount2);
				break;
		};

		// Input
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Type > 0)
		{
			ActivatorSound("menu/move", 127);
			InAmount = 1;
			Type--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Type < 5)
		{
			ActivatorSound("menu/move", 127);
			InAmount = 1;
			Type++;
		};
		if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT)
			&& InAmount > 1)
		{
			ActivatorSound("menu/move", 127);
			InAmount--;
		};
		if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT)
			&& InAmount <= MaxAmount - 1)
		{
			ActivatorSound("menu/move", 127);
			InAmount++;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			str InItem;
			str OutItem;
			
			switch (Type)
			{
				case 0: InItem = "StatToken"; 		OutItem = "SkillToken";		break;
				case 1: InItem = "StatToken"; 		OutItem = "StatCapToken";	break;
				case 2: InItem = "SkillToken"; 		OutItem = "StatToken";		break;
				case 3: InItem = "SkillToken"; 		OutItem = "StatCapToken";	break;
				case 4: InItem = "StatCapToken"; 	OutItem = "StatToken";		break;
				case 5: InItem = "StatCapToken"; 	OutItem = "SkillToken";		break;
			};
			
			if (CheckInventory("Credits") >= Cost)
			{
				if ((Type == 0 || Type == 1) && StatTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
					Player.OutpostMenu = 0;
				}
				else if ((Type == 2 || Type == 3) && SkillTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
					Player.OutpostMenu = 0;
				}
				else if ((Type == 4 || Type == 5) && StatCapTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
					Player.OutpostMenu = 0;
				}
				else
					ActivatorSound("menu/error", 127);
			}
			else
				ActivatorSound("menu/error", 127);
		};
		if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
		{
			ActivatorSound("menu/move", 127);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		// Drawing
		SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
		PrintSpriteFade("TOKAA0", 0, 16.1, 188.1, 0.05, 0.5);
		PrintSpriteFade("TOKBA0", 0, 16.1, 208.1, 0.05, 0.5);
		PrintSpriteFade("TOKCA0", 0, 16.1, 228.1, 0.05, 0.5);
		SetFont("BIGFONT");
		HudMessage("%d\n", StatTokens, 		HUDMSG_FADEOUT, 0, CR_RED,  		40.1, 178.0, 0.05, 0.5);
		HudMessage("%d\n", StatCapTokens, 	HUDMSG_FADEOUT, 0, CR_YELLOW,  		40.1, 198.0, 0.05, 0.5);
		HudMessage("%d\n", SkillTokens, 	HUDMSG_FADEOUT, 0, CR_DARKGREEN,	40.1, 218.0, 0.05, 0.5);
		SetFont("SMALLFONT");
		HudMessage("%s\n", Text, 			HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 	140.1, 178.0, 0.05, 0.5);

		Delay(1);
	};
};

// Credit Room Script
acscript CreditRoom(int ID)
{
	if (ID == 1) // Enter
		LocalSetMusic("Credits");
	if (ID == 2) // Exit
		LocalSetMusic("Outpost");
	
	if (ID == 3) // Kyle873 - That's me!
	{
		SetFont("BIGFONT");
		HudMessage("Kyle873\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		SetFont("SMALLFONT");
		HudMessage("What do you mean I can't nerf XP Gain to 1 per monster?!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);

		int RealCredits = CheckInventory("Credits");
		
		ActivatorSound("credits/payout", 127);
		Log("\ckYou have been paid -2147483648 by the UAC!\n");
		TakeInventory("Credits", RealCredits);
		Delay(35 * 10);
		GiveInventory("Credits", RealCredits);
	};
	
	if (ID == 4) // Lord Misfit
	{
		SetFont("BIGFONT");
		HudMessage("Lord Misfit\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		SetFont("SMALLFONT");
		HudMessage("I swear it's a real bug this time!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		
		str VarString = "SetVar";
		
		Delay(35 * 3);
		for (int i = 0; i < 100; i++)
		{
			if (Random(1, 3) == 1) VarString = StrParam("%s%s\n", VarString, "Var");
			HudMessage("%s\n", VarString, HUDMSG_FADEOUT, 0, Random(1, 21), RandomFixed(0.0, 1.0), RandomFixed(0.0, 1.0), 3.0, 2.0);
			Delay(1);
		};
	};
	
	if (ID == 5) // Ryan Cordell
	{
		SetFont("BIGFONT");
		HudMessage("Ryan Cordell\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 7.0, 2.0);
		Delay(35);
		
		for (int i = 0; i < 10; i++)
		{
			ActivatorSound("weapons/rocklx", 127);
			Delay(Random(5, 10));
		};
		
		Delay(35 * 2);
		SetFont("SMALLFONT");
		HudMessage("Did I do that?\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
	};
	
	if (ID == 6) // marrub
	{
		SetFont("BIGFONT");
		HudMessage("marrub\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("I HOPE YOU LIKE SHOTGUNS!\n", HUDMSG_FADEOUT, 0, CR_BRICK, 0.5, 0.55, 3.0, 2.0);
		Delay(35 * 2);
		
		for (int i = 0; i < 50; i++)
		{
			DropItem(0, "DumbShotgun", 1, 255);
			Delay(1);
		};
	};

	if (ID == 7) // Kate
	{
		SetFont("BIGFONT");
		HudMessage("Kate\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("\cgR\ciA\ckI\cdN\chB\ctO\caW\cjS\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		Delay(35);
		
		FadeTo(255, 0, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 128, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 255, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 255, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(128, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 255, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 0, 0, 0.0, 0.5);
	};
	
	if (ID == 8) // Yholl
	{
		SetFont("BIGFONT");
		HudMessage("Yholl\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("\caYour suffering pleases me\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		Delay(35);
		
		for (int i = 0; i < 50; i++)
		{
			DropItem(0, "DumbPistol", 1, 255);
			Delay(1);
		};
	};
};

// Shop Special UI
acscript ShopSpecial()
{
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_SHOPSPECIAL) return;
	
	if (ShopSpecialBought)
	{
		SetFont("BIGFONT");
		HudMessage("Shop Special is currently out of stock.\n\nNext restock will be in %s.\n", FormatTime(ShopSpecialTimer),
				   HUDMSG_FADEOUT, MENU_ID, CR_RED, 1.5, 0.5, 2.0, 1.0);
		ActivatorSound("menu/error", 127);
		return;
	};
	
	ActivatorSound("menu/move", 127);
	SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
	Player.OutpostMenu = OMENU_SHOPSPECIAL;
	
	while (true)
	{
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		str Name = ShopSpecialItem.Name;
		int Discount = (30 - (GameSkill() * 5)) + Player.ShopDiscount;
		int Cost = ShopSpecialItem.Price - ShopSpecialItem.Price * Discount / 100;
		
		// If the item's already been bought, terminate
		if (ShopSpecialBought)
		{
			SetPlayerProperty(true, 0, PROP_TOTALLYFROZEN);
			return;
		};
		
		// The cost should always be at least 1 Credit
		if (Cost <= 0) Cost = 1;
		
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;

		// Input
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			// Buy Item
			if (CheckInventory("Credits") >= Cost)
			{
				TakeInventory("Credits", Cost);
				SpawnForced(ShopSpecialItem.Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
				SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
				ShopSpecialBought = true;
				
				ActivatorSound("credits/payout", 127);
				Delay(1);
				SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
				Player.OutpostMenu = 0;
				return;
			}
			else
				ActivatorSound("menu/error", 127);
		};
		if (Buttons == BT_SPEED)
		{
			ActivatorSound("menu/move", 127);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		// Drawing
		SetFont("BIGFONT");
		HudMessage("%s\n\ck%d C (Discount: %d%%)\n\cdTime Left: %s\n",
				   Name, Cost, Discount, FormatTime(ShopSpecialTimer),
				   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 1.5, 0.5, 0.05, 1.0);
		
		Delay(1);
	};
};

// Player Locker
acscript Locker(bool Wireless)
{
	int Offset;
	int Color;
	int LockerSize;
	int Total;
	bool Success;
	bool Global;
	
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_LOCKER) return;

	// This is purely a DRLA feature
	if (!GetCVar("drpg_ext_doomrl")) return;

	// Freeze the Player
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	
	Player.OutpostMenu = OMENU_LOCKER;
	
	ActivatorSound("menu/move", 127);
	
	while (Player.OutpostMenu == OMENU_LOCKER)
	{
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		int Efficiency = (Skills[5][5].CurrentLevel - 1) * 5;;
		fixed X = 24.1;
		fixed Y = 50.0;
		
		// Set the HUD Size
		SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
		
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		// Calculate Locker Size
		for (int i = 0; LockerItems[Player.LockerPage][i].Actor != ""; ++i)
			LockerSize = i;
		
		// Calculate total items
		Total = 0;
		for (int i = 0; LockerItems[Player.LockerPage][i].Actor != ""; ++i)
			if (Player.Locker[Player.LockerPage][i] > 0)
				Total += Player.Locker[Player.LockerPage][i];
		
		// Title and Player.LockerPage
		SetFont("BIGFONT");
		if (Player.LockerGlobal)
			HudMessage("Global Locker - %s (%d/%d)\n",
					   LockerPages[Player.LockerPage], Player.LockerPage + 1, LOCKER_CATEGORIES,
					   HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05)
		else
			HudMessage("Personal Locker - %s (%d/%d)\n",
					   LockerPages[Player.LockerPage], Player.LockerPage + 1, LOCKER_CATEGORIES,
					   HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05);
		
		// Total amount of items in the Locker
		HudMessage("Items: %d\n", Total, HUDMSG_PLAIN, 0, CR_GOLD, 24.1, 38.0, 0.05);
		
		// Determine Offset
		if (Player.LockerIndex > SHOP_SCROLL)
			Offset = Player.LockerIndex - SHOP_SCROLL
		else
			Offset = 0;
		
		for (int i = Offset; i < Offset + (SHOP_SCROLL * 2) + 1; i++)
		{
			// Stop if we're at the end of the list
			if (i > LockerSize) break;
			
			// Set the Color
			if (i == Player.LockerIndex)
				Color = MenuCursorColor
			else
				Color = CR_WHITE;
			
			// Display the item string
			SetFont("SMALLFONT");
			if (Player.LockerGlobal)
			{
				if (GlobalLocker[Player.LockerPage][i] > 0 && CheckInventory(LockerItems[Player.LockerPage][i].Actor) > 0)
					HudMessage("%s \cd[%d] \ck[%d]\n", LockerItems[Player.LockerPage][i].Name, CheckInventory(LockerItems[Player.LockerPage][i].Actor), GlobalLocker[Player.LockerPage][i], HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else if (CheckInventory(LockerItems[Player.LockerPage][i].Actor) > 0)
					HudMessage("%s \cd[%d]\n", LockerItems[Player.LockerPage][i].Name, CheckInventory(LockerItems[Player.LockerPage][i].Actor), HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else if (GlobalLocker[Player.LockerPage][i] > 0)
					HudMessage("%s \ck[%d]\n", LockerItems[Player.LockerPage][i].Name, GlobalLocker[Player.LockerPage][i], HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else
					HudMessage("%s\n", LockerItems[Player.LockerPage][i].Name, HUDMSG_PLAIN, 0, Color, X, Y, 0.05);
			}
			else
			{
				if (Player.Locker[Player.LockerPage][i] > 0 && CheckInventory(LockerItems[Player.LockerPage][i].Actor) > 0)
					HudMessage("%s \cd[%d] \ck[%d]\n", LockerItems[Player.LockerPage][i].Name, CheckInventory(LockerItems[Player.LockerPage][i].Actor), Player.Locker[Player.LockerPage][i], HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else if (CheckInventory(LockerItems[Player.LockerPage][i].Actor) > 0)
					HudMessage("%s \cd[%d]\n", LockerItems[Player.LockerPage][i].Name, CheckInventory(LockerItems[Player.LockerPage][i].Actor), HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else if (Player.Locker[Player.LockerPage][i] > 0)
					HudMessage("%s \ck[%d]\n", LockerItems[Player.LockerPage][i].Name, Player.Locker[Player.LockerPage][i], HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else
					HudMessage("%s\n", LockerItems[Player.LockerPage][i].Name, HUDMSG_PLAIN, 0, Color, X, Y, 0.05);
			};
			
			// Move down Y
			Y += 8.0;
		};
		
		// Check cursor movement for repeating
		if (Buttons == BT_FORWARD)
			Player.DelayTimer++;
		if (Buttons == BT_BACK)
			Player.DelayTimer++;
		if (Buttons == BT_USE)
			Player.DelayTimer++;
		if (Buttons == BT_SPEED)
			Player.DelayTimer++;
		
		// Check Input
		if (Buttons == BT_FORWARD && (OldButtons != BT_FORWARD || Player.DelayTimer > 35))
		{
			if (Player.LockerIndex <= 0) Player.LockerIndex = LockerSize + 1;
			ActivatorSound("menu/move", 127);
			Player.LockerIndex--;
		};
		if (Buttons == BT_BACK && (OldButtons != BT_BACK || Player.DelayTimer > 35))
		{
			if (Player.LockerIndex >= LockerSize) Player.LockerIndex = -1;
			ActivatorSound("menu/move", 127);
			Player.LockerIndex++;
		};
		if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
		{
			if (Player.LockerPage <= 0) Player.LockerPage = LOCKER_CATEGORIES;
			ActivatorSound("menu/move", 127);
			Player.LockerIndex = 0;
			Player.LockerPage--;
		};
		if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
		{
			if (Player.LockerPage >= LOCKER_CATEGORIES - 1) Player.LockerPage = -1;
			ActivatorSound("menu/move", 127);
			Player.LockerIndex = 0;
			Player.LockerPage++;
		};
		if (Buttons == BT_USE && (OldButtons != BT_USE || Player.DelayTimer > 35))
		{
			// Deposit
			if (CheckInventory(LockerItems[Player.LockerPage][Player.LockerIndex].Actor) > 0)
			{
				if (!Wireless)
				{
					TakeInventory(LockerItems[Player.LockerPage][Player.LockerIndex].Actor, 1);
					if (Player.LockerGlobal)
						GlobalLocker[Player.LockerPage][Player.LockerIndex]++
					else
						Player.Locker[Player.LockerPage][Player.LockerIndex]++;
					ActivatorSound("menu/move", 127);
					Success = true;
				}
				else
				{
					if (Player.EP < (int)((fixed)LockerWirelessCosts[Player.LockerPage] - ((fixed)LockerWirelessCosts[Player.LockerPage] * ((fixed)Efficiency / 00.0))))
					{
						SetHudSize(0, 0, false);
						SetFont("BIGFONT");
						HudMessage("Not Enough EP to Deposit item\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 2.0);
						ActivatorSound("menu/error", 127);
						Success = false;
					}
					else
					{
						TakeInventory(LockerItems[Player.LockerPage][Player.LockerIndex].Actor, 1);
						if (Player.LockerGlobal)
							GlobalLocker[Player.LockerPage][Player.LockerIndex]++
						else
							Player.Locker[Player.LockerPage][Player.LockerIndex]++;
						Player.EP -= (int)((fixed)LockerWirelessCosts[Player.LockerPage] - ((fixed)LockerWirelessCosts[Player.LockerPage] * ((fixed)Efficiency / 100.0)));
						ActivatorSound("menu/move", 127);
						Success = true;
					};
				};
				
				if (Success)
					if (Player.LockerPage == 0) // Weapons
					{
						TakeInventory("RLWeaponLimit", 1);
						
						// Plasma Rifles portion of Nuclear Set Bonus Checking
						for (int i = 0; LockerSetWeapons[0][i] != ""; ++i)
							if (LockerItems[Player.LockerPage][Player.LockerIndex].Actor == LockerSetWeapons[0][i])
							{
								Log("Plasma weapon removed\n");
								TakeInventory("RLNuclearWeaponSetBonusPlasmaRifle", 1);
								TakeInventory("RLNuclearWeaponSetBonusActive", 1);
							};
						
						// BFGs portion of Nuclear Set Bonus Checking
						for (int i = 0; LockerSetWeapons[1][i] != ""; ++i)
							if (LockerItems[Player.LockerPage][Player.LockerIndex].Actor == LockerSetWeapons[1][i])
							{
								Log("BFG weapon removed\n");
								TakeInventory("RLNuclearWeaponSetBonusBFG", 1);
								TakeInventory("RLNuclearWeaponSetBonusActive", 1);
							};
							
						// Tristar blaster Set Bonus Checking
						if (CheckInventory("RLTristarBlaster") == 0 && CheckInventory("RLHighPowerTristarBlaster") == 0 && CheckInventory("RLNanomanufactureAmmoTristarBlaster") == 0)
							TakeInventory("RLCerberusSetBonusTristarBlaster", 1);
					}
					else if (Player.LockerPage == 2) // Armor
						TakeInventory("RLArmorInInventory", 1)
					else if (Player.LockerPage == 3) // Mod Packs
						if (Player.LockerIndex == 8) // Special handling case for Armor Modpack
							TakeInventory("RLArmorModItemInInventory", 1)
						else
							if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
								TakeInventory("RLScavengerModLimit", 1)
							else
								TakeInventory("RLModLimit", 1)
					else if (Player.LockerPage == 4) // Boots
						TakeInventory("RLBootsInInventory", 1);
			}
			else
				ActivatorSound("menu/error", 127);
		};
		if (Buttons == BT_SPEED && (OldButtons != BT_SPEED || Player.DelayTimer > 35))
		{
			bool Check = (Player.LockerGlobal ? GlobalLocker[Player.LockerPage][Player.LockerIndex] : (Player.Locker[Player.LockerPage][Player.LockerIndex] > 0));
			
			// Withdraw
			if (Check)
			{
				if (!Wireless)
					Success = true
				else
				{
					if (Player.EP < (int)((fixed)LockerWirelessCosts[Player.LockerPage] - ((fixed)LockerWirelessCosts[Player.LockerPage] * ((fixed)Efficiency / 100.0))))
					{
						SetHudSize(0, 0, false);
						SetFont("BIGFONT");
						HudMessage("Not Enough EP to Withdraw item\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 2.0);
						ActivatorSound("menu/error", 127);
						Success = false;
					}
					else
						Success = true;
				};
				
				// Checking
				if (Success)
					if (Player.LockerPage == 0 && CheckInventory("RLWeaponLimit") >= 6) // Weapons
						ActivatorSound("menu/error", 127)
					else if (Player.LockerPage == 2 && CheckInventory("RLArmorInInventory") >= 1) // Armor
						ActivatorSound("menu/error", 127)
					else if (Player.LockerPage == 3 && CheckInventory("RLArmorModItemInInventory") >= 1) // Armor Modpack
						ActivatorSound("menu/error", 127)
					else if (Player.LockerPage == 3 && ((PlayerClass(PlayerNumber()) == 2) ? CheckInventory("RLScavengerModLimit") >= 8 : CheckInventory("RLModLimit") >= 4)) // Mod Packs
						ActivatorSound("menu/error", 127)
					else if (Player.LockerPage == 4 && CheckInventory("RLBootsInInventory") >= 1) // Boots
						ActivatorSound("menu/error", 127)
					else if (Player.LockerPage == 0) // Weapons
					{
						GiveInventory(StrParam("%sPickup\n", LockerItems[Player.LockerPage][Player.LockerIndex].Actor), 1);
						if (Player.LockerGlobal)
							GlobalLocker[Player.LockerPage][Player.LockerIndex]--
						else
							Player.Locker[Player.LockerPage][Player.LockerIndex]--;
						if (Wireless)
							Player.EP -= (int)((fixed)LockerWirelessCosts[Player.LockerPage] - ((fixed)LockerWirelessCosts[Player.LockerPage] * ((fixed)Efficiency / 100.0)));
						ActivatorSound("menu/move", 127);
					}
					else
					{
						if (Player.LockerPage == 0) // Ammo
						{
							
						};
						
						GiveInventory(LockerItems[Player.LockerPage][Player.LockerIndex].Actor, 1);
						if (Player.LockerGlobal)
							GlobalLocker[Player.LockerPage][Player.LockerIndex]--
						else
							Player.Locker[Player.LockerPage][Player.LockerIndex]--;
						if (Wireless)
							Player.EP -= (int)((fixed)LockerWirelessCosts[Player.LockerPage] - ((fixed)LockerWirelessCosts[Player.LockerPage] * ((fixed)Efficiency / 100.0)));
						ActivatorSound("menu/move", 127);
					};
			}
			else
				ActivatorSound("menu/error", 127);
		};
		
		// Reset the Delay Timer if no buttons are pressed
		if (Buttons == 0 && OldButtons == 0)
			Player.DelayTimer = 0;
		
		Delay(1);
	};
};

// Handles the 6 Key Secret
acscript OutpostSecret()
{
	if (CheckInventory("RedCard2") && CheckInventory("YellowCard2") && CheckInventory("BlueCard2") &&
		CheckInventory("RedSkull2") && CheckInventory("YellowSkull2") && CheckInventory("BlueSkull2"))
	{
		ActivatorSound("misc/secret", 127);
		Teleport(SecretTeleportTID + PlayerNumber(), false);
	};
};
