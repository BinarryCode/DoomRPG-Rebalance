#include "Arena.dh"
#include "Globals.dh"
#include "Outpost.dh"
#include "RPG.dh"
#include "Stats.dh"
#include "Utils.dh"

/* --------------------------------------------------

SPOT ID'S
1000 - Shop Drop
1001 - Marine Spawn Spot
1002 - Arena Monsters
1003 - Arena Start Spot
1100-1130 - Arena Spawn Points
1200 - Arena Item Spawner
1201 - Hostile Marines

// -------------------------------------------------- */

int LevelChoice = 1;
int SkillChoice = 0;
int WaveChoice = 1;

// Invasion
bool Invasion = false;

acscript EnterOutpost()
{
    InBase = true;
    
    Sector_SetPlaneReflection(6, 128, 0);
};

acscript RegenArea(int ID, int Paid)
{
	// If you're dead, terminate
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	Start:
    // Input
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
    int Interval;
    
	if (Buttons & BT_SPEED) Interval = 2 else Interval = 10;
    
    // XP
    if (ID == 1)
    {
        if (Paid && CheckInventory("Credits") < Player.Level * 100)
            return;
        if (Player.Level == 0)
            Player.XP += 100
        else
            Player.XP += Player.Level * 100;
        
        FadeRange(255, 255, 255, 0.1, 255, 255, 255, 0.0, 0.1);
        AmbientSound("regen/xp", 127);
        
        if (Paid)
            TakeInventory("Credits", Player.Level * 100);
        
        Delay(Interval);
        goto Start;
    };
	
    // Rank
    if (ID == 2)
    {
        if (Paid && CheckInventory("Credits") < Player.RankLevel * 1001)
            return
        if (Player.RankLevel == 0)
            Player.Rank += 1000
        else
            Player.Rank += Player.RankLevel * 1000;
        
        FadeRange(255, 255, 0, 0.1, 255, 255, 0, 0.0, 0.1);
        AmbientSound("regen/rank", 127);
        
        if (Paid)
            TakeInventory("Credits", Player.RankLevel * 1000);
        
        Delay(Interval);
        goto Start;
    };
	
    // Health
    if (ID == 3)
    {
        if (Paid && CheckInventory("Credits") < 5)
            return;
        if (GetActorProperty(Player.TID, APROP_Health) >= GetActorProperty(Player.TID, APROP_SpawnHealth))
            return;
        
        HealThing(5);

        FadeRange(255, 0, 0, 0.1, 255, 0, 0, 0.0, 0.1);
        
        AmbientSound("regen/health", 127);
        
        if (Paid)
            TakeInventory("Credits", 5);
        
        Delay(Interval);
        goto Start;
    };
	
    // Armor
    if (ID == 4)
    {
        if (Paid && CheckInventory("Credits") < 5)
            return;
        if (CheckInventory("Armor") >= Player.ArmorMax)
            return;
        
        GiveInventory("ArmorBonus", 5);
        
        FadeRange(0, 255, 0, 0.1, 0, 255, 0, 0.0, 0.1);
        AmbientSound("regen/armor", 127);
        
        if (Paid)
            TakeInventory("Credits", 5);
        
        Delay(Interval);
        goto Start;
    };
	
    // EP
    if (ID == 5)
    {
        if (Paid && CheckInventory("Credits") < 5)
            return;
        if (Player.EP < Player.EPMax)
            Player.EP += 5
        else
        if (Player.EP >= Player.EPMax)
            return;
        
        FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.1);
        AmbientSound("regen/ep", 127);
        
        if (Paid)
            TakeInventory("Credits", 5);
        
        Delay(Interval);
        goto Start;
    };
	
    // Credits
    if (ID == 6)
    {
        if (Paid) return;
        
        GiveInventory("Credits", 100);
        
        FadeRange(128, 128, 0, 0.1, 128, 128, 0, 0.0, 0.1);
        AmbientSound("regen/credits", 127);
        
        Delay(Interval);
        goto Start;
    };
};

acscript LevelTransport()
{
    while (1)
    {
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        
        // Stop Underflow
        if (LevelChoice < 1)
            LevelChoice = 1;
        
        // Text
        SetFont("BIGFONT");
        HudMessage("Choose Level\n", HUDMSG_PLAIN, 1, CR_GOLD, 0.5, 0.2, 0.05);
        
        if (Player.MapsVisited[LevelChoice])
            HudMessage("%d\n", LevelChoice, HUDMSG_PLAIN, 2, CR_GREEN, 0.5, 0.3, 0.05)
        else
            HudMessage("%d\n", LevelChoice, HUDMSG_PLAIN, 2, CR_RED, 0.5, 0.3, 0.05);
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && LevelChoice > 1)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice--;
        };
        if (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT && LevelChoice > 1)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice -= 10;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice++;
        };
        if (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice += 10;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            if (Player.MapsVisited[LevelChoice])
            {
                FadeRange(255, 255, 255, 0.0, 255, 255, 255, 1.0, 2.0);
                Delay(105);
                SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
                InBase = false;
                Transported = true;
                Teleport_NewMap(LevelChoice, 0);
                break;
            }
            else
            {
                HudMessage("You haven't reached this level yet\n", HUDMSG_FADEOUT, 1, CR_RED, 0.5, 0.5, 3.0, 1.0);
                ActivatorSound("menu/error", 127);
                FadeRange(255, 255, 255, 1.0, 255, 255, 255, 0.0, 2.0);
                SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
                InBase = true;
                return;
            };
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            return;
        };
        
        Delay(1);
    };
};

acscript SkillComputer()
{
    AmbientSound("misc/edgar", 127);
	
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    while (1)
    {
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;

        // Text
        SetFont("BIGFONT");
        HudMessage("Skill Level: \cg%d (%s)\n", SkillChoice + 1, SkillLevels[SkillChoice],
                   HUDMSG_PLAIN, 1, CR_GOLD, 0.5, 0.2, 0.05);
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && SkillChoice > 0)
        {
            ActivatorSound("menu/move", 127);
            SkillChoice--;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && SkillChoice < 4)
        {
            ActivatorSound("menu/move", 127);
            SkillChoice++;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            SetSkill(SkillChoice);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            return;
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            return;
        };
        
        Delay(1);
    };
};

acscript ToggleArena()
{
    ArenaActive = !ArenaActive;
    ActivatorSound("misc/secret", 127);
    
    SetFont("BIGFONT");
    
    if (ArenaActive)
        HudMessage("Arena Active\n", HUDMSG_FADEOUT, 1, CR_GREEN, 0.5, 0.5, 2.0, 1.0)
    else
        HudMessage("Arena Inactive\n", HUDMSG_FADEOUT, 1, CR_RED, 0.5, 0.5, 2.0, 1.0);
};

acscript PassArenaLine()
{
    if (ArenaActive)
    {
        Ceiling_LowerToFloor(99, 64);
        ArenaLoop();
    };
};

acscript SelectArenaWave()
{
    ActivatorSound("menu/move", 127);

    if (ArenaMaxWave == 0) ArenaMaxWave = 1;
    WaveChoice = ArenaMaxWave;
    
    Delay(1);

    while (1)
    {
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
        
		// Text
        SetFont("BIGFONT");
        HudMessage("Wave: \cd%d/%d\n", WaveChoice, ArenaMaxWave,
                   HUDMSG_FADEOUT, 1, CR_WHITE, 0.5, 0.5, 0.05, 1.0);
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && WaveChoice > 1)
        {
            ActivatorSound("menu/move", 127);
            WaveChoice--;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && WaveChoice < ArenaMaxWave)
        {
            ActivatorSound("menu/move", 127);
            WaveChoice++;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            if (WaveChoice > 1)
                ArenaWave = WaveChoice - 1
            else
                ArenaWave = 1;
            
            ActivatorSound("menu/move", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            return;
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            return;
        };
        
        Delay(1);
    };
};

acscript PissOffMarines()
{
    SetMusic("Outpost2", 3);
    Thing_Activate(1);
    SetActorProperty(1, APROP_Friendly, 0);
    Thing_Hate(1, 0, 6);
    Thing_ChangeTID(1, 1201);
    
    while (1)
    {
        // You are dead, NO BIG SURPRISE
        if (GetActorProperty(Player.TID, APROP_Health) <= 0)
        {
            SetMusic("Outpost2", 1);
            return;
        };
        
        // Teleport in new Marines
        if ((Timer() % (35 * 10)) == 1)
        {
            SpawnSpot("TeleportFog", 1001, 0, 0);
            SpawnSpotFacing("MarineRandomizer", 1001, 1201);
        };

        Delay(1);
    };
};

acscript TokenConverter()
{
	int StatWorth = 1;
	int StatCapWorth = 10;
	int SkillWorth = 5;
	int InAmount = 1;
	int Amount1;
	int Amount2;
	int MaxAmount;
	int Type;
	int Cost;
	str Text;
	
	// Rank Check
	if (Player.RankLevel == 0)
	{
		SetFont("BIGFONT");
		Print("\cgYou must be at least Rank 1 to use the Token Converter\n");
		ActivatorSound("menu/error", 127);
		return;
	};
	
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	ActivatorSound("menu/move", 127);

	while (1)
	{
		int StatTokens = CheckInventory("StatToken");
		int StatCapTokens = CheckInventory("StatCapToken");
		int SkillTokens = CheckInventory("SkillToken");
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		switch (Type)
		{
			case 0: // Stat -> Skill
				Amount1 = InAmount * SkillWorth;
				Amount2 = InAmount;
				MaxAmount = StatTokens / SkillWorth;
				Cost = 5000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cg%d Stat Tokens \cj-> \cd%d Skill Tokens\n", Cost, Amount1, Amount2);
				break;
			case 1: // Stat -> Stat Cap
				Amount1 = InAmount * StatCapWorth;
				Amount2 = InAmount;
				MaxAmount = StatTokens / StatCapWorth;
				Cost = 1000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cg%d Stat Tokens \cj-> \ck%d Stat Cap Tokens\n", Cost, Amount1, Amount2);
				break;
			case 2: // Skill -> Stat
				Amount1 = InAmount * StatWorth;
				Amount2 = InAmount * SkillWorth;
				MaxAmount = SkillTokens;
				Cost = 25000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cd%d Skill Tokens \cj-> \cg%d Stat Tokens\n", Cost, Amount1, Amount2);
				break;
			case 3: // Skill -> Stat Cap
				Amount1 = InAmount * (StatCapWorth / SkillWorth);
				Amount2 = InAmount;
				MaxAmount = SkillTokens / 2;
				Cost = 12500 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cd%d Skill Tokens \cj-> \ck%d Stat Cap Tokens\n", Cost, Amount1, Amount2);
				break;
			case 4: // Stat Cap -> Stat
				Amount1 = InAmount;
				Amount2 = InAmount * StatCapWorth;
				MaxAmount = StatCapTokens;
				Cost = 25000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\ck%d Stat Cap Tokens \cj-> \cg%d Stat Tokens\n", Cost, Amount1, Amount2);
				break;
			case 5: // Stat Cap -> Skill
				Amount1 = InAmount;
				Amount2 = InAmount * (StatCapWorth / SkillWorth);
				MaxAmount = StatCapTokens;
				Cost = 10000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\ck%d Stat Cap Tokens \cj-> \cd%d Skill Tokens\n", Cost, Amount1, Amount2);
				break;
		};

		// Input
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Type > 0)
		{
			ActivatorSound("menu/move", 127);
			InAmount = 1;
			Type--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Type < 5)
		{
			ActivatorSound("menu/move", 127);
			InAmount = 1;
			Type++;
		};
		if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT)
			&& InAmount > 1)
		{
			ActivatorSound("menu/move", 127);
			InAmount--;
		};
		if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT)
			&& InAmount <= MaxAmount - 1)
		{
			ActivatorSound("menu/move", 127);
			InAmount++;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			str InItem;
			str OutItem;
			
			switch (Type)
			{
				case 0: InItem = "StatToken"; 		OutItem = "SkillToken";		break;
				case 1: InItem = "StatToken"; 		OutItem = "StatCapToken";	break;
				case 2: InItem = "SkillToken"; 		OutItem = "StatToken";		break;
				case 3: InItem = "SkillToken"; 		OutItem = "StatCapToken";	break;
				case 4: InItem = "StatCapToken"; 	OutItem = "StatToken";		break;
				case 5: InItem = "StatCapToken"; 	OutItem = "SkillToken";		break;
			};
			
			if (CheckInventory("Credits") >= Cost)
			{
				if ((Type == 0 || Type == 1) && StatTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
				}
				else if ((Type == 2 || Type == 3) && SkillTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
				}
				else if ((Type == 4 || Type == 5) && StatCapTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
				}
				else
					ActivatorSound("menu/error", 127);
			}
			else
				ActivatorSound("menu/error", 127);
		};
		if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
		{
			ActivatorSound("menu/move", 127);
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			return;
		};
		
		// Drawing
		SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
		PrintSprite("TOKAA0", 0, 16.1, 188.1, 0.05);
		PrintSprite("TOKBA0", 0, 16.1, 208.1, 0.05);
		PrintSprite("TOKCA0", 0, 16.1, 228.1, 0.05);
		SetFont("BIGFONT");
		HudMessage("%d\n", StatTokens, 		HUDMSG_PLAIN, 0, CR_RED,  			40.1, 178.0, 0.05);
		HudMessage("%d\n", StatCapTokens, 	HUDMSG_PLAIN, 0, CR_YELLOW,  		40.1, 198.0, 0.05);
		HudMessage("%d\n", SkillTokens, 	HUDMSG_PLAIN, 0, CR_DARKGREEN,		40.1, 218.0, 0.05);
		SetFont("SMALLFONT");
		HudMessage("%s\n", Text, HUDMSG_PLAIN, 0, CR_WHITE, 140.1, 178.0, 0.05);

		Delay(1);
	};
};

// Credit Room Script
acscript CreditRoom(int ID)
{
	if (ID == 1) // Enter
		SetMusic("Credits");
	if (ID == 2) // Exit
		SetMusic("Outpost");
	
	if (ID == 3) // Kyle873 - That's me!
	{
		SetFont("BIGFONT");
		HudMessage("Kyle873\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		SetFont("SMALLFONT");
		HudMessage("What do you mean I can't nerf XP Gain to 1 per monster?!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		
		int RealCredits = CheckInventory("Credits");
		
		Delay(35 * 3);
		ActivatorSound("credits/payout", 127);
		Log("\ckYou have been paid -2147483648 by the UAC!\n");
		TakeInventory("Credits", RealCredits);
		Delay(35 * 10);
		GiveInventory("Credits", RealCredits);
	};
	
	if (ID == 4) // Lord Misfit
	{
		SetFont("BIGFONT");
		HudMessage("Lord Misfit\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		SetFont("SMALLFONT");
		HudMessage("I swear it's a real bug this time!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		
		str VarString = "SetVar";
		
		Delay(35 * 3);
		for (int i = 0; i < 100; i++)
		{
			if (Random(1, 3) == 1) VarString = StrParam("%s%s\n", VarString, "Var");
			HudMessage("%s\n", VarString, HUDMSG_FADEOUT, 0, Random(1, 21), RandomFixed(0.0, 1.0), RandomFixed(0.0, 1.0), 3.0, 2.0);
			Delay(1);
		};
	};
	
	if (ID == 5) // Ryan Cordell
	{
		SetFont("BIGFONT");
		HudMessage("Ryan Cordell\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 7.0, 2.0);
		Delay(35);
		
		for (int i = 0; i < 10; i++)
		{
			ActivatorSound("weapons/rocklx", 127);
			Delay(Random(5, 10));
		};
		
		Delay(35 * 2);
		SetFont("SMALLFONT");
		HudMessage("Did I do that?\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
	};
	
	if (ID == 6) // marrub
	{
		SetFont("BIGFONT");
		HudMessage("marrub\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("I HOPE YOU LIKE SHOTGUNS!\n", HUDMSG_FADEOUT, 0, CR_BRICK, 0.5, 0.55, 3.0, 2.0);
		Delay(35 * 2);
		
		for (int i = 0; i < 50; i++)
		{
			DropItem(0, "DumbShotgun", 1, 255);
			Delay(1);
		};
	};

	if (ID == 7) // Kate
	{
		SetFont("BIGFONT");
		HudMessage("Kate\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("\cgR\ciA\ckI\cdN\chB\ctO\caW\cjS\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		Delay(35);
		
		FadeTo(255, 0, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 128, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 255, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 255, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(128, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 255, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 0, 0, 0.0, 0.5);
	};
	
	if (ID == 8) // Yholl
	{
		SetFont("BIGFONT");
		HudMessage("Yholl\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("\caYour suffering pleases me\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		Delay(35);
		
		for (int i = 0; i < 50; i++)
		{
			DropItem(0, "DumbPistol", 1, 255);
			Delay(1);
		};
	};
};
