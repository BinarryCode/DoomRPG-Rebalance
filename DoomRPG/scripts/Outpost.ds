#include "RPG.dh"

#include "Arena.dh"
#include "Augs.dh"
#include "ItemData.dh"
#include "Map.dh"
#include "Menu.dh"
#include "Minigame.dh"
#include "Mission.dh"
#include "Outpost.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Utils.dh"

// Globals
static int OutpostNotoriety;

// Spawn Spots and TIDs
int ShopSpecialTID = 1001;
int SecretTeleportTID = 1010;
int MarineSpotTID = 1300;
int NotorietySpotTID = 1301;
int MarineTID = 1400;
int MarineMaxTID = 1419;
int MarineBossTID = 1421;
int TurretTID = 1450;
int BossSpotTID = 1475;
int ForcefieldID = 1500;
int ForcefieldGeneratorID = 1501;
int GeneratorTID = 1510;
int EntrySectorID = 200;
int HallTeleportSpotID = 1601;
int CameraTID = 1700;
int RiftSpotTID = 1800;

// Timers
int ForcefieldTimer = 35 * 60 * GameSkill(); // 1 Minute per skill level

// Choices
int LevelChoice = 0;
int SkillChoice = 0;
int WaveChoice = 1;

// Flags
bool MarinesHostile = false;
bool PowerOut = false;
bool BossDead = false;
bool Invasion = false;

acscript void EnterOutpost()
{
    SetHudSize(320, 240, true);
    InBase = true;
    
    // Assign the current level to the level choice
    LevelChoice = LastVisitedLevel;
    
    // Use alternate music if you have a high Notoriety
    if (OutpostNotoriety >= 3)
        SetOutpostMusic(OUTPOST_MUSIC_NORMAL, false, 2);
    
    // Assign the current skill level to the skill choice
    SkillChoice = GameSkill() - 1;
    
    // Set the current wave to the max wave
    ArenaWave = ArenaMaxWave;
    
    // Spawn the Shop Special item
    SpawnShopSpecialItem();
    
    // Make the Portable Turret not attack Outpost Turrets
    SetActorProperty(TurretTID, APROP_Friendly, true);
    
    // Boss Placement
    PlaceBoss();
    
    // Get new Missions
    PopulateMissions();
    
    // Title map handling
    if (InTitle)
    {
        ChangeCamera(CameraTID, true, false);
        Thing_Activate(CameraTID);
        Delay(35 * Random(3, 5));
        PissOffMarines(false);
        
        ActivatorSound("misc/skillchange", 127);
        if (CompatMode == COMPAT_DRLA)
            AmbientSound("spiderovermind/laugh", 127);
        
        while (InTitle)
        {
            PrintSpritePulse("M_DOOM", 1, 160.0 + 8.0, 80.0 - 8.0, 0.75, 64.0, 0.25);
            Delay(1);
        };
    };
};

acscript void RegenArea(int ID)
{
    // If you're dead, terminate
    if (GetActorProperty(0, APROP_Health) <= 0) return;
    
    // Health
    if (ID == OREGEN_HEALTH)
    {
        int HealthCharges;
        bool DoMessage = false;
        
        if (CheckInventory("DRPGCredits") > 0 && Player.ActualHealth < Player.HealthMax)
        {
            HealthCharges = Player.HealthMax - Player.ActualHealth;
            if (HealthCharges > CheckInventory("DRPGCredits"))
                HealthCharges = CheckInventory("DRPGCredits");
            
            AddHealthDirect(HealthCharges, 100);
            TakeInventory("DRPGCredits", HealthCharges);
            DoMessage = true;
        };
        
        if (CheckInventory("DRPGCredits") >= 5 && Player.Toxicity > 0)
        {
            HealthCharges = Player.Toxicity;
            if (HealthCharges > CheckInventory("DRPGCredits") / 5)
                HealthCharges = CheckInventory("DRPGCredits") / 5;
            
            ClearToxicityMeter();
            Player.Toxicity -= HealthCharges;
            TakeInventory("DRPGCredits", HealthCharges * 5);
            DoMessage = true;
        };
        
        if (CheckInventory("DRPGCredits") >= 50 && HaveStatusEffect())
        {
            ClearStatusEffects();
            TakeInventory("DRPGCredits", 50);
            DoMessage = true;
        };
        
        if (DoMessage)
        {
            SetFont("BIGFONT");
            HudMessage("Health restored\n", HUDMSG_FADEOUT, 0, CR_BRICK, 0.5, 0.33, 2.0, 0.5);
            FadeRange(255, 0, 0, 0.5, 255, 0, 0, 0.0, 1.0);
            ActivatorSound("regen/health", 127);
        };
    };
    
    // Armor
    if (ID == OREGEN_ARMOR)
    {
        if (CheckInventory("Armor") >= GetArmorInfo(ARMORINFO_SAVEAMOUNT))
            return;
        
        int ArmorPercent = CheckInventory("Armor") * 100 / GetArmorInfo(ARMORINFO_SAVEAMOUNT);
        int ArmorFee = (ArmorPercent / 5) * 5;
        if (ArmorFee < 5)
            ArmorFee = 5;
        
        if (CheckInventory("DRPGCredits") < ArmorFee)
        {
            SetFont("BIGFONT");
            HudMessage("You need %d credits to repair armor\n", ArmorFee, HUDMSG_FADEOUT, 1, CR_RED, 0.5, 0.33, 2.0, 0.5);
            ActivatorSound("menu/error", 127);
            return;
        };
        
        GiveInventory(GetArmorInfoString(ARMORINFO_CLASSNAME), 1);
        TakeInventory("DRPGCredits", ArmorFee);
        
        SetFont("BIGFONT");
        HudMessage("Armor repaired\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.33, 2.0, 0.5);
        FadeRange(0, 255, 0, 0.5, 0, 255, 0, 0.0, 1.0);
        ActivatorSound("regen/armor", 127);
    };
    
    // EP (and Shields)
    if (ID == OREGEN_EP)
    {
        // Holding Run will restore your Shield capacity
        if (GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_SPEED && CheckShieldValid())
        {
            if (CheckInventory("DRPGCredits") < 1 || Player.Shield.Charge >= Player.Shield.Capacity) return;
            
            int ShieldCharges = (Player.Shield.Capacity - Player.Shield.Charge) / 5;
            if (Player.Shield.Charge % 5 > 0)
                ShieldCharges++;
            if (CheckInventory("DRPGCredits") < ShieldCharges)
                ShieldCharges = CheckInventory("DRPGCredits");
            
            int ShieldGive = ShieldCharges * 5;
            
            if (Player.Shield.Charge + ShieldGive > Player.Shield.Capacity)
                ShieldGive = Player.Shield.Capacity - Player.Shield.Charge;
            
            Player.Shield.Charge += ShieldGive;
            
            TakeInventory("DRPGCredits", ShieldCharges);
            
            SetFont("BIGFONT");
            HudMessage("Shield restored\n", HUDMSG_FADEOUT, 0, CR_CYAN, 0.5, 0.33, 2.0, 0.5);
            FadeRange(0, 255, 255, 0.5, 0, 255, 255, 0.0, 1.0);
            ActivatorSound("regen/shield", 127);
        }
        else
        {
            if (CheckInventory("DRPGCredits") < 1 || Player.EP >= Player.EPMax) return;
            
            int EPCharges = (Player.EPMax - Player.EP) / 5;
            if (Player.EP % 5 > 0)
                EPCharges++;
            if (CheckInventory("DRPGCredits") < EPCharges)
                EPCharges = CheckInventory("DRPGCredits");
            
            int EPGive = EPCharges * 5;
            
            if (Player.EP + EPGive > Player.EPMax)
                EPGive = Player.EPMax - Player.EP;
            
            Player.EP += EPGive;
            
            TakeInventory("DRPGCredits", EPCharges);
            
            SetFont("BIGFONT");
            HudMessage("EP restored\n", HUDMSG_FADEOUT, 0, CR_LIGHTBLUE, 0.5, 0.33, 2.0, 0.5);
            FadeRange(0, 255, 255, 0.5, 0, 255, 255, 0.0, 1.0);
            ActivatorSound("regen/ep", 127);
        };
    };
    
    // Augmentation Battery
    if (ID == OREGEN_AUG)
    {
        if (CheckInventory("DRPGCredits") < 10 || Player.Augs.Battery >= Player.Augs.BatteryMax) return;
        
        int BatteryCharges = Player.Augs.BatteryMax - Player.Augs.Battery;
        if (CheckInventory("DRPGCredits") / 10 < BatteryCharges)
            BatteryCharges = CheckInventory("DRPGCredits") / 10;
        
        AddBattery(BatteryCharges);
        TakeInventory("DRPGCredits", BatteryCharges * 10);
        
        if (Player.Augs.BatteryMax - Player.Augs.Battery < 1 && Player.Augs.BatteryMax - Player.Augs.Battery > 0)
            AddBattery(1); // One more to get rid of the fraction-of-a-percent
        
        SetFont("BIGFONT");
        HudMessage("Augmentation Battery Recharged\n", HUDMSG_FADEOUT, 0, CR_YELLOW, 0.5, 0.33, 2.0, 0.5);
        FadeRange(255, 255, 0, 0.5, 255, 255, 0, 0.0, 1.0);
        ActivatorSound("regen/battery", 127);
    };
};

acscript void LevelTransport()
{
    // if you're already in a menu, terminate
    if (Player.InMenu || Player.InShop || Player.OutpostMenu == OMENU_LEVELTRANSPORT) return;
    
    // If the Marines are hostile and the bosses aren't dead, terminate
    if (MarinesHostile && ThingCount(0, MarineBossTID) > 0) return;
    
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    Player.OutpostMenu = OMENU_LEVELTRANSPORT;
    
    SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
    
    while (true)
    {
        // Stop Underflow
        if (LevelChoice < 0)
            LevelChoice = 0;
        
        // And Overflow
        if (LevelChoice >= KnownLevels.Position)
            LevelChoice = KnownLevels.Position - 1;
        
        LevelInfo *TeleDest = &((LevelInfo *)KnownLevels.Data)[LevelChoice];
        
        // Text
        SetFont("BIGFONT");
        HudMessage("Level Transporter\n", HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 32.1, 32.1, 0.05, 0.5);
        
        int TitleColor = CR_GOLD;
        if (TeleDest->NeedsRealInfo || !(TeleDest->Completed))
            TitleColor = CR_RED
        else if (TeleDest->AllBonus)
            TitleColor = CR_GREEN;
        HudMessage("%s\n", TeleDest->NiceName, HUDMSG_FADEOUT, MENU_ID + 1, TitleColor, 32.1, 64.1, 0.05, 0.5);
        SetFont("SMALLFONT");
        HudMessage("%s\n", TeleDest->LumpName, HUDMSG_FADEOUT, MENU_ID + 2, CR_ORANGE, 32.1, 80.1, 0.05, 0.5);
        
        if (!TeleDest->NeedsRealInfo)
        {
            int KillColor = CR_BRICK;
            if (TeleDest->KillBonus && Timer() & 16)
                KillColor = CR_GREEN;
            int ItemColor = CR_LIGHTBLUE;
            if (TeleDest->ItemsBonus && Timer() & 16)
                ItemColor = CR_GREEN;
            int SecretColor = CR_YELLOW;
            if (TeleDest->SecretsBonus && Timer() & 16)
                SecretColor = CR_GREEN;
            int ParColor = CR_GOLD;
            if (TeleDest->ParBonus && TeleDest->Par > 0 && Timer() & 16)
                ParColor = CR_GREEN;
            
            if (TeleDest->MaxTotalMonsters > 0)
                HudMessage("Kills: %d / %d (%d%%)\n", TeleDest->MaxMonstersKilled, TeleDest->MaxTotalMonsters, TeleDest->MaxMonsterPercentage, HUDMSG_FADEOUT, MENU_ID + 3, KillColor, 32.1, 96.1, 0.05, 0.5);
            if (TeleDest->MaxTotalItems > 0)
                HudMessage("Items: %d / %d (%d%%)\n", TeleDest->MaxItemsFound, TeleDest->MaxTotalItems, TeleDest->MaxItemPercentage, HUDMSG_FADEOUT, MENU_ID + 4, ItemColor, 32.1, 104.1, 0.05, 0.5);
            if (TeleDest->MaxTotalSecrets > 0)
                HudMessage("Secrets: %d / %d (%d%%)\n", TeleDest->MaxSecretsFound, TeleDest->MaxTotalSecrets, TeleDest->MaxSecretPercentage, HUDMSG_FADEOUT, MENU_ID + 5, SecretColor, 32.1, 112.1, 0.05, 0.5);
            
            if (TeleDest->Par > 0)
                HudMessage("Par Time: %s\n", FormatTime(TeleDest->Par * 35), HUDMSG_FADEOUT, MENU_ID + 6, ParColor, 32.1, 128.1, 0.05, 0.5);
            if (TeleDest->ShortestTime < 0x7FFFFFFF)
                HudMessage("Completion Time: %s\n", FormatTime(TeleDest->ShortestTime * 35), HUDMSG_FADEOUT, MENU_ID + 7, ParColor, 32.1, 136.1, 0.05, 0.5)
            else
                HudMessage("Completion Time: \c[Red]N/A\n", HUDMSG_FADEOUT, MENU_ID + 7, ParColor, 32.1, 136.1, 0.05, 0.5);
            
            SetFont("BIGFONT");
            str AreaText = "No anomalies detected";
            switch (TeleDest->Event)
            {
            case MAPEVENT_NONE:
            default:
                break;
            case MAPEVENT_MEGABOSS:
                AreaText = "\c[Grey]Detected: Unknown Hostile Lifeform (Megaboss)\n\cgUse extreme caution when engaging target.\c-\nA quarantine has been issued for this area.";
                break;
            case MAPEVENT_TOXICHAZARD:
                AreaText = StrParam("\c[DarkGreen]Detected: High Radiation Levels (Environmental Hazard)\c-\n\cdHazard level: %d\c-\nPlease wear protective clothing when traversing this location.\n", TeleDest->HazardLevel);
                break;
            case MAPEVENT_NUCLEARBOMB:
                AreaText = "\c[Orange]Detected: Area-Destruction Device (Thermonuclear Bomb)\c-\nDo not stay within the detonation area.";
                break;
            case MAPEVENT_LOWPOWER:
                AreaText = "\c[Red]Detected: Electrical Grid Malfunction (Low Power)\c-\nPlease contact the maintenance team for replacement power cell.";
                break;
            case MAPEVENT_ALLAURAS:
                AreaText = "\c[Yellow]Detected: Abnormal Energy Signature (All Auras)\c-\nThreat levels have increased within this area.";
                break;
            case MAPEVENT_ONEMONSTER:
                AreaText = StrParam("\c[LightBlue]Detected: Anomalous Lifeform Distribution (One-Monster)\n\c[Red]Last seen: %s\n", TeleDest->SelectedMonster->Name);
                break;
            case MAPEVENT_HELLUNLEASHED:
                AreaText = "\c[Brick]Detected: Active Battle Front (Hell Unleashed)\n\cgTake preparatory measures before engaging the enemy.";
                break;
            case MAPEVENT_HARMONIZEDAURAS:
                AreaText = "\c[Green]Detected: Stable Demonic Energy Signature (Harmonized Destruction)\c-\nThreat levels have increased within this area.";
                break;
            case MAPEVENT_BONUS_RAINBOWS:
                AreaText = "\c[Grey]Detected: Internal Software Failure (\c[Red]R\c[Orange]A\c[Yellow]I\c[Green]N\c[Cyan]B\c[Blue]O\c[Purple]W\c[Brick]S\c[Grey])\n    \c[Brick]Kupo?";
                break;
            case MAPEVENT_SKILL_HELL:
                AreaText = "\c[Red]Detected: Internal Mechanism Corruption (Hell!)";
                break;
            case MAPEVENT_SKILL_ARMAGEDDON:
                AreaText = "\c[Grey]Detected: Internal Mechanism Corruption (Armageddon!)";
                break;
            };
            
            HudMessage("Area Status\n", HUDMSG_FADEOUT, MENU_ID + 8, CR_GREEN, 32.1, 152.1, 0.05, 0.5);
            SetFont("SMALLFONT");
            HudMessage("%s\n", AreaText, HUDMSG_FADEOUT, MENU_ID + 9, CR_WHITE, 32.1, 168.1, 0.05, 0.5);
        };
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && LevelChoice > 0)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice--;
        };
        if (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT && LevelChoice > 0)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice -= 10;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && LevelChoice < KnownLevels.Position - 1)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice++;
        };
        if (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT && LevelChoice < KnownLevels.Position - 1)
        {
            ActivatorSound("menu/move", 127);
            LevelChoice += 10;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            // Special handling for Marine Hostility and Emergency Power
            if (MarinesHostile || PowerOut)
            {
                bool IsTechnician = (CompatMode == COMPAT_DRLA && PlayerClass(PlayerNumber()) == 2);
                int TransportTimerMax = (35 * (5 + GameSkill() + PlayerCount())) / (IsTechnician ? 2 : 1);
                int TransportTimer = TransportTimerMax;
                
                // Setup power transfer
                SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
                SetPlayerProperty(0, 1, PROP_FROZEN);
                Player.OutpostMenu = 0;
                PlaySound(0, "transfer/loop", CHAN_BODY, 1.0, true, ATTN_NORM);
                
                // Power transfer loop
                while (TransportTimer > 0)
                {
                    // Calculate percentage complete and input
                    int TransportPercent = (int)Abs(100 - ((fixed)TransportTimer / (fixed)TransportTimerMax) * 100.0);
                    Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
                    
                    // Transfer is cancelled either by death or input
                    if (GetActorProperty(0, APROP_Health) <= 0 || Buttons & BT_SPEED)
                    {
                        PlaySound(0, "transfer/fail", CHAN_BODY, 1.0, false, ATTN_NORM);
                        SetPlayerProperty(0, 0, PROP_FROZEN);
                        return;
                    };
                    
                    // Draw transfer bar
                    DrawProgressBar("Transferring Power", TransportPercent);
                    
                    // Decrement timer
                    TransportTimer--;
                    Delay(1);
                };
                
                PlaySound(0, "transfer/complete", CHAN_BODY, 1.0, false, ATTN_NORM);
                Delay(10);
            };
            
            Player.OutpostMenu = 0;
            
            SpawnForced("DRPGTransportEffect", GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
            ActivatorSound("misc/transport", 96);
            
            Delay(35 * 2);
            
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            SetPlayerProperty(0, 0, PROP_FROZEN);
            InBase = false;
            Transported = true;
            
            if (BossDead)
                OutpostNotoriety++;
            
            ChangeLevel(TeleDest->LumpName, 0, CHANGELEVEL_NOINTERMISSION, -1);
            
            break;
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        Delay(1);
    };
};

acscript void SkillComputer()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // Terminate if you aren't the Arbitrator
    if (InMultiplayer && !Arbitrator) return;
    
    // if you're already in a menu, terminate
    if (Player.InMenu || Player.InShop || Player.OutpostMenu == OMENU_SKILLCOMPUTER) return;
    
    ActivatorSound("misc/edgar", 127);
    
    Player.OutpostMenu = OMENU_SKILLCOMPUTER;
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    while (true)
    {
        // Draw the background
        if (GetCVar("drpg_menudim"))
            FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);

        // Text
        SetFont("BIGFONT");
        HudMessage("Skill Level: \cj%d (%s\cj)\n", SkillChoice + 1, SkillLevels[SkillChoice],
                   HUDMSG_FADEOUT, MENU_ID, CR_GOLD, 0.5, 0.5, 0.05, 0.5);
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && SkillChoice > 0)
        {
            ActivatorSound("menu/move", 127);
            SkillChoice--;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && SkillChoice < (CompatMode == COMPAT_DRLA ? 5 : 4))
        {
            ActivatorSound("menu/move", 127);
            SkillChoice++;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            SetSkill(SkillChoice);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        Delay(1);
    };
};

acscript void ToggleArena()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // If you try to toggle the Arena and you aren't the Arena Arbitrator, terminate
    if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;
    
    ArenaActive = !ArenaActive;
    
    SetFont("BIGFONT");
    
    if (ArenaActive)
    {
        ActivatorSound("arena/activate", 127);
        HudMessage("Arena Active\n", HUDMSG_FADEOUT, MENU_ID, CR_GREEN, 0.5, 0.5, 2.0, 1.0);
        ArenaPlayerNumber = PlayerNumber();
        SetOutpostMusic(OUTPOST_MUSIC_COMBAT);
    }
    else
    {
        ActivatorSound("arena/deactivate", 127);
        HudMessage("Arena Inactive\n", HUDMSG_FADEOUT, MENU_ID, CR_RED, 0.5, 0.5, 2.0, 1.0);
        ArenaPlayerNumber = -1;
        ResetOutpostMusic(false);
    };
};

acscript void PassArenaLine()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;
    
    if (ArenaActive)
    {
        Ceiling_LowerToFloor(99, 64);
        ArenaLoop();
    };
};

acscript void SelectArenaWave()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // if you're already in a menu, terminate
    if (Player.OutpostMenu == OMENU_MODULECONVERTER) return;
    
    if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;

    ActivatorSound("menu/move", 127);
    Player.OutpostMenu = OMENU_WAVESELECTOR;

    WaveChoice = ArenaMaxWave;
    
    Delay(1);

    while (true)
    {
        SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
        
        // Draw the background
        if (GetCVar("drpg_menudim"))
            FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
        // Text
        SetFont("BIGFONT");
        HudMessage("Wave: \cd%d\c-/\cd%d\n", WaveChoice, ArenaMaxWave,
                   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 0.5, 0.5, 0.05, 1.0);
        
        // Input
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

        if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && WaveChoice > 1)
        {
            ActivatorSound("menu/move", 127);
            WaveChoice--;
        };
        if (Buttons == BT_BACK && OldButtons != BT_BACK && WaveChoice < ArenaMaxWave)
        {
            ActivatorSound("menu/move", 127);
            WaveChoice++;
        };
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
            (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
        {
            ActivatorSound("menu/move", 127);
            WaveChoice -= 10;
            if (WaveChoice <= 0) WaveChoice = 1;
        };
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
            (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
        {
            ActivatorSound("menu/move", 127);
            WaveChoice += 10;
            if (WaveChoice > ArenaMaxWave) WaveChoice = ArenaMaxWave;
        };
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            if (WaveChoice > 1)
                ArenaWave = WaveChoice - 1
            else
                ArenaWave = 1;
            
            ActivatorSound("menu/move", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        Delay(1);
    };
};

acscript void PissOffMarines(bool Steal)
{
    int ForcefieldState;
    
    // If the Marines are already hostile, terminate
    if (MarinesHostile) return;
    
    // Set flag
    MarinesHostile = true;
    
    // Demotion
    if (Player.RankLevel > 0 && Steal)
        Player.Rank = RankTable[Player.RankLevel - 2];
    
    // Iterate Marines pre-Delay
    if (Steal)
        for (int i = MarineTID; i <= MarineMaxTID; i++)
        {
            // Sight Alert
            if (CheckSight(i, 0, 0))
            {
                PlaySound(i, "drpgmarines/shopkeephatred", 0, 1.0, false, ATTN_NORM);
                SpawnForced("DRPGAlertIcon", GetActorX(i), GetActorY(i), GetActorZ(i) + GetActorPropertyFixed(i, APROP_Height) + 4.0, 0, 0);
            };
        };
    
    Delay(35 * 2);
    
    // Pick combat music from Arena selection
    SetOutpostMusic(OUTPOST_MUSIC_COMBAT);
    
    // Remove Friendly flag from turrets
    if (!InTitle)
        SetActorProperty(TurretTID, APROP_Friendly, false);
    
    // Iterate Marines post-Delay
    for (int i = MarineTID; i <= MarineMaxTID; i++)
    {
        // Remove Friendly flag
        if (!InTitle)
            SetActorProperty(i, APROP_Friendly, false);
        
        // Enrage Marines
        if (GetActorProperty(i, APROP_Health) > 0 && !InTitle)
            SetActorState(i, "Enraged", false);
        
        // Give Credits to Marines
        SetActorInventory(i, "DRPGCredits", Random(10, 1000));
    };
    
    // Enrage Turrets
    if (ClassifyActor(TurretTID) & ACTOR_ALIVE && !InTitle)
    {
        SetActorState(TurretTID, "Enraged", false);
        
        // Power-down Turrets for Large Powersuit
        if (OutpostNotoriety >= 3)
            SetActorState(TurretTID, "PoweredDown", false);
    };
    
    // Enrage placeholder bosses
    if (!InTitle)
        SetActorState(MarineBossTID - 1, "Enraged", false);
    
    // Sector Lighting
    for (int i = 0; i <= MAX_OUTPOST_ID; i++)
    {
        Sector_SetColor(i, 255, 0, 0, 0);
        Light_Glow(i, 160, 192, 30);
    };
    
    // Start the Alarm loop
    AlarmLoop();
    
    // Boss Spawning
    if (!InTitle) // These guys were absolutely massacring the monsters, ruining the cinematics
        SpawnBoss();
    
    // Raise Entry Forcefield
    if (!InTitle)
    {
        Line_SetBlocking(ForcefieldGeneratorID, BLOCKF_EVERYTHING | BLOCKF_SIGHT | BLOCKF_HITSCAN, 0);
        SetLineTexture(ForcefieldGeneratorID, SIDE_FRONT, TEXTURE_MIDDLE, "FORCEFIE");
        SpawnSpotForced("TeleportFog", GeneratorTID, 0, 0);
        SpawnSpotForced("DRPGForcefieldGenerator", GeneratorTID, GeneratorTID, 0);
    };
    
    // Title Map Handling
    if (InTitle)
    {
        // Create Hell Rifts
        SpawnSpotForced("DRPGTeleportRift", RiftSpotTID, RiftSpotTID, 0);
        
        Thing_Hate(TurretTID, RiftSpotTID + 1, 6);
        SetActorState(TurretTID, "Enraged", false);
        
        // Alert the Marines
        for (int i = MarineTID; i <= MarineMaxTID; i++)
            SetActorState(i, "See", false);
    };
    
    // Synchronize delay with SpawnBoss()
    if (OutpostNotoriety >= 3)
        Delay(35 * 30);
    
    // Loop
    while (true)
    {
        // Move all players outside the entry sector
        if (!BossDead && !InTitle)
            for (int i = 0; i < MAX_PLAYERS; i++)
                if (ThingCountSector(0, Players(i).TID, EntrySectorID) > 0)
                    TeleportOther(Players(i).TID, HallTeleportSpotID + i, true);
        
        // Spawn Reinforcements
        if ((Timer() % (35 * 10)) == 0 && OutpostNotoriety <= 2)
        {
            SpawnSpotForced("TeleportFog", MarineSpotTID, 0, 0);
            
            if (InTitle)
            {
                for (int i = HallTeleportSpotID; i < HallTeleportSpotID + 8; i++)
                {
                    SpawnSpotForced("TeleportFog", i, 0, 0);
                    if (CompatMode == COMPAT_DRLA)
                        SpawnSpotFacingForced("DRPGMarineReinforcementDRLASpawner", i, MarineTID)
                    else
                        SpawnSpotFacingForced("DRPGMarineReinforcementSpawner", i, MarineTID);
                };
            }
            else
            {
                if (OutpostNotoriety == 2) // Special handling for Chasing Minigunners
                    SpawnSpotFacingForced("DRPGMarineMinigunHuntingYerAss", MarineSpotTID, MarineTID)
                else
                    if (CompatMode == COMPAT_DRLA)
                        SpawnSpotFacingForced("DRPGMarineReinforcementDRLASpawner", MarineSpotTID, MarineTID)
                    else
                        SpawnSpotFacingForced("DRPGMarineReinforcementSpawner", MarineSpotTID, MarineTID);
                
                if (!InTitle)
                    SetActorProperty(MarineTID, APROP_Friendly, false);
            };
        };
        
        // Make the Marines fight enemies in title map
        if (InTitle)
        {
            for (int i = MarineTID; i <= MarineMaxTID; i++)
            {
                SetActorProperty(i, APROP_Friendly, true);
                Thing_ChangeTID(i, MarineTID);
            };
            
            SetActorProperty(MarineBossTID, APROP_Friendly, true);
            Thing_Hate(RiftSpotTID + 1, MarineTID, 6);
        };
        
        // Boss Timer
        if (ForcefieldTimer > 0 && OutpostNotoriety == 2)
        {
            // Set completion state on the Shield Generator
            SetActorState(GeneratorTID, StrParam("%dPowerLoop\n", ForcefieldTimer / ((35 * 60 * GameSkill()) / 7)), false);
            
            // Decrement timer
            ForcefieldTimer--;
        };
        
        // Different checks for specific Notoriety levels
        if (ForcefieldState == 0)
            if (OutpostNotoriety == 2 && ForcefieldTimer <= 0)
                ForcefieldState = 1
            else if (OutpostNotoriety != 2 && ThingCount(0, MarineBossTID) <= 0)
                ForcefieldState = 1;
        
        // Bosses are dead or boss timer expires
        if (ForcefieldState == 1)
        {
            AmbientSound("misc/poweroff", 127);
            
            // Disable Entry Forcefield
            Line_SetBlocking(ForcefieldGeneratorID, 0, BLOCKF_EVERYTHING | BLOCKF_SIGHT | BLOCKF_HITSCAN);
            SetLineTexture(ForcefieldGeneratorID, SIDE_FRONT, TEXTURE_MIDDLE, "");
            SetActorState(GeneratorTID, "Death", false);
            
            // Boss is dead
            BossDead = true;
            ForcefieldState = 2;
        };
        
        Delay(1);
    };
};

// TODO
acscript void ModuleConverter()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // if you're already in a menu, terminate
    if (Player.InMenu || Player.InShop || Player.OutpostMenu == OMENU_MODULECONVERTER) return;
};

// Credit Room Script
acscript void CreditRoom(int ID)
{
    if (ID == 1) // Enter
        SetOutpostMusic(OUTPOST_MUSIC_CREDITS, true);
    if (ID == 2) // Exit
        ResetOutpostMusic(true);
    
    if (ID == 3) // Kyle873 - That's me!
    {
        SetFont("BIGFONT");
        HudMessage("Kyle873\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        SetFont("SMALLFONT");
        HudMessage("What do you mean I can't nerf XP Gain to 1 per monster?!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);

        int RealCredits = CheckInventory("DRPGCredits");
        
        ActivatorSound("credits/payout", 127);
        Log("\ckYou have been paid -2147483648 by the UAC!\n");
        TakeInventory("DRPGCredits", RealCredits);
        Delay(35 * 10);
        GiveInventory("DRPGCredits", RealCredits);
    };
    
    if (ID == 4) // Lord Misfit
    {
        SetFont("BIGFONT");
        HudMessage("Lord Misfit\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        SetFont("SMALLFONT");
        HudMessage("I swear it's a real bug this time!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
        
        str VarString = "SetVar";
        
        Delay(35 * 3);
        for (int i = 0; i < 100; i++)
        {
            if (Random(1, 3) == 1) VarString = StrParam("%s%s\n", VarString, "Var");
            HudMessage("%s\n", VarString, HUDMSG_FADEOUT, 0, Random(1, 21), RandomFixed(0.0, 1.0), RandomFixed(0.0, 1.0), 3.0, 2.0);
            Delay(1);
        };
    };
    
    if (ID == 5) // Ryan Cordell
    {
        SetFont("BIGFONT");
        HudMessage("Ryan Cordell\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 7.0, 2.0);
        Delay(35);
        
        for (int i = 0; i < 10; i++)
        {
            ActivatorSound("weapons/rocklx", 127);
            Delay(Random(5, 10));
        };
        
        Delay(35 * 2);
        SetFont("SMALLFONT");
        HudMessage("Did I do that?\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
    };
    
    if (ID == 6) // marrub
    {
        SetFont("BIGFONT");
        HudMessage("marrub\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        HudMessage("I HOPE YOU LIKE SHOTGUNS!\n", HUDMSG_FADEOUT, 0, CR_BRICK, 0.5, 0.55, 3.0, 2.0);
        Delay(35 * 2);
        
        for (int i = 0; i < 50; i++)
        {
            DropItem(0, "DRPGDumbShotgun", 1, 255);
            Delay(1);
        };
    };

    if (ID == 7) // Kate
    {
        SetFont("BIGFONT");
        HudMessage("Kate\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        HudMessage("\cgR\ciA\ckI\cdN\chB\ctO\caW\cjS\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
        Delay(35);
        
        FadeTo(255, 0, 0, 0.5, 0.5);
        Delay(17);
        FadeTo(255, 128, 0, 0.5, 0.5);
        Delay(17);
        FadeTo(255, 255, 0, 0.5, 0.5);
        Delay(17);
        FadeTo(0, 255, 0, 0.5, 0.5);
        Delay(17);
        FadeTo(0, 0, 255, 0.5, 0.5);
        Delay(17);
        FadeTo(128, 0, 255, 0.5, 0.5);
        Delay(17);
        FadeTo(255, 0, 255, 0.5, 0.5);
        Delay(17);
        FadeTo(255, 255, 255, 0.5, 0.5);
        Delay(17);
        FadeTo(0, 0, 0, 0.0, 0.5);
    };
    
    if (ID == 8) // Yholl
    {
        SetFont("BIGFONT");
        HudMessage("Yholl\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
        Delay(35);
        HudMessage("\caYour suffering pleases me\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
        Delay(35);
        
        for (int i = 0; i < 50; i++)
        {
            DropItem(0, "DRPGDumbPistol", 1, 255);
            Delay(1);
        };
    };
};

// Shop Special UI
acscript void ShopSpecial()
{
    // if you're already in a menu, terminate
    if (Player.InMenu || Player.InShop || Player.OutpostMenu == OMENU_SHOPSPECIAL) return;
    
    // If there is no shop special
    if (ShopSpecialItem == GetBlankItem())
    {
        ActivatorSound("menu/error", 127);
        PrintError(StrParam("There is currently no Shop Special item.\n\nNext restock will be in \cj%s\c-.\n", FormatTime(ShopSpecialTimer)));
        return;
    };
    
    // If the shop special was already bought
    if (ShopSpecialBought)
    {
        ActivatorSound("menu/error", 127);
        PrintError(StrParam("Shop Special is currently out of stock.\n\nNext restock will be in \cj%s\c-.\n", FormatTime(ShopSpecialTimer)));
        return;
    };
    
    ActivatorSound("menu/move", 127);
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    Player.OutpostMenu = OMENU_SHOPSPECIAL;
    
    while (true)
    {
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        str Name = ShopSpecialItem->Name;
        int Discount = GetCVar("drpg_shopspecial_discount") + Player.ShopDiscount;
        // Cap the Shop Special Discount at 75%
        if (Discount > 75)
            Discount = 75;
        int Cost = ShopSpecialItem->Price - ((ShopSpecialItem->Price * Discount) / 100);
        
        // If the item's already been bought or the timer expires, terminate
        if (ShopSpecialBought || ShopSpecialTimer <= 0)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        // The cost should always be at least 1 Credit
        if (Cost <= 0) Cost = 1;
        
        // Draw the background
        if (GetCVar("drpg_menudim"))
            FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
        
        // Input
        if (Buttons == BT_USE && OldButtons != BT_USE)
        {
            // Buy Item
            if (CheckInventory("DRPGCredits") >= Cost)
            {
                // DoomRL Compatibility
                str ItemSpawnActor = ShopSpecialItem->Actor;
                if (CompatMode == COMPAT_DRLA)
                    if (ShopSpecialItem->Category == 0) // Weapons
                        ItemSpawnActor = StrParam("%sPickup\n", ItemSpawnActor);
                
                TakeInventory("DRPGCredits", Cost);
                SpawnForced(ItemSpawnActor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
                SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
                ShopSpecialBought = true;
                
                ActivatorSound("credits/payout", 127);
                Delay(1);
                SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
                Player.OutpostMenu = 0;
                return;
            }
            else
            {
                PrintError("You don't have enough Credits to buy this item");
                ActivatorSound("menu/error", 127);
            };
        };
        if (Buttons == BT_SPEED)
        {
            ActivatorSound("menu/move", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
            return;
        };
        
        // Drawing
        SetHudSize(0, 0, false);
        SetFont("BIGFONT");
        HudMessage("%s\n\ck%d C (Discount: %d%%)\n\cdTime Left: %s\n",
                   Name, Cost, Discount, FormatTime(ShopSpecialTimer),
                   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 1.5, 0.5, 0.05, 1.0);
        
        Delay(1);
    };
};

// Mission BBS
acscript void MissionBBS()
{
    int Index;
    int Difficulty;
    
    // If Marines are hostile, terminate
    if (MarinesHostile) return;
    
    // if you're already in a menu, terminate
    if (Player.InMenu || Player.InShop || Player.OutpostMenu == OMENU_BBS) return;

    // Make sure the Rewards List is finished Processing
    if (!RewardsInit || !MissionInit)
    {
        PrintError("The Mission BBS is currently processing requests...");
        ActivatorSound("menu/error", 127);
        return;
    };
    
    // Freeze the Player
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    Player.OutpostMenu = OMENU_BBS;
    
    ActivatorSound("menu/move", 127);
    
    while (Player.OutpostMenu == OMENU_BBS)
    {
        int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
        int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
        MissionInfo *Mission = &Missions[Difficulty][Index];
        
        // Set the HUD Size
        SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
        
        // Title
        SetFont("BIGFONT");
        HudMessage("\cdMission BBS\n\cjDifficulty: (%s\c-)\n", MissionDifficulties[Difficulty], HUDMSG_PLAIN, 0, CR_WHITE, 0.1, 24.1, 0.05);
        
        // Mission Labels
        for (int i = MAX_MISSIONS - 1; i >= 0; i--)
        {
            MissionInfo *MissionIter = &Missions[Difficulty][i];
            
            // Cursor
            if (i == Index)
                PrintSprite("MissBoxH", 0, 0.1 + (i % (MAX_MISSIONS / 3) * 48.0) + Round((Cos((fixed)Timer() / 64.0) * 8.0)), 80.0 + (i / (MAX_MISSIONS / 3) * 48.0) + Round((Sin((fixed)Timer() / 64.0) * 8.0)), 0.05);
            
            // Icon
            PrintSprite(StrParam("BBS_M%d\n", MissionIter->Type + 1), 0, 8.1 + (i % (MAX_MISSIONS / 3) * 48.0), 80.0 + (i / (MAX_MISSIONS / 3) * 48.0), 0.05);
            
            // Box
            PrintSprite("MissBoxB", 0, 0.1 + (i % (MAX_MISSIONS / 3) * 48.0), 80.0 + (i / (MAX_MISSIONS / 3) * 48.0), 0.05);
        };
        
        // Currently selected Mission
        DrawMissionInfo(Mission, 0, 216, false);
        
        // Input
        if (Buttons & BT_FORWARD && !(OldButtons & BT_FORWARD))
        {
            ActivatorSound("menu/move", 127);
            Index -= MAX_MISSIONS / 3;
            if (Index < 0)
            {
                Index = 0;
                if (Difficulty > 0)
                    Difficulty--;
            };
        };
        if (Buttons & BT_BACK && !(OldButtons & BT_BACK))
        {
            ActivatorSound("menu/move", 127);
            Index += MAX_MISSIONS / 3;
            if (Index > MAX_MISSIONS - 1)
            {
                Index = 0;
                if (Difficulty < MAX_DIFFICULTIES - 1)
                    Difficulty++
                else
                    Index = MAX_MISSIONS - 1;
            };
        };
        if (Buttons & BT_MOVELEFT && !(OldButtons & BT_MOVELEFT))
        {
            ActivatorSound("menu/move", 127);
            Index--;
            if (Index < 0)
            {
                Index = 0;
                if (Difficulty > 0)
                    Difficulty--;
            };
        };
        if (Buttons & BT_MOVERIGHT && !(OldButtons & BT_MOVERIGHT))
        {
            ActivatorSound("menu/move", 127);
            Index++;
            if (Index > MAX_MISSIONS - 1)
            {
                Index = 0;
                if (Difficulty < MAX_DIFFICULTIES - 1)
                    Difficulty++
                else
                    Index = MAX_MISSIONS - 1;
            };
        };
        if (Buttons == BT_USE && OldButtons != BT_USE && !Player.Mission.Active)
        {
            ActivatorSound("mission/get", 127);
            Mission->Active = true;
            Player.Mission = *Mission;
            CreateMissionAt(Difficulty, Index);
        };
        if (Buttons == BT_SPEED)
        {
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
            Player.OutpostMenu = 0;
        };
        if (Buttons == BT_ATTACK && OldButtons != BT_ATTACK && Player.Mission.Active)
        {
            ActivatorSound("mission/fail", 127);
            SetFont("BIGFONT");
            SetHudSize(640, 480, false);
            HudMessage("Mission Aborted!\n", HUDMSG_FADEOUT, MISSION_ID, CR_RED, 320.4, 400.0, 3.0, 2.0);
            ClearMission();
        };
        
        Delay(1);
    };
};

// Roulette
acscript void MinigameHandler()
{
    // Return if already in a minigame
    if (Player.InMenu || Player.InShop || Player.InMinigame) return;
    
    SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
    
    // TODO: This will just play Roulette for now
    if (GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_SPEED)
    {
        if (CheckInventory("DRPGChipPlatinum") > 0)
        {
            SetFont("BIGFONT");
            HudMessage("Rare Item Roulette\n", HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.75, 0.75, 0.25);
            TakeInventory("DRPGChipPlatinum", 1);
            Delay(35);
            ItemRoulette(Random(5, MAX_DIFFICULTIES - 1), Random(GameSkill(), GameSkill() * 2), 0);
        }
        else
        {
            PrintError("You need a \cjPlatinum Chip\c- to use the Rare Item Roulette");
            ActivatorSound("menu/error", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
        };
    }
    else
    {
        if (CheckInventory("DRPGChipGold") > 0)
        {
            SetFont("BIGFONT");
            HudMessage("Item Roulette\n", HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.75, 0.75, 0.25);
            TakeInventory("DRPGChipGold", 1);
            Delay(35);
            ItemRoulette(Random(1, 4), Random(GameSkill(), GameSkill() * 2), 0);
        }
        else
        {
            SetFont("BIGFONT");
            PrintError("You need a \cfGold Chip\c- to use the Item Roulette");
            ActivatorSound("menu/error", 127);
            SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
        };
    };
};

// Handles the 6 Key Secret
acscript void OutpostSecret()
{
    if (CheckInventory("DRPGRedCard") && CheckInventory("DRPGYellowCard") && CheckInventory("DRPGBlueCard") &&
        CheckInventory("DRPGRedSkull") && CheckInventory("DRPGYellowSkull") && CheckInventory("DRPGBlueSkull"))
    {
        ActivatorSound("misc/secret", 127);
        Teleport(SecretTeleportTID + PlayerNumber(), false);
    };
};

acscript void PowerOutage()
{
    // If the power is already out, terminate
    if (PowerOut) return;
    
    Delay(10);
    
    PowerOut = true;
    
    // Blackout
    if (!MarinesHostile)
    {
        SetMusic("");
        ActivatorSound("misc/poweroff", 127);
        for (int i = 0; i < MAX_OUTPOST_ID; i++)
            Light_Fade(i, 0, 10);
    };
    
    // Disable Shop Forcefields
    Line_SetBlocking(ForcefieldID, 0, 1023);
    SetLineTexture(ForcefieldID, SIDE_FRONT, TEXTURE_MIDDLE, "");
    
    // Send Turrets into PoweredDown state
    SetActorState(TurretTID, "PoweredDown");
    
    // Randomized delay for the power to come back on
    Delay(Random(35 * 3, 35 * 5));
    
    // Enable Emergency Power
    if (!MarinesHostile)
    {
        if (OutpostNotoriety >= 3)
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, false, 2, 39)
        else
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, false, 1, 4);
        ActivatorSound("misc/poweron", 127);
        for (int i = 0; i < MAX_OUTPOST_ID; i++)
        {
            Sector_SetColor(i, 255, 0, 0, 0);
            Light_Fade(i, 160, 60);
        };
    };
};

acscript void AlarmLoop()
{
    while (true)
    {
        if ((Timer() % 30) == 0)
            AmbientSound("misc/alarm", 127);
        
        Delay(1);
    };
};

acscript void PlaceBoss()
{
    // Minigunners
    if (OutpostNotoriety == 0)
        SpawnSpotFacingForced("DRPGMarineMinigunNotActuallyPeople", BossSpotTID, MarineBossTID - 1);
    
    // Small Powersuit
    if (OutpostNotoriety == 1)
        SpawnSpotFacingForced("DRPGPowerSuitSlackingOffDownstairs", BossSpotTID + 1, MarineBossTID - 1);
    
    // Heavy Marines
    if (OutpostNotoriety == 2)
        SpawnSpotFacingForced("DRPGMarineMinigunNotActuallyPeople", BossSpotTID, MarineBossTID - 1);
    
    // Heavy Powersuit & Heavy Powersuit Mk. II
    if (OutpostNotoriety >= 3)
        SpawnSpotFacingForced("DRPGHeavyPowerSuitHavingASiesta", BossSpotTID + 2, MarineBossTID - 1);
};

acscript void SpawnBoss()
{
    // Minigunners
    if (OutpostNotoriety == 0)
    {
        SpawnSpotForced("TeleportFog", NotorietySpotTID, 0, 0);
        SpawnSpotFacingForced("DRPGMarineMinigun", NotorietySpotTID, MarineBossTID);
    };
    
    // Small Powersuit
    if (OutpostNotoriety == 1)
    {
        SpawnSpotForced("DRPGBigTeleportFog", NotorietySpotTID, 0, 0);
        SpawnSpotFacingForced("DRPGPowerSuit", NotorietySpotTID, MarineBossTID);
    };
    
    // Heavy Marines
    if (OutpostNotoriety == 2)
    {
        SpawnSpotForced("TeleportFog", NotorietySpotTID, 0, 0);
        SpawnSpotFacingForced("DRPGMarineMinigunHuntingYerAss", NotorietySpotTID, MarineBossTID);
    };
    
    // Heavy Powersuit
    if (OutpostNotoriety >= 3)
    {
        // Teleport out guards
        for (int i = MarineTID; i <= MarineMaxTID; i++)
        {
            SpawnSpot("TeleportFog", i, 0, 0);
            Thing_Remove(i);
        };
        
        SetMusic("");
        Delay(35 * 30);
        if (OutpostNotoriety >= 4)
            SetOutpostMusic(OUTPOST_MUSIC_BOSS, false, 2)
        else
            SetOutpostMusic(OUTPOST_MUSIC_BOSS, false, 1);
        
        SpawnSpotForced("DRPGHugeTeleportFog", NotorietySpotTID + 1, 0, 0);
        SpawnSpotFacingForced((OutpostNotoriety >= 4 ? "DRPGSuperPowerSuit" : "DRPGHeavyPowerSuit"), NotorietySpotTID + 1, MarineBossTID);
    };
};

function void SpawnShopSpecialItem()
{
    if (InBase)
    {
        // Remove old item
        Thing_Remove(ShopSpecialTID + 1);
        
        // DoomRL Compatibility
        str ItemSpawnActor = ShopSpecialItem->Actor;
        if (CompatMode == COMPAT_DRLA)
            if (ShopSpecialItem->Category == 0) // Weapons
                ItemSpawnActor = StrParam("%sPickup\n", ItemSpawnActor);
        
        // Spawn new item
        SpawnSpotForced("DRPGTurretTeleport", ShopSpecialTID, 0, 0);
        SpawnSpotForced(ItemSpawnActor, ShopSpecialTID, ShopSpecialTID + 1, 0);
        SetActorProperty(ShopSpecialTID + 1, APROP_Invulnerable, true);
        Thing_SetSpecial(ShopSpecialTID + 1, 80, 8);
    };
};

function void ResetOutpostMusic(bool Local)
{
    if (PowerOut)
    {
        if (OutpostNotoriety >= 3)
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, Local, 2, 4)
        else
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, Local, 1, 4);
    }
    else
    {
        if (OutpostNotoriety >= 3)
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, Local, 2)
        else
            SetOutpostMusic(OUTPOST_MUSIC_NORMAL, Local, 1);
    };
};

function void SetOutpostMusic(int Type, bool Local, int Index, int Pattern)
{
    str Music;
    
    // Normal
    if (Type == OUTPOST_MUSIC_NORMAL)
        Music = StrParam("Outpost%d\n", (Index > 0 ? Index : Random(1, MAX_OUTPOST_MUSIC)));
    
    // Combat
    if (Type == OUTPOST_MUSIC_COMBAT)
    {
        Index = (Index > 0 ? Index : Random(0, MAX_COMBAT_MUSIC));
        Music = StrParam("Arena%d\n", Index);
        
        if (Index == 0)
        {
            Music = "Outpost1";
            Pattern = 3;
        };
    };
    
    // Boss
    if (Type == OUTPOST_MUSIC_BOSS)
        Music = StrParam("Boss%d\n", (Index > 0 ? Index : Random(1, MAX_BOSS_MUSIC)));

    // Credits
    if (Type == OUTPOST_MUSIC_CREDITS)
        Music = StrParam("Credits%d\n", (Index > 0 ? Index : Random(1, MAX_CREDITS_MUSIC)));
    
    if (Local)
        LocalSetMusic(Music, Pattern)
    else
        SetMusic(Music, Pattern);
};
