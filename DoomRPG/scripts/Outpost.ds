#include "Arena.dh"
#include "Globals.dh"
#include "ItemData.dh"
#include "Menu.dh"
#include "Outpost.dh"
#include "RPG.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Utils.dh"

// Spawn Spots and TIDs
int ShopSpecialTID = 1001;
int SecretTeleportTID = 1010;
int MarineSpotTID = 1300;
int MarineMinigunSpotTID = 1302;
int MarineTID = 1400;
int MarineMaxTID = 1419;
int ForcefieldID = 1500;
int TurretTID = 1420;

// Choices
int LevelChoice = 0;
int SkillChoice = 0;
int WaveChoice = 1;

// Flags
bool MarinesHostile = false;
bool PowerOut = false;
bool Invasion = false;

// Base costs for wireless page access
int[ITEM_CATEGORIES] LockerWirelessCosts =
{
	100;	// Weapons
	1;		// Ammo
	50;		// Health
	50;		// Armor
	50;		// Powerups
	200;	// Tokens
	100;	// Shield Parts
	100;	// Stims/Augmentations
    10;     // Loot
	50;		// Mod Packs
	50;		// Boots
};

acscript void EnterOutpost()
{
	InBase = true;
	
	// Assign the current level to the level choice
	for (int i = 0; i < NumVisitedLevels; i++)
	{
		if (!StrICmp(StrParam("%s\n", LastVisited), StrParam("%s\n", VisitedLevels[i].LumpName)))
		{
			LevelChoice = i;
			break;
		};
	};
    
	// Assign the current skill level to the skill choice
	SkillChoice = GameSkill() - 1;
	
	// Set the current wave to the max wave
	ArenaWave = ArenaMaxWave;
	
	// Spawn the Shop Special item
	SpawnShopSpecialItem();
};

acscript void RegenArea(int ID)
{
	// If you're dead, terminate
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	Start:
	// Input
	int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
	int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
	int Interval;
	
	if (Buttons & BT_SPEED) Interval = 2 else Interval = 10;
	
	// Health
	if (ID == 1)
	{
		if (CheckInventory("Credits") < 5)
			return;
		if (GetActorProperty(Player.TID, APROP_Health) >= GetActorProperty(Player.TID, APROP_SpawnHealth))
			return;
		
		HealThing(5);
		TakeInventory("Credits", 5);

		FadeRange(255, 0, 0, 0.1, 255, 0, 0, 0.0, 0.1);
		
		AmbientSound("regen/health", 127);
		
		Delay(Interval);
		goto Start;
	};
	
	// Armor
	if (ID == 2)
	{
		if (CheckInventory("Credits") < 5)
			return;
		if (CheckInventory("Armor") >= Player.ArmorMax)
			return;
		
		GiveInventory("ArmorBonus", 5);
		TakeInventory("Credits", 5);
		
		FadeRange(0, 255, 0, 0.1, 0, 255, 0, 0.0, 0.1);
		AmbientSound("regen/armor", 127);
		
		Delay(Interval);
		goto Start;
	};
	
	// EP
	if (ID == 3)
	{
		if (!CheckInventory("Credits"))
			return;
		if (Player.EP < Player.EPMax)
		{
			Player.EP += 5;
			if (Player.EP > Player.EPMax)
				Player.EP = Player.EPMax;
		}
		else if (Player.EP >= Player.EPMax)
			return;
		
		FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.1);
		AmbientSound("regen/ep", 127);
		
		TakeInventory("Credits", 1);
		
		Delay(Interval);
		goto Start;
	};
};

acscript void LevelTransport()
{
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_LEVELTRANSPORT) return;
	
	if (NumVisitedLevels == 0)
	{
		SetFont("BIGFONT");
		HudMessage("The teleporter has been disabled.\n", HUDMSG_FADEOUT, MENU_ID, CR_RED, 0.5, 0.5, 2.0, 0.5);
		return;
	};
	
	SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
	Player.OutpostMenu = OMENU_LEVELTRANSPORT;
	
	while (true)
	{
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		// Stop Underflow
		if (LevelChoice < 0)
			LevelChoice = 0;
		
		// And Overflow
		if (LevelChoice >= NumVisitedLevels)
			LevelChoice = NumVisitedLevels - 1;
		
		// Text
		SetFont("BIGFONT");
		HudMessage("Choose Level:\n\cf%s: %s\n", VisitedLevels[LevelChoice].LumpName, VisitedLevels[LevelChoice].NiceName, HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 1.5, 0.5, 0.05, 0.5);
		
		// Input
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && LevelChoice > 0)
		{
			ActivatorSound("menu/move", 127);
			LevelChoice--;
		};
		if (Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT && LevelChoice > 0)
		{
			ActivatorSound("menu/move", 127);
			LevelChoice -= 10;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && LevelChoice < NumVisitedLevels - 1)
		{
			ActivatorSound("menu/move", 127);
			LevelChoice++;
		};
		if (Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT && LevelChoice < NumVisitedLevels - 1)
		{
			ActivatorSound("menu/move", 127);
			LevelChoice += 10;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
            // Special handling for emergency power
            if (PowerOut)
            {
                bool IsTechnician = (GetCVar("drpg_ext_doomrl") && PlayerClass(PlayerNumber()) == 2);
                int TransportTimerMax = (35 * (5 + GameSkill() + PlayerCount())) / (IsTechnician ? 2 : 1);
                int TransportTimer = TransportTimerMax;
                
                SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
                SetPlayerProperty(false, 1, PROP_FROZEN);
                Player.OutpostMenu = 0;
                PlaySound(0, "transfer/loop", CHAN_BODY, 1.0, true, ATTN_NONE);
                
                while (TransportTimer > 0)
                {
                    int TransportPercent = (int)Abs(100 - ((fixed)TransportTimer / (TransportTimerMax)) * 100.0);
                    Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
                    
                    if (GetActorProperty(Player.TID, APROP_Health) <= 0 || Buttons & BT_SPEED)
                    {
                        PlaySound(0, "transfer/fail", CHAN_BODY, 1.0, false, ATTN_NONE);
                        SetPlayerProperty(false, 0, PROP_FROZEN);
                        return;
                    };
                    
                    SetHudSize(320, 240, false);
                    SetFont("SMALLFONT");
                    HudMessage("Transferring Power: %d%%\n", TransportPercent, HUDMSG_PLAIN, 0, CR_GREEN, 160.4, 200.4, 0.05);
                    SetHudClipRect(60, 200 - 6, (int)((fixed)TransportPercent * 2.02), 200 + 6);
                    PrintSprite("Fill9", 0, 160.4, 200.4, 0.05);
                    SetHudClipRect(0, 0, 0, 0);
                    
                    TransportTimer--;
                    Delay(1);
                };
                
                PlaySound(0, "transfer/complete", CHAN_BODY, 1.0, false, ATTN_NONE);
                Delay(10);
            };
            
            Player.OutpostMenu = 0;
            FadeRange(255, 255, 255, 0.0, 255, 255, 255, 1.0, 2.0);
            Delay(35 * 2.5);
            SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
            SetPlayerProperty(false, 0, PROP_FROZEN);
            InBase = false;
            Transported = true;
            ChangeLevel(StrParam("%s\n", VisitedLevels[LevelChoice].LumpName), 0, CHANGELEVEL_NOINTERMISSION, -1);
            break;
		};
		if (Buttons == BT_SPEED)
		{
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		Delay(1);
	};
};

acscript void SkillComputer()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
	// Terminate if you aren't the Arbitrator
	if (InMultiplayer && !Arbitrator) return;
	
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_SKILLCOMPUTER) return;
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SkillLevels[5] = "Armageddon";
	
	ActivatorSound("misc/edgar", 127);
	
	Player.OutpostMenu = OMENU_SKILLCOMPUTER;
	SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
	
	while (true)
	{
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;

		// Text
		SetFont("BIGFONT");
		HudMessage("Skill Level: \cg%d (%s)\n", SkillChoice + 1, SkillLevels[SkillChoice],
				   HUDMSG_FADEOUT, MENU_ID, CR_GOLD, 0.5, 0.5, 0.05, 0.5);
		
		// Input
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && SkillChoice > 0)
		{
			ActivatorSound("menu/move", 127);
			SkillChoice--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && SkillChoice < (GetCVar("drpg_ext_doomrl") ? 5 : 4))
		{
			ActivatorSound("menu/move", 127);
			SkillChoice++;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			SetSkill(SkillChoice);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		if (Buttons == BT_SPEED)
		{
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		Delay(1);
	};
};

acscript void ToggleArena()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // If you try to toggle the Arena and you aren't the Arena Arbitrator, terminate
    if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;
	
	ArenaActive = !ArenaActive;
	ActivatorSound("misc/secret", 127);
	
	SetFont("BIGFONT");
	
	if (ArenaActive)
	{
		HudMessage("Arena Active\n", HUDMSG_FADEOUT, MENU_ID, CR_GREEN, 0.5, 0.5, 2.0, 1.0);
		ArenaPlayerNumber = PlayerNumber();
	}
	else
	{
		HudMessage("Arena Inactive\n", HUDMSG_FADEOUT, MENU_ID, CR_RED, 0.5, 0.5, 2.0, 1.0);
		ArenaPlayerNumber = -1;
	};
};

acscript void PassArenaLine()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;
	
	if (ArenaActive)
	{
		Ceiling_LowerToFloor(99, 64);
		ArenaLoop();
	};
};

acscript void SelectArenaWave()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_TOKENCONVERTER) return;
	
	if (InMultiplayer && (ArenaPlayerNumber >= 0 && PlayerNumber() != ArenaPlayerNumber)) return;

	ActivatorSound("menu/move", 127);
	Player.OutpostMenu = OMENU_WAVESELECTOR;

	if (ArenaMaxWave == 0) ArenaMaxWave = 1;
	WaveChoice = ArenaMaxWave;
	
	Delay(1);

	while (true)
	{
		SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
		
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		// Text
		SetFont("BIGFONT");
		HudMessage("Wave: \cd%d\c-/\cd%d\n", WaveChoice, ArenaMaxWave,
				   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 0.5, 0.5, 0.05, 1.0);
		
		// Input
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);

		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && WaveChoice > 1)
		{
			ActivatorSound("menu/move", 127);
			WaveChoice--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && WaveChoice < ArenaMaxWave)
		{
			ActivatorSound("menu/move", 127);
			WaveChoice++;
		};
        if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
		{
			ActivatorSound("menu/move", 127);
			WaveChoice -= 10;
			if (WaveChoice <= 0) WaveChoice = 1;
		};
        if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
		{
			ActivatorSound("menu/move", 127);
			WaveChoice += 10;
			if (WaveChoice > ArenaMaxWave) WaveChoice = ArenaMaxWave;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			if (WaveChoice > 1)
				ArenaWave = WaveChoice - 1
			else
				ArenaWave = 1;
			
			ActivatorSound("menu/move", 127);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		if (Buttons == BT_SPEED)
		{
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		Delay(1);
	};
};

acscript void PissOffMarines(bool Steal)
{
    // If the Marines are already hostile, terminate
    if (MarinesHostile) return;
    
    // Set flag
    MarinesHostile = true;
    
    // Demotion
    if (Player.RankLevel > 0 && Steal)
        Player.Rank = RankTable[Player.RankLevel - 2];
    
    // Iterate Marines pre-Delay
    if (Steal)
        for (int i = MarineTID; i <= MarineMaxTID; i++)
        {
            // Sight Alert
            if (CheckSight(i, 0, 0))
            {
                PlaySound(i, "misc/alert", 0, 1.0);
                SpawnForced("AlertIcon", GetActorX(i), GetActorY(i), GetActorZ(i) + GetActorPropertyFixed(i, APROP_Height) + 4.0, 0, 0);
            };
        };
    
    Delay(35 * 2);
    
    // Pick combat music from Arena selection
	ArenaSetMusic();
    
    // Iterate Marines post-Delay
    for (int i = MarineTID; i <= MarineMaxTID; i++)
    {
        // Remove Friendly flag
        SetActorProperty(i, APROP_Friendly, false);
        
        // Set Marine States
        if (GetActorProperty(i, APROP_Health) > 0)
            SetActorState(i, "Enraged", false);
        
        /* Heal up to 200 on higher difficulties
        if (GameSkill() >= 5)
            if (GetActorProperty(i, APROP_Health) > 0 && GetActorProperty(i, APROP_Health) < 200)
                SetActorProperty(i, APROP_Health, GetActorProperty(i, APROP_SpawnHealth)); */
        
        // Give Credits to Marines
        SetActorInventory(i, "Credits", Random(10, 1000));
    };
    
    // Set Turret States
    if (GetActorProperty(TurretTID, APROP_Health) > 0)
        SetActorState(TurretTID, "Enraged", false);
    
    // Sector Lighting
    for (int i = 0; i <= MAX_OUTPOST_ID; i++)
    {
        Sector_SetColor(i, 255, 0, 0, 0);
        Light_Glow(i, 160, 192, 30);
    };
    
    // Teleport in minigunners
    SpawnSpot("TeleportFog", MarineMinigunSpotTID, 0, 0);
    SpawnSpotFacing("DRPGMarineMinigun", MarineMinigunSpotTID, MarineTID);
    
    // Spawn Reinforcements
	while (true)
	{
		if ((Timer() % (35 * 10)) == 0)
		{
			SpawnSpot("TeleportFog", MarineSpotTID, 0, 0);
            if (GetCVar("drpg_ext_doomrl"))
                SpawnSpotFacing("DRPGMarineReinforcementDRLASpawner", MarineSpotTID, MarineTID)
            else
                SpawnSpotFacing("DRPGMarineReinforcementSpawner", MarineSpotTID, MarineTID);
            SetActorProperty(MarineTID, APROP_Friendly, false);
		};
        
        // Alarm
		if ((Timer() % 30) == 0)
            AmbientSound("misc/alarm", 127);
        
		Delay(1);
	};
};

acscript void TokenConverter()
{
    // If Marines are hostile or the power is out, terminate
    if (MarinesHostile || PowerOut) return;
    
    // if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_TOKENCONVERTER) return;
	
	int StatWorth = 1;
	int StatCapWorth = 10;
	int SkillWorth = 5;
	int InAmount = 1;
	int Amount1;
	int Amount2;
	int MaxAmount;
	int Type;
	int Cost;
	str Text;
	
	// Rank Check
	if (Player.RankLevel == 0)
	{
		SetFont("BIGFONT");
		HudMessage("\cgYou must be at least Rank 1 to use the Token Converter\n", HUDMSG_FADEOUT, 0, CR_RED, 1.5, 0.5, 2.0, 1.0);
		ActivatorSound("menu/error", 127);
		return;
	};
	
	SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
	ActivatorSound("menu/move", 127);
	Player.OutpostMenu = OMENU_TOKENCONVERTER;

	while (true)
	{
		int StatTokens = CheckInventory("StatToken");
		int StatCapTokens = CheckInventory("StatCapToken");
		int SkillTokens = CheckInventory("SkillToken");
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		switch (Type)
		{
			case 0: // Stat -> Skill
				Amount1 = InAmount * SkillWorth;
				Amount2 = InAmount;
				MaxAmount = StatTokens / SkillWorth;
				Cost = 5000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cg%d Stat Tokens \cj-> \cd%d Skill Tokens\n", Cost, Amount1, Amount2);
				break;
			case 1: // Stat -> Stat Cap
				Amount1 = InAmount * StatCapWorth;
				Amount2 = InAmount;
				MaxAmount = StatTokens / StatCapWorth;
				Cost = 1000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cg%d Stat Tokens \cj-> \ck%d Stat Cap Tokens\n", Cost, Amount1, Amount2);
				break;
			case 2: // Skill -> Stat
				Amount1 = InAmount * StatWorth;
				Amount2 = InAmount * SkillWorth;
				MaxAmount = SkillTokens;
				Cost = 25000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cd%d Skill Tokens \cj-> \cg%d Stat Tokens\n", Cost, Amount1, Amount2);
				break;
			case 3: // Skill -> Stat Cap
				Amount1 = InAmount * (StatCapWorth / SkillWorth);
				Amount2 = InAmount;
				MaxAmount = SkillTokens / 2;
				Cost = 12500 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\cd%d Skill Tokens \cj-> \ck%d Stat Cap Tokens\n", Cost, Amount1, Amount2);
				break;
			case 4: // Stat Cap -> Stat
				Amount1 = InAmount;
				Amount2 = InAmount * StatCapWorth;
				MaxAmount = StatCapTokens;
				Cost = 25000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\ck%d Stat Cap Tokens \cj-> \cg%d Stat Tokens\n", Cost, Amount1, Amount2);
				break;
			case 5: // Stat Cap -> Skill
				Amount1 = InAmount;
				Amount2 = InAmount * (StatCapWorth / SkillWorth);
				MaxAmount = StatCapTokens;
				Cost = 10000 * Amount1;
				Text = StrParam("Convert: \cf%d C\n\ck%d Stat Cap Tokens \cj-> \cd%d Skill Tokens\n", Cost, Amount1, Amount2);
				break;
		};

		// Input
		if (Buttons == BT_FORWARD && OldButtons != BT_FORWARD && Type > 0)
		{
			ActivatorSound("menu/move", 127);
			InAmount = 1;
			Type--;
		};
		if (Buttons == BT_BACK && OldButtons != BT_BACK && Type < 5)
		{
			ActivatorSound("menu/move", 127);
			InAmount = 1;
			Type++;
		};
		if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT)
			&& InAmount > 1)
		{
			ActivatorSound("menu/move", 127);
			InAmount--;
		};
		if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT)
			&& InAmount <= MaxAmount - 1)
		{
			ActivatorSound("menu/move", 127);
			InAmount++;
		};
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			str InItem;
			str OutItem;
			
			switch (Type)
			{
				case 0: InItem = "StatToken"; 		OutItem = "SkillToken";		break;
				case 1: InItem = "StatToken"; 		OutItem = "StatCapToken";	break;
				case 2: InItem = "SkillToken"; 		OutItem = "StatToken";		break;
				case 3: InItem = "SkillToken"; 		OutItem = "StatCapToken";	break;
				case 4: InItem = "StatCapToken"; 	OutItem = "StatToken";		break;
				case 5: InItem = "StatCapToken"; 	OutItem = "SkillToken";		break;
			};
			
			if (CheckInventory("Credits") >= Cost)
			{
				if ((Type == 0 || Type == 1) && StatTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
					Player.OutpostMenu = 0;
				}
				else if ((Type == 2 || Type == 3) && SkillTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
					Player.OutpostMenu = 0;
				}
				else if ((Type == 4 || Type == 5) && StatCapTokens >= Amount1)
				{
					InAmount = 1;
					GiveInventory(OutItem, Amount2);
					TakeInventory(InItem, Amount1);
					TakeInventory("Credits", Cost);
					ActivatorSound("misc/tokenconvert", 127);
					Player.OutpostMenu = 0;
				}
				else
					ActivatorSound("menu/error", 127);
			}
			else
				ActivatorSound("menu/error", 127);
		};
		if (Buttons == BT_SPEED && OldButtons != BT_SPEED)
		{
			ActivatorSound("menu/move", 127);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		// Drawing
		SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
		PrintSpriteFade("TOKAA0", 0, 16.1, 188.1, 0.05, 0.5);
		PrintSpriteFade("TOKBA0", 0, 16.1, 208.1, 0.05, 0.5);
		PrintSpriteFade("TOKCA0", 0, 16.1, 228.1, 0.05, 0.5);
		SetFont("BIGFONT");
		HudMessage("%d\n", StatTokens, 		HUDMSG_FADEOUT, 0, CR_RED,  		40.1, 178.0, 0.05, 0.5);
		HudMessage("%d\n", StatCapTokens, 	HUDMSG_FADEOUT, 0, CR_YELLOW,  		40.1, 198.0, 0.05, 0.5);
		HudMessage("%d\n", SkillTokens, 	HUDMSG_FADEOUT, 0, CR_DARKGREEN,	40.1, 218.0, 0.05, 0.5);
		SetFont("SMALLFONT");
		HudMessage("%s\n", Text, 			HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 	140.1, 178.0, 0.05, 0.5);

		Delay(1);
	};
};

// Credit Room Script
acscript void CreditRoom(int ID)
{
	if (ID == 1) // Enter
		LocalSetMusic("Credits");
	if (ID == 2) // Exit
        if (PowerOut)
            LocalSetMusic("Outpost", 4)
        else
            LocalSetMusic("Outpost");
	
	if (ID == 3) // Kyle873 - That's me!
	{
		SetFont("BIGFONT");
		HudMessage("Kyle873\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		SetFont("SMALLFONT");
		HudMessage("What do you mean I can't nerf XP Gain to 1 per monster?!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);

		int RealCredits = CheckInventory("Credits");
		
		ActivatorSound("credits/payout", 127);
		Log("\ckYou have been paid -2147483648 by the UAC!\n");
		TakeInventory("Credits", RealCredits);
		Delay(35 * 10);
		GiveInventory("Credits", RealCredits);
	};
	
	if (ID == 4) // Lord Misfit
	{
		SetFont("BIGFONT");
		HudMessage("Lord Misfit\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		SetFont("SMALLFONT");
		HudMessage("I swear it's a real bug this time!\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		
		str VarString = "SetVar";
		
		Delay(35 * 3);
		for (int i = 0; i < 100; i++)
		{
			if (Random(1, 3) == 1) VarString = StrParam("%s%s\n", VarString, "Var");
			HudMessage("%s\n", VarString, HUDMSG_FADEOUT, 0, Random(1, 21), RandomFixed(0.0, 1.0), RandomFixed(0.0, 1.0), 3.0, 2.0);
			Delay(1);
		};
	};
	
	if (ID == 5) // Ryan Cordell
	{
		SetFont("BIGFONT");
		HudMessage("Ryan Cordell\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 7.0, 2.0);
		Delay(35);
		
		for (int i = 0; i < 10; i++)
		{
			ActivatorSound("weapons/rocklx", 127);
			Delay(Random(5, 10));
		};
		
		Delay(35 * 2);
		SetFont("SMALLFONT");
		HudMessage("Did I do that?\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
	};
	
	if (ID == 6) // marrub
	{
		SetFont("BIGFONT");
		HudMessage("marrub\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("I HOPE YOU LIKE SHOTGUNS!\n", HUDMSG_FADEOUT, 0, CR_BRICK, 0.5, 0.55, 3.0, 2.0);
		Delay(35 * 2);
		
		for (int i = 0; i < 50; i++)
		{
			DropItem(0, "DumbShotgun", 1, 255);
			Delay(1);
		};
	};

	if (ID == 7) // Kate
	{
		SetFont("BIGFONT");
		HudMessage("Kate\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("\cgR\ciA\ckI\cdN\chB\ctO\caW\cjS\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		Delay(35);
		
		FadeTo(255, 0, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 128, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 255, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 255, 0, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(128, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 0, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(255, 255, 255, 0.5, 0.5);
		Delay(17);
		FadeTo(0, 0, 0, 0.0, 0.5);
	};
	
	if (ID == 8) // Yholl
	{
		SetFont("BIGFONT");
		HudMessage("Yholl\n", HUDMSG_FADEOUT, 0, CR_GREEN, 0.5, 0.5, 3.0, 2.0);
		Delay(35);
		HudMessage("\caYour suffering pleases me\n", HUDMSG_FADEOUT, 0, CR_WHITE, 0.5, 0.55, 3.0, 2.0);
		Delay(35);
		
		for (int i = 0; i < 50; i++)
		{
			DropItem(0, "DumbPistol", 1, 255);
			Delay(1);
		};
	};
};

// Shop Special UI
acscript void ShopSpecial()
{
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_SHOPSPECIAL) return;
	
	if (ShopSpecialBought)
	{
		SetFont("BIGFONT");
		HudMessage("Shop Special is currently out of stock.\n\nNext restock will be in %s.\n", FormatTime(ShopSpecialTimer),
				   HUDMSG_FADEOUT, MENU_ID, CR_RED, 1.5, 0.5, 2.0, 1.0);
		ActivatorSound("menu/error", 127);
		return;
	};
	
	ActivatorSound("menu/move", 127);
	SetPlayerProperty(false, 1, PROP_TOTALLYFROZEN);
	Player.OutpostMenu = OMENU_SHOPSPECIAL;
	
	while (true)
	{
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		str Name = ShopSpecialItem.Name;
		int Discount = (30 - (GameSkill() * 5)) + Player.ShopDiscount;
		int Cost = ShopSpecialItem.Price - ShopSpecialItem.Price * Discount / 100;
		
        // Cap the Shop Special Discount at 75%
        if (Discount > 75) Discount = 75;
        
		// If the item's already been bought, terminate
		if (ShopSpecialBought)
		{
			SetPlayerProperty(true, 0, PROP_TOTALLYFROZEN);
			return;
		};
		
		// The cost should always be at least 1 Credit
		if (Cost <= 0) Cost = 1;
		
		// Draw the background
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;

		// Input
		if (Buttons == BT_USE && OldButtons != BT_USE)
		{
			// Buy Item
			if (CheckInventory("Credits") >= Cost)
			{
				TakeInventory("Credits", Cost);
				SpawnForced(ShopSpecialItem.Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
				SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
				ShopSpecialBought = true;
				
				ActivatorSound("credits/payout", 127);
				Delay(1);
				SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
				Player.OutpostMenu = 0;
				return;
			}
			else
				ActivatorSound("menu/error", 127);
		};
		if (Buttons == BT_SPEED)
		{
			ActivatorSound("menu/move", 127);
			SetPlayerProperty(false, 0, PROP_TOTALLYFROZEN);
			Player.OutpostMenu = 0;
			return;
		};
		
		// Drawing
		SetFont("BIGFONT");
		HudMessage("%s\n\ck%d C (Discount: %d%%)\n\cdTime Left: %s\n",
				   Name, Cost, Discount, FormatTime(ShopSpecialTimer),
				   HUDMSG_FADEOUT, MENU_ID, CR_WHITE, 1.5, 0.5, 0.05, 1.0);
		
		Delay(1);
	};
};

// Player Locker
acscript void Locker(bool Wireless)
{
	// if you're already in a menu, terminate
	if (Player.OutpostMenu == OMENU_LOCKER) return;

	// Freeze the Player
	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	
	Player.OutpostMenu = OMENU_LOCKER;
	
	ActivatorSound("menu/move", 127);
	
	while (Player.OutpostMenu == OMENU_LOCKER)
	{
		fixed X = 24.1;
		fixed Y = 50.0;
		int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		int OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		int Efficiency = (Skills[5][5].CurrentLevel - 1) * 5;
		int WirelessCost = (int)((fixed)LockerWirelessCosts[Player.LockerPage] - ((fixed)LockerWirelessCosts[Player.LockerPage] * ((fixed)Efficiency / 100.0)));
		bool Success = false;
		int Offset;
		int Available;
		int Color;
		
		// Set the HUD Size
		SetHudSize(GetCVar("drpg_menu_width"), GetCVar("drpg_menu_height"), true);
		
		// Prevent the menus from being opened
		Player.InMenu = false;
		Player.InShop = false;
		
		// Build item data
		BuildItemData();
		
		// Title and Page
		SetFont("BIGFONT");
		if (Player.LockerGlobal)
			HudMessage("Global Locker - %s (%d/%d)\n",
					   ItemCategoryNames[Player.LockerPage], Player.LockerPage + 1, ItemCategories,
					   HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05)
		else
			HudMessage("Personal Locker - %s (%d/%d)\n",
					   ItemCategoryNames[Player.LockerPage], Player.LockerPage + 1, ItemCategories,
					   HUDMSG_PLAIN, 0, CR_GREEN, 24.1, 24.0, 0.05);
		
		// Wireless EP Cost and Transfer Efficiency
		if (GetCVar("drpg_inv_capacity"))
		{
			if (Wireless && !InBase)
				HudMessage("Inventory: %d/%d \cn(%d EP) [%d%% Efficiency]\n",
						   Player.InvItems, CheckInventoryMax(), WirelessCost, Efficiency,
						   HUDMSG_PLAIN, 0, CR_WHITE, 24.1, 38.0, 0.05)
			else
				HudMessage("Inventory: %d/%d\n",
						   Player.InvItems, CheckInventoryMax(),
						   HUDMSG_PLAIN, 0, CR_WHITE, 24.1, 38.0, 0.05);
		}
		else
		{
			if (Wireless && !InBase)
				HudMessage("(%d EP) [%d%% Efficiency]\n",
						   WirelessCost, Efficiency, HUDMSG_PLAIN, 0, CR_LIGHTBLUE, 24.1, 38.0, 0.05);
		};
		
		// Calculate a total of how many of the items are actually storable
		Available = 0;
		for (int i = 0; i < ItemMax[Player.LockerPage]; i++)
			if (!ItemData[Player.LockerPage][i].Unstorable)
				Available++;
		
		// Determine Offset
		if (Player.LockerIndex > MENU_SCROLL && Available > MENU_SCROLL)
			Offset = Player.LockerIndex - MENU_SCROLL
		else
			Offset = 0;
		
		for (int i = Offset; i < Offset + (MENU_SCROLL * 2) + 1; i++)
		{
			// Skip this item if it's unstorable
			if (ItemData[Player.LockerPage][i].Unstorable) continue;
			
			// Stop if we're at the end of the list
			if (i > ItemMax[Player.LockerPage] - 1) break;
			
			// Set the Color
			if (i == Player.LockerIndex)
				Color = MenuCursorColor
			else
				Color = CR_WHITE;
			
			// Display the item string
			SetFont("SMALLFONT");
			if (Player.LockerGlobal)
			{
				if (GlobalLocker[Player.LockerPage][i] > 0 && CheckInventory(ItemData[Player.LockerPage][i].Actor) > 0)
					HudMessage("%s \cd[%d] \ck[%d]\n", ItemData[Player.LockerPage][i].Name, CheckInventory(ItemData[Player.LockerPage][i].Actor), GlobalLocker[Player.LockerPage][i], HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else if (CheckInventory(ItemData[Player.LockerPage][i].Actor) > 0)
					HudMessage("%s \cd[%d]\n", ItemData[Player.LockerPage][i].Name, CheckInventory(ItemData[Player.LockerPage][i].Actor), HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else if (GlobalLocker[Player.LockerPage][i] > 0)
					HudMessage("%s \ck[%d]\n", ItemData[Player.LockerPage][i].Name, GlobalLocker[Player.LockerPage][i], HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else
					HudMessage("%s\n", ItemData[Player.LockerPage][i].Name, HUDMSG_PLAIN, 0, Color, X, Y, 0.05);
			}
			else
			{
				if (Player.Locker[Player.LockerPage][i] > 0 && CheckInventory(ItemData[Player.LockerPage][i].Actor) > 0)
					HudMessage("%s \cd[%d] \ck[%d]\n", ItemData[Player.LockerPage][i].Name, CheckInventory(ItemData[Player.LockerPage][i].Actor), Player.Locker[Player.LockerPage][i], HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else if (CheckInventory(ItemData[Player.LockerPage][i].Actor) > 0)
					HudMessage("%s \cd[%d]\n", ItemData[Player.LockerPage][i].Name, CheckInventory(ItemData[Player.LockerPage][i].Actor), HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else if (Player.Locker[Player.LockerPage][i] > 0)
					HudMessage("%s \ck[%d]\n", ItemData[Player.LockerPage][i].Name, Player.Locker[Player.LockerPage][i], HUDMSG_PLAIN, 0, Color, X, Y, 0.05)
				else
					HudMessage("%s\n", ItemData[Player.LockerPage][i].Name, HUDMSG_PLAIN, 0, Color, X, Y, 0.05);
			};
			
			// Move down Y
			Y += 8.0;
		};
		
		// Check cursor movement for repeating
		if (Buttons == BT_FORWARD)
			Player.DelayTimer++;
		if (Buttons == BT_BACK)
			Player.DelayTimer++;
		if (Buttons == BT_USE)
			Player.DelayTimer++;
		if (Buttons == BT_SPEED)
			Player.DelayTimer++;
		
		// Check Input
		if (Buttons == BT_FORWARD && (OldButtons != BT_FORWARD || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat")))
		{
			if (Player.LockerIndex <= 0) Player.LockerIndex = ItemMax[Player.LockerPage] - 1 + 1;
			ActivatorSound("menu/move", 127);
			Player.LockerIndex--;
			
			// Skip over items which are unstorable
			while (ItemData[Player.LockerPage][Player.LockerIndex].Unstorable)
				if (Player.LockerIndex <= 0)
					Player.LockerIndex = ItemMax[Player.LockerPage] - 1
				else
					Player.LockerIndex--;
		};
		if (Buttons == BT_BACK && (OldButtons != BT_BACK || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat")))
		{
			if (Player.LockerIndex >= ItemMax[Player.LockerPage] - 1) Player.LockerIndex = -1;
			ActivatorSound("menu/move", 127);
			Player.LockerIndex++;
			
			// Skip over items which are unstorable
			while (ItemData[Player.LockerPage][Player.LockerIndex].Unstorable)
				if (Player.LockerIndex >= ItemMax[Player.LockerPage] - 1)
					Player.LockerIndex = 0
				else
					Player.LockerIndex++;
		};
		if ((Buttons == BT_LEFT && OldButtons != BT_LEFT) ||
			(Buttons == BT_MOVELEFT && OldButtons != BT_MOVELEFT))
		{
			if (Player.LockerPage <= 0) Player.LockerPage = ItemCategories;
			ActivatorSound("menu/move", 127);
			Player.LockerIndex = 0;
			Player.LockerPage--;
			
			// If the first item in the list is unstorable, move to the next item
			if (ItemData[Player.LockerPage][Player.LockerIndex].Unstorable)
				Player.LockerIndex++;
		};
		if ((Buttons == BT_RIGHT && OldButtons != BT_RIGHT) ||
			(Buttons == BT_MOVERIGHT && OldButtons != BT_MOVERIGHT))
		{
			if (Player.LockerPage >= ItemCategories - 1) Player.LockerPage = -1;
			ActivatorSound("menu/move", 127);
			Player.LockerIndex = 0;
			Player.LockerPage++;
			
			// If the first item in the list is unstorable, move to the next item
			if (ItemData[Player.LockerPage][Player.LockerIndex].Unstorable)
				Player.LockerIndex++;
		};
		if (Buttons == BT_USE && (OldButtons != BT_USE || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat")))
		{
			// Deposit
			if (CheckInventory(ItemData[Player.LockerPage][Player.LockerIndex].Actor) > 0)
			{
				if (!Wireless || InBase)
				{
					TakeInventory(ItemData[Player.LockerPage][Player.LockerIndex].Actor, 1);
					if (Player.LockerGlobal)
						GlobalLocker[Player.LockerPage][Player.LockerIndex]++
					else
						Player.Locker[Player.LockerPage][Player.LockerIndex]++;
					ActivatorSound("menu/move", 127);
					Success = true;
				}
				else
				{
					if (Player.EP < WirelessCost)
					{
						SetHudSize(0, 0, false);
						SetFont("BIGFONT");
						HudMessage("Not Enough EP to Deposit item\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 2.0);
						ActivatorSound("menu/error", 127);
						Success = false;
					}
					else
					{
						TakeInventory(ItemData[Player.LockerPage][Player.LockerIndex].Actor, 1);
						if (Player.LockerGlobal)
							GlobalLocker[Player.LockerPage][Player.LockerIndex]++
						else
							Player.Locker[Player.LockerPage][Player.LockerIndex]++;
						Player.EP -= WirelessCost;
						ActivatorSound("menu/move", 127);
						Success = true;
					};
				};
				
				if (Success)
					if (Player.LockerPage == 0) // Weapons
					{
						TakeInventory("RLWeaponLimit", 1);
						
						// Weapon portion of Nuclear Set Bonus Checking
                        if (!CheckInventory("RLNuclearPlasmaPistol") || !CheckInventory("RLHighPowerNuclearPlasmaPistol") || !CheckInventory("RLStormNuclearPlasmaPistol") || CheckInventory("RLSuperchargedNuclearPlasmaPistol") ||
                            !CheckInventory("RLNuclearPlasmaRifle") || !CheckInventory("RLHighPowerNuclearPlasmaRifle") || !CheckInventory("RLAssaultRifleNuclearPlasmaRifle") || !CheckInventory("RLBurstCannonNuclearPlasmaRifle") ||
                            !CheckInventory("RLNuclearBFG9000") || !CheckInventory("RLHighPowerNuclearBFG9000") || !CheckInventory("RLNuclearVBFG9000") || !CheckInventory("RLNuclearBiggestFuckingGun"))
                        {
                            TakeInventory("RLNuclearWeaponSetBonusWeapon", 1);
                            TakeInventory("RLNuclearWeaponSetBonusActive", 1);
                        };
						
						// Tristar blaster Set Bonus Checking
						if (!CheckInventory("RLTristarBlaster") || !CheckInventory("RLHighPowerTristarBlaster") || !CheckInventory("RLNanomanufactureAmmoTristarBlaster"))
							TakeInventory("RLCerberusSetBonusTristarBlaster", 1);
					}
					else if (Player.LockerPage == 3) // Armor
						TakeInventory("RLArmorInInventory", 1)
					else if (Player.LockerPage == 9) // Mod Packs
						if (Player.LockerIndex == 8) // Special handling case for Armor Modpack
							TakeInventory("RLArmorModItemInInventory", 1)
						else
							if (PlayerClass(PlayerNumber()) == 2) // Special handling case for Technician
								TakeInventory("RLScavengerModLimit", 1)
							else
								TakeInventory("RLModLimit", 1)
					else if (Player.LockerPage == 10) // Boots
						TakeInventory("RLBootsInInventory", 1);
			}
			else if (Player.DelayTimer < 35.0 * GetCVarFixed("drpg_menu_repeat"))
				ActivatorSound("menu/error", 127);
		};
		if (Buttons == BT_SPEED && (OldButtons != BT_SPEED || Player.DelayTimer > 35.0 * GetCVarFixed("drpg_menu_repeat")))
		{
			bool Check = (Player.LockerGlobal ? GlobalLocker[Player.LockerPage][Player.LockerIndex] : (Player.Locker[Player.LockerPage][Player.LockerIndex] > 0));
			
			// Withdraw
			if (Check)
			{
				if (!Wireless || InBase)
					Success = true
				else
				{
					if (Player.EP < WirelessCost)
					{
						SetHudSize(0, 0, false);
						SetFont("BIGFONT");
						HudMessage("Not Enough EP to Withdraw item\n", HUDMSG_FADEOUT, 0, CR_RED, 0.5, 0.5, 2.0, 2.0);
						ActivatorSound("menu/error", 127);
						Success = false;
					}
					else
						Success = true;
				};
				
				// Checking
				if (Success)
				{
					if (Player.LockerPage == 0 && CheckInventory("RLWeaponLimit") >= 6) // Weapons
					{
                        ActivatorSound("menu/error", 127);
						Success = false;
					}
					else if (Player.LockerPage == 1 && CheckInventory(ItemData[Player.LockerPage][Player.LockerIndex].Actor) >= GetAmmoCapacity(ItemData[Player.LockerPage][Player.LockerIndex].Actor)) // Ammo
					{
                        ActivatorSound("menu/error", 127);
						Success = false;
					}
					else if (Player.LockerPage == 2 && CheckInventory("RLArmorInInventory") >= 1) // Armor
					{
                        ActivatorSound("menu/error", 127);
						Success = false;
					}
					else if (Player.LockerPage == 3 && Player.LockerIndex == 8 && CheckInventory("RLArmorModItemInInventory") >= 1) // Armor Modpack
					{
                        ActivatorSound("menu/error", 127);
						Success = false;
					}
					else if (Player.LockerPage == 3 && ((PlayerClass(PlayerNumber()) == 2) ? CheckInventory("RLScavengerModLimit") >= 8 : CheckInventory("RLModLimit") >= 4)) // Mod Packs
					{
                        ActivatorSound("menu/error", 127);
						Success = false;
					}
					else if (Player.LockerPage == 4 && CheckInventory("RLBootsInInventory") >= 1) // Boots
					{
                        ActivatorSound("menu/error", 127);
						Success = false;
					}
					else if (Player.LockerPage == 0) // Weapons
						SpawnForced(StrParam("%sPickup\n", ItemData[Player.LockerPage][Player.LockerIndex].Actor), GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0)
					else if (Player.LockerPage == 1) // Ammo
						GiveInventory(ItemData[Player.LockerPage][Player.LockerIndex].Actor, 1)
					else // Everything else
						SpawnForced(ItemData[Player.LockerPage][Player.LockerIndex].Actor, GetActorX(0), GetActorY(0), GetActorZ(0), 0, 0);
					
					if (Success)
					{
						SetActorVelocity(Player.TID, 0.01, 0.01, 0, true, false);
						if (Player.LockerGlobal)
							GlobalLocker[Player.LockerPage][Player.LockerIndex]--
						else
							Player.Locker[Player.LockerPage][Player.LockerIndex]--;
						if (Wireless && !InBase)
							Player.EP -= WirelessCost;
						ActivatorSound("menu/move", 127);
					};
				};
			}
			else if (Player.DelayTimer < 35.0 * GetCVarFixed("drpg_menu_repeat"))
				ActivatorSound("menu/error", 127);
		};
		
		// Reset the Delay Timer if no buttons are pressed
		if (Buttons == 0 && OldButtons == 0)
			Player.DelayTimer = 0;
		
		Delay(1);
	};
};

// Handles the 6 Key Secret
acscript void OutpostSecret()
{
	if (CheckInventory("RedCard2") && CheckInventory("YellowCard2") && CheckInventory("BlueCard2") &&
		CheckInventory("RedSkull2") && CheckInventory("YellowSkull2") && CheckInventory("BlueSkull2"))
	{
		ActivatorSound("misc/secret", 127);
		Teleport(SecretTeleportTID + PlayerNumber(), false);
	};
};

function void CheckShopSpecial(bool Force)
{
	// Reset the item
	if (ShopSpecialTimer <= 0 || Force)
	{
		int Category;
		int Index;
		bool ValidItem;

		// Item Blacklist
		int[][2] ItemBlacklist =
		{
			// Category, Index
			
			// Ammo
			{ 1;	0; 	};	// Clip
			{ 1;	1; 	};	// Box of Bullets
			{ 1;	2; 	};	// Shells
			{ 1;	3; 	};	// Box of Shells
			{ 1;	4; 	};	// Rockets
			{ 1;	5; 	};	// Box of Rockets
			{ 1;	6; 	};	// Cell
			{ 1;	7; 	};	// Cell Pack
			{ 1;	8; 	};	// Small Backpack
			{ 1;	9; 	};	// Backpack
			
			// Health
			{ 2;	0;	};	// Health Bonus
			
			// Armor
			{ 3;	0;	};	// Armor Bonus
            
			// Sentinel (Indicates end of list)
			{ -1;   -1; };
		};
		
		while (!ValidItem)
		{
			// Pick an item
			BuildItemData();
			Category = Random(0, ItemCategories - 1);
			Index = Random(0, ItemMax[Category] - 1);
			
			// Check the item against the blacklist
			for (int i = 0; ItemBlacklist[i][0] != -1; i++)
			{
				ValidItem = true;
				if (Category == ItemBlacklist[i][0] && Index == ItemBlacklist[i][1])
				{
					ValidItem = false;
					break;
				};
			};
			
			// Retry if you land on an item with no cost
			if (ItemData[Category][Index].Price == 0)
				ValidItem = false;
		};
		
		// Assign the item to the Shop Special item
		ShopSpecialItem = ItemData[Category][Index];
		ShopSpecialItem.Category = Category;
		
		// Spawn the item if you're in the Outpost
		SpawnShopSpecialItem();
		
		// Reset the timer and bought status
		ShopSpecialTimer = SHOP_SPECIAL_TIMER;
		ShopSpecialBought = false;
        
        if (GetCVar("drpg_debug"))
            if (Arbitrator)
                Log("\cdDEBUG: Shop Special expired! Now \cj%s\n", ShopSpecialItem.Name);
	};
	
	// Remove the item if it was bought
	if (InBase && ShopSpecialBought)
		Thing_Remove(ShopSpecialTID + 1);
	
	// Decrease the timer
	ShopSpecialTimer--;
};

function void SpawnShopSpecialItem()
{
	if (InBase)
	{
		// DoomRL Compatibility
		if (GetCVar("drpg_ext_doomrl"))
			if (ShopSpecialItem.Category == 0) // Weapons
				ShopSpecialItem.Actor = StrParam("%sPickup\n", ShopSpecialItem.Actor);
		
		Thing_Remove(ShopSpecialTID + 1);
		if (!SpawnSpotForced(ShopSpecialItem.Actor, ShopSpecialTID, ShopSpecialTID + 1, 0))
            CheckShopSpecial(true)
        else
        {
            SpawnSpotForced("TeleportFog", ShopSpecialTID, 0, 0);
            SetActorProperty(ShopSpecialTID, APROP_Invulnerable, true);
            Thing_SetSpecial(ShopSpecialTID, 80, 8);
        };
	};
};

acscript void PowerOutage()
{
    // If the power is already out, terminate
    if (PowerOut) return;
    
    Delay(10);
    
    PowerOut = true;
    
    // Blackout
    if (!MarinesHostile)
    {
        SetMusic("");
        ActivatorSound("misc/poweroff", 127);
        for (int i = 0; i < MAX_OUTPOST_ID; i++)
            Light_Fade(i, 0, 10);
    };
    
    // Disable Forcefields
    Line_SetBlocking(ForcefieldID, 0, 1023);
    SetLineTexture(ForcefieldID, SIDE_FRONT, TEXTURE_MIDDLE, "");
    
    // Send Turrets into PoweredDown state
    SetActorState(TurretTID, "PoweredDown");
    
    // Randomized delay for the power to come back on
    Delay(Random(35 * 3, 35 * 5));
    
    // Enable Emergency Power
    if (!MarinesHostile)
    {
        SetMusic("Outpost", 4);
        ActivatorSound("misc/poweron", 127);
        for (int i = 0; i < MAX_OUTPOST_ID; i++)
        {
            Sector_SetColor(i, 255, 0, 0, 0);
            Light_Fade(i, 160, 60);
        };
    };
};
