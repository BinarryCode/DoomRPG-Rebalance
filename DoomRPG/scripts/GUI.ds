#include "Globals.dh"
#include "GUI.dh"
#include "Menu.dh"
#include "Utils.dh"

function void ClickTest(GUIIcon *Icon)
{
	Log("\ckClick!\n");
};

function void LogSelected(GUIList *List)
{
	Log("\cd%d\n", List->Selected);
};

function void BuildTestWindow()
{
	GUIWindow *Window = GUICreateWindow();
	GUILabel *Label = GUICreateLabel(Window);
	GUIIcon *Icon = GUICreateIcon(Window);
	GUIButton *Button = GUICreateButton(Window);
	GUIBar *Bar = GUICreateBar(Window);
	GUIList *List = GUICreateList(Window);
	
	Window->Title = "Super Awesome Test Window";
	Window->X = 40;
	Window->Y = 40;
	Window->Width = 300;
	Window->Height = 300;
	
	Label->Text = "Mega Label";
	Label->X = 24;
	Label->Y = 24;
	Label->Color = CR_GOLD;
	
	Icon->Texture = "STAT1";
	Icon->X = 24;
	Icon->Y = 48;
	Icon->Width = 32;
	Icon->Height = 32;
	Icon->OnClick = ClickTest;
	
	Button->Text = "Test Button";
	Button->X = 48;
	Button->Y = 64;
	
	Bar->X = 48;
	Bar->Y = 96;
	Bar->Value = Random(25, 100);
	Bar->Texture = StrParam("Stim%d\n", Random(1, 18));
	
	List->X = 24;
	List->Y = 128;
	List->Shown = 10;
	for (int i = 0; i < 50; i++)
		List->Entries[i] = StrParam("Entry %d\n", i + 1);
	List->OnClick = LogSelected;
	
	Player.Window = Window;
};

acscript ToggleGUI()
{
	Player.GUIOpen = !Player.GUIOpen;
	
	if (Player.GUIOpen)
	{
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
		BuildTestWindow();
	}
	else
	{
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		GUIDeleteWindow(Player.Window);
	};
};

script CheckCursor()
{
	Start:
	
	while (Player.GUIOpen)
	{
		int Width = GetCVar("drpg_menu_width");
		int Height = GetCVar("drpg_menu_height");
		
		// Set the Resolution/HUD Size
		SetHudSize(Width, Height, true);
		
		// Get X/Y input
		Player.Mouse.XAdd = GetPlayerInput(PlayerNumber(), INPUT_YAW);
		Player.Mouse.YAdd = GetPlayerInput(PlayerNumber(), INPUT_PITCH);
		
		// Get Buttons
		Player.Mouse.Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
		Player.Mouse.OldButtons = GetPlayerInput(PlayerNumber(), INPUT_OLDBUTTONS);
		
		// Add X/Y input to current position
		Player.Mouse.X -= Player.Mouse.XAdd / 32;
		Player.Mouse.Y -= Player.Mouse.YAdd / 24;
		
		// Check resolution boundaries
		if (Player.Mouse.X < 0)
			Player.Mouse.X = 0;
		if (Player.Mouse.Y < 0)
			Player.Mouse.Y = 0;
		if (Player.Mouse.X > Width)
			Player.Mouse.X = Width;
		if (Player.Mouse.Y > Height)
			Player.Mouse.Y = Height;
		
		// Draw Cursor
		PrintSprite("Cursor", 0, Player.Mouse.X, Player.Mouse.Y, 0.05);
		
		// Mouse Input
		if (Player.Mouse.Buttons & BT_ATTACK)
			Player.Mouse.LeftButtonDown = true
		else
			Player.Mouse.LeftButtonDown = false;
		if (Player.Mouse.Buttons & BT_ATTACK && !(Player.Mouse.OldButtons & BT_ATTACK))
			Player.Mouse.LeftButton = true
		else
			Player.Mouse.LeftButton = false;
		if (Player.Mouse.Buttons & BT_ALTATTACK)
			Player.Mouse.RightButtonDown = true
		else
			Player.Mouse.RightButtonDown = false;
		if (Player.Mouse.Buttons & BT_ALTATTACK && !(Player.Mouse.OldButtons & BT_ALTATTACK))
			Player.Mouse.RightButton = true
		else
			Player.Mouse.RightButton = false;
		
		Delay(1);
	};
	
	Delay(1);
	goto Start;
};

script CheckGUI()
{
	int Width = GetCVar("drpg_menu_width");
	int Height = GetCVar("drpg_menu_height");
	
	// Center Mouse
	Player.Mouse.X = Width / 2;
	Player.Mouse.Y = Height / 2;
	
	while (true)
	{
		if (Player.GUIOpen)
		{
			// Set the Resolution/HUD Size
			SetHudSize(Width, Height, true);
			
			// Handle Labels
			for (int i = 0; Player.Window->Labels[i] != nullptr; i++)
				HandleLabel(Player.Window->Labels[i]);
			
			// Handle Icons
			for (int i = 0; Player.Window->Icons[i] != nullptr; i++)
				HandleIcon(Player.Window->Icons[i]);
			
			// Handle Buttons
			for (int i = 0; Player.Window->Buttons[i] != nullptr; i++)
				HandleButton(Player.Window->Buttons[i]);
			
			// Handle Bars
			for (int i = 0; Player.Window->Bars[i] != nullptr; i++)
				HandleBar(Player.Window->Bars[i]);
			
			// Handle Lists
			for (int i = 0; Player.Window->Lists[i] != nullptr; i++)
				HandleList(Player.Window->Lists[i]);
			
			// Handle Drawing and Input for the Window
			HandleWindow(Player.Window);
		};
		
		Delay(1);
	};
};

function void HandleWindow(GUIWindow *Window)
{
	// Set the Resolution/HUD Size
	int Width = GetCVar("drpg_menu_width");
	int Height = GetCVar("drpg_menu_height");
	SetHudSize(Width, Height, true);
	
	// Title
	SetFont("SMALLFONT");
	HudMessage("%s\n", Window->Title, HUDMSG_PLAIN, 0, ((InTitleBar(Window) || Window->Dragging) ? CR_GREEN : CR_WHITE), Window->X + 16.1, Window->Y + 8.0, 0.05);
	
	// Window Background & Border
	SetHudClipRect(Window->X, Window->Y, Window->Width, Window->Height);
	PrintSprite("GUIBack", 0, Window->X, Window->Y, 0.05);
	DrawBorder(Window->X, Window->Y, Window->Width, Window->Height);
	SetHudClipRect(0, 0, 0, 0);
	SetFont("");
	
	// Drag Checking
	if (InTitleBar(Window) && Player.Mouse.LeftButtonDown)
		Window->Dragging = true;
	if (Window->Dragging && !Player.Mouse.LeftButtonDown)
		Window->Dragging = false;
	
	// Dragging
	if (Window->Dragging)
	{
		Window->X -= Player.Mouse.XAdd / 32;
		Window->Y -= Player.Mouse.YAdd / 24;
		
		// Bounding
		if (Window->X < 0)
			Window->X = 0;
		if (Window->X > Width - Window->Width)
			Window->X = Width - Window->Width;
		if (Window->Y < 0)
			Window->Y = 0;
		if (Window->Y > Height - Window->Height)
			Window->Y = Height - Window->Height;
	};
};

function void HandleLabel(GUILabel *Label)
{
	str Text = Label->Text;
	int X = Label->Window->X + Label->X;
	int Y = Label->Window->Y + Label->Y;
	int Color = Label->Color;
	
	// Drawing
	SetFont("SMALLFONT");
	HudMessage("%s\n", Text, HUDMSG_PLAIN, 0, Color, X + 0.1, Y, 0.05);
};

function void HandleIcon(GUIIcon *Icon)
{
	str Texture = Icon->Texture;
	int X = Icon->Window->X + Icon->X;
	int Y = Icon->Window->Y + Icon->Y;
	int Width = Icon->Width;
	int Height = Icon->Height;
	
	// Drawing
	PrintSprite(Texture, 0, X + 0.1, Y + 0.1, 0.05);
	
	// OnClick event
	if (InRegion(X, Y, Width, Height) && Player.Mouse.LeftButton && Icon->OnClick)
		Icon->OnClick(Icon);
};

function void HandleButton(GUIButton *Button)
{
	str Text = Button->Text;
	int X = Button->Window->X + Button->X;
	int Y = Button->Window->Y + Button->Y;
	int Width = Button->Width;
	int Height = Button->Height;
	int Color = Button->Color;
	int HoverColor = Button->HoverColor;
	
	// Default Color
	if (Color == 0)
		Color = CR_WHITE;
	
	// Default Hover Color
	if (HoverColor == 0)
		HoverColor = MenuCursorColor;
	
	// Auto-calculate width and height based on string length and size
	if (Width == 0 && Height == 0)
	{
		Width = StrLen(Text) * 8;
		Height = 14;
	};
	
	// Drawing
	SetFont("SMALLFONT");
	if (InRegion(X, Y, Width, Height))
		HudMessage("%s\n", Text, HUDMSG_PLAIN, 0, HoverColor, X + 0.1, Y, 0.05)
	else
		HudMessage("%s\n", Text, HUDMSG_PLAIN, 0, Color, X + 0.1, Y, 0.05);
	
	// OnClick event
	if (InRegion(X, Y, Width, Height) && Player.Mouse.LeftButton && Button->OnClick)
		Button->OnClick(Button);
};

function void HandleBar(GUIBar *Bar)
{
	int X = Bar->Window->X + Bar->X;
	int Y = Bar->Window->Y + Bar->Y;
	int Value = Bar->Value;
	int ValueMax = Bar->ValueMax;
	str Texture = Bar->Texture;
	
	// Default Max Value
	if (ValueMax == 0)
		ValueMax = 100;
	
	// Prevent Value under/overflow
	if (Value < 0)
		Value = 0;
	if (Value > ValueMax)
		Value = ValueMax;
	
	// Drawing
	for (int i = 0; i < (int)(((fixed)Value / (fixed)(ValueMax + 1)) * 100.0); i++)
		PrintSprite(Texture, 0, ++X, Y, 0.05);
};

function void HandleList(GUIList *List)
{
	int X = List->Window->X + List->X;
	int Y = List->Window->Y + List->Y;
	int Color = List->Color;
	int HoverColor = List->HoverColor;
	int Shown = List->Shown;
	int Offset = List->Offset;
	str[MAX_LIST] Entries = List->Entries;
	int MaxEntries;
	int Longest;
	
	// Default Color
	if (Color == 0)
		Color = CR_WHITE;
	
	// Default Hover Color
	if (HoverColor == 0)
		HoverColor = MenuCursorColor;
	
	// Can't show less than 5 items
	if (Shown < 5)
		Shown = 5;
	
	// Calculate max amount of entries
	for (int i = 0; StrLen(Entries[i]) != 0; i++)
		MaxEntries++;
	
	// Drawing/Selection
	SetFont("SMALLFONT");
	for (int i = Offset; i < MaxEntries && i < Offset + Shown; i++)
	{
		int Width = StrLen(Entries[i]) * 8;
		
		// Checking for the longest width in the entries
		if (Width > Longest) Longest = Width;
		
		if (InRegion(X, Y + ((i - Offset) * 11), Width, 12))
		{
			HudMessage("%s\n", Entries[i], HUDMSG_PLAIN, 0, HoverColor, X + 0.1, Y + ((i - Offset) * 10.0), 0.05);
			List->Selected = i;
			
			// OnClick event
			if (Player.Mouse.LeftButton && List->OnClick)
				List->OnClick(List);
		}
		else
			HudMessage("%s\n", Entries[i], HUDMSG_PLAIN, 0, Color, X + 0.1, Y + ((i - Offset) * 10.0), 0.05);
	};
	
	// Scroll Arrows
	SetFont("BIGFONT");
	if (InRegion(X + 4.1 + Longest, Y + 1.0, 16, 12))
	{
		HudMessage("^\n", HUDMSG_PLAIN, 0, MenuCursorColor, X + 0.1 + Longest, Y + 1.0, 0.05);
		
		if (Player.Mouse.LeftButton && List->Offset > 0)
			List->Offset--;
	}
	else
		HudMessage("^\n", HUDMSG_PLAIN, 0, CR_WHITE, X + 0.1 + Longest, Y + 1.0, 0.05);
	if (InRegion(X + 4.1 + Longest, Y + (Shown * 10.0) - 14.0, 16, 16))
	{
		HudMessage("V\n", HUDMSG_PLAIN, 0, MenuCursorColor, X + 0.1 + Longest, Y + (Shown * 10.0) - 14.0, 0.05);
		
		if (Player.Mouse.LeftButton && List->Offset < MaxEntries - Shown)
			List->Offset++;
	}
	else
		HudMessage("V\n", HUDMSG_PLAIN, 0, CR_WHITE, X + 0.1 + Longest, Y + (Shown * 10.0) - 14.0, 0.05);
};

function GUIWindow *GUICreateWindow()
{
	GUIWindow *Window = malloc(sizeof(GUIWindow));
	return Window;
};

function void GUIDeleteWindow(GUIWindow *Window)
{
	// Free Controls
	for (int i = 0; i < MAX_CONTROLS; i++)
	{
		if (Window->Labels[i] != nullptr) 	free(Window->Labels[i]);
		if (Window->Icons[i] != nullptr) 	free(Window->Icons[i]);
		if (Window->Buttons[i] != nullptr) 	free(Window->Buttons[i]);
		if (Window->Bars[i] != nullptr) 	free(Window->Bars[i]);
		if (Window->Lists[i] != nullptr) 	free(Window->Lists[i]);
	};
	
	// Free Window
	free(Window);
};

function GUILabel *GUICreateLabel(GUIWindow *Window)
{
	GUILabel *Label = malloc(sizeof(GUILabel));
	Label->Window = Window;
	
	for (int i = 0; i < MAX_CONTROLS; i++)
		if (Window->Labels[i] == nullptr)
		{
			Window->Labels[i] = Label;
			break;
		};
	
	return Label;
};

function GUIIcon *GUICreateIcon(GUIWindow *Window)
{
	GUIIcon *Icon = malloc(sizeof(GUIIcon));
	Icon->Window = Window;
	
	for (int i = 0; i < MAX_CONTROLS; i++)
		if (Window->Icons[i] == nullptr)
		{
			Window->Icons[i] = Icon;
			break;
		};
	
	return Icon;
};

function GUIButton *GUICreateButton(GUIWindow *Window)
{
	GUIButton *Button = malloc(sizeof(GUIButton));
	Button->Window = Window;
	
	for (int i = 0; i < MAX_CONTROLS; i++)
		if (Window->Buttons[i] == nullptr)
		{
			Window->Buttons[i] = Button;
			break;
		};
	
	return Button;
};

function GUIBar *GUICreateBar(GUIWindow *Window)
{
	GUIBar *Bar = malloc(sizeof(GUIBar));
	Bar->Window = Window;
	
	for (int i = 0; i < MAX_CONTROLS; i++)
		if (Window->Bars[i] == nullptr)
		{
			Window->Bars[i] = Bar;
			break;
		};
	
	return Bar;
};

function GUIList *GUICreateList(GUIWindow *Window)
{
	GUIList *List = malloc(sizeof(GUIList));
	List->Window = Window;
	
	for (int i = 0; i < MAX_CONTROLS; i++)
		if (Window->Lists[i] == nullptr)
		{
			Window->Lists[i] = List;
			break;
		};
	
	return List;
};

function GUITooltip *GUICreateTooltip()
{
	GUITooltip *Tooltip = malloc(sizeof(GUITooltip));
	return Tooltip;
};

function bool InTitleBar(GUIWindow *Window)
{
	if (Player.Mouse.X > Window->X && Player.Mouse.X < Window->X + Window->Width &&
		Player.Mouse.Y > Window->Y + 10 && Player.Mouse.Y < Window->Y + 20)
		return true
	else
		return false;
};

function bool InRegion(int X, int Y, int Width, int Height)
{
	if (Player.Mouse.X > X && Player.Mouse.X < X + Width &&
		Player.Mouse.Y > Y && Player.Mouse.Y < Y + Height)
		return true
	else
		return false;
};

function void DrawBorder(int X, int Y, int Width, int Height)
{
	SetHudClipRect(X, Y, Width, Height);
	PrintSprite("BarHorz", 0, X, Y, 0.05);
	PrintSprite("BarHorz", 0, X, Y + Height - 1, 0.05);
	PrintSprite("BarVert", 0, X, Y, 0.05);
	PrintSprite("BarVert", 0, X + Width - 1, Y, 0.05);
	SetHudClipRect(0, 0, 0, 0);
	SetFont("");
};
