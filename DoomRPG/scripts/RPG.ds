#include "RPG.dh"

#include "Arena.dh"
#include "Augs.dh"
// #include "GUI.dh"
// #include "GUIMenu.dh"
#include "HealthBars.dh"
#include "HUD.dh"
#include "ItemData.dh"
#include "Menu.dh"
#include "Mission.dh"
#include "Monsters.dh"
#include "Outpost.dh"
#include "Popoffs.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

// Version and Timestamp
str[2] Version =
{
    "v0.9.11 Beta - Gotta Go Fast Edition";
	"Thursday, July 24, 2014 at 2:20:40 AM";
};

// Define the globals for SBARINFO/etc.

// Flags
static bool InBase;
static bool Transported;

// Structs
static PlayerData[MAX_PLAYERS] _PlayerData;
// static MinigameData[MAX_PLAYERS] _MinigameData;

// --------------------------------------------------
// Multiplayer HUD
// 

// HUD Combo
global_array(20) int[MAX_PLAYERS] Combo @ 0;
global_array(22) int[MAX_PLAYERS] BonusGained @ 0;
global_array(23) int[MAX_PLAYERS] XPGained @ 0;
global_array(24) int[MAX_PLAYERS] RankGained @ 0;

// HUD Timers
global_array(25) int[MAX_PLAYERS] AuraTimerHUD @ 0;
global_array(26) int[MAX_PLAYERS] RegenBoostTimerHUD @ 0;
global_array(42) int[MAX_PLAYERS] StimTimerHUD @ 0;
global_array(7)  int[MAX_PLAYERS] StatusTimerHUD @ 0;

// HUD Item Counts
global_array(18) int[MAX_PLAYERS] Credits @ 0;
global_array(19) int[MAX_PLAYERS] Continues @ 0;

// Max Health and Armor
global_array(39) int[MAX_PLAYERS] HealthMax @ 0;
global_array(40) int[MAX_PLAYERS] ArmorMax @ 0;

// Energy Points (EP)
global_array(2)  int[MAX_PLAYERS] EP @ 0;
global_array(3)  int[MAX_PLAYERS] EPMax @ 0;

// Shield
global_array(50) int[MAX_PLAYERS] Shield @ 0;
global_array(51) int[MAX_PLAYERS] ShieldCapacity @ 0;
global_array(52) int[MAX_PLAYERS] ShieldHealth @ 0;

// Init Script
script void Init() enter
{
    if (!ActivatorTID())
    {
        // [KS] This needs to be done on its' own, so death exits don't rob you of your TID and break EVERYTHING EVER FFS
        
        // Player TID
        Player.TID = PLAYER_TID + PlayerNumber();
        Thing_ChangeTID(0, Player.TID);
        
        if (GetCVar("drpg_debug"))
            Log("\cdDEBUG: Player TID: %d\n", Player.TID);

        // Give the default loadout based on compatibility switches
        DefaultLoadout();
    };
    
    if (!Player.FirstRun)
    {
        // Setup Stats and Special Starts
        if (GetCVar("drpg_special_start") == 0) // None
        {
            Player.Vitality = 10;
            Player.Energy = 10;
            Player.Capacity = 10;
            
            Player.EP = Player.Energy * 10;
        };
        if (GetCVar("drpg_special_start") == 1) // Luck Based
        {
            Player.Defense = -100;
            Player.Vitality = 1;
            Player.Regeneration = -100;
            Player.Capacity = 5;
            Player.Luck = 100;
            
            SetActorProperty(0, APROP_Health, Player.Vitality * 10);
            Player.EP = Player.Energy * 10;
        };
        if (GetCVar("drpg_special_start") == 2) // Speed Demon
        {
            Player.Defense = -200;
            Player.Vitality = 10;
            Player.Energy = 0;
            Player.Agility = 100;
            Player.Capacity = 10;
            
            SetActorProperty(0, APROP_Health, Player.Vitality * 10);
            Player.EP = Player.Energy * 10;
        };
        if (GetCVar("drpg_special_start") == 3) // The Magic Man
        {
            Player.Defense = -100;
            Player.Vitality = 5;
            Player.Energy = 100;
            Player.Capacity = 5;
            
            SetActorProperty(0, APROP_Health, Player.Vitality * 10);
            Player.EP = Player.Energy * 10;
        };
        
        // Version Info
        if (Arbitrator) Log("\cnDoom RPG %s (%s) loaded!\n", Version[0], Version[1]);
        
        // Compatibility checking
        if (Arbitrator) CheckCompatibility();
        
        // Set the default skill indices
        for (int i = 0; i < MAX_SKILLKEYS; i++)
        {
            Player.SkillCategory[i] = -1;
            Player.SkillIndex[i] = -1;
        };
        
        // Get the XP Curve from the CVAR
        XPCurve = GetCVar("drpg_xp_curve");
        
        // Set default selected skill to nothing
        Player.SkillSelected = -1;
        
        // Fill Augmentation Battery
        Player.Augs.Battery = 100;
        
        // Done first run
        Player.FirstRun = true;
    };
    
    // Initialize XP & Rank Tables
    InitTables();
    
    // Initialize skill array
    InitSkills();
    
    // Create Translations
    CreateTranslations();
    
    // Execute Game Loops
    Loop();
    ShieldScript();
    WeaponSpeed();
    StatRandomizer();
    AutosaveHandler();
    DamageNumbers();
    InfoPopoffs();
    HealthBars();
    AutoSellHandler();
    
    // GUI
	// CheckCursor();
	// CheckGUI();
	// MenuUpdate();
    
    // Remove Aura if the keep Aura CVAR is off
    if (!GetCVar("drpg_skill_keepauras"))
        RemoveAura();
    
    // Transport from/to Outpost Screen Fading
    if (Transported)
    {
        for (int i = 0; i < MAX_PLAYERS; i++)
            SetActorProperty(Players(i).TID, APROP_Invulnerable, false);
        SetPlayerProperty (0, 0, PROP_TOTALLYFROZEN); // In case we were in the menu
        FadeRange(255, 255, 255, 1.0, 255, 255, 255, 0.0, 1.0);
        Transported = false;
    };
    
    // Store the current map number
    MapNumber = GetLevelInfo(LEVELINFO_LEVELNUM);
    if (MapNumber > 39) MapNumber = 39;
    
    // Clear the Player's summons
    for (int i = 0; i < MAX_SUMMONS; i++)
        Player.SummonTID[i] = 0;
    Player.Summons = 0;
    
    // Clear the DropTID array
    for (int i = 0; i < MAX_DROPS; i++)
        Player.DropTID[i] = -1;
    
    // Initial build of ItemData
    BuildItemData();
    
    // Initial build of SkillData
    BuildSkillData();
    
    // Mission Handling
    for (int i = 0; i < MAX_PLAYERS; i++)
        if (Players(i).Mission.Active)
        {
            if (Players(i).Mission.Type == MT_REINFORCEMENTS && !InBase) // Kill Reinforcements
            {
                MonsterTransport(CalculateAverageDifficulty(), 10 - Players(i).Mission.Difficulty, 1024);
                break;
            };
        };
};

// Loop Script
script void Loop()
{
    int OldDamage;
    
    Start:
    
    // Update Functions
    CheckCombo();
    CheckStats();
    CheckStatBonus();
    CheckHardStatCaps();
    CheckRegen();
    CheckLuck();
    CheckHealth();
    CheckArmorMax();
    CheckAugSlots();
    CheckAugs();
    CheckLevel();
    CheckRank();
    CheckSkills();
    CheckBurnout();
    CheckShields();
    CheckShieldAccessory();
    CheckStim();
    CheckPerks();
    CheckStatBounds();
    CheckToxicity();
    CheckLevelInfo();
    CheckCapacity();
    CheckShopCard();
    CheckMission();
    CheckHUD();
    
    // Handle the menu cursor color
    MenuCursorColor = CursorColors[(Timer() / 3) % 6];
    
    // Calculate Shop Discount
    Player.ShopDiscount = (int)((Player.RankLevel * 2.1) + (InBase ? (Player.ShopCard * 5) : 0));
    
    // Auto-Sell Timer Handling
    if (Player.AutoSellTimer > 0)
        Player.AutoSellTimer--;
    
    // Main Menu
    if (Player.InMenu)
        MenuLoop();
    
    // Shop Menu
    if (Player.InShop)
        ShopLoop();
    
    // Menu freezing/dimming
    if (Player.InMenu || Player.InShop || Player.OutpostMenu > 0)
    {
        if (GetCVar("drpg_menufreeze") && !InMultiplayer)
            GiveInventory("DRPGMenuFreezer", 1);
        if (GetCVar("drpg_menudim"))
            FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
    };
    
    // Menu-specific Help
    if (Player.InMenu || Player.InShop || Player.OutpostMenu > 0)
        MenuHelp();
    
    // Menu icon in multiplayer
    if (InMultiplayer && (Player.InMenu || Player.InShop || Player.OutpostMenu > 0))
    {
        fixed X = GetActorX(Player.TID);
        fixed Y = GetActorY(Player.TID);
        fixed Z = GetActorZ(Player.TID);
        fixed Height = GetActorPropertyFixed(Player.TID, APROP_Height);
        
        SpawnForced("DRPGMenuIcon", X, Y, Z + Height + 8.0, 0, 0);
    };
    
    // Shop Special Handling
    if (Arbitrator) CheckShopSpecial(false);
    
    // Always Quick Heal if CVAR is set
    if (GetCVar("drpg_auto_heal"))
        QuickHeal(false);
    
    // Handle damage numbers on the HUD
    if (GetCVar("drpg_damagenumbers_hud"))
        DamageNumbersHUD();
    
    // Check Health/Shield for this tic
    Player.BeforeHealth = GetActorProperty(Player.TID, APROP_Health);
    Player.BeforeShield = Player.Shield.Charge;
    
    // Quick temporary little shield hack to prevent you from exploding if you still have charge left in it
    if (Player.Shield.Active && Player.Shield.Charge > 0)
        SetPlayerProperty(0, 1, PROP_BUDDHA)
    else
        SetPlayerProperty(0, 0, PROP_BUDDHA);
    
    // Regeneration
    if (ClassifyActor(Player.TID) & ACTOR_ALIVE)
        DoRegen();
    
    // Give the Strength boosting item
    if (Player.TotalDamage != OldDamage)
    {
        if (OldDamage)
            TakeInventory(StrParam("DRPGStrength%d\n", OldDamage), 1);
        
        if (Player.TotalDamage >= 32000)
            GiveInventory("DRPGStrength32000", 1)
        else if (Player.TotalDamage > 0)
            GiveInventory(StrParam("DRPGStrength%d\n", Player.TotalDamage), 1);
        
        OldDamage = Player.TotalDamage;
    };
    
    // Set mass stupid high when Invulnerable to prevent knockback
    if (CheckInventory("PowerInvulnerable"))
        Player.Mass *= 128;
    
    // Survival Bonus
    if (RandomFixed(0.0, 100.0) <= Player.SurvivalBonus)
    {
        SetPlayerProperty(0, 1, PROP_BUDDHA);
        
        if (GetActorProperty(Player.TID, APROP_Health) == 1)
        {
            if (Player.Shield.Accessory == SHIELD_ACC_UW0T && !Player.Shield.Active)
            {
                Player.Shield.Charge = Player.Shield.Capacity;
                ToggleShield(false);
            };
            
            HealThing(1);
            ActivatorSound("health/survive", 127);
            SetHudSize(100, 100, false);
            SetFont("PINSA0");
            HudMessage("A\n", HUDMSG_FADEOUT | HUDMSG_ADDBLEND, 0, CR_UNTRANSLATED, 61.4, 89.4, 0.5, 0.5);
        };
    }
    else
        SetPlayerProperty(0, 0, PROP_BUDDHA);
    
    // Continue check
    if (CheckInventory("DRPGContinue") > 0)
    {
        SetPlayerProperty(0, 1, PROP_BUDDHA);
        
        if (GetActorProperty(Player.TID, APROP_Health) <= 1)
        {
            HealThing(1000000);
            ActivatorSound("health/resurrect", 127);
            TakeInventory("DRPGContinue", 1);
        };
    };
    
    // Apply Stats
    SetActorProperty(Player.TID, APROP_SpawnHealth, Player.HealthMax);
    SetActorPropertyFixed(Player.TID, APROP_DamageFactor, Player.DamageFactor);
    SetActorProperty(Player.TID, APROP_Mass, Player.Mass);
    SetActorPropertyFixed(Player.TID, APROP_Speed, Player.Speed);
    SetActorPropertyFixed(Player.TID, APROP_JumpZ, Player.JumpHeight);
    
    // Clear your Status Effect if the timer is empty
    if (Player.StatusTimer <= 0)
        Player.StatusType = 0;
    
    // Make you invincible while in the Menus and if menu freezing is enabled
    if ((Player.InMenu || Player.InShop) && GetCVar("drpg_menufreeze"))
        SetActorProperty(Player.TID, APROP_DamageFactor, 0);
    
    // Reset Damage Type
    Player.DamageType = DT_NONE;
    
    // Loop
    Delay(1);
    
    // this needs to be done in a separate tic
    Player.AfterHealth = GetActorProperty(Player.TID, APROP_Health);
    Player.HealthLoss = Player.BeforeHealth - Player.AfterHealth;
    Player.AfterShield = Player.Shield.Charge;
    Player.ShieldLoss = Player.BeforeShield - Player.AfterShield;
    
    goto Start;
};

// Handles Weapon Firing Speed
script void WeaponSpeed()
{
    Start:
    int Time;
    
    if (Player.Agility <= 100)
        Time = Abs(Round(Player.WeaponSpeed * 0.35 - 35.0))
    else
        Time = 0;
    
    if (GetCVar("drpg_stat_weaponspeed"))
        GiveInventory("DRPGSpeed", 1);
    
    Delay(Time + 1);
    goto Start;
};

// Stat Randomizer Script
script void StatRandomizer()
{
    Start:
    
    if (GetCVar("drpg_auto_spend"))
        while (CheckInventory("DRPGStatToken") > 0)
        {
            if (Random(1, 2) == 1 && GetCVar("drpg_auto_spend_pref") > 0) // Select Preferred Stat
                IncreaseStat(GetCVar("drpg_auto_spend_pref"))
            else
                IncreaseStat(Random(1, 8));
            
            // Should prevent runaway issues if you have a ton of Stat Tokens
            Delay(1);
        };
    
    Delay(1);
    goto Start;
};

// Handles autosaving
script void AutosaveHandler()
{
    // Terminate if the autosave CVar is disabled
    if (GetCVar("drpg_autosave") == 0 || (PlayerCount() > 1 && !Arbitrator)) return;
    
    int SaveTimer = GetCVar("drpg_autosave") * (35 * 60);
    bool Safe;
    bool DamageTimer;
    
    while (true)
    {
        if (Player.HealthLoss)
            DamageTimer = 0
        else
            ++DamageTimer;
        
        if ((Player.InMenu || Player.InShop) && !GetCVar("drpg_menufreeze"))
            DamageTimer = ASAVE_SAFETIME;
        
        if (!SaveTimer)
        {
            Safe = true;
            
            if (DamageTimer < ASAVE_SAFETIME ||
                GetActorProperty(Player.TID, APROP_Health) <= GetActorProperty(Player.TID, APROP_SpawnHealth) / 10)
                Safe = false;
            
            if (Safe)
            {
                Autosave();
                SaveTimer = GetCVar("drpg_autosave") * (35 * 60);
            }
            else
                SaveTimer = ASAVE_RETRYTIME;
        }
        else
            --SaveTimer;
        
        Delay(1);
    };
};

// Handles Status Effects
acscript void StatusEffect(int Type, int Time, int Intensity)
{
    Player.StatusType = Type;
    Player.StatusTimer = Time * 35;
    
    if (Intensity == 0)
        Intensity = 1;
    
    while (Player.StatusTimer > 0)
    {
        if (Type == 1) // Confusion
        {
            SetActorAngle(0, GetActorAngle(0) + 1024 * Cos(Timer() * (Intensity * 0.01)));
            SetActorPitch(0, 1024 * 8, Cos(Timer() * (Intensity * 0.01)));
        };
        
        if (Type == 2) // Blind
            FadeRange(0, 0, 0, (0.75 + (Intensity / 400)) - ((1024 * 8) * Sin(Timer() * 0.01)), 0, 0, 0, 0.0, 0.5);
        
        if (Type == 3) // Poisoned
            if ((Timer() % 35) == 1 && (GetActorProperty(Player.TID, APROP_Health) - Intensity) > 1)
            {
                DamageThing(Intensity);
                FadeRange(0, 255, 0, 0.25, 0, 255, 0, 0.0, (0.25 + Intensity / 100));
            };
        
        if (Player.StatusTimer > 0)
            Player.StatusTimer--;
        
        Delay(1);
    };
};

// Quick Heal
acscript void QuickHeal(int Quick) net
{
    // If you're dead, return
    if (ClassifyActor(Player.TID) & ACTOR_DEAD) return;
    
    int Health = GetActorProperty(Player.TID, APROP_Health);
    int Percent = GetCVar("drpg_auto_heal_percent");
    
    if ((Health < Player.HealthMax / Percent) || Quick)
    {
        if (GetCVar("drpg_auto_heal_order") == 1) // Smallest to Largest
        {
                 if (CheckInventory("DRPGStimPack"))            UseInventory("DRPGStimPack")
            else if (CheckInventory("DRPGMedikit"))             UseInventory("DRPGMedikit")
            else if (CheckInventory("DRPGLargeMedikit"))        UseInventory("DRPGLargeMedikit")
            else if (CheckInventory("DRPGXLMedikit"))           UseInventory("DRPGXLMedikit")
            else if (CheckInventory("DRPGMedPack"))             UseInventory("DRPGMedPack")
            else if (CheckInventory("DRPGSurgeryKit"))          UseInventory("DRPGSurgeryKit");
        }
        else if (GetCVar("drpg_auto_heal_order") == 2) // Largest to Smallest
        {
                 if (CheckInventory("DRPGSurgeryKit"))          UseInventory("DRPGSurgeryKit")
            else if (CheckInventory("DRPGMedPack"))             UseInventory("DRPGMedPack")
            else if (CheckInventory("DRPGXLMedikit"))           UseInventory("DRPGXLMedikit")
            else if (CheckInventory("DRPGLargeMedikit"))        UseInventory("DRPGLargeMedikit")
            else if (CheckInventory("DRPGMedikit"))             UseInventory("DRPGMedikit")
            else if (CheckInventory("DRPGStimPack"))            UseInventory("DRPGStimPack");
        };
    };
};

// Quickly buy EP
acscript void QuickEP() net
{
    if (!GetCVar("drpg_shoptype") && !InBase)
    {
        ActivatorSound("menu/error", 127);
        return;
    };
    
    int Amount = Player.EPMax - Player.EP;
    
    if (CheckInventory("DRPGCredits") > 0 && Player.EP < Player.EPMax)
    {
        ActivatorSound("health/epcapsule", 127);
        
        if (CheckInventory("DRPGCredits") < Amount)
            Amount = CheckInventory("DRPGCredits");
        
        TakeInventory("DRPGCredits", Amount);
        AddEP(Amount);
    }
    else
    {
        ActivatorSound("menu/error", 127);
        return;
    };
};

// Death Script
script void Dead() death
{
    // Taunt the Player
    ActivatorSound("Taunt", 127);
    
    // Reset menu vars
    Player.InMenu = false;
    Player.InShop = false;
    
    // Remove Aura
    RemoveAura();
    
    // Remove Shield
    if (Player.Shield.Active)
        ToggleShield(true);
    
    // Drop Credits
    if (GetCVar("drpg_multi_dropcredits") && CheckInventory("DRPGCredits") > 0)
    {
        int DropAmount = CheckInventory("DRPGCredits") / 100 * GetCVar("drpg_multi_dropcredits_percent");
        
        // Cap out at a million so if you have stupid amounts of Credits you don't freeze/nuke the game
        if (DropAmount > 1000000) DropAmount = 1000000;
        
        TakeInventory("DRPGCredits", DropAmount);
        DropMoney(PlayerNumber(), 0, DropAmount);
    };
    
    // Drop Inventory
    if (GetCVar("drpg_multi_dropinv"))
        DropInventory();
    
    // Remove TID
    Thing_ChangeTID(Player.TID, 0);
};

// Respawn
script void Respawn() respawn
{
    // Reassign TID
    Player.TID = PLAYER_TID + PlayerNumber();
    Thing_ChangeTID(0, Player.TID);
    
    if (GetCVar("drpg_debug"))
        Log("\cdDEBUG: Player TID: %d\n", Player.TID);
    
    // Heal to max health
    SetActorProperty(0, APROP_Health, Player.HealthMax);
    
    // XP/Rank Penalty
    if (GetCVar("drpg_multi_takexp"))
    {
        int XPPenalty = Abs(Round((fixed)XPTable[Player.Level] / 100.0 * GetCVarFixed("drpg_multi_takexp_percent")));
        int RankPenalty = Abs(Round((fixed)RankTable[Player.RankLevel] / 100.0 * GetCVarFixed("drpg_multi_takexp_percent")));
        
        if (XPPenalty > 0 && RankPenalty > 0)
        {
            Player.XP -= XPPenalty;
            Player.Rank -= RankPenalty;
            SetFont("BIGFONT");
            HudMessage("\cjXP -%d\n\ckRank -%d\n", XPPenalty, RankPenalty, HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_WHITE, 1.5, 0.75, 2.0, 2.0);
        };
    };
    
    // Restore EP if CVAR is set
    if (GetCVar("drpg_multi_restoreep"))
        Player.EP = Player.EPMax;
    
    // Give a box of ammo if a specific ammo type is empty if the CVAR is set
    if (GetCVar("drpg_multi_restoreammo"))
    {
        if (CheckInventory("Clip") < GetAmmoAmount("Clip") * (Player.Capacity / 10))
            SetInventory("Clip", GetAmmoAmount("Clip") * (Player.Capacity / 10));
        if (CheckInventory("Shell") < GetAmmoAmount("Shell") * (Player.Capacity / 10))
            SetInventory("Shell", GetAmmoAmount("Shell") * (Player.Capacity / 10));
        if (CheckInventory("RocketAmmo") < GetAmmoAmount("RocketAmmo") * (Player.Capacity / 10))
            SetInventory("RocketAmmo", GetAmmoAmount("RocketAmmo") * (Player.Capacity / 10));
        if (CheckInventory("Cell") < GetAmmoAmount("Cell") * (Player.Capacity / 10))
            SetInventory("Cell", GetAmmoAmount("Cell") * (Player.Capacity / 10));
    };
    
    // Run Scripts
    DamageNumbers();
    InfoPopoffs();
    HealthBars();
};

// Apply values to global vars visible to the HUD
function void CheckHUD()
{
    // New Multiplayer HUD Checking
    int PlayerNum = PlayerNumber();
    
    // Max Health/Armor
    HealthMax[PlayerNum] = Player.HealthMax;
    ArmorMax[PlayerNum] = Player.ArmorMax;
    
    // EP
    EP[PlayerNum] = Player.EP;
    EPMax[PlayerNum] = Player.EPMax;
    
    // EP Bar on HUD
    if (Player.EPMax == 0)
        SetInventory("DRPGEP", 0)
    else
        SetInventory("DRPGEP", Player.EP * 100 / Player.EPMax);
    
    // Combo System
    Combo[PlayerNum] = Player.Combo;
    BonusGained[PlayerNum] = Player.BonusGained;
    XPGained[PlayerNum] = Player.XPGained;
    RankGained[PlayerNum] = Player.RankGained;
    
    // Aura Timer
    AuraTimerHUD[PlayerNum] = Player.AuraTimer / 35 + 1;
    
    // Regen Boost
    SetInventory("DRPGRegenBoost", (Player.RegenBoostTimer > 0));
    RegenBoostTimerHUD[PlayerNum] = Player.RegenBoostTimer / 35 + 1;
    
    // For Combo Bar on HUD
    if (Player.ComboTimer < 35 * 4 && Player.ComboTimer > 35 * 2)
    {
        SetInventory("DRPGCombo", (int)((fixed)Player.ComboTimer / (((fixed)COMBO_MAX) / 100.0)));
        SetInventory("DRPGCombo2", 0);
    }
    else if (Player.ComboTimer <= 35 * 2)
    {
        SetInventory("DRPGCombo", 0);
        SetInventory("DRPGCombo2", (int)((fixed)Player.ComboTimer / (((fixed)COMBO_MAX) / 100.0)));
    };
    
    // Stim Timer
    SetInventory("DRPGStimActive", Player.Stim.Active);
    if (Player.Stim.Timer > 0)
        StimTimerHUD[PlayerNum] = Player.Stim.Timer / 35 + 1
    else
        StimTimerHUD[PlayerNum] = 0;
    
    // Shield
    if (Player.Shield.Capacity > 0)
    {
        Shield[PlayerNum] = Player.Shield.Charge;
        ShieldCapacity[PlayerNum] = Player.Shield.Capacity;
        ShieldHealth[PlayerNum] = Player.Shield.Health;
        SetInventory("DRPGShieldCapacity", (int)(((fixed)Player.Shield.Charge / (fixed)Player.Shield.Capacity) * 100.0));
        SetInventory("DRPGShield", Player.Shield.Active);
    };
    
    // Status Timer
    if (Player.StatusTimer > 0)
        StatusTimerHUD[PlayerNum] = Player.StatusTimer / 35 + 1
    else
        StatusTimerHUD[PlayerNum] = 0;
    
    // Items
    Credits[PlayerNum] = CheckInventory("DRPGCredits");
    Continues[PlayerNum] = CheckInventory("DRPGContinue");
};

function void DefaultLoadout()
{
    // Extras Compatibility
    if(GetCVar("drpg_ext_extras"))
        SetWeapon("Pistol1");
    
    // DoomRL Compatibility
    if (GetCVar("drpg_ext_doomrl"))
        SetWeapon("RLPistol");
};

function void CheckCompatibility()
{
    bool Success = false;
    int TID = UniqueTID();
    
    // Reset CVARs
    SetCVar("drpg_ext_extras", 0);
    SetCVar("drpg_ext_doomrl", 0);
    
    if (GetCVar("drpg_debug"))
        Log("\cdDEBUG: \c-Checking Compatibility...\n");
    
    // Extras
    Success = SpawnForced("Pistol1", 0, 0, 0, TID, 0);
    if (Success)
    {
        if (GetCVar("drpg_debug"))
            Log("\cdDEBUG: \caExtras\c- detected\n");
        SetCVar("drpg_ext_extras", 1);
        Thing_Remove(TID);
        return;
    };
    
    // DoomRL
    Success = SpawnForced("RLPistolPickup", 0, 0, 0, TID, 0);
    if (Success)
    {
        if (GetCVar("drpg_debug"))
            Log("\cdDEBUG: \cdDoomRL \c-detected\n");
        SetCVar("drpg_ext_doomrl", 1);
        Thing_Remove(TID);
        return;
    };
};
