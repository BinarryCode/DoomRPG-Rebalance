#include "Arena.dh"
#include "Augs.dh"
#include "Globals.dh"
#include "ItemData.dh"
#include "Menu.dh"
#include "Outpost.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

// Version and Timestamp
str[2] Version =
{
	"v0.98 Beta - Multiplayer Insanity Edition";
	"Saturday, June 14, 2014 at 2:06:29 PM";
};

// Init Script
script Init() enter
{
	if (!Player.FirstRun)
	{
		// Player TID
		Player.TID = PLAYER_TID + PlayerNumber();
		Thing_ChangeTID(0, Player.TID);
		
        if (GetCVar("drpg_debug"))
            Log("\cdDEBUG: Player TID: %d\n", Player.TID);

		// Setup initial vars
		Player.EP = 100;
		Player.RankString = Ranks[0];
		Player.PayTimer = 35 * 60 * GetCVar("drpg_pay_interval");
		Player.Vitality = 10;
		Player.Energy = 10;
		Player.Capacity = 10;
		Player.Shield.Timer = 175;
        Player.Augs.Battery = 100;
		
		// Height Check
		SetInventory("HeightCheck", (int)GetActorPropertyFixed(0, APROP_Height));
		
		// Give the default loadout based on compatibility switches
		DefaultLoadout();

		// Version Info
		if (Arbitrator) Log("\cnDoom RPG %s (%s) loaded!\n", Version[0], Version[1]);
		
		// Set the default skill indices
		for (int i = 0; i < MAX_SKILLKEYS; i++)
		{
			Player.SkillCatagory[i] = -1;
			Player.SkillIndex[i] = -1;
		};
		
		// Initialize skill array
		InitSkills();
		
        // Set default selected skill to nothing
        Player.SkillSelected = -1;
        
		// Done first run
		Player.FirstRun = true;
	};
	
	// Create Translations
	CreateTranslations();
	
	// Execute Game Loops
	Loop();
	ShieldScript();
	Speed();
	StatRandomizer();
	AutosaveHandler();
	DamageNumbers();
	InfoPopoffs();
	HealthBars();
	
	// GUI
	CheckGUI();
	CheckCursor();
	
	// Remove Aura if the keep Aura CVAR is off
	if (!GetCVar("drpg_skill_keepauras"))
        RemoveAura();
	
	// Transport from/to Outpost Screen Fading
	if (Transported)
	{
		for (int i = 0; i < MAX_PLAYERS; i++)
			SetActorProperty(Players(i).TID, APROP_Invulnerable, false);
		SetPlayerProperty (0, 0, PROP_TOTALLYFROZEN); // In case we were in the menu
		FadeRange(255, 255, 255, 1.0, 255, 255, 255, 0.0, 1.0);
		Transported = false;
	};
	
	// Store the current map number
	MapNumber = GetLevelInfo(LEVELINFO_LEVELNUM);
	if (MapNumber > 39) MapNumber = 39;
	
	// Clear the Player's summons
	for (int i = 0; i < MAX_SUMMONS; i++)
		Player.SummonTID[i] = 0;
	Player.Summons = 0;
	
	// Initial build of ItemData
	BuildItemData();
	
	// Reset the menus if they were open in the last level
	Player.InMenu = false;
	Player.InShop = false;
};

// Loop Script
script Loop()
{
	Start:
	// Update Functions
	CheckCombo();
	CheckStats();
	CheckStatBonus();
	CheckHardStatCaps();
	CheckRegen();
	CheckLuck();
	CheckHealth();
	CheckArmorMax();
	CheckAugSlots();
	CheckAugs();
	CheckLevel();
	CheckRank();
	CheckSkills();
	CheckBurnout();
	CheckShields();
	CheckShieldAccessory();
	CheckStim();
	CheckPerks();
	CheckStatBounds();
	CheckToxicity();
	CheckLevelInfo();
	CheckCapacity();
	CheckAutoSell();
	CheckHUD();
	
	// Give the Player a Health Bar for Multiplayer
	if (InMultiplayer) SetInventory("HealthBar", 1);
	
	// Handle the menu cursor color
	MenuCursorColor = CursorColors[(Timer() / 3) % 6];
	
	// Calculate Shop Discount
	Player.ShopDiscount = (int)(Player.RankLevel * 2.1);
	
	// Auto-Sell Timer Handling
	if (Player.AutoSellTimer > 0)
		Player.AutoSellTimer--;
	
	// Main Menu
	if (Player.InMenu)
		MenuLoop();
	
	// Shop Menu
	if (Player.InShop)
		ShopLoop();
	
	// Menu freezing/dimming
	if (Player.InMenu || Player.InShop || Player.OutpostMenu > 0)
	{
		if (GetCVar("drpg_menufreeze"))
			GiveInventory("MenuFreezer", 1);
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
	};
	
	// Menu-specific Help
	if (Player.InMenu || Player.InShop || Player.OutpostMenu > 0)
		MenuHelp();
	
	// Menu icon in multiplayer
	if (InMultiplayer && (Player.InMenu || Player.InShop || Player.OutpostMenu > 0))
	{
		fixed X = GetActorX(Player.TID);
		fixed Y = GetActorY(Player.TID);
		fixed Z = GetActorZ(Player.TID);
		fixed Height = GetActorPropertyFixed(Player.TID, APROP_Height);
		
		SpawnForced("MenuIcon", X, Y, Z + Height + 8.0, 0, 0);
	};
	
	// Shop Special Handling
	if (Arbitrator) CheckShopSpecial(false);
	
	// Always Quick Heal if CVAR is set
	if (GetCVar("drpg_auto_heal"))
		QuickHeal(false);
	
	// Handle damage numbers on the HUD
	if (GetCVar("drpg_damagenumbers_hud") && !Player.Shield.Active)
		DamageNumbersHUD();

	// Check health for this tic
	Player.BeforeHealth = GetActorProperty(Player.TID, APROP_Health);
	
	// Regeneration
	if (GetActorProperty(Player.TID, APROP_Health) > 0)
		DoRegen();
	
	// Give the Strength boosting item
	if (Player.TotalDamage > 0 && Player.TotalDamage <= 32000)
		GiveInventory(StrParam("Strength%d\n", Player.TotalDamage), 1);
	
	// Set mass stupid high when Invulnerable to prevent knockback
	if (CheckInventory("PowerInvulnerable"))
		Player.Mass *= 128;
	
	// Survival Bonus
	if (RandomFixed(0.0, 100.0) <= Player.SurvivalBonus)
	{
		SetPlayerProperty(0, 1, PROP_BUDDHA);
		
		if (GetActorProperty(Player.TID, APROP_Health) == 1)
		{
			HealThing(1);
			ActivatorSound("health/survive", 127);
		};
	}
	else
		SetPlayerProperty(0, 0, PROP_BUDDHA);
	
	// Continue check
	if (CheckInventory("Continue") > 0)
	{
		SetPlayerProperty(0, 1, PROP_BUDDHA);
		
		if (GetActorProperty(Player.TID, APROP_Health) <= 1)
		{
			HealThing(1000000);
			ActivatorSound("health/resurrect", 127);
			TakeInventory("Continue", 1);
		};
	};
	
	// Apply Stats
	SetActorProperty(Player.TID, APROP_SpawnHealth, Player.HealthMax);
	SetActorPropertyFixed(Player.TID, APROP_DamageFactor, Player.DamageFactor);
	SetActorProperty(Player.TID, APROP_Mass, Player.Mass);
	SetActorPropertyFixed(Player.TID, APROP_Speed, Player.Speed);
	SetActorPropertyFixed(Player.TID, APROP_JumpZ, Player.JumpHeight);
	
	// Clear your Status Effect if the timer is empty
	if (Player.StatusTimer <= 0)
		Player.StatusType = 0;
	
	// Make you invincible while in the Menus and if menu freezing is enabled
	if ((Player.InMenu || Player.InShop) && GetCVar("drpg_menufreeze"))
		SetActorProperty(Player.TID, APROP_DamageFactor, 0);
	
    // Reset Damage Type
    Player.DamageType = DT_NONE;
    
	// Loop
	Delay(1);
	
	// this needs to be done in a separate tic
	Player.AfterHealth = GetActorProperty(Player.TID, APROP_Health);
	Player.HealthLoss = Player.BeforeHealth - Player.AfterHealth;
	
	goto Start;
};

// Handles Weapon Firing Speed
script Speed()
{
	Start:
	int Time;
	
    if (Player.Agility <= 100)
        Time = Abs(Round(Player.WeaponSpeed * 0.35 - 35.0))
    else
        Time = 0;
    
    if (GetCVar("drpg_stat_weaponspeed"))
        GiveInventory("Speed", 1);
	
	Delay(Time + 1);
	goto Start;
};

// Stat Token Randomizer Script
script StatRandomizer()
{
	Start:
	int StatTokens = CheckInventory("StatToken");
	
	Delay(1);

	// Only randomize your starting tokens
	if (GetCVar("drpg_randomstatgrowth") == 1 && !RandomizedStartTokens)
	{
		if (StatTokens > 0)
			IncreaseStat(Random(1, 8))
		else if (StatTokens == 0)
			RandomizedStartTokens = true;;
	}
	// Always spend Tokens, no matter how you got them
	else if (GetCVar("drpg_randomstatgrowth") == 2)
		if (StatTokens > 0)
			IncreaseStat(Random(1, 8));

	// Spend Tokens only on level up
	if (GetCVar("drpg_autospend"))
		while (Player.LevelTokens > 0)
		{
			IncreaseStat(Random(1, 8));
			Delay(1);
		};
	
	goto Start;
};

// Handles autosaving
script AutosaveHandler()
{
	// Terminate if the autosave CVar is disabled
	if (GetCVar("drpg_autosave") == 0 || (PlayerCount() > 1 && !Arbitrator)) return;
	
	int SaveTimer = GetCVar("drpg_autosave") * (35 * 60);
	bool Safe;
	bool DamageTimer;
	
	while (true)
	{
		if (Player.HealthLoss)
			DamageTimer = 0
		else
			++DamageTimer;
		
		if ((Player.InMenu || Player.InShop) && !GetCVar("drpg_menufreeze"))
			DamageTimer = ASAVE_SAFETIME;
		
		if (!SaveTimer)
		{
			Safe = true;
			
			if (DamageTimer < ASAVE_SAFETIME ||
				GetActorProperty(Player.TID, APROP_Health) <= GetActorProperty(Player.TID, APROP_SpawnHealth) / 10)
				Safe = false;
			
			if (Safe)
			{
				Autosave();
				SaveTimer = GetCVar("drpg_autosave") * (35 * 60);
			}
			else
				SaveTimer = ASAVE_RETRYTIME;
		}
		else
			--SaveTimer;
		
		Delay(1);
	};
};

// Handles Status Effects
acscript StatusEffect(int Type, int Time, int Intensity)
{
	Player.StatusType = Type;
	Player.StatusTimer = Time * 35;
	
	if (Intensity == 0)
		Intensity = 1;
	
	while (Player.StatusTimer > 0)
	{
		if (Type == 1) // Confusion
		{
			SetActorAngle(0, GetActorAngle(0) + 1024 * Cos(Timer() * (Intensity * 0.01)));
			SetActorPitch(0, 1024 * 8, Cos(Timer() * (Intensity * 0.01)));
		};
		
		if (Type == 2) // Blind
			FadeRange(0, 0, 0, (0.75 + (Intensity / 400)) - ((1024 * 8) * Sin(Timer() * 0.01)), 0, 0, 0, 0.0, 0.5);
		
		if (Type == 3) // Poisoned
			if ((Timer() % 35) == 1 && (GetActorProperty(Player.TID, APROP_Health) - Intensity) > 1)
			{
				DamageThing(Intensity);
				FadeRange(0, 255, 0, 0.25, 0, 255, 0, 0.0, (0.25 + Intensity / 100));
			};
		
		if (Player.StatusTimer > 0)
			Player.StatusTimer--;
		
		Delay(1);
	};
};

// Quick Heal
acscript QuickHeal(int Quick) net
{
	// If you're dead, return
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	int Health = GetActorProperty(Player.TID, APROP_Health);
	int Percent = GetCVar("drpg_auto_heal_percent");
	
	if ((Health < Player.HealthMax / Percent) || Quick)
	{
		if (GetCVar("drpg_auto_heal_order") == 1) // Smallest to Largest
		{
				 if (CheckInventory("StimPack"))			UseInventory("StimPack")
			else if (CheckInventory("Medikit"))				UseInventory("Medikit")
			else if (CheckInventory("LargeMedikit"))		UseInventory("LargeMedikit")
			else if (CheckInventory("XLMedikit"))			UseInventory("XLMedikit")
			else if (CheckInventory("MedPack"))				UseInventory("MedPack")
			else if (CheckInventory("SurgeryKit"))			UseInventory("SurgeryKit");
		}
		else if (GetCVar("drpg_auto_heal_order") == 2) // Largest to Smallest
		{
				 if (CheckInventory("SurgeryKit"))			UseInventory("SurgeryKit")
			else if (CheckInventory("MedPack"))				UseInventory("MedPack")
			else if (CheckInventory("XLMedikit"))			UseInventory("XLMedikit")
			else if (CheckInventory("LargeMedikit"))		UseInventory("LargeMedikit")
			else if (CheckInventory("Medikit"))				UseInventory("Medikit")
			else if (CheckInventory("StimPack"))			UseInventory("StimPack");
		};
	};
};

// Quickly buy EP
acscript QuickEP() net
{
	if (!GetCVar("drpg_shoptype") && !InBase)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	int Amount = Player.EPMax - Player.EP;
	
	if (CheckInventory("Credits") > 0 && Player.EP < Player.EPMax)
	{
		ActivatorSound("health/epcapsule", 127);
		
		if (CheckInventory("Credits") < Amount)
			Amount = CheckInventory("Credits");
		
		TakeInventory("Credits", Amount);
		AddEP(Amount);
	}
	else
	{
		ActivatorSound("menu/error", 127);
		return;
	};
};

// Death Script
script Dead() death
{
	// Taunt the Player
	ActivatorSound("Taunt", 127);
	
	// Reset menu vars
	Player.InMenu = false;
	Player.InShop = false;
	
	// Remove Aura
	Player.Aura = 0;
	Player.AuraTimer = 0;
	
	// Remove Shield
	if (Player.Shield.Active)
		ToggleShield(true);
	
	// Drop Credits
	if (GetCVar("drpg_multi_dropcredits") && CheckInventory("Credits") > 0)
	{
		int DropAmount = CheckInventory("Credits") / 100 * GetCVar("drpg_multi_dropcredits_percent");
		
		// Cap out at a million so if you have stupid amounts of Credits you don't freeze/nuke the game
		if (DropAmount > 1000000) DropAmount = 1000000;
		
		TakeInventory("Credits", DropAmount);
		
		// Credit Fountain
		int Total = DropAmount;
		int Drops;
		
		Drops = Total / 1000;
		while (Drops--) DropItem(0, "Credits1000", 1, 256);
		Total -= (Total / 1000) * 1000;

		Drops = Total / 100;
		while (Drops--) DropItem(0, "Credits100", 1, 256);
		Total -= (Total / 100) * 100;

		Drops = Total / 50;
		while (Drops--) DropItem(0, "Credits50", 1, 256);
		Total -= (Total / 50) * 50;

		Drops = Total / 20;
		while (Drops--) DropItem(0, "Credits20", 1, 256);
		Total -= (Total / 20) * 20;

		Drops = Total / 10;
		while (Drops--) DropItem(0, "Credits10", 1, 256);
		Total -= (Total / 10) * 10;

		Drops = Total / 5;
		while (Drops--) DropItem(0, "Credits5", 1, 256);
		Total -= (Total / 5) * 5;
		
		Drops = Total;
		while (Total--) DropItem(0, "Credits1", 1, 256);
	};
	
	// Drop Inventory
	if (GetCVar("drpg_multi_dropinv"))
		DropInventory();
	
	// Remove TID
	Thing_ChangeTID(Player.TID, 0);
};

// Respawn
script Respawn() respawn
{
	// Reassign TID
	Player.TID = PLAYER_TID + PlayerNumber();
	Thing_ChangeTID(0, Player.TID);
	
    if (GetCVar("drpg_debug"))
        Log("\cdDEBUG: Player TID: %d\n", Player.TID);
	
    // Heal to max health
    HealThing(1000000);
    
	// XP/Rank Penalty
	if (GetCVar("drpg_multi_takexp"))
	{
		int XPPenalty = Abs(Round((fixed)XPTable[Player.Level] / 100.0 * GetCVarFixed("drpg_multi_takexp_percent")));
		int RankPenalty = Abs(Round((fixed)RankTable[Player.RankLevel] / 100.0 * GetCVarFixed("drpg_multi_takexp_percent")));
		
		if (XPPenalty > 0 && RankPenalty > 0)
		{
			Player.XP -= XPPenalty;
			Player.Rank -= RankPenalty;
			SetFont("BIGFONT");
			HudMessage("\cjXP -%d\n\ckRank -%d\n", XPPenalty, RankPenalty, HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_WHITE, 1.5, 0.75, 2.0, 2.0);
		};
	};
	
	// Restore EP if CVAR is set
	if (GetCVar("drpg_multi_restoreep"))
		Player.EP = Player.EPMax;
	
	// Give a box of ammo if a specific ammo type is empty if the CVAR is set
	if (GetCVar("drpg_multi_restoreammo"))
	{
		if (CheckInventory("Clip") < GetAmmoAmount("Clip") * (Player.Capacity / 10))
			SetInventory("Clip", GetAmmoAmount("Clip") * (Player.Capacity / 10));
		if (CheckInventory("Shell") < GetAmmoAmount("Shell") * (Player.Capacity / 10))
			SetInventory("Shell", GetAmmoAmount("Shell") * (Player.Capacity / 10));
		if (CheckInventory("RocketAmmo") < GetAmmoAmount("RocketAmmo") * (Player.Capacity / 10))
			SetInventory("RocketAmmo", GetAmmoAmount("RocketAmmo") * (Player.Capacity / 10));
		if (CheckInventory("Cell") < GetAmmoAmount("Cell") * (Player.Capacity / 10))
			SetInventory("Cell", GetAmmoAmount("Cell") * (Player.Capacity / 10));
	};
	
	// Run Scripts
	DamageNumbers();
	InfoPopoffs();
	HealthBars();
};

// Handles informational popoffs
script InfoPopoffs()
{
	Start:
	
	while (GetCVar("drpg_popoffs"))
	{
		int BeforeCredits;
		int AfterCredits;
		int BeforeEP;
		int AfterEP;
		
		// Before Checks
		BeforeCredits = CheckInventory("Credits");
		BeforeEP = Player.EP;
		
		Delay(1);
		
		// After Checks
		AfterCredits = CheckInventory("Credits");
		AfterEP = Player.EP;
		
		// Credits Popoffs
		if (AfterCredits > BeforeCredits)
			Popoff(Player.TID, AfterCredits - BeforeCredits, DNUM_CREDGAIN);
		if (AfterCredits < BeforeCredits)
			Popoff(Player.TID, AfterCredits - BeforeCredits, DNUM_CREDLOSS);
		
		// EP Popoffs
		if (AfterEP > BeforeEP)
			Popoff(Player.TID, AfterEP - BeforeEP, DNUM_EPGAIN);
		if (AfterEP < BeforeEP)
			Popoff(Player.TID, AfterEP - BeforeEP, DNUM_EPLOSS);
			
		// Terminate if the Player is dead
		if (GetActorProperty(0, APROP_Health) <= 0) return;
	};
	
	Delay(1);
	goto Start;
};

// Handles Damage Numbers
script DamageNumbers()
{
	Start:
	
	while (GetCVar("drpg_damagenumbers"))
	{
		int OldTID;
		int TID = UniqueTID();
		int Health = GetActorProperty(0, APROP_Health);
		int Shield = Player.Shield.Charge;
		int Color;
		
		// Lag handling
		Delay(1 + GetCVar("drpg_damagenumbers_delay"));
		
		// Check Health
		Health = Health - GetActorProperty(0, APROP_Health);
		
		// Nullify Health if a Shield is active
		if (CheckInventory("Shield") || GetActorProperty(0, APROP_Health) >= SHIELD_HEALTH - GetActorProperty(0, APROP_SpawnHealth))
			Health = 0;
		
		// Shield breaking hits will cause a major health drop, don't show this
		if (Health >= (SHIELD_HEALTH / 1000) - GetActorProperty(0, APROP_SpawnHealth))
			Health = 0;
		
		// Shield checks
		if (CheckInventory("Shield"))
			Shield = Shield - Player.Shield.Charge;
		
		if (Health != 0 || Shield != 0)
		{
			if (Health >= GetActorProperty(0, APROP_SpawnHealth)) // Critical
				Color = DNUM_CRITICAL
			else if (Health < 0 && !CheckInventory("Shield")) // Healed
				Color = DNUM_HEAL
			else if (Health == 1) // Scratch
				Color = DNUM_SCRATCH
			else if (CheckInventory("Shield") && Shield > 0) // Shield Loss
				Color = DNUM_SHIELDLOSS
			else if (CheckInventory("Shield") && Shield < 0) // Shield Gain
				Color = DNUM_SHIELDGAIN
			else // Normal
				Color = DNUM_NORMAL;
			
			// Store the old TID if it has one
			if (ActivatorTID() > 0)
				OldTID = ActivatorTID();
			
			// Give the activator a TID
			Thing_ChangeTID(0, TID);
			
			// Damage Popoff
			if (CheckInventory("Shield"))
				Popoff(TID, Shield, Color)
			else
				Popoff(TID, Health, Color);
			
			// Change the TID back
			if (OldTID > 0)
				Thing_ChangeTID(TID, OldTID)
			else
				Thing_ChangeTID(TID, 0);
		};
			
		// Terminate if the Actor is dead
		if (GetActorProperty(0, APROP_Health) <= 0) return;
	};
	
	Delay(1);
	goto Start;
};

// Psuedo Damage Numbers on the HUD
script DamageNumbersHUD()
{
	int Before = GetActorProperty(Player.TID, APROP_Health);
	Delay(1);
	
	int After = GetActorProperty(Player.TID, APROP_Health);
	int Loss = Before - After;
	int Color = CR_WHITE;
	
    // Size
	if (Loss == 1)
		SetFont("SMALLFONT")
	else
		SetFont("BIGFONT");
	
    // Color
    switch (Player.DamageType)
    {
        case DT_NORMAL:                     Color = CR_WHITE;       break;
        case DT_TOXIC:                      Color = CR_GREEN;       break;
        case DT_MELEE:                      Color = CR_GREY;        break;
        case DT_FIRE:                       Color = CR_RED;         break;
        case DT_PLASMA: case DT_LIGHTNING:  Color = CR_LIGHTBLUE;   break;
    };
    
	if (Before > After)
		HudMessage("%d\n", Loss, HUDMSG_FADEOUT, 0, Color, 0.4 + RandomFixed(0.0, 0.4), 0.6 + RandomFixed(0.0, 0.3), 0.5, 1.0);
};

// Handles HUD Health Bars
script HealthBars()
{
	int PlayerNum = PlayerNumber();
	Start:
	
	while (GetUserCVar(PlayerNumber(), "drpg_healthbars"))
	{
		SetActivatorToTarget(Players(PlayerNum).TID);
		
		Delay(1);
		
		// Flags
		bool HasHealthBar = (CheckInventory("HealthBar") > 0);
		bool Friendly = GetActorProperty(0, APROP_Friendly);
		bool Shield = CheckInventory("Shield");
		bool IsPlayer = false;
		
		// Stats
		int CurrentLevel = CheckInventory("MonsterLevel");
		int CurrentAura = CheckInventory("MonsterAura");
		int CurrentStrength = CheckInventory("MonsterStrength");
		int CurrentDefense = CheckInventory("MonsterDefense");
		int CurrentHealth = GetActorProperty(0, APROP_Health);
		int MaxHealth = GetActorProperty(0, APROP_SpawnHealth);
		
		// Other
		str Name = GetActorPropertyString(0, APROP_Nametag);
		int HealthPercent;
		str FillType;
		str AuraType;
		
		// Player Stats
		int ID;
		int[12] Stats; // Fuck you and your 20 local script vars limit
		
		// Blank out the name if it is the same as the actor itself
		if (Name == GetActorClass(0)) Name = "";
		
		// Special handling for Player Targets
		if (ActivatorTID() != Players(PlayerNum).TID && (ActivatorTID() >= PLAYER_TID && ActivatorTID() <= PLAYER_TID + MAX_PLAYERS))
		{
			// Find the right Player
			for (int i = 0; i < MAX_PLAYERS; i++)
				if (Players(i).TID == ActivatorTID() && PlayerInGame(i))
				{
					ID = i;
					IsPlayer = true;
					break;
				};
			
			// Apply Stats
			Name = StrParam("%N\n", ID + 1);
			Stats[0] = Players(ID).Level;
			Stats[1] = Players(ID).RankLevel;
			Stats[2] = Players(ID).Strength;
			Stats[3] = Players(ID).Defense;
			Stats[4] = Players(ID).Vitality;
			Stats[5] = Players(ID).Energy;
			Stats[6] = Players(ID).Regeneration;
			Stats[7] = Players(ID).Agility;
			Stats[8] = Players(ID).Capacity;
			Stats[9] = Players(ID).Luck;
			Stats[10] = CheckInventory("Armor");
			Stats[11] = Players(ID).ArmorMax;
			
			// Indestructible Armor check
			if (GetCVar("drpg_ext_doomrl"))
				if (CheckInventory("RLIndestructibleArmorWorn"))
					Stats[11] = 10000;
			
			// If the Player has a Shield active, change the health to Shield amounts instead
			if (Shield)
			{
				CurrentHealth = CheckInventory("ShieldCharge");
				MaxHealth = CheckInventory("ShieldChargeMax");
			};
		};
		
		if (ActivatorTID() != Players(PlayerNum).TID && GetActorProperty(Players(PlayerNum).TID, APROP_Health) > 0)
		{
			SetActivator(Players(PlayerNum).TID);
			NEEDVALIDPLAYER; // Verify that SetActivator is doing its' thing.
			
			int X = GetUserCVar(PlayerNum, "drpg_healthbars_x");
			int Y = GetUserCVar(PlayerNum, "drpg_healthbars_y");
			
			if (HasHealthBar && (Shield || CurrentHealth > 0) && (!Player.InMenu && !Player.InShop && !Player.OutpostMenu))
			{
				// Divide-by-zero check
				if (MaxHealth > 0)
					HealthPercent = (CurrentHealth * 100) / MaxHealth;
				
				if (HealthPercent > 100)
					FillType = "Fill5";
				if (HealthPercent >= 75 && HealthPercent <= 100)
					FillType = "Fill1";
				if (HealthPercent >= 50 && HealthPercent <= 74)
					FillType = "Fill2";
				if (HealthPercent >= 25 && HealthPercent <= 49)
					FillType = "Fill3";
				if (HealthPercent <= 24)
					FillType = "Fill4";
				if (Shield)
					FillType = "Fill6";
				
				SetHudSize(800, 600, false);
				
				if (Friendly)
					if (GetCVar("screenblocks") == 10)
						PrintSprite("HPBarSS", 0, X, Y, 0.05)
					else
					PrintSprite("HPBar2", 0, X, Y, 0.05)
				else
					if (GetCVar("screenblocks") == 10)
						PrintSprite("HPBarSS", 0, X, Y, 0.05)
					else
						PrintSprite("HPBar", 0, X, Y, 0.05);
				
				// Name
				if (GetCVar("drpg_healthbars_names"))
				{
					int Color = CR_GRAY;
					
					switch (CurrentAura)
					{
						case 1: 	Color = CR_RED;		break;
						case 2: 	Color = CR_GREEN;	break;
						case 3: 	Color = CR_WHITE;	break;
						case 4: 	Color = CR_BRICK;	break;
						case 5: 	Color = CR_CYAN;	break;
						case 6: 	Color = CR_PURPLE;	break;
						case 7: 	Color = CR_ORANGE;	break;
						case 8: 	Color = CR_BLUE;	break;
						case 9: 	Color = CR_YELLOW;	break;
						case 10: 	Color = CR_BLACK;	break;
					};
					
					SetFont("BIGFONT");
					HudMessage("%s\n", Name, HUDMSG_PLAIN, 0, Color, X, Y - 24.0, 0.05);
				};
				
				// HP/Max HP and Armor
				SetFont("SMALLFONT");
				if (Shield)
					if (IsPlayer && Stats[10] > 0)
						if (Stats[11] >= 10000) // Indestructible Armor
							HudMessage("%d/%d \ca[Indestructible]\n", CurrentHealth, MaxHealth, HUDMSG_PLAIN, 0, CR_CYAN, X, Y, 0.05)
						else
							HudMessage("%d/%d \cd[%d/%d]\n", CurrentHealth, MaxHealth, Stats[10], Stats[11], HUDMSG_PLAIN, 0, CR_CYAN, X, Y, 0.05)
					else
						HudMessage("%d/%d\n", CurrentHealth, MaxHealth, HUDMSG_PLAIN, 0, CR_CYAN, X, Y, 0.05)
				else
					if (IsPlayer && Stats[10] > 0)
						if (Stats[11] >= 10000) // Indestructible Armor
							HudMessage("%d/%d \ca[Indestructible]\n", CurrentHealth, MaxHealth, HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05)
						else
							HudMessage("%d/%d \cd[%d/%d]\n", CurrentHealth, MaxHealth, Stats[10], Stats[11], HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05)
					else
						HudMessage("%d/%d\n", CurrentHealth, MaxHealth, HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05);
				
				// Monster Stats
				if (GetCVar("drpg_monster_levels") > 0 && CurrentLevel > 0 && !IsPlayer)
				{
					SetFont("BIGFONT");
					
					// Stat Amounts
					HudMessage("%d\n", CurrentLevel, HUDMSG_PLAIN, 0, CR_WHITE, X - 96.1, Y + 21.0, 0.05);
					HudMessage("%d\n", CurrentStrength, HUDMSG_PLAIN, 0, CR_RED, X - 18.1, Y + 21.0, 0.05);
					HudMessage("%d\n", CurrentDefense, HUDMSG_PLAIN, 0, CR_GREEN, X + 54.1, Y + 21.0, 0.05);
					
					// Stat Icons
					PrintSprite("MonLevel", 0, X - 107.0, Y + 21.0, 0.05);
					PrintSprite("MonSTR", 0, X - 30.0, Y + 21.0, 0.05);
					PrintSprite("MonDEF", 0, X + 42.0, Y + 21.0, 0.05);
				}
				else if (IsPlayer) // Player Stats
				{
					// Rank Emblems
					for (int i = 0; i < Stats[1]; i++)
						PrintSprite("RankEmb", 0, X - 55.0 + (i * 7.0), Y + 22.0, 0.05);
					
					SetFont("BIGFONT");
					
					// Stat Amounts
					HudMessage("%d\n", Stats[0], HUDMSG_PLAIN, 0, CR_WHITE, X - 96.1, Y + 21.0, 0.05);
					HudMessage("%d\n", Stats[2], HUDMSG_PLAIN, 0, CR_RED, X - 96.1, Y + 39.0, 0.05);
					HudMessage("%d\n", Stats[3], HUDMSG_PLAIN, 0, CR_GREEN, X - 40.1, Y + 39.0, 0.05);
					HudMessage("%d\n", Stats[4], HUDMSG_PLAIN, 0, CR_BRICK, X + 16.1, Y + 39.0, 0.05);
					HudMessage("%d\n", Stats[5], HUDMSG_PLAIN, 0, CR_LIGHTBLUE, X + 72.1, Y + 39.0, 0.05);
					HudMessage("%d\n", Stats[6], HUDMSG_PLAIN, 0, CR_PURPLE, X - 96.1, Y + 58.0, 0.05);
					HudMessage("%d\n", Stats[7], HUDMSG_PLAIN, 0, CR_ORANGE, X - 40.1, Y + 58.0, 0.05);
					HudMessage("%d\n", Stats[8], HUDMSG_PLAIN, 0, CR_BLUE, X + 16.1, Y + 58.0, 0.05);
					HudMessage("%d\n", Stats[9], HUDMSG_PLAIN, 0, CR_YELLOW, X + 72.1, Y + 58.0, 0.05);
					
					// Stat Icons
					PrintSprite("MonLevel", 0, X - 107.0, Y + 21.0, 0.05);
					PrintSprite("STAT1S", 0, X - 96.0, Y + 56.0, 0.05);
					PrintSprite("STAT2S", 0, X - 40.0, Y + 54.0, 0.05);
					PrintSprite("STAT3S", 0, X + 16.0, Y + 54.0, 0.05);
					PrintSprite("STAT4S", 0, X + 72.0, Y + 56.0, 0.05);
					PrintSprite("STAT5S", 0, X - 96.0, Y + 74.0, 0.05);
					PrintSprite("STAT6S", 0, X - 40.0, Y + 75.0, 0.05);
					PrintSprite("STAT7S", 0, X + 16.0, Y + 74.0, 0.05);
					PrintSprite("STAT8S", 0, X + 71.0, Y + 73.0, 0.05);
				};
				
				// Aura Icon
				switch (CurrentAura)
				{
					case 1: 	AuraType = "AuraRed";	break;
					case 2: 	AuraType = "AuraGree";	break;
					case 3: 	AuraType = "AuraWhit";	break;
					case 4: 	AuraType = "AuraPink";	break;
					case 5: 	AuraType = "AuraCyan";	break;
					case 6: 	AuraType = "AuraPurp";	break;
					case 7: 	AuraType = "AuraOran";	break;
					case 8: 	AuraType = "AuraBlue";	break;
					case 9:		AuraType = "AuraYell";	break;
					case 10: 	AuraType = "AuraBlac";	break;
				};
				if (CurrentAura > 0)
					PrintSprite(AuraType, 0, X - 136.0, Y + 30.0, 0.05);
				
				// Prevent bar overflow
				if (HealthPercent > 100)
					HealthPercent = 100;
				
				// Bar fill
				if (GetCVar("screenblocks") == 10)
					for (int i = 0; i <= HealthPercent * 1.165; i++)
						PrintSprite(FillType, 0, (X - 120.0) + (i * 2.0), Y, 0.05)
				else
					for (int i = 0; i <= HealthPercent * 1.05; i++)
						PrintSprite(FillType, 0, (X - 97.0) + (i * 2.0), Y, 0.05);
			};
		};
		
		// Terminate if the Player is dead
		if (GetActorProperty(Players(PlayerNum).TID, APROP_Health) <= 0) return;
	};
	
	Delay(1);
	goto Start;
};

// Apply values to global vars visible to the HUD
function void CheckHUD()
{
	// New Multiplayer HUD Checking
	int PlayerNum = PlayerNumber();
	
	// Max Health/Armor
	HealthMax[PlayerNum] = Player.HealthMax;
	ArmorMax[PlayerNum] = Player.ArmorMax;
	
	// EP
	EP[PlayerNum] = Player.EP;
	EPMax[PlayerNum] = Player.EPMax;
	
	// For EP Bar on HUD
	SetInventory("EP", Player.EP * 100 / Player.EPMax);

	// Combo System
	Combo[PlayerNum] = Player.Combo;
	BonusGained[PlayerNum] = Player.BonusGained;
	XPGained[PlayerNum] = Player.XPGained;
	RankGained[PlayerNum] = Player.RankGained;
	
	// Aura Timer
	AuraTimerHUD[PlayerNum] = Player.AuraTimer / 35 + 1;
	
	// Regen Boost
	SetInventory("RegenBoost", (Player.RegenBoostTimer > 0));
	RegenBoostTimerHUD[PlayerNum] = Player.RegenBoostTimer / 35 + 1;
	
	// For Combo Bar on HUD
	if (Player.ComboTimer < 35 * 4 && Player.ComboTimer > 35 * 2)
	{
		SetInventory("Combo", (int)((fixed)Player.ComboTimer / (((fixed)COMBO_MAX) / 100.0)));
		SetInventory("Combo2", 0);
	}
	else if (Player.ComboTimer <= 35 * 2)
	{
		SetInventory("Combo", 0);
		SetInventory("Combo2", (int)((fixed)Player.ComboTimer / (((fixed)COMBO_MAX) / 100.0)));
	};
	
	// Stim Timer
	SetInventory("StimActive", Player.Stim.Active);
	if (Player.Stim.Timer > 0)
		StimTimerHUD[PlayerNum] = Player.Stim.Timer / 35 + 1
	else
		StimTimerHUD[PlayerNum] = 0;
	
	// Shield
	Shield[PlayerNum] = Player.Shield.Charge;
	ShieldCapacity[PlayerNum] = Player.Shield.Capacity;
	TakeInventory("ShieldCapacity", 100);
	GiveInventory("ShieldCapacity", (int)(((fixed)Player.Shield.Charge / (fixed)Player.Shield.Capacity) * 100.0));
	SetInventory("Shield", Player.Shield.Active);
	
	// Status Timer
	if (Player.StatusTimer > 0)
		StatusTimerHUD[PlayerNum] = Player.StatusTimer / 35 + 1
	else
		StatusTimerHUD[PlayerNum] = 0;
	
	// Items
	Credits[PlayerNum] = CheckInventory("Credits");
	Continues[PlayerNum] = CheckInventory("Continue");
};

function void DefaultLoadout()
{
	// Extras Compatibility
	if(GetCVar("drpg_ext_extras"))
		SetWeapon("Pistol1");
	
	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SetWeapon("RLPistol");
};
