#include "Augs.dh"
#include "Globals.dh"
#include "Menu.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

// Init Script
script Init() enter
{
	if (!FirstRun)
	{
		EP = 100;
		RankString = Ranks[0];
		Vitality = 10;
		Energy = 10;
		Capacity = 10;
		ComboTimer = -100;
		
		if (!GetCVar("drpg_hardstart"))
		{
			GiveInventory("StatToken", 5);
			GiveInventory("SkillToken", 5);
			
			// Starting Credits
			int StartCredits;
			switch (GameSkill())
			{
				case 1: StartCredits = 1000; 	break;
				case 2: StartCredits = 500; 	break;
				case 3: StartCredits = 250; 	break;
				case 4: StartCredits = 100; 	break;
				case 5: StartCredits = 0; 		break;
			};
			GiveInventory("Credits", StartCredits);
		};
		
		// Give the default loadout based on compatibility switches
		DefaultLoadout();

		// Version Info
		Log("\cnDoom RPG %s (%s) loaded!\n", Version[0], Version[1]);
		
		// Set the default skill indices
		for (int i = 0; i < 5; i++)
		{
			SkillCatagory[i] = -1;
			SkillIndex[i] = -1;
		};
		
		// The first map should always be accessible
		MapsVisited[1] = true;
		
		// Done first run
		FirstRun = true;
	};
	
	// Setup the XP/Rank tables
	SetupTables();
	
	// Execute Game Loops
	CallACS("Loop");
	CallACS("Speed");
	// CallACS("StatRandomizer");
	CallACS("DamageNumbers");
	CallACS("DamageNumbersHUD");
	CallACS("HealthBars");
	
	// Remove Aura if the keep Aura CVAR is off
	if (!GetCVar("drpg_skill_keepauras"))
	{
		Aura = 0;
		AuraTimer = 0;
		AuraTimerHUD = 0;
	};
	
	// Transport from/to Outpost Screen Fading
	if (Transported == 1) // Normal
	{
		FadeRange(255, 255, 255, 1.0, 255, 255, 255, 0.0, 1.0);
		Transported = 0;
	};
	if (Transported == 2) // Death
	{
		int PenaltyPercent;
		
		switch (GameSkill())
		{
			case 1: PenaltyPercent = 1;		break;
			case 2: PenaltyPercent = 5;		break;
			case 3: PenaltyPercent = 10;	break;
			case 4: PenaltyPercent = 20;	break;
			case 5: PenaltyPercent = 25;	break;
		};
		
		SetActorProperty(0, APROP_Health, HealthMax / 10 + 1);
		GiveInventory("Credits", Credits);
		PayTimer = 35 * 60 * GetCVar("drpg_pay_interval");
		FadeRange(255, 0, 0, 1.0, 255, 0, 0, 0.0, 1.0);
		Transported = 0;
	};
	
	// Store the current map number
	MapNumber = GetLevelInfo(LEVELINFO_LEVELNUM);
	if (MapNumber > 36) MapNumber = 36;
	
	// IF you have the Nova Shield Accessory and move to a new level, make sure to check the Nova flag
	if (CheckInventory("Shield") && ShieldAccessory == 5)
		Nova = false;
	
	// Flag this level as visited for the transporter
	if (!MapsVisited[GetLevelInfo(LEVELINFO_LEVELNUM)])
		MapsVisited[GetLevelInfo(LEVELINFO_LEVELNUM)] = true;
	
	// Reset the menus if they were open in the last level
	InMenu = false;
	InShop = false;
};

// Monster Init Script
script MonsterInit(int Flags)
{
	// Start Damage Numbers Script
	CallACS("DamageNumbers");
	
	// Start Monster Loop Script
	CallACS("MonsterLoop");
	
	// Give it a Health Bar
	SetInventory("HealthBar", 1);
	
	// Apply monster flags
	SetInventory("MonsterFlags", Flags);

	int MonsterLevel;
	int MonsterCurve;
	int MonsterAura;
	int MonsterStrength;
	int MonsterDefense;
	int MonsterRegen;
	int AuraRandomizer;
	
	// Monster Level System
	if(GetCVar("drpg_monster_levels") && (!(Flags & MF_NOSTATS)))
	{
		// level
		MonsterCurve = GetCVar("drpg_monster_curve");
		MonsterLevel = Level + Random(-(GameSkill() * 2), GameSkill() * 2) + Random(0, MonsterCurve);
		if (MonsterLevel <= 0) MonsterLevel = 1;
		
		// Strength
		MonsterStrength = Random(MonsterLevel - (GameSkill() * 2), MonsterLevel + (GameSkill() * 2));
		
		// Defense
		MonsterDefense = Random(MonsterLevel - (GameSkill() * 2), MonsterLevel + (GameSkill() * 2));
	};
	
	// Apply Aura
	if (!GetActorProperty(0, APROP_Friendly) && !(Flags & MF_NOAURA))
	{
		AuraRandomizer = Random(-100 + ((GameSkill() * (GameSkill() * 2))), 10);
		if (AuraRandomizer > 0)
			MonsterAura = AuraRandomizer;
	};
	
	// If the monster has an Aura, double it's initial health
	if (AuraRandomizer > 0)
		SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth) * 2);
	
	// Apply the aura effects
	switch (MonsterAura)
	{
		case 1: // Red Aura - Strength
			MonsterStrength *= 2;
			break;
		case 2: // Green Aura - Defense
			MonsterDefense *= 2;
			break;
		case 3: // White Aura - XP
			MonsterLevel *= 2;
			break;
		case 4: // Orange Aura - Agility
			SetActorProperty(0, APROP_Speed, GetActorProperty(0, APROP_Speed) * 2);
			break;
		case 5: // Pink Aura - Vitality
			SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth) * 2);
			break;
		case 10: // Black Aura - Miniboss
			MonsterStrength *= 2;
			MonsterDefense *= 2;
			MonsterLevel *= 2;
			SetActorProperty(0, APROP_Speed, GetActorProperty(0, APROP_Speed) * 2);
			SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth) * 4);
			break;
	};
	
	// Apply the stats to the monster
	SetInventory("MonsterLevel", MonsterLevel);
	SetInventory("MonsterAura", MonsterAura);
	SetInventory("MonsterStrength", MonsterStrength);
	SetInventory("MonsterDefense", MonsterDefense);
	SetActorProperty(0, APROP_DamageFactor, 1.0 - (0.9 * (MonsterDefense / 100)));
	if (GetActorProperty(0, APROP_DamageFactor) <= 0) SetActorProperty(0, APROP_DamageFactor, 0.1);
};

// Monster Loop
script MonsterLoop()
{
	Start:
	int X = GetActorX(0);
	int Y = GetActorY(0);
	int Z = GetActorZ(0);
	int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterFlags = CheckInventory("MonsterFlags");
	int MonsterStrength = CheckInventory("MonsterStrength");
	int AuraType = CheckInventory("MonsterAura");
	int RegenAmount;
	
	// Death
	if (GetActorProperty(0, APROP_Health) <= 0)
	{
		int XPAmount = Random(GetActorProperty(0, APROP_SpawnHealth), GetActorProperty(0, APROP_SpawnHealth) * 2);
		int SkillDropMod = (GameSkill() - 1) * 32;
		int LuckDrops = 1;
		XPAmount *= 1 + (MonsterLevel / 100);
		
		// Aura Drops
		if (!(MonsterFlags & MF_NODROPS))
		{
			switch (AuraType)
			{
				case 1: // Red Aura - Strength
					DropItem(0, "RuneDropper", 1, 128 - SkillDropMod);
					AddCompound(0, Random(1, 2));
					break;
				case 2: // Green Aura - Defense
					DropItem(0, "UsedArmorDropper", 1, 128 - SkillDropMod);
					AddCompound(1, Random(1, 2));
					break;
				case 3: // White Aura - XP
					DropItem(0, "SmallTokenDropper", 1, 96 - SkillDropMod);
					XPAmount *= 2;
					AddCompound(9, Random(1, 2));
					break;
				case 4: // Orange Aura - Agility
					DropItem(0, "HasteRune", 1, 128 - SkillDropMod);
					DropItem(0, "HighJumpRune", 1, 128 - SkillDropMod);
					DropItem(0, "TimeSphere", 1, 64 - SkillDropMod);
					AddCompound(2, Random(1, 2));
					break;
				case 5: // Pink Aura - Vitality
					DropItem(0, "HealthDropper", 1, 128 - SkillDropMod);
					AddCompound(3, Random(1, 2));
					break;
				case 6: // Blue Aura - Energy
					DropItem(0, "EPCapsule", 1, 128 - SkillDropMod);
					DropItem(0, "BigEPCapsule", 1, 64 - SkillDropMod);
					AddCompound(4, Random(1, 2));
					break;
				case 7: // Purple Aura - Regeneration
					DropItem(0, "RegenSphere", 1, 128 - SkillDropMod);
					AddCompound(5, Random(1, 2));
					break;
				case 8: // Dark Blue Aura - Capacity
					DropItem(0, "AmmoDropper", 1, 128 - SkillDropMod);
					AddCompound(6, Random(1, 2));
					break;
				case 9: // Yellow Aura - Luck
					LuckDrops = 4;
					AddCompound(7, Random(1, 2));
					break;
				case 10: // Black Aura - Miniboss
					DropItem(0, "RuneDropper", 1, 128 - SkillDropMod);
					DropItem(0, "UsedArmorDropper", 1, 128 - SkillDropMod);
					DropItem(0, "SmallTokenDropper", 1, 96 - SkillDropMod);
					DropItem(0, "HasteRune", 1, 128 - SkillDropMod);
					DropItem(0, "HighJumpRune", 1, 128 - SkillDropMod);
					DropItem(0, "TimeSphere", 1, 64 - SkillDropMod);
					DropItem(0, "HealthDropper", 1, 128 - SkillDropMod);
					DropItem(0, "EPCapsule", 1, 128 - SkillDropMod);
					DropItem(0, "BigEPCapsule", 1, 64 - SkillDropMod);
					DropItem(0, "RegenSphere", 1, 128 - SkillDropMod);
					DropItem(0, "AmmoDropper", 1, 128 - SkillDropMod);
					LuckDrops = 4;
					XPAmount *= 4;
					AddCompound(0, Random(1, 2));
					AddCompound(1, Random(1, 2));
					AddCompound(2, Random(1, 2));
					AddCompound(3, Random(1, 2));
					AddCompound(4, Random(1, 2));
					AddCompound(5, Random(1, 2));
					AddCompound(6, Random(1, 2));
					AddCompound(7, Random(1, 2));
					AddCompound(8, Random(1, 2));
					AddCompound(9, Random(1, 2));
					break;
			};
			
			// Luck-based Drops
			for (int i = 0; i < LuckDrops; i++)
			{
				if (Random(1, 100) < CreditChance)		DropItem(0, "MoneyDropper", 1, 255);
				if (Random(1, 100) < HealthChance)		DropItem(0, "HealthDropper", 1, 255);
				if (Random(1, 100) < EPChance)			DropItem(0, "EPCapsule", 1, 255);
				if (Random(1, 100) < ArmorChance)		DropItem(0, "ArmorDropper", 1, 255);
				if (Random(1, 100) < PowerupChance)		DropItem(0, "PowerupDropper", 1, 255);
				if (Random(1, 100) < RuneChance)		DropItem(0, "RuneDropper", 1, 255);
				if (Random(1, 100) < TokenChance)		DropItem(0, "SmallTokenDropper", 1, 255);
				if (Random(1, 100) < AugChance)			DropItem(0, "AccessoryDropper", 1, 255);
				if (Random(1, 100) < ShieldChance)		DropItem(0, "ShieldDropper", 1, 255);
			};
			
			// Boss phat lewt drops
			if (MonsterFlags & MF_BOSS)
			{
				DropItem(0, "Credits1000", 1, 255);
				DropItem(0, "SoulsphereRandomizer", 1, 255);
				DropItem(0, "Continue", 1, 128 - SkillDropMod);
				DropItem(0, "TokenDropper", 1, 255 - SkillDropMod);
				DropItem(0, "RuneDropper", 1, 255 - SkillDropMod);
				DropItem(0, "AugDropper", 1, 160 - SkillDropMod);
				DropItem(0, "ShieldDropper", 1, 160 - SkillDropMod);
			};
		};
		
		// Add XP
		if ((MonsterFlags & MF_NEGATIVEXP))
			{AddXP(-XPAmount);}
		else if (!(MonsterFlags & MF_NOXP) && !GetActorProperty(0, APROP_Friendly))
			{AddXP(XPAmount);};
		
		// Add a kill to the pay kills
		if (!(MonsterFlags & MF_NOPAYKILL))
			PayKills++;
			
		// SHOTGUNS!
		if (GetCVar("drpg_shotguns"))
			DropItem(0, "ShotSpawn", Random(1, 4), 255);
		
		return;
	};
	
	// Friendly Monster Aura
	if (GetActorProperty(0, APROP_Friendly))
		SpawnForced("FriendlyAura", X, Y, Z + 32, 0, 0);
	
	// Aura Loop Effects
	switch (AuraType)
	{
		case 1: // Red Aura - Strength
			SpawnForced("RedAura", X, Y, Z + 32, 0, 0);
			break;
		case 2: // Green Aura - Defense
			SpawnForced("GreenAura", X, Y, Z + 32, 0, 0);
			break;
		case 3: // White Aura - XP
			SpawnForced("WhiteAura", X, Y, Z + 32, 0, 0);
			break;
		case 4: // Orange Aura - Agility
			SpawnForced("OrangeAura", X, Y, Z + 32, 0, 0);
			break;
		case 5: // Pink Aura - Vitality
			SpawnForced("PinkAura", X, Y, Z + 32, 0, 0);
			break;
		case 6: // Blue Aura - Energy
			SpawnForced("CyanAura", X, Y, Z + 32, 0, 0);
			break;
		case 7: // Purple Aura - Regeneration
			SpawnForced("PurpleAura", X, Y, Z + 32, 0, 0);
			RegenAmount = (GameSkill() * 0.01) * GetActorProperty(0, APROP_SpawnHealth);
			if (RegenAmount == 0) RegenAmount = 1;
			if (GetActorProperty(0, APROP_Health) < GetActorProperty(0, APROP_SpawnHealth) && (Timer() % 35) == 1 && !CheckInventory("PowerTimeFreezer"))
				HealThing(RegenAmount);
			break;
		case 8: // Dark Blue Aura - Capacity
			SpawnForced("BlueAura", X, Y, Z + 32, 0, 0);
			break;
		case 9: // Yellow Aura - Luck
			SpawnForced("YellowAura", X, Y, Z + 32, 0, 0);
			break;
		case 10: // Black Aura - Miniboss
			SpawnForced("BlackAura", X, Y, Z + 32, 0, 0);
			SetActorProperty(0, APROP_RenderStyle, STYLE_Fuzzy);
			RegenAmount = (GameSkill() * 0.01) * GetActorProperty(0, APROP_SpawnHealth);
			if (RegenAmount == 0) RegenAmount = 1;
			if (GetActorProperty(0, APROP_Health) < GetActorProperty(0, APROP_SpawnHealth) && (Timer() % 35) == 1 && !CheckInventory("PowerTimeFreezer"))
				HealThing(RegenAmount);
			break;
	};
	
	// Strength
	if (MonsterStrength >= 32000)
		{SetInventory("Strength32000", 1);}
	else if (MonsterStrength > 0)
		{SetInventory(StrParam("Strength%d\n", MonsterStrength * (GameSkill() * 2)), 1);};
	
	// Overhead Health Bars
	if (GetCVar("drpg_healthbars_overhead"))
	{
		int BarHealth = GetActorProperty(0, APROP_Health) * GetActorProperty(0, APROP_SpawnHealth) / 32.0;
		if (BarHealth > 63.0) BarHealth = 63.0;
		Z = GetActorZ(0) + CheckInventory("MonsterHeightCheck") + 4.0;
		SpawnForced(StrParam("HealthBar%d\n", Round(BarHealth)), X, Y, Z, 0, 0);
	};
	
	Delay(1);
	goto Start;
};

// Loop Script
script Loop()
{
	Start:
	// Update Functions
	CheckStats();
	CheckStatBonus();
	CheckHardHardStatCaps();
	CheckLuck();
	CheckHealth();
	CheckArmorMax();
	CheckCombo();
	CheckLevel();
	CheckRank();
	CheckLevelInfo();
	CheckAugSlots();
	CheckAugs();
	CheckSkills();
	CheckSkillDescriptions();
	CheckBurnout();
	CheckShields();
	CheckShieldAccessory();
	CheckStatBounds();
	CheckStim();
	
	// Main Menu
//	if (InMenu)
//		MenuLoop();

	// Shop Menu
	if (InShop)
		ShopLoop();
	
	// Always Quick Heal if CVAR is set
	if (GetCVar("drpg_auto_heal"))
		CallACS("QuickHeal");

	// Shield Handling
	BeforeHealth = GetActorProperty(0, APROP_Health);
	if (CheckInventory("Shield"))
		CallACS("ShieldScript");

	// Regeneration
	if (GetActorProperty(0, APROP_Health) > 0)
		DoRegen();

	// Give the Strength boosting item
	if (TotalDamage > 0 && TotalDamage <= 16000)
		GiveInventory(StrParam("Strength%d\n", TotalDamage), 1);

	// Apply Stats
	SetActorProperty(0, APROP_SpawnHealth, HealthMax);
	SetActorProperty(0, APROP_DamageFactor, DamageFactor);
	SetActorProperty(0, APROP_Mass, Mass);
	SetActorProperty(0, APROP_Speed, Speed);
	SetActorProperty(0, APROP_JumpZ, JumpHeight);

	// For EP Bar on HUD
	TakeInventory("EP", 100);
	GiveInventory("EP", EP / EPMax * 100);
	
	// Clear your Status Effect if the timer is empty
	if (StatusTimer <= 0)
		StatusType = 0;
	
	// HUD Status Effect Timer
	if (StatusType > 0)
		StatusTimerHUD = StatusTimer / 35 + 1
	else
		StatusTimerHUD = 0;
	
	// Make you invincible while in the Menus and if menu freezing is enabled
	if ((InMenu || InShop) && GetCVar("drpg_menufreeze"))
		SetActorProperty(0, APROP_DamageFactor, 0);
	
	// Loop
	Delay(1);
	
	// These need to be done in a separate tic
	AfterHealth = GetActorProperty(0, APROP_Health);
	AfterArmor = CheckInventory("BasicArmor");
	
	goto Start;
};

// Handles Weapon Firing Speed
script Speed()
{
	Start:
	int Time;
	
	if (Agility <= 100)
		Time = Abs(Round(WeaponSpeed * 0.35 - 35.0))
	else
		Time = 0;
	
	if (GetCVar("drpg_stat_weaponspeed"))
		GiveInventory("Speed", 1);
	
	Delay(Time + 1);
	goto Start;
};

/* Stat Token Randomizer Script
script StatRandomizer()
{
	Start:
	Delay(1);

	// Only randomize your starting tokens
	if (GetCVar("drpg_randomstatgrowth") == 1 && !RandomizedStartTokens)
	{
		if (StatTokens > 0)
			IncreaseStat(Random(1, 8))
		else if (StatTokens == 0)
			RandomizedStartTokens = true;;
	};
	// Always spend Tokens, no matter how you got them
	else if (GetCVar("drpg_randomstatgrowth") == 2)
		if (StatTokens > 0)
			IncreaseStat(Random(1, 8));

	// Spend Tokens only on level up
	if (GetCVar("drpg_autospend"))
		while (LevelTokens > 0)
		{
			IncreaseStat(Random(1, 8));
			Delay(1);
		};
	
	goto Start;
};
*/

// Handles Status Effects
script StatusEffect(int Type, int Time, int Intensity)
{
	StatusType = Type;
	StatusTimer = Time * 35;
	
	if (Intensity == 0)
		Intensity = 1;
	
	while (StatusTimer > 0)
	{
		if (Type == 1) // Confusion
		{
			SetActorAngle(0, GetActorAngle(0) + 1024 * Cos(Timer() * (Intensity * 0.01)));
			SetActorPitch(0, 1024 * 8, Cos(Timer() * (Intensity * 0.01)));
		};
		
		if (Type == 2) // Blind
			FadeRange(0, 0, 0, (0.75 + (Intensity / 400)) - ((1024 * 8) * Sin(Timer() * 0.01)), 0, 0, 0, 0.0, 0.5);
		
		if (Type == 3) // Poisoned
			if ((Timer() % 35) == 1 && (GetActorProperty(0, APROP_Health) - Intensity) > 1)
			{
				DamageThing(Intensity);
				FadeRange(0, 255, 0, 0.25, 0, 255, 0, 0.0, (0.25 + Intensity / 100));
			};
		
		if (StatusTimer > 0)
			StatusTimer--;
		
		Delay(1);
	};
};

// Handles EP Draining from the EP Drain Orb
script EPDrain(int X, int Y, int Z)
{
	// TODO
};

// Quick Heal
script QuickHeal(int Quick)
{
	// If you're dead, return
	if (GetActorProperty(0, APROP_Health) <= 0) return;
	
	int Health = GetActorProperty(0, APROP_Health);
	int Percent = GetCVar("drpg_auto_heal_percent");
	
	if ((Health < HealthMax / Percent) || Quick)
			 if (CheckInventory("StimPack")) {			UseInventory("StimPack"); }
		else if (CheckInventory("SmallMedikit")) {		UseInventory("SmallMedikit"); }
		else if (CheckInventory("Medikit")) {			UseInventory("Medikit"); }
		else if (CheckInventory("LargeMedikit")) {		UseInventory("LargeMedikit"); }
		else if (CheckInventory("XLMedikit")) {			UseInventory("XLMedikit"); }
		else if (CheckInventory("MedPack")) {			UseInventory("MedPack"); }
		else if (CheckInventory("SuperMedPack")) {		UseInventory("SuperMedPack"); }
		else if (CheckInventory("SurgeryKit")) {		UseInventory("SurgeryKit"); };
};

// Quick Armor
script QuickArmor()
{
		 if (CheckInventory("WhiteArmor")) {			UseInventory("WhiteArmor"); }
	else if (CheckInventory("WhiteArmorUsed")) {		UseInventory("WhiteArmorUsed"); }
	else if (CheckInventory("RedArmor")) {				UseInventory("RedArmor"); }
	else if (CheckInventory("RedArmorUsed")) {			UseInventory("RedArmorUsed"); }
	else if (CheckInventory("YellowArmor")) {			UseInventory("YellowArmor"); }
	else if (CheckInventory("YellowArmorUsed")) {		UseInventory("YellowArmorUsed"); }
	else if (CheckInventory("BlueArmor")) {				UseInventory("BlueArmor"); }
	else if (CheckInventory("BlueArmorUsed")) {			UseInventory("BlueArmorUsed"); }
	else if (CheckInventory("GreenArmor")) {			UseInventory("GreenArmor"); }
	else if (CheckInventory("GreenArmorUsed")) {		UseInventory("GreenArmorUsed"); };
};

// Buy Ammo for selected Weapon
script QuickAmmo()
{
	// Weapon, Ammo Type and Amount
	int Weapon;
	int AmmoType;
	int Amount;
	
	// Get the current Weapon to determine the ammo type
	if 		(CheckWeapon("Pistol") || CheckWeapon("ChainGun")) 		{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shotgun") || CheckWeapon("SuperShotgun"))	{ AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("RocketLauncher"))							{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("PlasmaRifle") || CheckWeapon("BFG9000"))	{ AmmoType = 6; Amount = 20; }
	
	// ... And the alternate Extras versions too -_-
	else if (CheckWeapon("Pistol1") || CheckWeapon("ChainGun1")) 	{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shotgun1") || CheckWeapon("SSG")) 		{ AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("RocketLauncher1"))						{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("PlasmaGun") || CheckWeapon("BFG9001"))	{ AmmoType = 6; Amount = 20; }
	
	// AND Brutal Doom -__-
	else if (CheckWeapon("BrutalPistol") || CheckWeapon("Rifle") || CheckWeapon("Mini_Gun")) 									{ AmmoType = 0; Amount = 10; }
	else if (CheckWeapon("Shot_Gun") || CheckWeapon("SSG")) 																	{ AmmoType = 2; Amount = 4;  }
	else if (CheckWeapon("Rocket_Launcher") || CheckWeapon("Grenade_Launcher"))													{ AmmoType = 4; Amount = 1;  }
	else if (CheckWeapon("Plasma_Gun") || CheckWeapon("Rail_Gun") || CheckWeapon("BIG_FUCKING_GUN") || CheckWeapon("BFG10000"))	{ AmmoType = 6; Amount = 20; }
	else
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	// Discount and Cost
	int Discount = RankLevel * 2.1;
	int Cost = ShopCosts[1][AmmoType] - ShopCosts[1][AmmoType] * Discount / 100;

	// Give ammo and take Credits
	if (CheckInventory("Credits") >= Cost && CheckInventory(Shop[1][AmmoType][0]) < GetAmmoCapacity(Shop[1][AmmoType][0]))
	{
		ActivatorSound("credits/payout", 127);
		TakeInventory("Credits", Cost);
		GiveInventory(Shop[1][AmmoType][0], Amount);
	}
	else
		{ActivatorSound("menu/error", 127);};
};

// Death Script
script Dead() death
{
	// Taunt the Player
	ActivatorSound("Taunt", 127);
	
	// Reset menu vars
	InMenu = false;
	InShop = false;
	
	while (1)
	{
		if (GetPlayerInput(0, INPUT_BUTTONS) & BT_SPEED && GetPlayerInput(0, INPUT_BUTTONS) & BT_ATTACK)
		{
			FadeRange(255, 0, 0, 0.0, 255, 0, 0, 1.0, 1.0);
			Delay(35);
			
			if (GetLevelInfo(LEVELINFO_LEVELNUM) != 999)
				LevelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
			
			Transported = 2;
			InBase = true;
			Teleport_NewMap(999, 1);
		};
		
		Delay(1);
	};
};

// Handles Damage Numbers
script DamageNumbers()
{
	/* TODO: Damage Number Translations
	CreateTranslation(1, 81 : 111 = 176 : 176);	// Overkill
	CreateTranslation(2, 81 : 111 = 112 : 112);	// Healed
	CreateTranslation(3, 81 : 111 = 100 : 100);	// Scratch
	*/
	
	while (GetActorProperty(0, APROP_Health) > 0 && GetCVar("drpg_damagenumbers"))
	{
		GiveInventory("MonsterHeightCheck", GetActorProperty(0, APROP_Height));
		SetInventory("MonsterCurrentHealth", GetActorProperty(0, APROP_Health));
		SetInventory("MonsterHasTicked", 0);
		
		// Lag handling
		int DelayRate = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) / 100;
		Delay(1 + DelayRate + GetCVar("drpg_damagenumbers_delay"));
		
		if (GetActorProperty(0, APROP_Health) != CheckInventory("MonsterCurrentHealth"))
			if (CheckInventory("MonsterHasTicked") == 0)
			{
				int NewHealth = CheckInventory("MonsterCurrentHealth") - GetActorProperty(0, APROP_Health);
				
				if (NewHealth > 9999999)
					NewHealth = 9999999;
				
				if (NewHealth != 0)
				{
					int Digit1 = GetDigit(Abs(NewHealth), 0);
					int Digit2 = GetDigit(Abs(NewHealth), 1);
					int Digit3 = GetDigit(Abs(NewHealth), 2);
					int Digit4 = GetDigit(Abs(NewHealth), 3);
					int Digit5 = GetDigit(Abs(NewHealth), 4);
					int Digit6 = GetDigit(Abs(NewHealth), 5);
					int Digit7 = GetDigit(Abs(NewHealth), 6);
					
					int Angle = GetActorAngle(0);
					int X = GetActorX(0) + Cos(Angle);
					int Y = GetActorY(0) + Sin(Angle);
					int Z;
					int ActorHeight = CheckInventory("MonsterHeightCheck");
					int DigitID = Random(4000, 5000);
					bool Healed = (NewHealth < 0);
					
					if (ActorHeight > 0)
						Z = GetActorZ(0) + Random(ActorHeight, ActorHeight + 6)
					else
						Z = GetActorZ(0) + GetActorProperty(0, APROP_Height) + Random(0.0, 6.0);
					
					switch (Digit1)
					{
						case 0:	Spawn("Digit1Num0", X, Y, Z, DigitID, 0);	break;
						case 1:	Spawn("Digit1Num1", X, Y, Z, DigitID, 0);	break;
						case 2:	Spawn("Digit1Num2", X, Y, Z, DigitID, 0);	break;
						case 3:	Spawn("Digit1Num3", X, Y, Z, DigitID, 0);	break;
						case 4:	Spawn("Digit1Num4", X, Y, Z, DigitID, 0);	break;
						case 5:	Spawn("Digit1Num5", X, Y, Z, DigitID, 0);	break;
						case 6:	Spawn("Digit1Num6", X, Y, Z, DigitID, 0);	break;
						case 7:	Spawn("Digit1Num7", X, Y, Z, DigitID, 0);	break;
						case 8:	Spawn("Digit1Num8", X, Y, Z, DigitID, 0);	break;
						case 9:	Spawn("Digit1Num9", X, Y, Z, DigitID, 0);	break;
					};
					
					if (NewHealth >= 10 || NewHealth <= -10)
						switch (Digit2)
						{
							case 0:	Spawn("Digit2Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit2Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit2Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit2Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit2Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit2Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit2Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit2Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit2Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit2Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					if (NewHealth >= 100 || NewHealth <= -100)
						switch (Digit3)
						{
							case 0:	Spawn("Digit3Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit3Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit3Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit3Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit3Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit3Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit3Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit3Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit3Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit3Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					if (NewHealth >= 1000 || NewHealth <= -1000)
						switch (Digit4)
						{
							case 0:	Spawn("Digit4Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit4Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit4Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit4Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit4Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit4Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit4Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit4Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit4Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit4Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					if (NewHealth >= 10000 || NewHealth <= -10000)
						switch (Digit5)
						{
							case 0:	Spawn("Digit5Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit5Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit5Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit5Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit5Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit5Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit5Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit5Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit5Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit5Num9", X, Y, Z, DigitID, 0);	break;
						};

					if (NewHealth >= 100000 || NewHealth <= -100000)
						switch (Digit6)
						{
							case 0:	Spawn("Digit6Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit6Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit6Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit6Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit6Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit6Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit6Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit6Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit6Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit6Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					if (NewHealth >= 1000000 || NewHealth <= -1000000)
						switch (Digit7)
						{
							case 0:	Spawn("Digit7Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit7Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit7Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit7Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit7Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit7Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit7Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit7Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit7Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit7Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					// Overkill
					if (NewHealth >= GetActorProperty(0, APROP_SpawnHealth))
						Thing_SetTranslation(DigitID, 1);

					// Healed
					if (Healed)
						Thing_SetTranslation(DigitID, 2);

					// Scratch
					if (NewHealth == 1)
						Thing_SetTranslation(DigitID, 3);
					
					SetActorVelocity(DigitID, 0, Random(-1.0, 1.0), 0.5, 0, 0);
					SetInventory("MonsterHasTicked", 1);
				};
			};
			
		if (!GetCVar("drpg_damagenumbers")) return;
	};
};

// Psuedo Damage Numbers on the HUD
script DamageNumbersHUD()
{
	Start:
	int Before = GetActorProperty(0, APROP_Health);
	Delay(1);

	if (GetCVar("drpg_damagenumbers_hud"))
	{
		int Color = GetCVar("drpg_damagenumbers_hud_color");
		int After = GetActorProperty(0, APROP_Health);
		int Loss = Before - After;
		
		if (Loss == 1)
			SetFont("SMALLFONT")
		else
			SetFont("BIGFONT");
		
		if (Before > After)
			HudMessage("%d\n", Loss, HUDMSG_FADEOUT, 0, Color, 0.4 + Random(0.0, 0.4), 0.6 + Random(0.0, 0.3), 0.5, 1.0);
	};

	goto Start;
};

// Handles HUD Health Bars
script HealthBars()
{
	Start:
	while (GetCVar("drpg_healthbars"))
	{
		Thing_ChangeTID(0, PlayerTID);
		int Activator = ActivatorTID();
		SetActivatorToTarget(PlayerTID);
		
		Delay(1);
		
		int X = GetCVar("drpg_healthbars_x");
		int Y = GetCVar("drpg_healthbars_y");
		str Name = "";
		bool HasHealthBar = (CheckInventory("HealthBar") > 0);
		int CurrentLevel = CheckInventory("MonsterLevel");
		int CurrentAura = CheckInventory("MonsterAura");
		int CurrentStrength = CheckInventory("MonsterStrength");
		int CurrentDefense = CheckInventory("MonsterDefense");
		int CurrentRegen = CheckInventory("MonsterRegeneration");
		int CurrentHealth = GetActorProperty(0, APROP_Health);
		int MaxHealth = GetActorProperty(0, APROP_SpawnHealth);
		bool Friendly = GetActorProperty(0, APROP_Friendly);
		int HealthPercent;
		str FillType;
		str AuraType;
		int i;
		
		if (ActivatorTID() != Activator && GetActorProperty(PlayerTID, APROP_Health) > 0)
		{
			SetActivator(Activator);
			SetActivatorToTarget(PlayerTID);
			SetActivator(Activator);
			
			if (HasHealthBar && CurrentHealth > 0 && (!InMenu && !InShop))
			{
				// Divide-by-zero check
				if (MaxHealth > 0)
					HealthPercent = (CurrentHealth * 100) / MaxHealth;
				
				if (HealthPercent > 100)
					FillType = "Fill5";
				if (HealthPercent >= 75 && HealthPercent <= 100)
					FillType = "Fill1";
				if (HealthPercent >= 50 && HealthPercent <= 74)
					FillType = "Fill2";
				if (HealthPercent >= 25 && HealthPercent <= 49)
					FillType = "Fill3";
				if (HealthPercent <= 24)
					FillType = "Fill4";
				
				SetHudSize(800, 600, false);
				
				if (Friendly)
					if (GetCVar("screenblocks") == 10)
						PrintSprite("HPBarSS", 4000, X, Y, 0.05)
					else
					PrintSprite("HPBar2", 4000, X, Y, 0.05)
				else
					if (GetCVar("screenblocks") == 10)
						PrintSprite("HPBarSS", 4000, X, Y, 0.05)
					else
						PrintSprite("HPBar", 4000, X, Y, 0.05);
				
				SetFont("SMALLFONT");
				HudMessage("%d/%d\n", CurrentHealth, MaxHealth, HUDMSG_PLAIN, 4001, CR_GREEN, X, Y, 0.05);
				
				// Stats
				if (GetCVar("drpg_monster_levels") && CurrentLevel > 0)
				{
					SetFont("BIGFONT");
					
					HudMessage("%d\n", CurrentLevel, HUDMSG_PLAIN, 4003, CR_WHITE, X - 96.1, Y + 21.0, 0.05);
					HudMessage("%d\n", CurrentStrength, HUDMSG_PLAIN, 4004, CR_RED, X - 2.1, Y + 21.0, 0.05);
					HudMessage("%d\n", CurrentDefense, HUDMSG_PLAIN, 4005, CR_GREEN, X + 54.1, Y + 21.0, 0.05);
					
					// Stat Icons
					PrintSprite("MonLevel", 0, X - 107.0, Y + 20.0, 0.05);
					PrintSprite("MonSTR", 0, X - 13.0, Y + 21.0, 0.05);
					PrintSprite("MonDEF", 0, X + 42.0, Y + 21.0, 0.05);
				};
				
				// Aura
				switch (CurrentAura)
				{
					case 1: 	AuraType = "AuraRed";	break;
					case 2: 	AuraType = "AuraGree";	break;
					case 3: 	AuraType = "AuraWhit";	break;
					case 4: 	AuraType = "AuraOran";	break;
					case 5: 	AuraType = "AuraPink";	break;
					case 6: 	AuraType = "AuraCyan";	break;
					case 7: 	AuraType = "AuraPurp";	break;
					case 8: 	AuraType = "AuraBlue";	break;
					case 9:		AuraType = "AuraYell";	break;
					case 10: 	AuraType = "AuraBlac";	break;
				};
				if (CurrentAura > 0)
					PrintSprite(AuraType, 0, X - 136.0, Y + 30.0, 0.05);
				
				// Prevent bar overflow
				if (HealthPercent > 100)
					HealthPercent = 100;
				
				if (GetCVar("screenblocks") == 10)
					for (i = 0; i <= HealthPercent * 1.165; i++)
						PrintSprite(FillType, 4100 + i, (X - 120.0) + (i * 2.0), Y, 0.05)
				else
					for (i = 0; i <= HealthPercent; i++)
						PrintSprite(FillType, 4100 + i, (X - 97.0) + (i * 2.0), Y, 0.05);
			};
		};
	};
	
	Delay(1);
	goto Start;
};

// Level exit script
// Can't use NamedExecute in xlat, lame
script Exit(int Secret) @ 30000
{
	int ParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
	
	// Shitty hack to handle active Stim because I'm grinding against the global var limit, FFS
	if (StimActive) StimTimer = 0;
	
	// Check par time and give bonus if you beat it
	if ((Timer() / 35) <= ParTime && !(ParTime <= 0 || ParBonus))
	{
		int RankBonus = Random(1000 * RankLevel, 1000 * RankLevel * MapNumber);
		if (RankLevel == 0) RankBonus = 1000;
		
		FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0.0, 1.0);
		ActivatorSound("misc/secret", 127);
		
		Rank += RankBonus;
		
		HudMessage("Par Time Beaten!\n%d Rank Bonus\n",
				   RankBonus,
				   HUDMSG_FADEOUT, 0, CR_GOLD, 0.5, 0.5, 3.0, 2.0);
		
		ParBonus = true;
		Delay(35 * 5);
	};
	
	// Now exit the level
	if (Secret)
		Exit_Secret(0)
	else
		Exit_Normal(0);
};

function void DefaultLoadout()
{
	// Extras Compatibility
	if(GetCVar("drpg_ext_extras"))
		SetWeapon("Pistol1");
	
	// Brutal Doom Compatibility
	if (GetCVar("drpg_ext_brutal"))
	{
		GiveInventory("Melee_Attacks", 1);
		GiveInventory("BrutalPistol", 1);
	};

	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SetWeapon("RLPistol");
};
