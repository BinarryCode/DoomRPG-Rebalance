#include "Arena.dh"
#include "Augs.dh"
#include "Globals.dh"
#include "Menu.dh"
#include "Outpost.dh"
#include "RPG.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Skills.dh"
#include "Stats.dh"
#include "Stims.dh"
#include "Utils.dh"

// Version and Timestamp
str[2] Version =
{
	"v0.98 Beta - Multiplayer Insanity Edition";
	"Thursday, April 10, 2014 at 10:08:14 AM";
};

// Level Info
int Kills;
int Items;
int SecretsFound;
bool ParBonus;

// Init Script
script Init() enter
{
	if (!Player.FirstRun)
	{
		// Player TID
		Player.TID = PLAYER_TID + PlayerNumber();
		Thing_ChangeTID(0, Player.TID);
		
#if DEBUG
		Log("\cdDEBUG: Player TID: %d\n", Player.TID);
#endif

		// Setup initial vars
		Player.EP = 100;
		Player.RankString = Ranks[0];
		Player.PayTimer = 35 * 60 * GetCVar("drpg_pay_interval");
		Player.Vitality = 10;
		Player.Energy = 10;
		Player.Capacity = 10;
		Player.Shield.Timer = 175;

		// Give the default loadout based on compatibility switches
		DefaultLoadout();

		// Version Info
		if (Arbitrator) Log("\cnDoom RPG %s (%s) loaded!\n", Version[0], Version[1]);
		
		// Set the default skill indices
		for (int i = 0; i < MAX_SKILLKEYS; i++)
		{
			Player.SkillCatagory[i] = -1;
			Player.SkillIndex[i] = -1;
		};
		
		// Initialize skill array
		InitSkills();
		
		// Done first run
		Player.FirstRun = true;
	};
	
	// Create Translations
	CreateTranslations();
	
	// Execute Game Loops
	Loop();
	ShieldScript();
	Speed();
	StatRandomizer();
	AutosaveHandler();
	DamageNumbers();
	HealthBars();
	
	// GUI
	CheckGUI();
	CheckCursor();
	
	// Remove Aura if the keep Aura CVAR is off
	if (!GetCVar("drpg_skill_keepauras"))
	{
		Player.Aura = 0;
		Player.AuraTimer = 0;
	};
	
	// Transport from/to Outpost Screen Fading
	if (Transported)
	{
		for (int i = 0; i < MAX_PLAYERS; i++)
			SetActorProperty(Players(i).TID, APROP_Invulnerable, false);
		SetPlayerProperty (0, 0, PROP_TOTALLYFROZEN); // In case we were in the menu
		FadeRange(255, 255, 255, 1.0, 255, 255, 255, 0.0, 1.0);
		Transported = false;
	};
	
	// Store the current map number
	MapNumber = GetLevelInfo(LEVELINFO_LEVELNUM);
	if (MapNumber > 39) MapNumber = 39;
	
	// Clear the Player's summons
	for (int i = 0; i < MAX_SUMMONS; i++)
		Player.SummonTID[i] = 0;
	Player.Summons = 0;
	
	// Reset the menus if they were open in the last level
	Player.InMenu = false;
	Player.InShop = false;
};

// Map Init Script
script MapInit() open
{
	int mapentrynum;
	
	if (!StrICmp(StrParam("%N\n", PRINTNAME_LEVEL), "Outpost"))
	{
		if (!NumVisitedLevels)
		{
			Log("\c[White]WARNING: \c[Brick]Do not start a game on the Outpost unless testing, or else the Level Teleporter will not function.\n");
			Log("\c[Red]The Level Teleporter has been disabled.\n");
		};
		
		return;
	};
	
	if (CheckVisited(StrParam("%N\n", PRINTNAME_LEVEL)))
		return;
	
	mapentrynum = NumVisitedLevels;
	++NumVisitedLevels;
	
	// Gotta do this the old-fashioned way
	str levlump = StrParam("%N\n", PRINTNAME_LEVEL);
	str levname = StrParam("%N\n", PRINTNAME_LEVELNAME);
	for (int i = 0; i < 8 && i < StrLen (levlump); ++i)
		VisitedLevels[mapentrynum].LumpName[i] = levlump[i];
	for (int i = 0; i < 47 && i < StrLen (levname); ++i)
		VisitedLevels[mapentrynum].NiceName[i] = levname[i];
};

// Monster Init Script
acscript MonsterInit(int Flags)
{
	// If initialization has already occurred on this monster, terminate
	if (CheckInventory("MonsterInit")) return;
	
	// Set as initialized
	SetInventory("MonsterInit", 1);
	
	// Start Damage Numbers Script
	DamageNumbers();
	
	// Start Monster Loop Script
	MonsterLoop();
	
	// Give it a Health Bar
	if (!(Flags & MF_NOHEALTHBAR))
		SetInventory("HealthBar", 1);
	
	// Apply Monster Flags
	SetInventory("MonsterFlags", Flags);
	
	// Apply Stats
	MonsterStats(Flags);
};

// Special handling for DRLA Monsters
acscript MonsterInitDRLA(int Flags)
{
	// Tons of insane calculations here to dynamically make cool things happen
	
	MonsterInit(Flags);
};

// Apply stats to monsters
script MonsterStats(int Flags)
{
	int NumPlayers;
	int PlayerAvgLevel;
	int MonsterLevel;
	int MonsterAura;
	int MonsterStrength;
	int MonsterDefense;
	int AuraRandomizer;
	
	// Add up the levels of all the players in the game
	for (int i = 0; i < MAX_PLAYERS; ++i)
	{
		if (!PlayerInGame(i)) continue;
		NumPlayers++;
		PlayerAvgLevel += Players(i).Level;
	};
	
	// Now calculate the average level between them
	PlayerAvgLevel /= NumPlayers;
	
	// Monster Level System
	if (GetCVar("drpg_monster_levels") > 0 && (!(Flags & MF_NOSTATS)))
	{
		// level
		int LevelType = GetCVar("drpg_monster_levels");
		fixed LevelMult = GetCVarFixed("drpg_monster_level_mult");
		int MonsterCurve = GetCVar("drpg_monster_curve");
		int LevelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
		if (LevelNum == 999) // UAC Outpost
			if (ArenaActive) // If the Arena is active, base the Monster Level's Map Number portion on the current wave
				LevelNum = ArenaWave
			else // If not in the Arena, base it off the level the player teleported from
				LevelNum = LevelNum;
		if (LevelType == 1 || LevelType == 3) // Player Level
			MonsterLevel = Round((fixed)PlayerAvgLevel + RandomFixed(0.0, (fixed)GameSkill() * 2.0) + RandomFixed(0.0, (fixed)MonsterCurve) * RandomFixed(1.0, LevelMult));
		if (LevelType == 2 || LevelType == 3) // Map Number
			MonsterLevel += Round((fixed)LevelNum * RandomFixed(1.0, (fixed)LevelMult));
		// [KS] Bad place to do that! We don't know who the owner is.
		/*
		if (GetActorProperty(0, APROP_Friendly)) // If the monster is friendly, it has the same level as you
			MonsterLevel = Player.Level;
		*/
		if (MonsterLevel <= 0) MonsterLevel = 1;
		
		// Strength
		MonsterStrength = Random(MonsterLevel, MonsterLevel + (GameSkill() * 5));
		if (MonsterStrength <= 0) MonsterStrength = 1;
		
		// Defense
		MonsterDefense = Random(MonsterLevel, MonsterLevel + (GameSkill() * 5));
		if (MonsterDefense <= 0) MonsterDefense = 1;
	};
	
	// Apply Aura
	if (!GetActorProperty(0, APROP_Friendly) && !(Flags & MF_NOAURA))
	{
		int AuraCurve = GetCVar("drpg_aura_curve");
		int AuraMin = -100 + ((GameSkill() * (GameSkill() * 2))) + AuraCurve;
		if (AuraMin > 0) AuraMin = 0;
		int AuraMax = 10;
		AuraRandomizer = Random(AuraMin, AuraMax);
		if (AuraRandomizer > 0)
			MonsterAura = AuraRandomizer;
	};
	
	// If the monster has an Aura, double it's initial health
	if (AuraRandomizer > 0)
		SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_SpawnHealth) * 2);
	
	// Apply the aura effects
	switch (MonsterAura)
	{
		case 1: // Red Aura - Strength
			MonsterStrength *= 2;
			break;
		case 2: // Green Aura - Defense
			MonsterDefense *= 2;
			break;
		case 3: // White Aura - XP
			MonsterLevel *= 2;
			break;
		case 4: // Pink Aura - Vitality
			SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_Health) * 2);
			break;
		case 7: // Orange Aura - Agility
			SetActorProperty(0, APROP_Speed, GetActorProperty(0, APROP_Speed) * 2);
			break;
		case 10: // Black Aura - Miniboss
			MonsterStrength *= 2;
			MonsterDefense *= 2;
			MonsterLevel *= Random(2, 3 + GameSkill());
			SetActorProperty(0, APROP_Speed, GetActorProperty(0, APROP_Speed) * 2);
			SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_Health) * 4);
			break;
	};
	
	// Apply the stats to the monster
	SetInventory("MonsterLevel", MonsterLevel);
	SetInventory("MonsterAura", MonsterAura);
	SetInventory("MonsterStrength", MonsterStrength);
	SetInventory("MonsterDefense", MonsterDefense);
	SetActorPropertyFixed(0, APROP_DamageFactor, 1.0 - (0.09 * (MonsterDefense / 100)));
	if (GetActorPropertyFixed(0, APROP_DamageFactor) < 0.1) SetActorPropertyFixed(0, APROP_DamageFactor, 0.1);
};

script SpawnAura(int TID, int Type, bool ForceFancy)
{
	fixed X = GetActorX(TID);
	fixed Y = GetActorY(TID);
	fixed Z = GetActorZ(TID);
	fixed Radius = GetActorPropertyFixed(TID, APROP_Radius);
	fixed Height = GetActorPropertyFixed(TID, APROP_Height);
	int Angle = GetActorAngle(TID) * 256;
    bool Simple = (GetCVar("drpg_simple_auras") && !ForceFancy);
    
    if (Type != 0 && Type != 10 && IsStealth(TID))
        return;
    
    switch (Type)
    {
		case 0: // Friendly Monster
			if (!Simple)
				SpawnForced("FriendlyAura", X, Y, Z + 32.0, 0, Angle);
			SpawnForced("FriendlyIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 1: // Red Aura - Strength
			if (!Simple)
				SpawnForced("RedAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("RedAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 2: // Green Aura - Defense
			if (!Simple)
				SpawnForced("GreenAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("GreenAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 3: // White Aura - XP
			if (!Simple)
				SpawnForced("WhiteAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("WhiteAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 4: // Pink Aura - Vitality
			if (!Simple)
				SpawnForced("PinkAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("PinkAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 5: // Blue Aura - Energy
			if (!Simple)
				SpawnForced("CyanAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("CyanAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 6: // Purple Aura - Regeneration
			if (!Simple)
				SpawnForced("PurpleAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("PurpleAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 7: // Orange Aura - Agility
			if (!Simple)
				SpawnForced("OrangeAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("OrangeAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 8: // Dark Blue Aura - Capacity
			if (!Simple)
				SpawnForced("BlueAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("BlueAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 9: // Yellow Aura - Luck
			if (!Simple)
				SpawnForced("YellowAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("YellowAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
		case 10: // Black Aura - Miniboss
			if (!Simple)
				SpawnForced("BlackAura", X, Y, Z + Height / 2.0, AuraTID, Angle)
			else
				SpawnForced("BlackAuraIndicator", X, Y, Z + Height + 8.0, 0, Angle);
			break;
    };
    
	// Pass Radius and Height to the Auras for DECORATE usage
    if (!Simple)
    {
        SetUserVariable(AuraTID, "user_radius", (int)Radius);
        SetUserVariable(AuraTID, "user_height", (int)Height);
        Thing_ChangeTID(AuraTID, 0);
    };
};

// Monster Loop
script MonsterLoop()
{
	Start:
	fixed X = GetActorX(0);
	fixed Y = GetActorY(0);
	fixed Z = GetActorZ(0);
	int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterFlags = CheckInventory("MonsterFlags");
	int MonsterStrength = CheckInventory("MonsterStrength");
	int AuraType = CheckInventory("MonsterAura");
	fixed Radius = GetActorPropertyFixed(0, APROP_Radius);
	fixed Height = GetActorPropertyFixed(0, APROP_Height);
	int Angle = GetActorAngle(0) * 256;
	int RegenAmount;
	
	// Death
	if (GetActorProperty(0, APROP_Health) <= 0)
	{
		MonsterDeath();
		return;
	};
	
	// Friendly Monster Aura
	if (GetActorProperty(0, APROP_Friendly))
		SpawnAura(0, 0, false);
	
	// Aura Loop Effects
	switch (AuraType)
	{
		case 6: // Purple Aura - Regeneration
			RegenAmount = 0.01 * GetActorProperty(0, APROP_SpawnHealth);
			if (RegenAmount == 0) RegenAmount = 1;
			if (GetActorProperty(0, APROP_Health) < GetActorProperty(0, APROP_SpawnHealth) && (Timer() % 35) == 1 && !CheckInventory("PowerTimeFreezer"))
				HealThing(RegenAmount);
			break;
		case 10: // Black Aura - Miniboss
			SetActorProperty(0, APROP_RenderStyle, STYLE_Fuzzy);
			RegenAmount = 0.01 * GetActorProperty(0, APROP_SpawnHealth);
			if (RegenAmount == 0) RegenAmount = 1;
			if (GetActorProperty(0, APROP_Health) < GetActorProperty(0, APROP_SpawnHealth) && (Timer() % 35) == 1 && !CheckInventory("PowerTimeFreezer"))
				HealThing(RegenAmount);
			break;
	};
	
	// Spawn Aura
    if (AuraType)
        SpawnAura(0, AuraType, false);
	
	// Strength
	if (MonsterStrength >= 32000)
		SetInventory("Strength32000", 1)
	else if (MonsterStrength > 0)
		SetInventory(StrParam("Strength%d\n", MonsterStrength), 1);
	
	// Overhead Health Bars
	if (GetCVar("drpg_healthbars_overhead"))
	{
		fixed BarHealth = (fixed)GetActorProperty(0, APROP_Health) / (fixed)GetActorProperty(0, APROP_SpawnHealth) * 32.0;
		if (BarHealth > 64.0) BarHealth = 64.0;
		Z = GetActorZ(0) + Height + 4.0;
		SpawnForced(StrParam("HealthBar%d\n", Round(BarHealth)), X, Y, Z, 0, 0);
	};
	
	Delay(1);
	goto Start;
};

script int WhoKilledMe()
{
	SetActivatorToTarget(0);
	return PlayerNumber();
};

acscript MonsterDeath()
{
	int Killer = WhoKilledMe();
	
	int MonsterLevel = CheckInventory("MonsterLevel");
	int MonsterFlags = CheckInventory("MonsterFlags");
	int AuraType = CheckInventory("MonsterAura");
	fixed XPAmount = Random(GetActorProperty(0, APROP_SpawnHealth) / 2, GetActorProperty(0, APROP_SpawnHealth));
	int SkillDropMod = (GameSkill() - 1) * 32;
	int DropTID = (Players(Killer).MagnetTimer > 0 ? Players(Killer).TID : 0);
	int LuckDrops = 1;
	
	// Drops
	if (!(MonsterFlags & MF_NODROPS) && !GetActorProperty(0, APROP_Friendly))
	{
		// Aura Drops
		switch (AuraType)
		{
			case 1: // Red Aura - Strength
				DropItem(DropTID, "WeaponDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialStrength", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 2: // Green Aura - Defense
				DropItem(DropTID, "UsedArmorDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialDefense", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 3: // White Aura - XP
				DropItem(DropTID, "SmallTokenDropper", 1, 96 - SkillDropMod);
				XPAmount *= 2;
				DropItem(DropTID, "VialPotency", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 4: // Pink Aura - Vitality
				DropItem(DropTID, "HealthDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialVitality", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 5: // Blue Aura - Energy
				DropItem(DropTID, "EPCapsule", 1, 128 - SkillDropMod);
				DropItem(DropTID, "BigEPCapsule", 1, 64 - SkillDropMod);
				DropItem(DropTID, "VialEnergy", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 6: // Purple Aura - Regeneration
				DropItem(DropTID, "RegenSphere", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialRegeneration", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 7: // Orange Aura - Agility
				DropItem(DropTID, "TimeSphere", 1, 64 - (SkillDropMod / 2));
				DropItem(DropTID, "VialAgility", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 8: // Dark Blue Aura - Capacity
				DropItem(DropTID, "AmmoDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "VialCapacity", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 9: // Yellow Aura - Luck
				LuckDrops = 4;
				DropItem(DropTID, "VialLuck", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
			case 10: // Black Aura - Miniboss
				DropItem(DropTID, "WeaponDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "UsedArmorDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "SmallTokenDropper", 1, 96 - SkillDropMod);
				DropItem(DropTID, "TimeSphere", 1, 128 - SkillDropMod);
				DropItem(DropTID, "HealthDropper", 1, 128 - SkillDropMod);
				DropItem(DropTID, "EPCapsule", 1, 128 - SkillDropMod);
				DropItem(DropTID, "BigEPCapsule", 1, 64 - SkillDropMod);
				DropItem(DropTID, "RegenSphere", 1, 128 - SkillDropMod);
				DropItem(DropTID, "AmmoDropper", 1, 128 - SkillDropMod);
				LuckDrops = 4;
				XPAmount *= 4;
				DropItem(DropTID, "VialStrength", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialDefense", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialAgility", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialVitality", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialEnergy", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialRegeneration", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialCapacity", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialLuck", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialPurifier", 1, 255 - SkillDropMod);
				DropItem(DropTID, "VialPotency", 1, 192 - SkillDropMod);
				DropItem(DropTID, "VialDropperRare", 1, 32);
				break;
		};
		
		// Luck-based Drops
		if (Killer > -1)
		{
			for (int i = 0; i < LuckDrops; i++)
			{
				if (RandomFixed(0.0, 100.0) < Players(Killer).CreditChance)	DropItem(DropTID, "MoneyDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).HealthChance)	DropItem(DropTID, "HealthDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).EPChance)		DropItem(DropTID, "EPCapsule", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).ArmorChance)	DropItem(DropTID, "ArmorDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).PowerupChance)DropItem(DropTID, "PowerupDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).WeaponChance)	DropItem(DropTID, "WeaponDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).TokenChance)	DropItem(DropTID, "SmallTokenDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).AugChance)	DropItem(DropTID, "AugDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).ShieldChance)	DropItem(DropTID, "ShieldDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).StimChance)	DropItem(DropTID, "StimDropper", 1, 255);
				if (RandomFixed(0.0, 100.0) < Players(Killer).StimChance)	DropItem(DropTID, "VialDropper", 1, 255);
			};
		};
		
		// Boss Drops
		if (MonsterFlags & MF_BOSS)
		{
			DropItem(DropTID, "Credits1000", 1, 255);
			DropItem(DropTID, "SoulsphereRandomizer", 1, 255);
			DropItem(DropTID, "Continue", 1, 128 - SkillDropMod);
			DropItem(DropTID, "TokenDropper", 1, 255 - SkillDropMod);
			DropItem(DropTID, "WeaponDropper", 1, 255 - SkillDropMod);
			DropItem(DropTID, "AugDropper", 1, 160 - SkillDropMod);
			DropItem(DropTID, "ShieldDropper", 1, 160 - SkillDropMod);
		};
	};
	
	// Add XP
	if (!(MonsterFlags & MF_NOXP) && !GetActorProperty(0, APROP_Friendly))
	{
		// XP modifications based on level and skill
		if (GetCVar("drpg_xp_monsterlevel")) XPAmount *= 1.0 + ((fixed)MonsterLevel / 100.0);
		if (GetCVar("drpg_xp_skilllevel")) XPAmount *= 1.0 - (0.15 * (fixed)GameSkill());
		
		for (int i = 0; i < MAX_PLAYERS; ++i)
		{
			if (MonsterFlags & MF_NEGATIVEXP)
				AddXP(i, -(int)XPAmount, false)
			else
			{
				if (Killer == i)
					AddXP(i, (int)XPAmount, false)
				else
					AddXP(i, (int)XPAmount, true);
			};
		};
	};
	
	// Add a kill to the pay kills
	if (!(MonsterFlags & MF_NOPAYKILL) && Killer > -1)
		Players(Killer).PayKills++;
	
	// SHOTGUNS!
	if (GetCVar("drpg_shotguns"))
		DropItem(0, "ShotSpawn", 1, 255);
};

// Loop Script
script Loop()
{
	Start:
	// Update Functions
	CheckCombo();
	CheckStats();
	CheckStatBonus();
	CheckHardStatCaps();
	CheckRegen();
	CheckLuck();
	CheckHealth();
	CheckArmorMax();
	CheckAugSlots();
	CheckAugs();
	CheckLevel();
	CheckRank();
	CheckSkills();
	CheckSkillDescriptions();
	CheckBurnout();
	CheckShields();
	CheckShieldAccessory();
	CheckStim();
	CheckPerks();
	CheckStatBounds();
	CheckLevelInfo();
	CheckCapacity();
	CheckHUD();
	
	// Give the Player a Health Bar for Multiplayer
	if (InMultiplayer) SetInventory("HealthBar", 1);
	
	// Handle the menu cursor color
	MenuCursorColor = CursorColors[(Timer() / 3) % 6];
	
	// Calculate Shop Discount
	Player.ShopDiscount = (int)(Player.RankLevel * 2.1);
	
	// Main Menu
	if (Player.InMenu)
		MenuLoop();
	
	// Shop Menu
	if (Player.InShop)
		ShopLoop();
	
	// Menu freezing/dimming
	if (Player.InMenu || Player.InShop || Player.OutpostMenu > 0)
	{
		if (GetCVar("drpg_menufreeze"))
			GiveInventory("MenuFreezer", 1);
		if (GetCVar("drpg_menudim"))
			FadeRange(0, 0, 0, 0.5, 0, 0, 0, 0.0, 0.25);
	};
	
	// Menu-specific Help
	if (Player.InMenu || Player.InShop || Player.OutpostMenu > 0)
		MenuHelp();
	
	// Menu icon in multiplayer
	if (InMultiplayer && (Player.InMenu || Player.InShop || Player.OutpostMenu > 0))
	{
		fixed X = GetActorX(Player.TID);
		fixed Y = GetActorY(Player.TID);
		fixed Z = GetActorZ(Player.TID);
		fixed Height = GetActorPropertyFixed(Player.TID, APROP_Height);
		
		SpawnForced("MenuIcon", X, Y, Z + Height + 8.0, 0, 0);
	};
	
	// Shop Special Handling
	if (Arbitrator) CheckShopSpecial();
	
	// Always Quick Heal if CVAR is set
	if (GetCVar("drpg_auto_heal"))
		CallACS("QuickHeal");
	
	// Handle damage numbers on the HUD
	if (GetCVar("drpg_damagenumbers_hud") && !Player.Shield.Active)
		DamageNumbersHUD();

	// Check health for this tic
	Player.BeforeHealth = GetActorProperty(Player.TID, APROP_Health);
	
	// Regeneration
	if (GetActorProperty(Player.TID, APROP_Health) > 0)
		DoRegen();
	
	// Give the Strength boosting item
	if (Player.TotalDamage > 0 && Player.TotalDamage <= 32000)
		GiveInventory(StrParam("Strength%d\n", Player.TotalDamage), 1);
	
	// Set mass stupid high when Invulnerable to prevent knockback
	if (CheckInventory("PowerInvulnerable"))
		Player.Mass *= 128;
	
	// Survival Bonus
	if (RandomFixed(0.0, 100.0) <= Player.SurvivalBonus)
	{
		SetPlayerProperty(0, 1, PROP_BUDDHA);
		
		if (GetActorProperty(Player.TID, APROP_Health) == 1)
		{
			HealThing(1);
			ActivatorSound("health/survive", 127);
		};
	}
	else
		SetPlayerProperty(0, 0, PROP_BUDDHA);
	
	// Continue check
	if (CheckInventory("Continue") > 0)
	{
		SetPlayerProperty(0, 1, PROP_BUDDHA);
		
		if (GetActorProperty(Player.TID, APROP_Health) <= 1)
		{
			HealThing(1000000);
			ActivatorSound("health/resurrect", 127);
			TakeInventory("Continue", 1);
		};
	};
	
	// Apply Stats
	SetActorProperty(Player.TID, APROP_SpawnHealth, Player.HealthMax);
	SetActorPropertyFixed(Player.TID, APROP_DamageFactor, Player.DamageFactor);
	SetActorProperty(Player.TID, APROP_Mass, Player.Mass);
	SetActorPropertyFixed(Player.TID, APROP_Speed, Player.Speed);
	SetActorPropertyFixed(Player.TID, APROP_JumpZ, Player.JumpHeight);
	
	// Clear your Status Effect if the timer is empty
	if (Player.StatusTimer <= 0)
		Player.StatusType = 0;
	
	// Make you invincible while in the Menus and if menu freezing is enabled
	if ((Player.InMenu || Player.InShop) && GetCVar("drpg_menufreeze"))
		SetActorProperty(Player.TID, APROP_DamageFactor, 0);
	
	// Decrease the Magnet Timer
	if (Player.MagnetTimer > 0 && !CheckInventory("PowerTimeFreezer") && !CheckInventory("MenuFreezer"))
		Player.MagnetTimer--;
	
	// Loop
	Delay(1);
	
	// this needs to be done in a separate tic
	Player.AfterHealth = GetActorProperty(Player.TID, APROP_Health);
	Player.HealthLoss = Player.BeforeHealth - Player.AfterHealth;
	
	goto Start;
};

// Handles Weapon Firing Speed
script Speed()
{
	Start:
	int Time;
	
	if (!Player.Stim.ActiveBonus[STIM_RAGE])
	{
		if (Player.Agility <= 100)
			Time = Abs(Round(Player.WeaponSpeed * 0.35 - 35.0))
		else
			Time = 0;
		
		if (GetCVar("drpg_stat_weaponspeed"))
			GiveInventory("Speed", 1);
	};
	
	Delay(Time + 1);
	goto Start;
};

// Stat Token Randomizer Script
script StatRandomizer()
{
	Start:
	int StatTokens = CheckInventory("StatToken");
	
	Delay(1);

	// Only randomize your starting tokens
	if (GetCVar("drpg_randomstatgrowth") == 1 && !RandomizedStartTokens)
	{
		if (StatTokens > 0)
			IncreaseStat(Random(1, 8))
		else if (StatTokens == 0)
			RandomizedStartTokens = true;;
	}
	// Always spend Tokens, no matter how you got them
	else if (GetCVar("drpg_randomstatgrowth") == 2)
		if (StatTokens > 0)
			IncreaseStat(Random(1, 8));

	// Spend Tokens only on level up
	if (GetCVar("drpg_autospend"))
		while (Player.LevelTokens > 0)
		{
			IncreaseStat(Random(1, 8));
			Delay(1);
		};
	
	goto Start;
};

// Handles autosaving
script AutosaveHandler()
{
	while (true)
	{
		// Terminate if the autosave CVar is disabled
		if (GetCVar("drpg_autosave") == 0) return;
		
		int Minutes = GetCVar("drpg_autosave");
		Delay(35 * Minutes * 60);
		Autosave();
	};
};

// Handles Status Effects
script StatusEffect(int Type, int Time, int Intensity)
{
	Player.StatusType = Type;
	Player.StatusTimer = Time * 35;
	
	if (Intensity == 0)
		Intensity = 1;
	
	while (Player.StatusTimer > 0)
	{
		if (Type == 1) // Confusion
		{
			SetActorAngle(0, GetActorAngle(0) + 1024 * Cos(Timer() * (Intensity * 0.01)));
			SetActorPitch(0, 1024 * 8, Cos(Timer() * (Intensity * 0.01)));
		};
		
		if (Type == 2) // Blind
			FadeRange(0, 0, 0, (0.75 + (Intensity / 400)) - ((1024 * 8) * Sin(Timer() * 0.01)), 0, 0, 0, 0.0, 0.5);
		
		if (Type == 3) // Poisoned
			if ((Timer() % 35) == 1 && (GetActorProperty(Player.TID, APROP_Health) - Intensity) > 1)
			{
				DamageThing(Intensity);
				FadeRange(0, 255, 0, 0.25, 0, 255, 0, 0.0, (0.25 + Intensity / 100));
			};
		
		if (Player.StatusTimer > 0)
			Player.StatusTimer--;
		
		Delay(1);
	};
};

// Quick Heal
acscript QuickHeal(int Quick)
{
	// If you're dead, return
	if (GetActorProperty(Player.TID, APROP_Health) <= 0) return;
	
	int Health = GetActorProperty(Player.TID, APROP_Health);
	int Percent = GetCVar("drpg_auto_heal_percent");
	
	if ((Health < Player.HealthMax / Percent) || Quick)
	{
		if (GetCVar("drpg_auto_heal_order") == 1) // Smallest to Largest
		{
				 if (CheckInventory("StimPack"))			UseInventory("StimPack")
			else if (CheckInventory("Medikit"))				UseInventory("Medikit")
			else if (CheckInventory("LargeMedikit"))		UseInventory("LargeMedikit")
			else if (CheckInventory("XLMedikit"))			UseInventory("XLMedikit")
			else if (CheckInventory("MedPack"))				UseInventory("MedPack")
			else if (CheckInventory("SurgeryKit"))			UseInventory("SurgeryKit");
		}
		else if (GetCVar("drpg_auto_heal_order") == 2) // Largest to Smallest
		{
				 if (CheckInventory("SurgeryKit"))			UseInventory("SurgeryKit")
			else if (CheckInventory("MedPack"))				UseInventory("MedPack")
			else if (CheckInventory("XLMedikit"))			UseInventory("XLMedikit")
			else if (CheckInventory("LargeMedikit"))		UseInventory("LargeMedikit")
			else if (CheckInventory("Medikit"))				UseInventory("Medikit")
			else if (CheckInventory("StimPack"))			UseInventory("StimPack");
		};
	};
};

// Quick Armor
acscript QuickArmor()
{
		 if (CheckInventory("WhiteArmor")) {			UseInventory("WhiteArmor"); }
	else if (CheckInventory("WhiteArmorUsed")) {		UseInventory("WhiteArmorUsed"); }
	else if (CheckInventory("RedArmor")) {				UseInventory("RedArmor"); }
	else if (CheckInventory("RedArmorUsed")) {			UseInventory("RedArmorUsed"); }
	else if (CheckInventory("YellowArmor")) {			UseInventory("YellowArmor"); }
	else if (CheckInventory("YellowArmorUsed")) {		UseInventory("YellowArmorUsed"); }
	else if (CheckInventory("BlueArmor")) {				UseInventory("BlueArmor"); }
	else if (CheckInventory("BlueArmorUsed")) {			UseInventory("BlueArmorUsed"); }
	else if (CheckInventory("GreenArmor")) {			UseInventory("GreenArmor"); }
	else if (CheckInventory("GreenArmorUsed")) {		UseInventory("GreenArmorUsed"); };
};

// Quickly buy EP
acscript QuickEP()
{
	if (!GetCVar("drpg_shoptype") && !InBase)
	{
		ActivatorSound("menu/error", 127);
		return;
	};
	
	int Amount = Player.EPMax - Player.EP;
	
	if (CheckInventory("Credits") > 0 && Player.EP < Player.EPMax)
	{
		ActivatorSound("health/epcapsule", 127);
		
		if (CheckInventory("Credits") < Amount)
			Amount = CheckInventory("Credits");
		
		TakeInventory("Credits", Amount);
		AddEP(Amount);
	}
	else
	{
		ActivatorSound("menu/error", 127);
		return;
	};
};

// Death Script
script Dead() death
{
	// Taunt the Player
	ActivatorSound("Taunt", 127);
	
	// Reset menu vars
	Player.InMenu = false;
	Player.InShop = false;
	
	// Remove Aura
	Player.Aura = 0;
	Player.AuraTimer = 0;
	
	// Drop Credits
	if (GetCVar("drpg_multi_dropcredits") && CheckInventory("Credits") > 0)
	{
		int DropAmount = CheckInventory("Credits") / 100 * GetCVar("drpg_multi_dropcredits_percent");
		
		// Cap out at a million so if you have stupid amounts of Credits you don't freeze/nuke the game
		if (DropAmount > 1000000) DropAmount = 1000000;
		
		TakeInventory("Credits", DropAmount);
		
		// Credit Fountain
		int Total = DropAmount;
		int Drops;
		
		Drops = Total / 1000;
		while (Drops--) DropItem(0, "Credits1000", 1, 256);
		Total -= (Total / 1000) * 1000;

		Drops = Total / 100;
		while (Drops--) DropItem(0, "Credits100", 1, 256);
		Total -= (Total / 100) * 100;

		Drops = Total / 50;
		while (Drops--) DropItem(0, "Credits50", 1, 256);
		Total -= (Total / 50) * 50;

		Drops = Total / 20;
		while (Drops--) DropItem(0, "Credits20", 1, 256);
		Total -= (Total / 20) * 20;

		Drops = Total / 10;
		while (Drops--) DropItem(0, "Credits10", 1, 256);
		Total -= (Total / 10) * 10;

		Drops = Total / 5;
		while (Drops--) DropItem(0, "Credits5", 1, 256);
		Total -= (Total / 5) * 5;
		
		Drops = Total;
		while (Total--) DropItem(0, "Credits1", 1, 256);
	};
	
	// Drop Inventory
	if (GetCVar("drpg_multi_dropinv"))
		DropInventory();
	
	// Terminate Scripts
	ACS_NamedTerminate("DamageNumbers", 0);
	ACS_NamedTerminate("HealthBars", 0);
	
	// Remove TID
	Thing_ChangeTID(Player.TID, 0);
};

// Respawn - XP Penalty in MP
script Respawn() respawn
{
	// Reassign TID
	Player.TID = PLAYER_TID + PlayerNumber();
	Thing_ChangeTID(0, Player.TID);
	
#if DEBUG
	Log("\cdDEBUG: Player TID: %d\n", Player.TID);
#endif
	
	// XP/Rank Penalty
	if (GetCVar("drpg_multi_takexp"))
	{
		int XPPenalty = Abs(Round((fixed)XPTable[Player.Level] / 100.0 * GetCVarFixed("drpg_multi_takexp_percent")));
		int RankPenalty = Abs(Round((fixed)RankTable[Player.RankLevel] / 100.0 * GetCVarFixed("drpg_multi_takexp_percent")));
		
		if (XPPenalty > 0 && RankPenalty > 0)
		{
			Player.XP -= XPPenalty;
			Player.Rank -= RankPenalty;
			SetFont("BIGFONT");
			HudMessage("\cjXP -%d\n\ckRank -%d\n", XPPenalty, RankPenalty, HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_WHITE, 1.5, 0.75, 2.0, 2.0);
		};
	};
	
	// Restore EP if CVAR is set
	if (GetCVar("drpg_multi_restoreep"))
		Player.EP = Player.EPMax;
	
	// Give a box of ammo if a specific ammo type is empty if the CVAR is set
	if (GetCVar("drpg_multi_restoreammo"))
	{
		if (CheckInventory("Clip") < GetAmmoAmount("Clip") * (Player.Capacity / 10))
			SetInventory("Clip", GetAmmoAmount("Clip") * (Player.Capacity / 10));
		if (CheckInventory("Shell") < GetAmmoAmount("Shell") * (Player.Capacity / 10))
			SetInventory("Shell", GetAmmoAmount("Shell") * (Player.Capacity / 10));
		if (CheckInventory("RocketAmmo") < GetAmmoAmount("RocketAmmo") * (Player.Capacity / 10))
			SetInventory("RocketAmmo", GetAmmoAmount("RocketAmmo") * (Player.Capacity / 10));
		if (CheckInventory("Cell") < GetAmmoAmount("Cell") * (Player.Capacity / 10))
			SetInventory("Cell", GetAmmoAmount("Cell") * (Player.Capacity / 10));
	};
	
	// Run Scripts
	DamageNumbers();
	HealthBars();
};

// Handles Damage Numbers
script DamageNumbers()
{
	while (GetActorProperty(0, APROP_Health) > 0 && GetCVar("drpg_damagenumbers"))
	{
		SetInventory("MonsterHeightCheck", (int)GetActorPropertyFixed(0, APROP_Height));
		SetInventory("MonsterCurrentHealth", GetActorProperty(0, APROP_Health));
		SetInventory("MonsterHasTicked", 0);
		
		// Lag handling
		int DelayRate = GetLevelInfo(LEVELINFO_TOTAL_MONSTERS) / 100;
		Delay(1 + DelayRate + GetCVar("drpg_damagenumbers_delay"));
		
		if (GetActorProperty(0, APROP_Health) != CheckInventory("MonsterCurrentHealth"))
			if (CheckInventory("MonsterHasTicked") == 0)
			{
				int NewHealth = CheckInventory("MonsterCurrentHealth") - GetActorProperty(0, APROP_Health);
				
				// Prevent digit overflow
				if (NewHealth > 9999999)
					NewHealth = 9999999;
				
				// Don't show damage numbers when the shield is active
				if (CheckInventory("Shield") || GetActorProperty(0, APROP_Health) == SHIELD_HEALTH)
					NewHealth = 0;
					
				if (NewHealth != 0)
				{
					int Digit1 = GetDigit(Abs(NewHealth), 0);
					int Digit2 = GetDigit(Abs(NewHealth), 1);
					int Digit3 = GetDigit(Abs(NewHealth), 2);
					int Digit4 = GetDigit(Abs(NewHealth), 3);
					int Digit5 = GetDigit(Abs(NewHealth), 4);
					int Digit6 = GetDigit(Abs(NewHealth), 5);
					int Digit7 = GetDigit(Abs(NewHealth), 6);
					
					fixed X = GetActorX(0);
					fixed Y = GetActorY(0);
					fixed Z;
					int ActorHeight = CheckInventory("MonsterHeightCheck");
					
					int DigitID = Random(4000, 5000);
					bool Healed = (NewHealth < 0);
					
					if (ActorHeight > 0)
						Z = GetActorZ(0) + ActorHeight - 4
					else
						Z = GetActorZ(0) + GetActorProperty(0, APROP_Height) - 4;
					
					switch (Digit1)
					{
						case 0:	Spawn("Digit1Num0", X, Y, Z, DigitID, 0);	break;
						case 1:	Spawn("Digit1Num1", X, Y, Z, DigitID, 0);	break;
						case 2:	Spawn("Digit1Num2", X, Y, Z, DigitID, 0);	break;
						case 3:	Spawn("Digit1Num3", X, Y, Z, DigitID, 0);	break;
						case 4:	Spawn("Digit1Num4", X, Y, Z, DigitID, 0);	break;
						case 5:	Spawn("Digit1Num5", X, Y, Z, DigitID, 0);	break;
						case 6:	Spawn("Digit1Num6", X, Y, Z, DigitID, 0);	break;
						case 7:	Spawn("Digit1Num7", X, Y, Z, DigitID, 0);	break;
						case 8:	Spawn("Digit1Num8", X, Y, Z, DigitID, 0);	break;
						case 9:	Spawn("Digit1Num9", X, Y, Z, DigitID, 0);	break;
					};
					
					if (NewHealth >= 10 || NewHealth <= -10)
						switch (Digit2)
						{
							case 0:	Spawn("Digit2Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit2Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit2Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit2Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit2Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit2Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit2Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit2Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit2Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit2Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					if (NewHealth >= 100 || NewHealth <= -100)
						switch (Digit3)
						{
							case 0:	Spawn("Digit3Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit3Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit3Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit3Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit3Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit3Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit3Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit3Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit3Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit3Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					if (NewHealth >= 1000 || NewHealth <= -1000)
						switch (Digit4)
						{
							case 0:	Spawn("Digit4Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit4Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit4Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit4Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit4Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit4Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit4Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit4Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit4Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit4Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					if (NewHealth >= 10000 || NewHealth <= -10000)
						switch (Digit5)
						{
							case 0:	Spawn("Digit5Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit5Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit5Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit5Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit5Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit5Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit5Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit5Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit5Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit5Num9", X, Y, Z, DigitID, 0);	break;
						};

					if (NewHealth >= 100000 || NewHealth <= -100000)
						switch (Digit6)
						{
							case 0:	Spawn("Digit6Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit6Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit6Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit6Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit6Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit6Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit6Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit6Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit6Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit6Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					if (NewHealth >= 1000000 || NewHealth <= -1000000)
						switch (Digit7)
						{
							case 0:	Spawn("Digit7Num0", X, Y, Z, DigitID, 0);	break;
							case 1:	Spawn("Digit7Num1", X, Y, Z, DigitID, 0);	break;
							case 2:	Spawn("Digit7Num2", X, Y, Z, DigitID, 0);	break;
							case 3:	Spawn("Digit7Num3", X, Y, Z, DigitID, 0);	break;
							case 4:	Spawn("Digit7Num4", X, Y, Z, DigitID, 0);	break;
							case 5:	Spawn("Digit7Num5", X, Y, Z, DigitID, 0);	break;
							case 6:	Spawn("Digit7Num6", X, Y, Z, DigitID, 0);	break;
							case 7:	Spawn("Digit7Num7", X, Y, Z, DigitID, 0);	break;
							case 8:	Spawn("Digit7Num8", X, Y, Z, DigitID, 0);	break;
							case 9:	Spawn("Digit7Num9", X, Y, Z, DigitID, 0);	break;
						};
					
					// Overkill
					if (NewHealth >= GetActorProperty(0, APROP_SpawnHealth))
						Thing_SetTranslation(DigitID, 1);

					// Healed
					if (Healed)
						Thing_SetTranslation(DigitID, 2);

					// Scratch
					if (NewHealth == 1)
						Thing_SetTranslation(DigitID, 3);
					
					SetActorVelocity(DigitID, Random(-1.0, 1.0), Random(-1.0, 1.0), 0.5, 0, 0);
					SetInventory("MonsterHasTicked", 1);
				};
			};
			
		if (!GetCVar("drpg_damagenumbers")) return;
	};
};

// Psuedo Damage Numbers on the HUD
script DamageNumbersHUD()
{
	int Before = GetActorProperty(Player.TID, APROP_Health);
	Delay(1);
	
	int Color = GetCVar("drpg_damagenumbers_hud_color");
	int After = GetActorProperty(Player.TID, APROP_Health);
	int Loss = Before - After;
	
	if (Loss == 1)
		SetFont("SMALLFONT")
	else
		SetFont("BIGFONT");
	
	if (Before > After)
		HudMessage("%d\n", Loss, HUDMSG_FADEOUT, 0, Color, 0.4 + RandomFixed(0.0, 0.4), 0.6 + RandomFixed(0.0, 0.3), 0.5, 1.0);
};

// Handles HUD Health Bars
script HealthBars()
{
	int PlayerNum = PlayerNumber();
	Start:
	
	while (GetUserCVar(PlayerNumber(), "drpg_healthbars"))
	{
		SetActivatorToTarget(Players(PlayerNum).TID);
		
		Delay(1);
		
		// Flags
		bool HasHealthBar = (CheckInventory("HealthBar") > 0);
		bool Friendly = GetActorProperty(0, APROP_Friendly);
		bool Shield = CheckInventory("Shield");
		bool IsPlayer = false;
		
		// Stats
		int CurrentLevel = CheckInventory("MonsterLevel");
		int CurrentAura = CheckInventory("MonsterAura");
		int CurrentStrength = CheckInventory("MonsterStrength");
		int CurrentDefense = CheckInventory("MonsterDefense");
		int CurrentHealth = GetActorProperty(0, APROP_Health);
		int MaxHealth = GetActorProperty(0, APROP_SpawnHealth);
		
		// Other
		str Name = GetActorPropertyString(0, APROP_Nametag);
		int HealthPercent;
		str FillType;
		str AuraType;
		
		// Player Stats
		int ID;
		int[12] Stats; // Fuck you and your 20 local script vars limit
		
		// Blank out the name if it is the same as the actor itself
		if (Name == GetActorClass(0)) Name = "";
		
		// Special handling for Player Targets
		if (ActivatorTID() != Players(PlayerNum).TID && (ActivatorTID() >= PLAYER_TID && ActivatorTID() <= PLAYER_TID + MAX_PLAYERS))
		{
			// Find the right Player
			for (int i = 0; i < MAX_PLAYERS; i++)
				if (Players(i).TID == ActivatorTID())
				{
					ID = i;
					IsPlayer = true;
				};
			
			// Apply Stats
			Name = StrParam("%N\n", ID);
			Stats[0] = Players(ID).Level;
			Stats[1] = Players(ID).RankLevel;
			Stats[2] = Players(ID).Strength;
			Stats[3] = Players(ID).Defense;
			Stats[4] = Players(ID).Vitality;
			Stats[5] = Players(ID).Energy;
			Stats[6] = Players(ID).Regeneration;
			Stats[7] = Players(ID).Agility;
			Stats[8] = Players(ID).Capacity;
			Stats[9] = Players(ID).Luck;
			Stats[10] = CheckInventory("Armor");
			Stats[11] = Players(ID).ArmorMax;
			
			// If the Player has a Shield active, change the health to Shield amounts instead
			if (Shield)
			{
				CurrentHealth = CheckInventory("ShieldCharge");
				MaxHealth = CheckInventory("ShieldChargeMax");
			};
		};
		
		if (ActivatorTID() != Players(PlayerNum).TID && GetActorProperty(Players(PlayerNum).TID, APROP_Health) > 0)
		{
			SetActivator(Players(PlayerNum).TID);
			NEEDVALIDPLAYER; // Verify that SetActivator is doing its' thing.
			
			int X = GetUserCVar(PlayerNum, "drpg_healthbars_x");
			int Y = GetUserCVar(PlayerNum, "drpg_healthbars_y");
			
			if (HasHealthBar && (Shield || CurrentHealth > 0) && (!Player.InMenu && !Player.InShop && !Player.OutpostMenu))
			{
				// Divide-by-zero check
				if (MaxHealth > 0)
					HealthPercent = (CurrentHealth * 100) / MaxHealth;
				
				if (HealthPercent > 100)
					FillType = "Fill5";
				if (HealthPercent >= 75 && HealthPercent <= 100)
					FillType = "Fill1";
				if (HealthPercent >= 50 && HealthPercent <= 74)
					FillType = "Fill2";
				if (HealthPercent >= 25 && HealthPercent <= 49)
					FillType = "Fill3";
				if (HealthPercent <= 24)
					FillType = "Fill4";
				if (Shield)
					FillType = "Fill6";
				
				SetHudSize(800, 600, false);
				
				if (Friendly)
					if (GetCVar("screenblocks") == 10)
						PrintSprite("HPBarSS", 0, X, Y, 0.05)
					else
					PrintSprite("HPBar2", 0, X, Y, 0.05)
				else
					if (GetCVar("screenblocks") == 10)
						PrintSprite("HPBarSS", 0, X, Y, 0.05)
					else
						PrintSprite("HPBar", 0, X, Y, 0.05);
				
				// Name
				if (GetCVar("drpg_healthbars_names"))
				{
					int Color = CR_GRAY;
					
					switch (CurrentAura)
					{
						case 1: 	Color = CR_RED;		break;
						case 2: 	Color = CR_GREEN;	break;
						case 3: 	Color = CR_WHITE;	break;
						case 4: 	Color = CR_BRICK;	break;
						case 5: 	Color = CR_CYAN;	break;
						case 6: 	Color = CR_PURPLE;	break;
						case 7: 	Color = CR_ORANGE;	break;
						case 8: 	Color = CR_BLUE;	break;
						case 9: 	Color = CR_YELLOW;	break;
						case 10: 	Color = CR_BLACK;	break;
					};
					
					SetFont("BIGFONT");
					HudMessage("%s\n", Name, HUDMSG_PLAIN, 0, Color, X, Y - 24.0, 0.05);
				};
				
				// HP/Max HP
				SetFont("SMALLFONT");
				if (Shield)
					if (IsPlayer && Stats[10] > 0)
						HudMessage("%d/%d \cd[%d/%d]\n", CurrentHealth, MaxHealth, Stats[10], Stats[11], HUDMSG_PLAIN, 0, CR_CYAN, X, Y, 0.05)
					else
						HudMessage("%d/%d\n", CurrentHealth, MaxHealth, HUDMSG_PLAIN, 0, CR_CYAN, X, Y, 0.05)
				else
					if (IsPlayer && Stats[10] > 0)
						HudMessage("%d/%d \cd[%d/%d]\n", CurrentHealth, MaxHealth, Stats[10], Stats[11], HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05)
					else
						HudMessage("%d/%d\n", CurrentHealth, MaxHealth, HUDMSG_PLAIN, 0, CR_GREEN, X, Y, 0.05);
				
				// Monster Stats
				if (GetCVar("drpg_monster_levels") > 0 && CurrentLevel > 0 && !IsPlayer)
				{
					SetFont("BIGFONT");
					
					// Stat Amounts
					HudMessage("%d\n", CurrentLevel, HUDMSG_PLAIN, 0, CR_WHITE, X - 96.1, Y + 21.0, 0.05);
					HudMessage("%d\n", CurrentStrength, HUDMSG_PLAIN, 0, CR_RED, X - 18.1, Y + 21.0, 0.05);
					HudMessage("%d\n", CurrentDefense, HUDMSG_PLAIN, 0, CR_GREEN, X + 54.1, Y + 21.0, 0.05);
					
					// Stat Icons
					PrintSprite("MonLevel", 0, X - 107.0, Y + 21.0, 0.05);
					PrintSprite("MonSTR", 0, X - 30.0, Y + 21.0, 0.05);
					PrintSprite("MonDEF", 0, X + 42.0, Y + 21.0, 0.05);
				}
				else // Player Stats
				{
					// Rank Emblems
					for (int i = 0; i < Stats[1]; i++)
						PrintSprite("RankEmb", 0, X - 55.0 + (i * 7.0), Y + 22.0, 0.05);
					
					SetFont("BIGFONT");
					
					// Stat Amounts
					HudMessage("%d\n", Stats[0], HUDMSG_PLAIN, 0, CR_WHITE, X - 96.1, Y + 21.0, 0.05);
					HudMessage("%d\n", Stats[2], HUDMSG_PLAIN, 0, CR_RED, X - 96.1, Y + 39.0, 0.05);
					HudMessage("%d\n", Stats[3], HUDMSG_PLAIN, 0, CR_GREEN, X - 40.1, Y + 39.0, 0.05);
					HudMessage("%d\n", Stats[4], HUDMSG_PLAIN, 0, CR_BRICK, X + 16.1, Y + 39.0, 0.05);
					HudMessage("%d\n", Stats[5], HUDMSG_PLAIN, 0, CR_LIGHTBLUE, X + 72.1, Y + 39.0, 0.05);
					HudMessage("%d\n", Stats[6], HUDMSG_PLAIN, 0, CR_PURPLE, X - 96.1, Y + 58.0, 0.05);
					HudMessage("%d\n", Stats[7], HUDMSG_PLAIN, 0, CR_ORANGE, X - 40.1, Y + 58.0, 0.05);
					HudMessage("%d\n", Stats[8], HUDMSG_PLAIN, 0, CR_BLUE, X + 16.1, Y + 58.0, 0.05);
					HudMessage("%d\n", Stats[9], HUDMSG_PLAIN, 0, CR_YELLOW, X + 72.1, Y + 58.0, 0.05);
					
					// Stat Icons
					PrintSprite("MonLevel", 0, X - 107.0, Y + 21.0, 0.05);
					PrintSprite("STAT1S", 0, X - 96.0, Y + 56.0, 0.05);
					PrintSprite("STAT2S", 0, X - 40.0, Y + 54.0, 0.05);
					PrintSprite("STAT3S", 0, X + 16.0, Y + 54.0, 0.05);
					PrintSprite("STAT4S", 0, X + 72.0, Y + 56.0, 0.05);
					PrintSprite("STAT5S", 0, X - 96.0, Y + 74.0, 0.05);
					PrintSprite("STAT6S", 0, X - 40.0, Y + 75.0, 0.05);
					PrintSprite("STAT7S", 0, X + 16.0, Y + 74.0, 0.05);
					PrintSprite("STAT8S", 0, X + 71.0, Y + 73.0, 0.05);
				};
				
				// Aura Icon
				switch (CurrentAura)
				{
					case 1: 	AuraType = "AuraRed";	break;
					case 2: 	AuraType = "AuraGree";	break;
					case 3: 	AuraType = "AuraWhit";	break;
					case 4: 	AuraType = "AuraPink";	break;
					case 5: 	AuraType = "AuraCyan";	break;
					case 6: 	AuraType = "AuraPurp";	break;
					case 7: 	AuraType = "AuraOran";	break;
					case 8: 	AuraType = "AuraBlue";	break;
					case 9:		AuraType = "AuraYell";	break;
					case 10: 	AuraType = "AuraBlac";	break;
				};
				if (CurrentAura > 0)
					PrintSprite(AuraType, 0, X - 136.0, Y + 30.0, 0.05);
				
				// Prevent bar overflow
				if (HealthPercent > 100)
					HealthPercent = 100;
				
				// Bar fill
				if (GetCVar("screenblocks") == 10)
					for (int i = 0; i <= HealthPercent * 1.165; i++)
						PrintSprite(FillType, 0, (X - 120.0) + (i * 2.0), Y, 0.05)
				else
					for (int i = 0; i <= HealthPercent * 1.05; i++)
						PrintSprite(FillType, 0, (X - 97.0) + (i * 2.0), Y, 0.05);
			};
		};
	};
	
	Delay(1);
	goto Start;
};

// Level exit script
// Can't use NamedExecute in xlat, lame
acscript Exit(bool Secret) @ 30000
{
	NEEDVALIDPLAYER;
	
	int ParTime = GetLevelInfo(LEVELINFO_PAR_TIME);
	bool Waiting = true;
	
	// Prevent level exit until everyone is outside the menu
	if (InMultiplayer && PlayerCount() > 1)
		while (Waiting)
		{
			Waiting = false;
			
			for (int i = 0; i < MAX_PLAYERS; i++)
				if (Players(i).InMenu || Players(i).InShop)
					Waiting = true;
			
			Delay(35 * 3);
		};
	
	// Check par time and give bonus if you beat it
	if ((Timer() / 35) <= ParTime && !(ParTime <= 0 || ParBonus))
	{
		int RankBonus = RankTable[Player.RankLevel] / 20;
		
		FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0.0, 1.0);
		ActivatorSound("misc/secret", 127);
		
		Player.Rank += RankBonus;
		
		HudMessageBold("Par Time Beaten!\n%d Rank Bonus\n",
					   RankBonus,
					   HUDMSG_FADEOUT, 0, CR_GOLD, 1.5, 0.5, 3.0, 2.0);
		
		ParBonus = true;
		Delay(35 * 5);
	};
	
	// Now exit the level
	if (Secret)
		Exit_Secret(0)
	else
		Exit_Normal(0);
};

// Apply values to global vars visible to the HUD
function void CheckHUD()
{
	// New Multiplayer HUD Checking
	int PlayerNum = PlayerNumber();
	
	// Max Health/Armor
	HealthMax[PlayerNum] = Player.HealthMax;
	ArmorMax[PlayerNum] = Player.ArmorMax;
	
	// EP
	EP[PlayerNum] = Player.EP;
	EPMax[PlayerNum] = Player.EPMax;
	
	// For EP Bar on HUD
	SetInventory("EP", Player.EP * 100 / Player.EPMax);

	// Combo System
	Combo[PlayerNum] = Player.Combo;
	BonusGained[PlayerNum] = Player.BonusGained;
	XPGained[PlayerNum] = Player.XPGained;
	RankGained[PlayerNum] = Player.RankGained;
	
	// Aura Timer
	AuraTimerHUD[PlayerNum] = Player.AuraTimer / 35 + 1;
	
	// Regen Boost
	SetInventory("RegenBoost", (Player.RegenBoostTimer > 0));
	RegenBoostTimerHUD[PlayerNum] = Player.RegenBoostTimer / 35 + 1;
	
	// For Combo Bar on HUD
	if (Player.ComboTimer < 35 * 4 && Player.ComboTimer > 35 * 2)
	{
		SetInventory("Combo", (int)((fixed)Player.ComboTimer / (((fixed)COMBO_MAX) / 100.0)));
		SetInventory("Combo2", 0);
	}
	else if (Player.ComboTimer <= 35 * 2)
	{
		SetInventory("Combo", 0);
		SetInventory("Combo2", (int)((fixed)Player.ComboTimer / (((fixed)COMBO_MAX) / 100.0)));
	};
	
	// Stim Timer
	SetInventory("StimActive", Player.Stim.Active);
	if (Player.Stim.Timer > 0)
		StimTimerHUD[PlayerNum] = Player.Stim.Timer / 35 + 1
	else
		StimTimerHUD[PlayerNum] = 0;
	
	// Shield
	Shield[PlayerNum] = Player.Shield.Charge;
	ShieldCapacity[PlayerNum] = Player.Shield.Capacity;
	TakeInventory("ShieldCapacity", 100);
	GiveInventory("ShieldCapacity", (int)(((fixed)Player.Shield.Charge / (fixed)Player.Shield.Capacity) * 100.0));
	SetInventory("Shield", Player.Shield.Active);
	
	// Status Timer
	if (Player.StatusTimer > 0)
		StatusTimerHUD[PlayerNum] = Player.StatusTimer / 35 + 1
	else
		StatusTimerHUD[PlayerNum] = 0;
	
	// Items
	Credits[PlayerNum] = CheckInventory("Credits");
	Continues[PlayerNum] = CheckInventory("Continue");
};

function bool CheckVisited(str name)
{
	if (!NumVisitedLevels)
		return false;
	
	for (int i = 0; i < NumVisitedLevels; ++i)
	{
		if(StrICmp(StrParam ("%s\n", VisitedLevels[i].LumpName), name) == 0)
			return true;
	};
	
	return false;
};

function void DefaultLoadout()
{
	// Extras Compatibility
	if(GetCVar("drpg_ext_extras"))
		SetWeapon("Pistol1");
	
	// Brutal Doom Compatibility
	if (GetCVar("drpg_ext_brutal"))
	{
		GiveInventory("Melee_Attacks", 1);
		GiveInventory("BrutalPistol", 1);
	};

	// DoomRL Compatibility
	if (GetCVar("drpg_ext_doomrl"))
		SetWeapon("RLPistol");
};

