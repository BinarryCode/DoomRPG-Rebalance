
ACTOR RLHighPowerBattleRifle : RLWeapon
{
  Obituary "%o was shot by %k's high power battle rifle."
  Decal BulletChip
  Tag "High Power Battle Rifle"
  Weapon.SelectionOrder 25
  Weapon.SlotNumber 4
  Weapon.AmmoUse1 1
  Weapon.AmmoGive1 0
  Weapon.AmmoType1 "RLHighPowerBattleRifleClip"
  Weapon.AmmoType2 "Clip"
  Inventory.Icon "QRIFICON"
  States
  {
  Ready:
	TNT1 A 0 A_JumpIfInventory("RLMisfireSpamPreventionCooldown",1,"MisfirePrevention")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleNanoMod",1,"NanoRegenCheck")
    QRIF A 1 A_WeaponReady (WRF_ALLOWZOOM | WRF_ALLOWRELOAD)
    Goto Ready
  NanoRegenCheck:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip",1,"NanoRegenCheckBegin")
    QRIF A 70 A_WeaponReady (WRF_NOPRIMARY | WRF_ALLOWZOOM | WRF_ALLOWRELOAD)
	Goto NanoRegenCheckBegin
  NanoRegenCheckBegin:
    QRIF A 70 A_WeaponReady (WRF_ALLOWZOOM | WRF_ALLOWRELOAD)
  NanoRegenCheckBegin2:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleBulkMod",1,2)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip", 15, "Ready")
	Goto NanoRegen
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleBulkMod",2,2)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip", 18, "Ready")
	Goto NanoRegen
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip", 21, "Ready")
	Goto NanoRegen
  NanoRegen:
	TNT1 A 0 A_GiveInventory("RLHighPowerBattleRifleClip", 1)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleNanoMod",2,"NanoRegen2")
    QRIF A 17 A_WeaponReady (WRF_ALLOWZOOM | WRF_ALLOWRELOAD)
    Goto NanoRegenCheckBegin2
  NanoRegen2:
    QRIF A 9 A_WeaponReady (WRF_ALLOWZOOM | WRF_ALLOWRELOAD)
    Goto NanoRegenCheckBegin2
	
  ScavengerDrop:
	TNT1 A 0 A_JumpIfInventory("RLScavengerDrop",1,"WeaponDropConfirm")
	TNT1 A 0 A_GiveInventory("RLScavengerDrop",1)
	TNT1 A 0 A_Print("Press again to drop current weapon,\nor press \crAlt Fire\c- to scrap it to retrieve a Mod Pack.")
	Goto AfterModDrop
  WeaponDropConfirm:
	TNT1 A 0 A_GiveInventory("RLMisfireSpamPreventionCooldown",1)
	TNT1 A 0 A_TakeInventory("RLScavengerDrop",1)
	TNT1 A 0 A_TakeInventory("RLWeaponDrop",1)
	TNT1 A 0 A_TakeInventory("PowerRLTechnicianBasicDamage", 1)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleModLimit", 1, "WeaponDropModded")
	TNT1 A 0 A_SpawnItemEx("RLHighPowerBattleRiflePickup", 0, 0, 40, 12, 0, 0, 0, SXF_SETMASTER)
	Goto WeaponDropRemoval
  WeaponDropModded:
	TNT1 A 2 A_SpawnItemEx("RLHighPowerBattleRiflePickupModded", 0, 0, 40, 12, 0, 0, 0, SXF_SETMASTER)
  WeaponDropRemoval:
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleModLimit", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRiflePowerMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleBulkMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleAgilityMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleTechnicalMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleFirestormMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleSniperMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleNanoMod", 2)
	TNT1 A 0 A_GiveInventory("RLRarityTokenRemover", 1)
	TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleSelected", 1)
	TNT1 A 0 A_TakeInventory("RLWeaponLimit",1)
	TNT1 A 1 A_TakeInventory("RLHighPowerBattleRifle",1)
	Stop
	
  AfterModDrop:
    QRIF A 8 A_WeaponReady (16)
    Goto Ready
  MisfirePrevention:
    QRIF A 1 A_WeaponReady (WRF_NOFIRE | WRF_NOBOB)
    TNT1 A 0 A_JumpIfInventory("RLMisfireSpamPreventionCooldown", 1, "MisfirePrevention")
    Goto Ready
	
  Deselect:
	TNT1 A 0
	TNT1 A 0 A_GiveInventory("RLDeselectionFunction",1)
	TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleSelected", 1)
	TNT1 A 0 A_GiveInventory("RLRarityTokenRemover", 1)
	TNT1 A 0 A_TakeInventory("PowerRLTechnicianBasicDamage", 1)
  DeselectLoop:
    TNT1 A 0 A_JumpIfInventory("RLShellshockPerk", 1, "DeselectRenegade")
    TNT1 A 0 A_Lower
    QRIF A 1 A_Lower
    Loop
  DeselectRenegade:
    TNT1 A 0 A_Lower
    loop
  SelectRenegade: 
    TNT1 A 0 A_Raise
    loop
  SelectSetWeapon:
	TNT1 A 0 A_GiveInventory("RLBasicAssemblyTypeWeapon", 1)
	TNT1 A 0 A_GiveInventory("RLRapidfireTypeWeapon", 1)
	TNT1 A 0 A_GiveInventory("RLAssembledWeaponToken", 1)
	TNT1 A 0 A_GiveInventory("RLHighPowerBattleRifleSelected", 1)
	TNT1 A 0 A_JumpIfInventory("RLScavengerPerk",1, 1)
    Goto SelectLoop
	TNT1 A 0 A_GiveInventory("PowerRLTechnicianBasicDamage", 1)
    Goto SelectLoop
  SelectLoop:
    TNT1 A 0 A_JumpIfInventory("RLShellshockPerk", 1, "SelectRenegade")
    TNT1 A 0 A_Raise
    QRIF A 1 A_Raise
    Loop
	
  Fire:
	QRIF A 0 A_JumpIfInventory("RLRestrictionMeleeOnly",1,"MeleeRestricted") // Cannot fire in levels that restrict it
	QRIF A 0 A_JumpIfInventory("RLRestrictionSilencedOnly",1,"SilencedRestricted") // Cannot fire in levels that restrict it
	QRIF A 0 A_JumpIfInventory("RLRestrictionBoomOnly",1,"BoomRestricted") // Cannot fire in levels that restrict it
	QRIF A 0 A_JumpIfInventory("RLRestrictionHighTechOnly",1,"HighTechRestricted") // Cannot fire in levels that restrict it
	QRIF A 0 A_JumpIfInventory("RLRestrictionCunningOnly",1,"CunningRestricted") // Cannot fire in levels that restrict it
	
	TNT1 A 0 A_JumpIfNoAmmo("Reload")
	TNT1 A 0 A_AlertMonsters
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleSniperMod",1,"FireS")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRiflePowerMod",1,"FireP")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAgilityMod",1,"FireA")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (2, 0.5, -1, (random(1,6)*5), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (2, 0.5, -1, (random(1,6)*5), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FireP:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRiflePowerMod",2,"FirePP")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAgilityMod",1,"FirePA")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (2, 0.5, -1, (random(1,6)*6), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (2, 0.5, -1, (random(1,6)*6), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FireA:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRiflePowerMod",1,"FirePA")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAgilityMod",2,"FireAA")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (1.5, 0, -1, (random(1,6)*5), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (1.5, 0, -1, (random(1,6)*5), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FirePP:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (2, 0.5, -1, (random(1,6)*7), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (2, 0.5, -1, (random(1,6)*7), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FirePA:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (1.5, 0, -1, (random(1,6)*6), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (1.5, 0, -1, (random(1,6)*6), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FireAA:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (1, 0, -1, (random(1,6)*5), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (1, 0, -1, (random(1,6)*5), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FireS:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleSniperMod",2,"FireSS")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRiflePowerMod",1,"FireSP")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAgilityMod",1,"FireSA")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (0, 0, 1, (random(1,6)*5), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (0, 0, 1, (random(1,6)*5), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FireSS:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (0, 0, 1, (random(1,6)*5), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (0, 0, 1, (random(1,6)*5), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FireSP:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (0, 0, 1, (random(1,6)*6), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (0, 0, 1, (random(1,6)*6), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
  FireSA:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,2)
	TNT1 A 0 A_FireBullets (0, 0, 1, (random(1,6)*5), "RLBulletPuff", FBF_USEAMMO | FBF_NORANDOM)
    Goto FireFinish
	TNT1 A 0 A_FireBullets (0, 0, 1, (random(1,6)*5), "RLBulletPuff", FBF_NORANDOM)
    Goto FireFinish
	
  FireFinish:
    TNT1 A 0 A_PlaySound("weapons/highpowerbattlerifle", CHAN_WEAPON, 1, 0, 0.6)
    TNT1 A 0 A_PlaySound("weapons/highpowerbattlerifle", 7, 0.05, 0, 0.20)
	TNT1 A 0 A_JumpIfInventory("RLAmmochainPerk",1,"FireFinishPowerupCheck") // Check for powerups.
  FireFinishPowerupCheckDone: // No valid powerups detected.
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleFirestormMod",2,"FireFinishFF")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleFirestormMod",1,"FireFinishF")
    TNT1 A 0 A_SpawnItemEx ("RLBattleRifleRecoil", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_SETMASTER) // Pitch-based recoil
    QRIF B 1 Bright A_GunFlash
    QRIF C 1 Bright
    QRIF DA 1
    Goto FireFinishContinue
  FireFinishF:
    TNT1 A 0 A_SpawnItemEx ("RLUziRecoil", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_SETMASTER) // Pitch-based recoil
    QRIF B 1 Bright A_GunFlash
    QRIF C 1 Bright
    QRIF D 1
    Goto FireFinishContinue
  FireFinishFF:
    TNT1 A 0 A_SpawnItemEx ("RLThompsonRecoil", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_SETMASTER) // Pitch-based recoil
    QRIF B 1 Bright A_GunFlash
    QRIF C 1 Bright
    Goto FireFinishContinue
	
  FireFinishContinue:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleAmmochain",0,2)
	TNT1 A 0 A_Jump(256,3)
	TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleAmmochain",0)
    TNT1 A 0 A_ReFire
    Goto Ready
	TNT1 A 0 A_GiveInventory("RLHighPowerBattleRifleAmmochain",1)
    TNT1 A 0 A_ReFire
    Goto Ready

//-------------------------------------------------------------------------------------------------
  FireFinishPowerupCheck: // Marine fires one Firestorm's worth faster while affected by powerups.
	TNT1 A 0 A_JumpIfInventory("PowerInvulnerable",1,"FireFinishPowerupCheckConfirmed")
	TNT1 A 0 A_JumpIfInventory("PowerInvisibility",1,"FireFinishPowerupCheckConfirmed")
	TNT1 A 0 A_JumpIfInventory("PowerIronFeet",1,"FireFinishPowerupCheckConfirmed")
	TNT1 A 0 A_JumpIfInventory("PowerLightAmp",1,"FireFinishPowerupCheckConfirmed")
	TNT1 A 0 A_JumpIfInventory("PowerInfiniteAmmo",1,"FireFinishPowerupCheckConfirmed")
	TNT1 A 0 A_JumpIfInventory("PowerDrain",1,"FireFinishPowerupCheckConfirmed")
	TNT1 A 0 A_JumpIfInventory("PowerRLBerserkResistance",1,"FireFinishPowerupCheckConfirmed")
	Goto FireFinishPowerupCheckDone
  FireFinishPowerupCheckConfirmed:
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleFirestormMod",1,"FireFinishFF")
	Goto FireFinishF
//-------------------------------------------------------------------------------------------------
  
	
  Reload:
	QRIF A 1 A_WeaponReady (WRF_NOPRIMARY | WRF_ALLOWZOOM)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleBulkMod",1,2)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip", 15, "Ready")
	Goto ReloadStartingAmmoCheck
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleBulkMod",2,2)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip", 18, "Ready")
	Goto ReloadStartingAmmoCheck
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip", 21, "Ready")
  ReloadStartingAmmoCheck:
	TNT1 A 0 A_JumpIfInventory("Clip", 1, 1)
	Goto Ready
	TNT1 A 0 // Play the reload animation.
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleTechnicalMod",2,"Reload2")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleTechnicalMod",1,"Reload1")
    QRIF E 2
    QRIF F 2
    QRIF G 2
    QRIF H 2
    QRIF I 2
    QRIF J 2
    TNT1 A 0 A_PlaySound("weapons/hpbattlerifleunload", CHAN_ITEM)
    TNT1 A 0 A_SpawnItemEx ("RLStandardReloadOutRecoil", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_SETMASTER) // Pitch-based recoil
    QRIF K 2
    QRIF L 2
    QRIF M 5
    QRIF N 2
	Goto ReloadWorking
  Reload1:
    QRIF E 1
    QRIF F 1
    QRIF G 1
    QRIF H 2
    QRIF I 2
    QRIF J 2
    TNT1 A 0 A_PlaySound("weapons/hpbattlerifleunload", CHAN_ITEM)
    TNT1 A 0 A_SpawnItemEx ("RLStandardReloadOutRecoil", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_SETMASTER) // Pitch-based recoil
    QRIF K 2
    QRIF L 2
    QRIF M 5
    QRIF N 2
	Goto ReloadWorking
  Reload2:
    QRIF E 1
    QRIF F 1
    QRIF G 1
    QRIF H 1
    QRIF I 1
    QRIF J 1
    TNT1 A 0 A_PlaySound("weapons/hpbattlerifleunload", CHAN_ITEM)
    TNT1 A 0 A_SpawnItemEx ("RLStandardReloadOutRecoil", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_SETMASTER) // Pitch-based recoil
    QRIF K 2
    QRIF L 2
    QRIF M 5
    QRIF N 2
	Goto ReloadWorking
  ReloadWorking:
	TNT1 A 0 A_TakeInventory("Clip", 1)
	TNT1 A 0 A_GiveInventory("RLHighPowerBattleRifleClip", 1)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleBulkMod",1,2)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip",15,5)
	Goto ReloadWorkingAmmoCheck
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleBulkMod",2,2)
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip",18,3)
	Goto ReloadWorkingAmmoCheck
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleClip",21,2)
  ReloadWorkingAmmoCheck:
	TNT1 A 0 A_JumpIfInventory("Clip",1,2)
	TNT1 A 0
	Goto ReloadFinish
	TNT1 A 0
	Goto ReloadWorking
  ReloadFinish:
    TNT1 A 0 A_PlaySound("weapons/hpbattlerifleload", 7)
    TNT1 A 0 A_SpawnItemEx ("RLStandardReloadInRecoil", 0,0,0, 0,0,0, 0, SXF_NOCHECKPOSITION | SXF_SETMASTER) // Pitch-based recoil
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleTechnicalMod",2,"ReloadFinish2")
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleTechnicalMod",1,"ReloadFinish1")
    QRIF O 2
    QRIF P 2
    QRIF Q 2
    QRIF G 2
    QRIF F 2
    TNT1 A 0 A_PlaySound("weapons/hpbattleriflecock", CHAN_ITEM)
    QRIF E 2
    QRIF D 2
    QRIF A 2 A_Refire
	Goto Ready
  ReloadFinish1:
    QRIF O 1
    QRIF P 1
    QRIF Q 1
    QRIF G 2
    QRIF F 2
    TNT1 A 0 A_PlaySound("weapons/hpbattleriflecock", CHAN_ITEM)
    QRIF E 2
    QRIF D 2
    QRIF A 2 A_Refire
	Goto Ready
  ReloadFinish2:
    QRIF O 1
    QRIF P 1
    QRIF Q 1
    QRIF G 1
    QRIF F 1
    TNT1 A 0 A_PlaySound("weapons/hpbattleriflecock", CHAN_ITEM)
    QRIF E 1
    QRIF D 2
    QRIF A 2 A_Refire
	Goto Ready
	
  Flash:
    TNT1 A 1 A_Light1
    TNT1 A 1 A_Light2
    Goto LightDone
	
  Spawn:
	TNT1 A 0 NoDelay A_SpawnItemEx("RLHighPowerBattleRiflePickup",0,0,0, 0,0,0, 0,SXF_NOCHECKPOSITION, 0, tid)
    Stop
  Altfire:
	TNT1 A 0 A_JumpIfInventory("RLArmorModItemActivate",1, "ArmorModConversion")
	TNT1 A 0 A_JumpIfInventory("RLScavengerDrop",1,"ScavengerTime")
	Goto Ready
  ModDiscombobulation:
	TNT1 A 0 A_Print("Applied Mod pack extracted from discarded weapon.")
	TNT1 A 0 ACS_NamedExecuteAlways("ScavengeMods", 0)
	TNT1 A 3
	TNT1 A 0 A_TakeInventory("RLScavengerDrop",1)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleModLimit", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRiflePowerMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleBulkMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleAgilityMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleTechnicalMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleSniperMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleFirestormMod", 2)
	TNT1 A 0 A_GiveInventory("RLRarityTokenRemover", 1)
	TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleSelected", 1)
	TNT1 A 0 A_TakeInventory("RLWeaponLimit",1)
	TNT1 A 0 A_TakeInventory("PowerRLTechnicianBasicDamage", 1)
	Goto ScavengerTimeEnd
  ScavengerTime:
	TNT1 A 0 A_GiveInventory("RLScavengingExtraEffects", 1)
    TNT1 A 0 A_GiveInventory("RLHighPowerWeaponAssemblyLearntToken", 1) // Assembly is now listed in the HUD menus
	TNT1 A 0 A_JumpIfInventory("RLHighPowerBattleRifleModLimit",1,"ModDiscombobulation")
	TNT1 A 0 A_Print("Mod pack extracted from discarded weapon.")
	TNT1 A 0 A_TakeInventory("RLScavengerDrop",1)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleModLimit", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRiflePowerMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleBulkMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleAgilityMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleTechnicalMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleSniperMod", 2)
    TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleFirestormMod", 2)
	TNT1 A 0 A_GiveInventory("RLRarityTokenRemover", 1)
	TNT1 A 0 A_TakeInventory("RLHighPowerBattleRifleSelected", 1)
	TNT1 A 0 A_TakeInventory("RLWeaponLimit",1)
	TNT1 A 0 A_TakeInventory("PowerRLTechnicianBasicDamage", 1)
    TNT1 A 0 A_StopSound(6)
	TNT1 A 0 A_Jump(256,1,2)
	TNT1 A 0 A_FireCustomMissile("DroppedRLBulkMod",0,0,0)
	Goto ScavengerTimeEnd
	TNT1 A 0 A_FireCustomMissile("DroppedRLPowerMod",0,0,0)
	Goto ScavengerTimeEnd
  ScavengerTimeEnd:
	TNT1 A 1 A_TakeInventory("RLHighPowerBattleRifle",1)
	Stop
  }
}

//-------------------------------------------------------------------
//		MECHANICS

Actor RLHighPowerBattleRifleSelected : RLPermanentInventory {}
Actor RLHighPowerBattleRifleAmmochain : RLAmmochainDefault {}
Actor RLHighPowerBattleRifleModLimit : RLBasicAssemblyModAmount {}
Actor RLHighPowerBattleRiflePowerMod : RLBasicAssemblyModAmount {}
Actor RLHighPowerBattleRifleBulkMod : RLBasicAssemblyModAmount {}
Actor RLHighPowerBattleRifleAgilityMod : RLBasicAssemblyModAmount {}
Actor RLHighPowerBattleRifleTechnicalMod : RLBasicAssemblyModAmount {}
Actor RLHighPowerBattleRifleFirestormMod : RLBasicAssemblyModAmount {}
Actor RLHighPowerBattleRifleNanoMod : RLBasicAssemblyModAmount {}
Actor RLHighPowerBattleRifleSniperMod : RLBasicAssemblyModAmount {}

ACTOR RLHighPowerBattleRifleClip : Ammo
{
   +INVENTORY.IGNORESKILL
   Inventory.MaxAmount 21
   Inventory.Icon ""
}

//-------------------------------------------------------------------
//		PICKUPS

ACTOR RLHighPowerBattleRiflePickup : RLBasicAssembledWeaponPickup 17410
{
	//$Sprite QRIFX0
	Tag "High Power Battle Rifle [Pickup]"
	States
	{
	SpawnFrame:
		QRIF X 4
		"####" "#" 0 A_Jump(256, "SpawnLoop")
		Goto SpawnLoop
	SpawnLoop:
		"####" "#" 0 A_JumpIf(Abs(VelZ) <= 0.01 && user_floorhit == 0, "FloorHit")
		"####" "#" 1
		Loop
	FloorHit:
		"####" "#" 0 A_PlaySound("weapons/gundropmedium")
		"####" "#" 0 A_ScaleVelocity (0.5)
		"####" "#" 0 A_ChangeFlag("SPECIAL", true)
		"####" "#" 0 A_ChangeFlag("THRUACTORS", false)
		"####" "#" 0 A_SetUserVar("user_floorhit", 1)
		"####" "#" 0 A_Jump(256, "SpawnLoop")
		Stop
	Pickup:
		"####" "#" 0
		"####" "#" 0 A_JumpIfInventory("RLHighPowerBattleRifle",1,"NotPickup") // If the player already has this weapon, they are not given the weapon
		"####" "#" 0 A_JumpIfInventory("RLWeaponLimit",0,"NotPickupLimit") // The absolute max limit check for weapons
		"####" "#" 0 A_Jump(256, "GiveWeapon")
		Goto GiveWeapon
	GiveWeapon:
		"####" "#" 0 A_GiveInventory("RLHighPowerBattleRifle",1)
		"####" "#" 0 A_GiveInventory("RLWeaponLimit",1)
		"####" "#" 0 A_Print("\ccPicked up a \cvHigh Power Battle Rifle.")
		Goto PickupSound
	NotPickupLimit:
		"####" "#" 0 A_Jump(256, "NotPickup")
		Goto NotPickup
	NotPickup:
		"####" "#" 0 A_JumpIfInventory("DRLA_WeaponAntiLogFloodCheck",1,"NotPickup_NoPrint")
		"####" "#" 0 A_GiveInventory("DRLA_WeaponAntiLogFloodCheck")
		"####" "#" 0 A_Print("\cv= High Power Battle Rifle =", 2, "CONFONT")
		Goto NotPickup_NoPrint
	NotPickup_NoPrint:
		"####" "#" 0
		Fail
	PickupSound:
		"####" "#" 0 A_PlaySound("weapons/hpBattleRiflepickup")
		Stop
//==============================================================================
	MarathonStuff:
		"####" "#" 0 A_SpawnItemEx("RLMarathonClip",0,0,0, 0,0,0, 0,SXF_NOCHECKPOSITION)
		Stop
	}
}

ACTOR RLHighPowerBattleRiflePickupModded : RLHighPowerBattleRiflePickup
{
	+INVENTORY.TRANSFER
	+DONTGIB
	States
	{
	Spawn:
		TNT1 A 0 NoDelay ACS_NamedExecuteAlways("GetWeaponMods", 0)
		TNT1 A 0 A_JumpIf(CallACS("DRLA_specialstarts") == 0, "NoSpecialStartsStuff")
		"####" "#" 0 A_Jump(256, "SpecialStartsStuff")
		Goto SpecialStartsStuff
		
	SpawnFrame:
		QRIF X 4
		"####" "#" 0 A_Jump(256, "SpawnLoop")
		Goto SpawnLoop
	SpawnLoop:
		"####" "#" 0 A_JumpIf(VelZ <= 0.01 && user_floorhit == 0, "FloorHit")
		"####" "#" 0 ACS_NamedExecuteAlways("RLWeaponModDisplay", 0)
		"####" "#" 1
		Loop
	GiveWeapon:
		"####" "#" 0 A_GiveInventory("RLHighPowerBattleRifle",1)
		"####" "#" 0 A_GiveInventory("RLWeaponLimit",1)
		"####" "#" 0 A_Print("\ccPicked up a \cbmodded \cvHigh Power Battle Rifle.")
		Goto PickupSound
	NotPickupLimit:
		"####" "#" 0 A_JumpIfInventory("DRLA_WeaponAntiLogFloodCheck",1,"NotPickup_NoPrint")
		"####" "#" 0 A_GiveInventory("DRLA_WeaponAntiLogFloodCheck")
		"####" "#" 0 A_Print("\cv= High Power Battle Rifle =", 2, "CONFONT")
		Goto NotPickup_NoPrint
	NotPickup:
		"####" "#" 0 A_JumpIfInventory("RLHighPowerBattleRifleModLimit", 1, "NotPickup_Modded")
		"####" "#" 0 A_JumpIfInventory("DRLA_WeaponAntiLogFloodCheck",1,"NotPickup_NoPrint")
		"####" "#" 0 A_GiveInventory("DRLA_WeaponAntiLogFloodCheck")
		"####" "#" 0 A_Print("\cv= High Power Battle Rifle =\n\n\ccYou replace your unmodded\n\ccweapon with the one you picked up.", 5, "CONFONT")
		"####" "#" 0 A_GiveInventory("Clip",15)
		Goto PickupSound
	NotPickup_Modded:
		"####" "#" 0 A_Print("\cv= High Power Battle Rifle =\n\n\caYou are already carrying a modded\n\caweapon of this type", 5, "CONFONT")
		Fail
	}
}
