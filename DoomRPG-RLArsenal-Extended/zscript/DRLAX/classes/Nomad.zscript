class RLNomadStartingLoadout : CustomInventory
{
	states
	{
		Pickup:
		TNT1 A 0 A_GiveInventory("RLNomadPassives");
		stop;
	}
}

class RLNomadPassives : Inventory
{
	Default
	{
		inventory.maxamount 1;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.UNCLEARABLE;
	}
}

Class RLNomadOnePistolToken : Inventory
{
	Default
	{ 
		Inventory.MaxAmount 1;
	}
}

Class RLNomadReroll
{
	String item;
	Int quality;
}

Class RLNomadEvents : EventHandler
{
	int danger;
	int tics;

	override void WorldTick ()
	{
		tics++;
		
		// if not working, probably due to array size
		if(tics == 5 && danger > 0)
		{
			//Console.Printf("" .. danger);
			NomadPassive();
		}
	}

	override void WorldLoaded (WorldEvent e)
	{
		ThinkerIterator InvIterator = ThinkerIterator.Create("Inventory");
		
		Inventory inv;

		for(int i = 0; i<Players.Size(); i++)
		{
			if(Players[i].mo && Players[i].mo.GetClassName() == "DoomRLNomadRPG")
			{
				Players[i].mo.GiveInventory("RLNomadOnePistolToken", 1);
			}
        }

		while(inv = Inventory(InvIterator.Next()))
		{
			if(!inv.owner)
			{
				continue;
			}
			
			if(inv.owner.GetClassName() == "DoomRLNomadRPG")
			{
				if(inv.GetClassName() == "RLDangerLevel"){continue;}
				if(inv.GetClassName() == "RLUniqueBossLevel"){continue;}
				if(inv.GetClassName() == "RLDemonArtifactItem"){continue;}
				if(inv.GetClassName() == "RLNomadOnePistolToken"){continue;}
				
				if(inv.GetClassName() == "DRPGModule"){continue;}
				if(inv.GetClassName() == "DRPGCredits"){continue;}
				if(inv.GetClassName() == "DRPGTurretPart"){continue;}

				if(inv.GetClassName() == "DRPGAugCanister"){continue;}
				if(inv.GetClassName() == "DRPGAugUpgradeCanister"){continue;}

				if(inv.GetClassName() == "DRPGChipGold"){continue;}
				if(inv.GetClassName() == "DRPGChipPlatinum"){continue;}

				if(inv is "DRPGStimSmall"){continue;} 								// all stims
				if(inv.GetClassName() == "DRPGVialStrength"){continue;}
				if(inv.GetClassName() == "DRPGVialDefense"){continue;}
				if(inv.GetClassName() == "DRPGVialVitality"){continue;}
				if(inv.GetClassName() == "DRPGVialEnergy"){continue;}
				if(inv.GetClassName() == "DRPGVialRegeneration"){continue;}
				if(inv.GetClassName() == "DRPGVialAgility"){continue;}
				if(inv.GetClassName() == "DRPGVialCapacity"){continue;}
				if(inv.GetClassName() == "DRPGVialLuck"){continue;}
				if(inv.GetClassName() == "DRPGVialPurifier"){continue;}
				if(inv.GetClassName() == "DRPGVialPotency"){continue;}
				if(inv.GetClassName() == "DRPGVialIndestructible"){continue;}
				if(inv.GetClassName() == "DRPGVialShadow"){continue;}
				if(inv.GetClassName() == "DRPGVialInfinity"){continue;}
				if(inv.GetClassName() == "DRPGVialChrono"){continue;}
				if(inv.GetClassName() == "DRPGVialAdrenaline"){continue;}
				if(inv.GetClassName() == "DRPGVialGravity"){continue;}
				if(inv.GetClassName() == "DRPGVialVampire"){continue;}
				if(inv.GetClassName() == "DRPGVialRage"){continue;}
				if(inv.GetClassName() == "DRPGVialMagnetic"){continue;}

				if(inv.GetClassName() == "DRPGLife"){continue;}						// additional lives / 1up
				
				if(inv is "DRPGLoot"){continue;} 									// all quest loot
				if(inv is "DRPGShieldPart"){continue;} 								// all shield parts
				if(inv is "DRPGCraftParts"){continue;} 								// crafting parts

				if(inv is "Clip"){continue;} 										// Pistol Ammo

                // Legendary Pistols
				if(inv is "RLBaronBlaster" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLNeuralStunner" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLJudgeOfTheDead" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLLonghorn" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

                // Demonic Pistols
				if(inv is "RLDeathsGaze" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

                // Unique Pistols
				if(inv is "RLTantrumCannon" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHellsingARMSCasull" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLAntiFreakJackal" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLGrammatonClericBeretta" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLTrigun" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLLightweaver" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLUnknownHerald" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLMysteriousMagnum" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

                // Demolition Ammo Pistols
				if(inv is "RLDemolitionAmmoMarksmanPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLDemolitionAmmoCombatPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLDemolitionAmmoPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

                // Nanomanufacture Assembled Pistols
				if(inv is "RLNanoManufactureAmmoMarksmanPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLNanoManufactureAmmoCombatPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLNanoManufactureAmmoPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

                // Advanced Assembled Pistols
				if(inv is "RLMiniMissilePistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLSuperchargedNuclearPlasmaPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLPlasmaMarksmanPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLPlasmaCombatPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLPlasmaPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLStormNuclearPlasmaPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLStormMarksmanPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLStormCombatPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLStormPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

                // Hight Power Pistols
				if(inv is "RLHighPowerNuclearPlasmaPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHighPowerHuntingRevolver" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHighPowerPP7" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHighPowerMarksmanPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHighPowerHandCannon" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHighPowerCombatPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHighPowerBlaster" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHighPowerPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

                // Basic Assembled Pistols
				if(inv is "RLShredderPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLSilencedPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLSpeedloaderPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

                // Basic Pistols
				if(inv is "RLNuclearPlasmaPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHuntingRevolver" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLPP7" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLMarksmanPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLHandCannon" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLCombatPistol" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}
				if(inv is "RLBlaster" && (inv.owner.CountInv("RLNomadOnePistolToken")>0)){inv.owner.TakeInventory("RLNomadOnePistolToken", inv.maxamount); continue;}

				inv.owner.TakeInventory(inv.GetClassName(), inv.maxamount);
			}
		}
		
		for(int i = 0; i<Players.Size(); i++)
		{
			if(!Players[i].mo || Players[i].mo.GetClassName()!="DoomRLNomadRPG")
			{
				continue;
			}

			Actor a = Players[i].mo;

			DropItem di = a.default.GetDropItems();
			
			while (di != null)
			{
				Class<Actor> w;			
				a.GiveInventory(di.Name, di.amount);
				
				w = di.Name;
				if(w is "Weapon")
				{
					a.A_SelectWeapon(di.Name);
				}
				di = di.Next;
			}

			a.health = a.default.health;
			Players[i].health = a.default.health;
		}

		danger = 0;
		
		for(int i = 0; i<Players.Size(); i++)
		{
			if(Players[i].mo && Players[i].mo.GetClassName() == "DoomRLNomadRPG")
			{
				Players[i].mo.ACS_NamedExecuteAlways("DRLA_ClearBackpack");
				//let ammo = players[i].mo.FindInventory("Shell");
				name invName = 'RLDangerLevel';
				
				if(Players[i].mo.CountInv(invName)>0)
				{
					danger = Max(danger, Players[i].mo.CountInv(invName));
				}
				else
				{
					invName = 'RLUniqueBossLevel';
					danger = Max(danger, Players[i].mo.CountInv(invName));
				}

				if(Players[i].mo.CountInv("RLNomadOnePistolToken")==0)
                {
					Players[i].mo.TakeInventory("RLPistol", 1);
					Players[i].mo.TakeInventory("Clip", 60);
                }

				Players[i].mo.PickWeapon(1, false);
			}
		}
	}
	
	Array<RLNomadReroll> ReplaceRoll;
	
	void NomadPassive()
	{
		Array<Actor> MapInv;
		
		ThinkerIterator InvIterator = ThinkerIterator.Create("Actor");
		Actor inv;
			
		while(inv = Actor(InvIterator.Next()))
		{
			Inventory io = Inventory(inv);
			
			if(io && io.owner)
			{
				continue;
			}
			
			MapInv.Push(inv);
		}
		
		int rerolls = danger/2;
		
		for(int i = 0; i<rerolls; i++)
		{
			for(int i = 0; i<MapInv.Size(); i++)
			{
				bool dontremove = false;
				
				ReplaceRoll.Clear();
				
				if(!MapInv[i])
				{
					continue;
				}
				
				if(IsBackPack(MapInv[i]))
				{
					AddActorChance("RLBackpack", 800, 0);
				}
				
				if(IsBigAmmo(MapInv[i]))
				{
					AddActorChance("", 16, 0);
					AddActorChance("RLModPackSpawner", 1, 0);
					dontremove = true;
				}
				
				if(IsChainsaw(MapInv[i]))
				{
					AddActorChance("RLChainsawPickup", 80, 0);
					AddActorChance("DRPGWeaponSpawner", 20, 1);
				}
				
				if(IsShotgun(MapInv[i]))
				{
					AddActorChance("RLShotgunPickup", 50, 0);
					AddActorChance("RLCombatShotgunPickup", 30, 1);
					AddActorChance("DRPGWeaponSpawner", 20, 2);
				}
				
				if(IsDoubleShotgun(MapInv[i]))
				{
					AddActorChance("RLDoubleShotgunPickup", 80, 0);
					AddActorChance("DRPGWeaponSpawner", 20, 1);
				}
				
				if(IsChaingun(MapInv[i]))
				{
					AddActorChance("RLBattleRiflePickup", 50, 0);
					AddActorChance("RLChaingunPickup", 30, 1);
					AddActorChance("DRPGWeaponSpawner", 20, 2);
				}
				
				if(IsRocketLauncher(MapInv[i]))
				{
					AddActorChance("RLRocketLauncherPickup", 80, 0);
					AddActorChance("DRPGWeaponSpawner", 20, 1);
				}
				
				if(IsPlasmaRifle(MapInv[i]))
				{
					AddActorChance("RLPlasmaRiflePickup", 80, 0);
					AddActorChance("DRPGWeaponSpawner", 20, 1);
				}
				
				if(IsBFG9000(MapInv[i]))
				{
					AddActorChance("RLBFG9000Pickup", 80, 0);
					AddActorChance("DRPGWeaponSpawner", 20, 1);
				}
				
				if(IsBoots(MapInv[i]))
				{
					AddActorChance("DRPGArmorSpawner", 256, 0);
				}
				
				if(IsArmor(MapInv[i]))
				{
					AddActorChance("DRPGArmorSpawner", 256, 0);
				}
				
				if(ReplaceRoll.Size()>0)
				{
					RLNomadReroll ritem = ReplaceRoll[random(0, ReplaceRoll.Size()-1)];
					
					if(ritem.item == MapInv[i].GetClassName() || ritem.item == "")
					{
						continue;
					}
					
					bool done = false;
					
					for(int r = 0; r < ReplaceRoll.Size(); r++)
					{
						if(MapInv[i].GetClassName() == ReplaceRoll[r].item && ritem.quality < ReplaceRoll[r].quality)
						{
							//Console.Printf(ritem.item .. " quality is less than " .. MapInv[i].GetClassName());
							done = true;
						}
					}
					
					if(done)
					{
						continue;
					}
					
					Actor newinv = Actor.Spawn(ritem.item, MapInv[i].pos);
					if(!dontremove)
					{
					MapInv[i].Destroy();
					MapInv[i] = newinv;
					}
				}
			}
		}
	}
	
	void AddActorChance(string invname, int chance, int quality)
	{
		for(int i = 0; i<chance; i++)
		{
			RLNomadReroll rr = new ("RLNomadReroll");
			rr.item = invname;
			rr.quality = quality;
			ReplaceRoll.Push(rr);
		}
	}
	
	bool IsBigAmmo(Actor a)
	{
		String invn = a.GetClassName();
		//Console.Printf(invn);
		if(invn == "RLClipBox"){return true;}
		if(invn == "RLShellBox"){return true;}
		if(invn == "RLRocketBox"){return true;}
		if(invn == "RLCellPack"){return true;}
		
		return false;
	}
	
	bool IsBackPack(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLBackpack"){return true;}
		return false;
	}
	
	bool IsChainsaw(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLChainsawPickup"){return true;}
		return false;
	}
	
	bool IsShotgun(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLShotgunPickup"){return true;}
		if(invn == "RLCombatShotgunPickup"){return true;}
		return false;
	}
	
	bool IsDoubleShotgun(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLDoubleShotgunPickup"){return true;}
		return false;
	}
	
	bool IsChaingun(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLChaingunPickup"){return true;}
		if(invn == "RLBattleRiflePickup"){return true;}
		return false;
	}

	bool IsRocketLauncher(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLRocketLauncherPickup"){return true;}
		return false;
	}
	
	bool IsPlasmaRifle(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLPlasmaRiflePickup"){return true;}
		return false;
	}
	
	bool IsBFG9000(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLBFG9000Pickup"){return true;}
		return false;
	}
	
	bool IsArmor(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLGreenArmorPickup"){return true;}
		if(invn == "RLBlueArmorPickup"){return true;}
		if(invn == "RLRedArmorPickup"){return true;}		
		return false;
	}
	
	bool IsBoots(Actor a)
	{
		String invn = a.GetClassName();
		if(invn == "RLSteelBootsPickup"){return true;}
		if(invn == "RLProtectiveBootsPickup"){return true;}
		if(invn == "RLPlasteelBootsPickup"){return true;}	
		return false;
	}	
	
	override void WorldUnloaded (WorldEvent e) 
	{
		//mapsbeat++;
		for(int i = 0; i<Players.Size(); i++)
		{
			if(!Players[i].mo || Players[i].mo.GetClassName()!="DoomRLNomadRPG")
			{
				continue;
			}

			Actor a = Players[i].mo;

			a.health = Players[i].mo.MaxHealth;
			Players[i].health = Players[i].mo.MaxHealth;
		}
	}	
}
