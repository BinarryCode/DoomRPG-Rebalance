Class DRLAX_PuzzleEvents : EventHandler
{  
    //theMenu.gizmo.familiar = theMenu.fbuttons[themenu.selectno].familiar;
                //theMenu.gizmo.SetStateLabel("Spawning");

    override void NetworkProcess (ConsoleEvent e) 
    {
        if(e.name == "familiarmenu" && !e.isManual && e.player == consoleplayer)
        {
            ThinkerIterator ti = ThinkerIterator.Create("DRLAX_Familiardeployer");
            DRLAX_Familiardeployer gizmo;

            while(gizmo = DRLAX_Familiardeployer(ti.Next()))
            {
                if(gizmo.actplayer && gizmo.actplayer == players[e.player].mo)
                {
                    Menu.SetMenu("DRLAX_FamiliarMenu");
                    gizmo.actplayer = null;
                    return;
                }
            }
        }

        if(e.name.Left(13) == "spawnfamiliar" && !e.isManual)
        {
            ThinkerIterator ti = ThinkerIterator.Create("DRLAX_Familiardeployer");
            DRLAX_Familiardeployer gizmo;

            while(gizmo = DRLAX_Familiardeployer(ti.Next()))
            {
                String f = e.name;
                f.Replace("spawnfamiliar:", "");
                gizmo.familiar = f;
                gizmo.SetStateLabel("Spawning");
            }
        }
    }

    override void WorldThingSpawned (WorldEvent e)
    {
        if(!e.Thing)
        {
            return;
        }
        String cls = e.Thing.GetClassName();
        if(cls == "RLFireSkullExplosion" || cls == "RLCorpseExplosion")
        {
            let quest = DRLAX_QuestManager.GetQuestMan();
            quest.skullbodies++;
        }
    }

    override void WorldLoaded(WorldEvent e)
    {
        if(Cvar.GetCvar("DRLAX_nopuzzles").GetBool())
        {
            return;
        }
        SetupQuests();
        if(!e.isSaveGame)
        {
            SetupGizmos();
        }
    }

    void SetupQuests()
    {
        DRLAX_QuestManager.GetQuestMan();
    }

    void SetupGizmos()
    {
        Actor.Spawn("DRLAX_GizmoSpawner");
    }
}

Class DRLAX_GizmoSpawner : Actor
{
    Default
    {
        +NOINTERACTION;
    }

    states
    {
        Spawn:
        TNT1 A 35;
        TNT1 A 0
        {
            ThinkerIterator ti = ThinkerIterator.Create("DRLAX_GizmoHandler", Thinker.STAT_STATIC);
            DRLAX_GizmoHandler gizmo;

            if(gizmo = DRLAX_GizmoHandler(ti.Next()))
            {
                gizmo.Trigger();
                return;
            }

            gizmo = new("DRLAX_GizmoHandler");

            gizmo.Setup();
            gizmo.Trigger();
        }
        stop;
    }
}

Class DRLAX_GizmoHandler : Thinker
{
    void Setup()
    {
        ChangeStatNum(STAT_STATIC);
        count = random(1, 4);
        position = 0;
    }

    uint position;
    uint levels;

    Array<String> gizmos;
    uint count;

    void Trigger()
    {
        count--;
        if(count == 0)
        {
            Array<String> gizmos;
            int amount = 1;

            if(levels>20 && random(0, 3) == 0)
            {
                amount++;
            }

            let man = DRLAX_QuestManager.GetQuestMan();

            if(position != 5 && man.tomelevel > 1)
            {
                gizmos.Push("DRLAX_TomeOfSins");
            }

            Switch(position)
            {
                Case 0:
                gizmos.Push("DRLAX_DimensionalBox");
                gizmos.Push("DRLAX_AppraiserObject");
                break;

                Case 1:
                gizmos.Push("DRLAX_WeaponRecycler");
                gizmos.Push("DRLAX_TomeOfSins");
                break;

                Case 2:
                gizmos.Push("DRLAX_AppraiserObject");
                gizmos.Push("DRLAX_ModReviser");
                break;

                Case 3:
                gizmos.Push("DRLAX_WeaponRecycler");
                gizmos.Push("DRLAX_ModReviser");
                gizmos.Push("DRLAX_DimensionalBox");
                gizmos.Push("DRLAX_AppraiserObject");
                break;

                Case 5:
                gizmos.Push("DRLAX_Familiardeployer");
                break;

                Case 8:
                gizmos.Push("DRLAX_AppraiserObject");
                break;

                Case 12:
                gizmos.Push("DRLAX_DimensionalBox");
                break;

                Default:
                gizmos.Push("DRLAX_WeaponRecycler");
                gizmos.Push("DRLAX_ModReviser");
                gizmos.Push("DRLAX_DimensionalBox");
                gizmos.Push("DRLAX_AppraiserObject");
                gizmos.Push("DRLAX_TomeOfSins");
                gizmos.Push("DRLAX_SkullShrineObject");
                if(position>16)
                {  
                    gizmos.Push("DRLAX_Familiardeployer");
                }
                break;
            }

            for(int i; i<amount; i++)
            {
                if(gizmos.Size() == 0)
                {
                    break;
                }

                int r = random(0, gizmos.Size() - 1);
                SpawnGizmo(gizmos[r]);
                gizmos.Delete(r);
                position++;
            }

            count = random(2, 3);
            levels++;
        }
    }

    static void SpawnGizmo(String gizmo)
	{
        //Console.Printf("spawned");
		CMMSS_Actor_SafeSpawner ss = CMMSS_SafeSpawner.New(gizmo, 1, "", 48, 64, 0, CMMSS_SafeSpawner.SSFLAGS_NOMONSTERS);

		Array<Actor> actorlist;

		actorlist.Copy(ss.actorlist);
		ss.actorlist.Clear();

		for(int i; i<actorlist.Size(); i++)
		{
			if(actorlist[i].cursector.IsSecret())
			{
				ss.actorlist.Push(actorlist[i]);
			}
		}

        if(ss.actorlist.Size() == 0)
        {
            //Console.Printf("nope!");
            ss.actorlist.Copy(actorlist);
        }

		ss.speed = 3;
	}

}

Class DRLAX_GizmoObject : Actor
{
    Default
    {
        +NOTIMEFREEZE;
        +NOTELEPORT;
    	+DONTSPLASH;
        +NOTIMEFREEZE;
    }

    CustomInventory FindDroppedWeapon()
	{
		BlockThingsIterator bti = BlockThingsIterator.Create(self, 16);

        while(bti.Next())
        {
            CustomInventory b = CustomInventory(bti.thing);
			String dropped = "RLBaseWeaponPickup";

			if(b && b is dropped && b.GetAge() > 3 && Distance3D(b) < 40 && b.master && b.vel.z != 0)
			{
                return b;
			}
		}

        return null;
	}

    CustomInventory FindDroppedArmor()
	{
		BlockThingsIterator bti = BlockThingsIterator.Create(self, 16);

        while(bti.Next())
        {
            CustomInventory b = CustomInventory(bti.thing);

			if(b && (b is "RLGenericBootsPickup" || b is "RLGenericArmorPickup") && b.GetAge() > 3 && Distance3D(b) < 40 && b.master && b.vel.z != 0)
			{
                return b;
			}
		}

        return null;
	}

    bool CanHack()
    {
        for(int i; i<players.Size(); i++)
        {
            if(players[i].mo && players[i].mo.CountInv("DRLAX_TechnitianFamiliarPassive") > 0)
            {
                return true;
            }
        }

        return false;
    }
}

Class DRLAX_DimensionalBox : DRLAX_GizmoObject
{
	Default
	{
		-SOLID;
		scale 1.5;
	}

	states
	{
		Spawn:
		GIZM A -1;
		stop;
	}

    void StoreItem(CustomInventory b)
    {
                String s = b.GetClassName();

				for(inventory item=b.inv; item!=null; item=item.inv)
                {
					//Console.Printf(item.GetClassName());
					for(int i = 0; i<b.CountInv(item.GetClassName()); i++)
					{
						s = s .. "|" .. item.GetClassName();
					}
				}

				String n = b.GetTag();
				n.Replace(" [Pickup]", "");
				b.master.A_Print("You stored your \c-" ..  n);
				b.Destroy();

				//Console.Printf("" .. s);

				Cvar.GetCvar("DRLAX_dimensionbox").SetString(s);
				A_StartSound("gizmos/dimensionalbox");
    }

	override void Tick()
	{
		bool c = (Cvar.GetCvar("DRLAX_dimensionbox").GetString() == "");
		frame = !c;
		bBRIGHT = !c;

		if(!CheckRange(350, true) && c)
		{
            let b = FindDroppedWeapon();

            if(b)
            {
				StoreItem(b);
                Super.Tick();
                return;
            }

            b = FindDroppedArmor();
            if(b)
            {
				StoreItem(b);
            }
		}
		
		Super.Tick();
	}

	override bool Used(Actor user)
	{
		String s = Cvar.GetCvar("DRLAX_dimensionbox").GetString();

		//Console.Printf("" .. s);

		if(s == "")
		{
			user.A_Print("\ct- Dimensional Box -\n\n\c-Weapons and Armors dropped into this container can be recclaimed in the future\nfrom any universe or dimension...", 5);
		}
		else
		{
			A_Face(user);
			Array<String> output;

			s.Split(output, "|");

			bool spawned;
            Actor act;
		    [spawned, act] = A_SpawnItemEx(output[0], 0, 0, 32, 5, 0, 3, flags:SXF_NOCHECKPOSITION);

			if(act && spawned)
			{
				for(int i = 1; i<output.Size(); i++)
				{
					act.GiveInventory(output[i], 1);
				}
			}

			Cvar.GetCvar("DRLAX_dimensionbox").SetString("");
			A_StartSound("crate/open");
		}
		return true;
	}
}

Class DRLAX_WeaponRecycler : DRLAX_GizmoObject
{
    Default
	{
		-SOLID;
		scale 1.25;
	}

    bool rng;

	states
	{
		Spawn:
		GIZM J 1 ReadyForWep();
		loop;
        WeaponsIn:
        GIZM J 1;
        WeaponsInLoop:
        GIZM JJJJJJKKKKKKK 1 bright ReadyForWep();
        loop;
        Death:
        GIZM J 8;
        GIZM J 35 A_StartSound("weapons/chameleonriflechangemode");
        GIZM J -1
        {
            for(int i; i<CanHack()+1; i++)
            {
                if(rng)
                {
                    Spawn("DRLAX_LegendaryWeaponPuzzleSpawner", pos + (0,0,32));
                }
                else
                {
                    Spawn("RLSupplyCrateUniqueWeaponSpawner", pos + (0,0,32));
                }
            }
        }
        stop;
	}

    override void PostBeginPlay()
    {
        rng = (random(0, 19) == 0);
    }

    uint wepcount;

    Void ReadyForWep()
    {
        if(!CheckRange(350, true))
		{
            let b = FindDroppedWeapon();

            String badweps[] = 
            {
                "RLChainsaw",
                "RLPistol",
                "RLShotgun",
                "RLCombatShotgun",
                "RLDoubleShotgun",
                "RLChaingun",
                "RLBattleRifle",
                "RLRocketLauncher",
                "RLPlasmaRifle",
                "RLBFG9000"
            };

            if(b)
            {
                for(int i; i<badweps.Size(); i++)
                {
                    String wep = badweps[i] .. "Pickup";
                    String s = b.GetClassName();

                    if(wep ~== s || wep .. "Modded" ~== s)
                    {
                        return;
                    }
                }

                wepcount++;

                if(b.master && wepcount < 3)
                {
                    String n = b.GetTag();
                    n.Replace(" [Pickup]", "");
                    b.master.A_Print("You discarded your " .. n .. ".\n\n\cf" .. 3 - wepcount .. " weapons remain.");
                }

                if(wepcount == 3)
                {
                    SetStateLabel("Death");
                }

                if(wepcount == 1)
                {
                    SetStateLabel("WeaponsIn");
                }
                A_StartSound("weapons/flamethrowerload");
                b.Destroy();
            }
        }
    }

    override bool Used(Actor user)
	{
        if(wepcount == 3)
        {
            user.A_StartSound("hud/error", flags:CHANF_LOCAL);
            user.A_Print("This device is no longer usable.", 5);
            return true;
        }
        user.A_Print("\cq- Weapon Fabricator -\n\n\c-Offer 3 weapons of \ctExotic\c- rarity or higher to create a new \cdUnique\c- weapon.\n\n\cf" .. 3 - wepcount .. " weapons remain.", 5);
        return true;
    }
    
}

Class DRLAX_LegendaryWeaponPuzzleSpawner : Actor
{
    Default
    {
        -SOLID;
        +NOINTERACTION;
    }

    States
    {
    Spawn:
    TNT1 A 0;
    TNT1 A 5
    {
        String weps[] = {
            "RLJudgeOfTheDeadWorldSpawnPickup",
            "RLHurricaneCannonWorldSpawnPickup",
            "RLNeuralStunnerWorldSpawnPickup",
            "RLBaronBlasterWorldSpawnPickup",
            "RLBFGInfinityWorldSpawnPickup",
            "RLDuke2RifleWorldSpawnPickup",
            "RealityDistortionArrayWorldSpawnPickup",
            "RLLonghornWorldSpawnPickup"
        };

        String result = weps[random(0, weps.Size() - 1)];
        A_SpawnItemEx(result, 0,0,8, frandom(-6,6),frandom(-6,6),frandom(4,9), frandom(0,359), SXF_NOCHECKPOSITION);
    }
	TNT1 A 0 A_PlaySound("weapons/cratesetspawn", 7, 1, 0, 0.4);
    TNT1 A 5;
    Stop;
    }
}


Class DRLAX_QuestManager : Thinker
{
    String weapon;
    uint skullbodies;
    uint skulllevel;
    uint tomelevel;

    void PickRandomWeapon()
    {
        String weps[] = {
        "RLAssaultRifleChaingun",
        "RLAssaultRifleBattleRifle",
        "RLAssaultRiflePlasmaRifle",
        "RLAssaultRifleMinigun",
        "RLAssaultRifleLaserRifle",
        "RLAssaultRifleNuclearPlasmaRifle",
        "RLAssaultRifleUzi",
        "RLBurstCannonChaingun",
        "RLBurstCannonBattleRifle",
        "RLBurstCannonPlasmaRifle",
        "RLBurstCannonMinigun",
        "RLBurstCannonLaserRifle",
        "RLBurstCannonNuclearPlasmaRifle",
        "RLBurstCannonUzi",
        "RLNanoShrapnelShotgun",
        "RLNanoShrapnelCombatShotgun",
        "RLNanoShrapnelDoubleShotgun",
        "RLNanoShrapnelSuperShotgun",
        "RLNanoShrapnelAssaultShotgun",
        "RLNanoShrapnelPlasmaShotgun",
        "RLStormPistol",
        "RLStormCombatPistol",
        "RLStormMarksmanPistol",
        "RLStormHandcannon",
        "RLStormUzi",
        "RLStormBlaster",
        "RLStormNuclearPlasmaPistol",
        "RLPlasmaPistol",
        "RLPlasmaCombatPistol",
        "RLPlasmaMarksmanPistol",
        "RLPlasmaHandcannon",
        "RLPlasmaUzi",
        "RLOverchargedBlaster",
        "RLSuperchargedNuclearPlasmaPistol",
        "RLDoubleChainsaw",
        "RLTacticalRocketLauncher",
        "RLVBFG9000",
        "RLNuclearVBFG9000",
        "RLFocusedDoubleShotgun",
        "RLHyperBlaster",
        "RLBulletstormChaingun",
        "RLBulletstormRifle",
        "RLAutoshotgun",
        "RLAutoDoubleShotgun",
        "RLMiniMissilePistol",
        "RLPlasmaRifleMkII",
        "RLPlasmaShotgunMkII",
        "RLNuclearPlasmaRifleMkII",
        "RLNuclearPlasmaShotgun",
        "RLLaserShotgun",
        "RLGrenadeLauncher",
        "RLPlasmaCannon",
        "RLLaserPulseLauncher",
        "RLLaserMinigun",
        "RLInfusionLauncher",
        "RLIncinerationDeviceLauncher",
        "RLHeavyPulseBlaster",
        "RLNanomanufactureAmmoUzi",
        "RLNanomanufactureAmmoTristarBlaster",
        "RLNanomanufactureAmmoRocketLauncher",
        "RLNanomanufactureAmmoPlasmaRifle",
        "RLNanomanufactureAmmoPistol",
        "RLNanomanufactureAmmoNapalmLauncher",
        "RLNanomanufactureAmmoMissileLauncher",
        "RLNanomanufactureAmmoMinigun",
        "RLNanomanufactureAmmoMarksmanPistol",
        "RLNanomanufactureAmmoLaserRifle",
        "RLNanomanufactureAmmoHandcannon",
        "RLNanomanufactureAmmoCombatPistol",
        "RLNanomanufactureAmmoChaingun",
        "RLNanomanufactureAmmoBlaster",
        "RLNanomanufactureAmmoBattleRifle",
        "RLDemolitionAmmoPistol",
        "RLDemolitionAmmoChaingun",
        "RLDemolitionAmmoBattleRifle",
        "RLDemolitionAmmoCombatPistol",
        "RLDemolitionAmmoMarksmanPistol",
        "RLDemolitionAmmoHandcannon",
        "RLDemolitionAmmoMinigun",
        "RLDemolitionAmmoUzi",
        "RLEnergysaw",
        "RLRipper",
        "RLBiggestFuckingGun",
        "RLNuclearBiggestFuckingGun",
        "RLMotherInLaw",
        "RLAutocannon",
        "RLPlasmaRefractor",
        "RLClusterBombLauncher",
        "RLMegatonShotgun",
        "RLConquerorShotgun",
        "RLVoltgun",
        "RLSuperMachinegun",
        "RLGaussRifle",
        "RLAntiMaterielRifle",
        "RLZeusCannon"
        };

        weapon = weps[random(0, weps.Size() - 1)];
    }

    override void PostBeginPlay() 
    {
        ChangeStatNum(STAT_STATIC);
        if(!weapon)
        {
            PickRandomWeapon();
        }
    }   

    static DRLAX_QuestManager GetQuestMan()
    {
        ThinkerIterator ti = ThinkerIterator.Create("DRLAX_QuestManager", Thinker.STAT_STATIC);
        DRLAX_QuestManager quest;

        if(quest = DRLAX_QuestManager(ti.Next()))
        {
            return quest;
        }

        quest = new("DRLAX_QuestManager");
        quest.tomelevel = 1;
        return quest;
    }
}

Class DRLAX_AppraiserObject : DRLAX_GizmoObject
{
    Default
	{
		-SOLID;
        +THRUACTORS;
		scale 1.35;
	}

    Class<Actor> chosenwep;
    Actor holdingwep;
    String familiarreward;
    Actor crafter;

	states
	{
		Spawn:
		GIZM L 1 ReadyForWep();
		loop;
        Activate:
        TNT1 A 0 A_StartSound("weapons/laserminigunpowerup");
        GIZM LMLMLMLMLMLMLMLMLMLMLMLML 2;
        GIZM M 50
        {
            for(int i; i<CanHack()+1; i++)
            {
                Actor act;
                bool spawned;
                [spawned, act] = A_SpawnItemEx("DRLAX_FamiliarBall", 0, 0, 16, 8, 0, 5, random(0, 360));
                if(act && spawned)
                {
                    DRLAX_FamiliarBall f = DRLAX_FamiliarBall(act);
                    if(f)
                    {
                        f.Init(familiarreward);
                        DRLAX_UnlockThinker.WriteUnlock(familiarreward);
                    }
                }
            }

            ThinkerIterator ti = ThinkerIterator.Create("DRLAX_QuestManager", STAT_STATIC);
            DRLAX_QuestManager quest;

            if(quest = DRLAX_QuestManager(ti.Next()))
            {
                quest.PickRandomWeapon();
            }

            familiarreward = "";

        }
        GIZM L 1

        {
            holdingwep.bTHRUACTORS = false;
            holdingwep.bNOGRAVITY = false;
            holdingwep.A_ChangeVelocity(random(-1, 1), random(-1, 1), 3, CVF_RELATIVE|CVF_REPLACE);
            holdingwep = null;
        }
        Death:
        GIZM L -1;
        stop;
	}

    Void ReadyForWep()
    {
        if(!CheckRange(350, true))
		{
            let b = FindDroppedWeapon();            

            if(b)
            {
                String wep = chosenwep.GetClassName() .. "Pickup";
                String s = b.GetClassName();

                if(wep ~== s || wep .. "Modded" ~== s)
                {
                    /*
                    DRLAX_QuestManagerResult r = DRLAX_QuestManagerResult(Spawn("DRLAX_QuestManagerResult", pos + (0, 0, 32)));
                    r.sprite = b.sprite;
                    r.frame = b.frame;
                    r.A_SetScale(b.scale.x, b.scale.y);
                    r.A_SetTranslation("CMMDRLA_Greyscale");
                    */
                    SetStateLabel("Activate");
                    crafter = b.master;
                    //b.Destroy();
                    holdingwep = b;
                    holdingwep.bNOGRAVITY = true;
                    holdingwep = b;
                    holdingwep.bTHRUACTORS = true;
                    chosenwep = null;
                    return;
                }
            }
        }
    }

    override void Tick()
    {
        if(holdingwep)
        {
            holdingwep.SetOrigin(pos + (0, 0, 32), true);
        }
        Super.Tick();
    }

    override bool Used(Actor user)
	{
        if(!chosenwep)
        {
            if(familiarreward == "")
            {
                user.A_StartSound("hud/error", flags:CHANF_LOCAL);
                user.A_Print("This device is no longer usable.", 5);
            }
            return false;
        }
        String wepname = GetDefaultByType(chosenwep).GetTag();
		wepname.Replace(" [Pickup]", "");

        user.A_Print("\cv- Arms Appraiser -\n\n\c-Show an assembled \cf" .. wepname .. "\c- to unlock and recieve a random monster familiar.", 5);
        return true;
    }

    override void PostBeginPlay()
    {
        ThinkerIterator ti = ThinkerIterator.Create("DRLAX_QuestManager", STAT_STATIC);
        DRLAX_QuestManager quest;

        if(quest = DRLAX_QuestManager(ti.Next()))
        {
            chosenwep = quest.weapon;
        }

        familiarreward = GetRandomFamiliar();
    }

    static string GetRandomFamiliar()
    {
        Array<String> fams;

        fams.Push("ShotgunGuy");
        fams.Push("Imp");
        fams.Push("Demon");
        fams.Push("Spectre");
        fams.Push("LostSoul");
        fams.Push("Cacodemon");
        fams.Push("HellKnight");
        fams.Push("BaronOfHell");
        fams.Push("Revenant");
        fams.Push("Mancubus");
        fams.Push("Arachnotron");
        fams.Push("Archvile");
        fams.Push("SpiderMastermind");
        fams.Push("Cyberdemon");

        Array<String> possiblefams;
        Array<String> unlockedfams;

        possiblefams.Copy(fams);

        DRLAX_UnlockFunctions.ParseUnlocks(unlockedfams);
        int r = random(0, possiblefams.Size() - 1);

        while(possiblefams.Size() > 0)
        {
            r = random(0, possiblefams.Size() - 1);
            bool retry = false;

            for(int i = 0; i<unlockedfams.Size(); i++)
            {
                if(unlockedfams[i] ~== possiblefams[r])
                {
                    retry = true;
                    //Console.Printf("already unlocked " .. possiblefams[r]);
                    possiblefams.Delete(r);
                    break;
                }
            }

            if(!retry)
            {
                break;
            }
        }

        if(possiblefams.Size() == 0)
        {
            return fams[random(0, fams.Size() - 1)];
        }
        else
        {
            return possiblefams[r];
        }
    }
}

Class DRLAX_QuestManagerResult : Actor
{
    Default
    {
        +NOINTERACTION;
        -SOLID;
        +NOGRAVITY;
    }

    states
    {
        Spawn:
        "####" "#" -1;
        stop;
    }
}

Class DRLAX_ModReviser : DRLAX_GizmoObject
{
    Default
	{
		-SOLID;
		scale 1.5;
	}

    Actor crafter;

	states
	{
		Spawn:
		GIZM G 1 ReadyForWep();
		loop;
        Trigger:
        GIZM G 35;
        GIZM G 0 A_StartSound("sarge/wepget");
        GIZM HI 4;
        GIZM C 35;
        GIZM C 35 DropModItem();
        GIZM C 0 
        {
            if(iteration == 24)
            {
                SetStateLabel("Death");
            }
        }
        Goto Spawn;
        Death:
        GIZM C -1;
        stop;
	}

    override void PostBeginPlay()
    {
        for(int i; i<25-1; i++)
        {
            rngtable[i] = random(0, 1000);
        }
    }

    uint iteration;
    int rngtable[25];
    bool blacklistpacks[8];
    Array<String> modpacks;
    uint count;

    void AddPacks(String itemname, int amount, int slot)
    {
        if(blacklistpacks[slot])
        {
            return;
        }
        for(int i; i<amount; i++)
        {
            modpacks.Push(itemname);
        }
    }

    Void ReadyForWep()
    {
        frame = 2 + count;
        if(!CheckRange(350, true))
		{
            let b = FindDroppedMod();

            if(b)
            {
                
                count++;
                if(count == 4)
                {
                    SetStateLabel("Trigger");
                }
                A_StartSound("misc/modpackpickup");
                b.Destroy();
            }
        }
    }

    void DropModItem()
    {
        modpacks.Clear();

        AddPacks("RLBulkModItem", 200, 0);
        AddPacks("RLPowerModItem", 200, 1);
        AddPacks("RLAgilityModItem", 200, 2);
        AddPacks("RLTechnicalModItem", 200, 3);
                
        AddPacks("RLNanoModItem", 50, 4);
        AddPacks("RLFirestormModItem", 50, 5);
        AddPacks("RLSniperModItem", 50, 6);
        //AddPacks("RLOnyxModItem", 50, 7);

        int i = 0;
        int u = 0;

        while(u < rngtable[iteration])
        {
            i++;
            u++;

            if(i > modpacks.Size()-1)
            {
                i = 0;
            }
        }

        for(int i; i<CanHack()+1; i++)
        {
            A_SpawnItemEx(modpacks[i], 0, 0, 32, frandom(-5, 5), 0, 3, random(0, 360));
        }

        iteration++;

        for(int i; i<blacklistpacks.Size(); i++)
        {
            blacklistpacks[i] = false;
        }

        modpacks.Clear();
        count = 0;
    }

    override bool Used(Actor user)
	{
        if(count >= 4)
        {
            return false;
        }

        String offerstring = "";

        if(blacklistpacks[0]){offerstring = offerstring .. "\chB";}
        if(blacklistpacks[1]){offerstring = offerstring .. "\cgP";}
        if(blacklistpacks[2]){offerstring = offerstring .. "\cdA";}
        if(blacklistpacks[3]){offerstring = offerstring .. "\cfT";}
        if(blacklistpacks[4]){offerstring = offerstring .. "\cjN";}
        if(blacklistpacks[5]){offerstring = offerstring .. "\ciF";}
        if(blacklistpacks[6]){offerstring = offerstring .. "\ctS";}
        if(blacklistpacks[7]){offerstring = offerstring .. "\cuO";}
        if(offerstring != "")
        {
            offerstring = "\n\nMod Packs already inserted: " .. offerstring;
        }

        user.A_Print("\cf- Mod Pack Reviser -\n\n\c-Offer 4 Weapon Mod Packs of any type to obtain a new random Mod Pack.\nThe new Mod Pack will not be one of the 4 types already offered." .. offerstring, 5);
        return true;
    }

    Actor FindDroppedMod()
	{
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
        Actor b;

        while(b = Actor(ti.Next()))
        {
			if(b && b.GetAge() > 3 && Distance3D(b) < 40)
			{
                String modnames[] = {
                    "DroppedRLBulkMod",
                    "DroppedRLPowerMod",
                    "DroppedRLAgilityMod",
                    "DroppedRLTechnicalMod",
                    "DroppedRLNanoMod",
                    "DroppedRLFirestormMod",
                    "DroppedRLSniperMod",
                    "DroppedRLOnyxMod"
                };

                for(int i; i<modnames.Size(); i++)
                {
                    if(modnames[i] == b.GetClassName())
                    {
                        blacklistpacks[i] = true;
                        return b;
                    }
                }
			}
		}

        return null;
	}   
}

class DRLAX_FamiliarMenu : DRLAX_ZF_GenericMenu 
{
    Array<String> familiars;
    DRLAX_ZF_Label familiardesc;
    Array<DRLAX_FamiliarButton> fbuttons;
    int selectno;

    void GetFamiliars()
    {
        for(int i; i<allclasses.Size(); i++)
        {
            if(allclasses[i] is "DRLAX_FamiliarBase" && allclasses[i].GetClassName() != "DRLAX_FamiliarBase")
            {
                String f = allclasses[i].GetClassName();
                f.Replace("DRLAX_", "");
                f.Replace("Familiar", "");
                familiars.push(f);
            }
        }
    }

    override void init(Menu parent) 
    {
        FindActivePlayer();
        selectno = -1;
        let cmdHandler = new("DRLAX_FamiliarMenuHandler");
        cmdHandler.theMenu = self;
        Super.init(parent);
        GetFamiliars();

        let baseRes = (1920, 1080);
        setBaseResolution(baseRes);
        
        let background = DRLAX_ZF_Image.create(
            (240, 0),
            (1920, 1080),
            image: "RLZPDA2",
            imageScale: (4.5, 5.4)
        );

        background.Pack(mainFrame);

        let confirm = DRLAX_ZF_Button.create(
            (baseRes.x/2 - 165, 858),
            (192, 128),
            text: "Confirm",
            cmdHandler: cmdhandler,
            command: "confirm",
            fnt: "PDAFONT",
            textscale: 6.0,
            textColor: Font.CR_GREEN
        );

        if(!IsActivePlayer())
        {
            confirm.SetText("Exit");
        }

        confirm.Pack(mainFrame);

        //if(false)

        let title = DRLAX_ZF_Label.create(
            (baseRes.x/2 - 650, 42),
            (1200, 200),
            text: "Familiar Deployer",
            fnt: "STAT_MNO",
            alignment: DRLAX_ZF_Label.AlignType_Center,
            textScale: 4.5,
            textColor: Font.CR_GREEN
        );

        if(!IsActivePlayer())
        {
            title.SetText("Achievements");
        }

        title.pack(mainFrame);

        let description = DRLAX_ZF_Label.create(
            (350, 650),
            (1100, 200),
            text: "Select a familiar.\n\nIt will fight alongside you until the game is over.\n\nOnly \cfone\cd familiar can be deployed from this device.",
            fnt: "STAT_MNO",
            alignment: DRLAX_ZF_Label.AlignType_TopCenter,
            textScale: 3.5,
            textColor: Font.CR_WHITE
        );

        description.pack(mainFrame);
        familiardesc = description;

        for(int i; i<familiars.Size(); i++)
        {
            AddButton(i, familiars[i], cmdhandler);
        }
    }

    void AddButton(int slot, string familiar, DRLAX_ZF_Handler handler)
    {
        let frame = DRLAX_ZF_Frame.create(
            (390 + ((slot%10) * 100), 220 + ((slot/10) * 100)),
            (96, 96)
        );

        let normal = DRLAX_ZF_BoxTextures.createTexturePixels(
            "graphics/zforms/PDANormal.png",
            (7, 7),
            (14, 14),
            true,
            true
        );
        let hover = DRLAX_ZF_BoxTextures.createTexturePixels(
            "graphics/zforms/PDAHover.png",
            (7, 7),
            (14, 14),
            true,
            true
        );
        let click = DRLAX_ZF_BoxTextures.createTexturePixels(
            "graphics/zforms/PDAClick.png",
            (7, 7),
            (14, 14),
            true,
            true
        );

        String n = "" .. slot;
        let button = DRLAX_ZF_Button.create(
            (0, 0),
            (96, 96),
            cmdHandler: handler,
            command: n
        );

        String f = familiar;
        f.ToLower();

        let icon = DRLAX_ZF_Image.create(
            (0, 0),
            (96, 96),
            image: "graphics/familiars/" .. f .. ".png",
            imageScale: (3.0, 3.0)
        );
        icon.setDontBlockMouse(true);

        if(!DRLAX_UnlockFunctions.HasUnlocked(familiar))
        {
            icon.SetImage("graphics/familiars/locked.png");
        }

        let iconback = DRLAX_ZF_Image.create(
            (0, 0),
            (96, 96),
            image: "graphics/zforms/PDAButton.png",
            imageScale: (3.0, 3.0)
        );
        iconback.setDontBlockMouse(true);

        button.pack(frame);
        icon.pack(frame);
        iconback.pack(frame);

        frame.pack(mainFrame);

        DRLAX_FamiliarButton fb = new("DRLAX_FamiliarButton");
        fb.familiar = familiar;
        fb.iconback = iconback;
        fb.icon = icon;
        fb.slot = slot;
        fb.button = button;
        fbuttons.Push(fb);
    }

    override void ticker() 
    {
        if(selectno > -1)
        {
            for(int i; i<fbuttons.Size(); i++)
            {
                if(i == selectno)
                {
                    fbuttons[i].iconback.SetImage("graphics/zforms/PDAButtonActive.png");
                }
                else
                {
                    fbuttons[i].iconback.SetImage("graphics/zforms/PDAButton.png");
                }
            }
        }
    }

    DRLAX_Familiardeployer gizmo;

    bool active;

    bool IsActivePlayer()
    {
        return active;
    }

    void FindActivePlayer()
    {
        ThinkerIterator ti = ThinkerIterator.Create("DRLAX_Familiardeployer");

        while(gizmo = DRLAX_Familiardeployer(ti.Next()))
        {
            if(gizmo.actplayer && gizmo.actplayer == players[consoleplayer].mo)
            {
                active = true;
                return;
            }
        }
        active = false;
        return;
    }
}

class DRLAX_FamiliarButton
{
    String familiar;
    DRLAX_ZF_Image iconback;
    DRLAX_ZF_Image icon;
    DRLAX_ZF_Button button;
    uint slot;
}

class DRLAX_FamiliarMenuHandler : DRLAX_ZF_Handler 
{
    DRLAX_FamiliarMenu theMenu;

    override void buttonClickCommand(DRLAX_ZF_Button caller, Name command) 
    {
        if(command == "confirm")
        {
            //Console.Printf("clicked");
            if(theMenu.selectno > -1)
            {
                EventHandler.SendNetworkEvent("spawnfamiliar:" .. theMenu.fbuttons[themenu.selectno].familiar);
                //theMenu.gizmo.familiar = theMenu.fbuttons[themenu.selectno].familiar;
                //theMenu.gizmo.SetStateLabel("Spawning");
            }
            theMenu.Close();
            return;
        }

        if(!theMenu.IsActivePlayer())
        {
            return;
        }

        if(caller.getText() == "")
        {
            String s = command;
            uint i = s.ToInt();

            if(DRLAX_UnlockFunctions.HasUnlocked(theMenu.fbuttons[i].familiar))
            {
                S_Sound ("UI/PDA/Activate", CHAN_VOICE | CHAN_UI, snd_menuvolume, ATTN_NONE);
                theMenu.selectno = i;
            }
        }
    }

    override void elementHoverChanged(DRLAX_ZF_Element caller, Name command, bool unhovered)
    {
        if(!unhovered)
        {
            S_Sound ("UI/PDA/Select", CHAN_VOICE | CHAN_UI, snd_menuvolume, ATTN_NONE);
        }

        if(command == "confirm" && !unhovered && themenu.selectno > -1)
        {
            themenu.familiardesc.SetText(GetFamiliarText(themenu.fbuttons[themenu.selectno].familiar));
            return;
        }

        for(int i; i<themenu.fbuttons.Size(); i++)
        {
            if(themenu.fbuttons[i].button == caller && !unhovered)
            {
                //themenu.selectno = themenu.fbuttons[i].slot;
                
                themenu.familiardesc.SetText(GetFamiliarText(themenu.fbuttons[i].familiar));
                break;
            }
        }   
    }

    String GetFamiliarText(String familiar)
    {
        String c = familiar;                    
        c.ToUpper();
        String s;

        if(DRLAX_UnlockFunctions.HasUnlocked(familiar) && themenu.IsActivePlayer())
        {
            s = Stringtable.Localize("$" .. "TXT_" .. c .. "FAMILIAR");
        }
        else
        {
            s = Stringtable.Localize("$" .. "UNLOCK_" .. c .. "FAMILIAR");

            if(s == "UNLOCK_" .. c .. "FAMILIAR")
            {
                s = Stringtable.Localize("$" .. "UNLOCK_MONSTERFAMILIAR");
            }

            if(!DRLAX_UnlockFunctions.HasUnlocked(familiar))
            {
                s = "= LOCKED =\n\n" .. s;
            }
            else
            {
                s = "=\cf UNLOCKED \c-=\n\n" .. s;
            }
        }

        return s;
    }
}

Class DRLAX_Familiardeployer : DRLAX_GizmoObject
{
    Default
	{
		-SOLID;
		scale 1.0;
	}

    bool isready;
    String familiar;

	states
	{
		Spawn:
		GIZM R 100
        {
            if(Level.Total_Monsters * 0.90 <= Level.Killed_Monsters)
            {
                isready = true;
                SetStateLabel("Activate");
            }
        }
		loop;
        Activate:
		GIZM RS 8 bright;
        loop;
        Death:
        GIZM R -1;
        stop;
        Spawning:
        GIZM S 12 bright;
        GIZM S 0
        {
            if(target)
            {
                DRLAX_FamiliarBall f = DRLAX_FamiliarBall(Spawn("DRLAX_FamiliarBall", target.pos));
                if(f)
                {
                    f.Init(familiar);
                    familiar = "";

                    target.GiveInventory("DRLAX_Useddeployer", 1);
                }
            }
        }  
        Goto Death;
	}

    Actor actplayer;

    override bool Used(Actor user)
	{
        if(familiar)
        {
            return false;
        }

        if(user.CountInv("DRLAX_Useddeployer") > 0)
        {
            user.A_StartSound("hud/error", flags:CHANF_LOCAL);
            user.A_Print("This device is no longer usable.", 5);
            return true;
        }

        if(!isready)
        {
            user.A_Print("\cd- Familiar Deployer -\n\n\cgERROR: Threats detected.\n\n\c-Please eliminate more threats in this area to safely use this device.", 5);
            return true;
        }

        A_Face(user);
        target = user;
        actplayer = user;
        EventHandler.SendNetworkEvent("familiarmenu");
        return true;
    }

    override void Tick()
    {
        if(GetAge() == 35)
        {
            String s;
            Switch(random(0, 2))
            {
                Case 0:
                s = "Your PDA notes a useful machine is nearby.";
                break;
                Case 1:
                s = "You feel like someone is trying to reach out to you...";
                break;
                Case 2:
                s = "You thought you heard voices nearby... They seemed friendly.";
                break;
            }
            Console.Printf("\c-" .. s);
        }
        Super.Tick();
    }
}

class DRLAX_Useddeployer : Inventory
{
    override void Tick()
    {
        if(Level.Time == 3)
        {
            owner.TakeInventory("DRLAX_Useddeployer", 1);
        }
        return;
    }
}


Class DRLAX_TomeOfSins : DRLAX_GizmoObject
{
    Default
	{
		-SOLID;
		scale 0.8;
	}

	states
	{
		Spawn:
		GIZM O -1;
        loop;
        Start:
        Active:
        GIZM PQ 1 bright;
        loop;
	}

    String prize;
    String familiar;
    uint amount;
    bool tomeactive;
    uint cooldown;

    override bool Used(Actor user)
	{
        if(!prize)
        {
            return false;
        }

        if(!target)
        {
            user.A_Print("\cg- Tome of Sins -\n\n\c-Level " .. reactiontime .. ".\n\nUse again to summon \cf" .. amount .. "\c- Corrupted Ones to the level.\nDefeat them all to claim a reward.", 6);
            target = user;
            cooldown = 35*6;
            return true;
        }

        if(!tomeactive)
        {
            user.A_Print("");
            A_FaceTarget();
            SetStateLabel("Start");
            CMMSS_Safespawner.New("DRLAX_TomeCorruptedPlayer", amount, "TeleportFog", 20, 56, 0, CMMSS_Safespawner.SSFLAGS_NOMONSTERS);
            tomeactive = true;
            A_Startsound("gizmos/tomestart", attenuation: ATTN_NONE);
            return true;
        }

        ThinkerIterator ti = ThinkerIterator.Create("DRLAX_TomeCorruptedPlayer");
        DRLAX_TomeCorruptedPlayer c;

        Array<DRLAX_TomeCorruptedPlayer> corrupts;

        uint count;
        while(c = DRLAX_TomeCorruptedPlayer(ti.Next()))
        {
            corrupts.Push(c);
            count++;
        }

        uint alivecount;

        for(int i; i<corrupts.Size(); i++)
        {
            if((corrupts[i].target && corrupts[i].target.health >= 1))
            {
                alivecount++;
            }
        }

        if(count >= amount)
        {
            user.A_Print(alivecount .. " left...");
        }

        return true;
    }

    override void PostBeginPlay()
    {
        DRLAX_QuestManager q = DRLAX_QuestManager.GetQuestMan();

        reactiontime = q.tomelevel;

        Array<String> exotics, uniques;

        //exotics.push("RLBlasterPickup");
        exotics.push("RLCombatPistolPickup");
        //exotics.push("RLMarksmanPistolPickup");
        //exotics.push("RLHandcannonPickup");
        exotics.push("RLSuperShotgunPickup");
        //exotics.push("RLAssaultShotgunPickup");
        exotics.push("RLPlasmaShotgunPickup");
        exotics.push("RLMinigunPickup");
        exotics.push("RLMissileLauncherPickup");
        exotics.push("RLNapalmLauncherPickup");
        exotics.push("RLTristarBlasterPickup");
        exotics.push("RLLaserRiflePickup");
        exotics.push("RLNuclearPlasmaPistolPickup");
        exotics.push("RLNuclearPlasmaRiflePickup");
        exotics.push("RLNuclearBFG9000Pickup");
        exotics.push("RLCombatTranslocatorPickup");
        exotics.push("RLBallisticShieldArmorPickup");
        exotics.push("RLBallisticVestArmorPickup");
        exotics.push("RLBulletProofVestArmorPickup");
        exotics.push("RLDuelistArmorPickup");
        exotics.push("RLEnergyShieldedVestArmorPickup");
        exotics.push("RLEnergyShieldArmorPickup");
        exotics.push("RLGothicArmorPickup");
        exotics.push("RLMedicalArmorPickup");
        exotics.push("RLPhaseshiftArmorPickup");
        exotics.push("RLPlasmaShieldArmorPickup");
        exotics.push("RLOnyxArmorPickup");
        exotics.push("RLOverchargeSystemArmorPickup");
        exotics.push("RLCyberwarriorArmorPickup");
        exotics.push("RLRepulsionWaveSuitArmorPickup");
        exotics.push("RLSurvivalMediArmorPickup");
        exotics.push("RLAcidProofBootsPickup");
        exotics.push("RLGothicBootsPickup");
        exotics.push("RLPhaseshiftBootsPickup");
        exotics.push("RLShockwaveBootsPickup");

        uniques.push("RLMysteriousMagnumWorldSpawnPickup");
        uniques.push("RLRailgunWorldSpawnPickup");
        uniques.push("RLJackhammerWorldSpawnPickup");
        uniques.push("RLBFG10KWorldSpawnPickup");
        uniques.push("RLUnknownHeraldWorldSpawnPickup");
        uniques.push("RLFragShotgunWorldSpawnPickup");
        uniques.push("RLQuadShotgunWorldSpawnPickup");
        uniques.push("RLLightweaverWorldSpawnPickup");
        uniques.push("RLTrigunWorldSpawnPickup");
        uniques.push("RLGrammatonClericBerettaWorldSpawnPickup");
        uniques.push("RLAntiFreakJackalWorldSpawnPickup");
        uniques.push("RLTantrumCannonWorldSpawnPickup");
        uniques.push("RLRevenantsLauncherWorldSpawnPickup");
        uniques.push("RLNullPointerWorldSpawnPickup");
        uniques.push("RLParticleBeamCannonWorldSpawnPickup");
        uniques.push("RLPlasmaRedirectionCannonWorldSpawnPickup");
        uniques.push("RLSteelBeastWorldSpawnPickup");
        uniques.push("RLSussGunWorldSpawnPickup");
        uniques.push("RLMIRVLauncherWorldSpawnPickup");
        uniques.push("RLMarathonAssaultRifleWorldSpawnPickup");
        uniques.push("RLMarathonShotgunsWorldSpawnPickup");
        uniques.push("RLChameleonRifleWorldSpawnPickup");
        uniques.push("RLNuclearOnslaughtWorldSpawnPickup");
        uniques.push("RLLuciferCannonWorldSpawnPickup");
        uniques.push("RLTriadCannonWorldSpawnPickup");
        uniques.push("RLDirectHitWorldSpawnPickup");
        uniques.push("RLCyberneticArmorWorldSpawnPickup");
        uniques.push("RLLavaArmorWorldSpawnPickup");
        uniques.push("RLMaleksArmorWorldSpawnPickup");
        uniques.push("RLMedicalPowerArmorWorldSpawnPickup");
        uniques.push("RLNecroArmorWorldSpawnPickup");
        uniques.push("RLShieldedArmorWorldSpawnPickup");
        uniques.push("RLEnergyDischargeHarnessArmorWorldSpawnPickup");
        uniques.push("RLPrototypeAssaultShieldArmorWorldSpawnPickup");
        uniques.push("RLJetpackArmorWorldSpawnPickup");
        uniques.push("RLBerserkPowersuitArmorWorldSpawnPickup");
        uniques.push("RLGeosGoldenGauntletArmorWorldSpawnPickup");
        uniques.push("RLSoulshatterArmorWorldSpawnPickup");
        uniques.push("RLDemonicCarapaceArmorWorldSpawnPickup");
        uniques.push("RLNanoAblativeArmorWorldSpawnPickup");
        uniques.push("RLWildWeaselPeacekeeperArmorWorldSpawnPickup");
        uniques.push("RLXaserPowerArmorWorldSpawnPickup");
        uniques.push("RLBlazingPhoenixDeviceSuitArmorWorldSpawnPickup");
        uniques.push("RLKateMatterstormHarnessArmorWorldSpawnPickup");
        uniques.push("RLZeroDiamondAssaultforceArmorWorldSpawnPickup");
        uniques.push("RLKyleTeslaboltArmorWorldSpawnPickup");
        uniques.push("RLRyanCordellPsychicAmplifierSuitArmorWorldSpawnPickup");
        uniques.push("RLTerminusEst13BattlesuitArmorWorldSpawnPickup");
        uniques.push("RLRoystensCommandArmorWorldSpawnPickup");
        uniques.push("RLSoloOperativeSuitArmorWorldSpawnPickup");
        uniques.push("RLTorgueBlastplateArmorWorldSpawnPickup");
        uniques.push("RLFrontlineEngineerSuitArmorWorldSpawnPickup");
        uniques.push("RLTacticalAssemblerSuitArmorWorldSpawnPickup");
        uniques.push("RLNuclearPowerArmorWorldSpawnPickup");
        uniques.push("RLEnviroBootsWorldSpawnPickup");
        uniques.push("RLNyarlaptotepsBootsWorldSpawnPickup");
        uniques.push("RLLavaBootsWorldSpawnPickup");
        uniques.push("RLLeonidasBootsWorldSpawnPickup");
        uniques.push("RLDemonicBootsWorldSpawnPickup");
        uniques.push("RLRoystensCombatBootsWorldSpawnPickup");
        uniques.push("RLSoloOperativeBootsWorldSpawnPickup");
        uniques.push("RLTorgueBlastBootsWorldSpawnPickup");
        uniques.push("RLFrontlineEngineerBootsWorldSpawnPickup");
        uniques.push("RLTacticalAssemblerBootsWorldSpawnPickup");
        uniques.push("RLNuclearPowerBootsWorldSpawnPickup");

        switch(q.tomelevel)
        {
            Case 1:
            amount = 5;
            Switch(random(0, 1))
            {
                Case 0:
                Switch(random(0, 3))
                {
                    Case 0: prize = "RLBulkModItem"; break;
                    Case 1: prize = "RLPowerModItem"; break;
                    Case 2: prize = "RLAgilityModItem"; break;
                    Case 3: prize = "RLTechnicalModItem"; break;
                    Case 4: prize = "RLArmorModItem"; break;
                    Case 5: prize = "RLOnyxModItem"; break;
                }
                break;
                Case 1:
                prize = exotics[random(0, exotics.Size() - 1)];
                break;
            }
            break;

            Case 2:
            amount = 12;
            Switch(random(0, 1))
            {
                Case 0:
                Switch(random(0, 2))
                {
                    Case 0: prize = "RLFirestormModItem"; break;
                    Case 1: prize = "RLSniperModItem"; break;
                    Case 2: prize = "RLNanoModItem"; break;
                }
                break;
                Case 1:
                prize = uniques[random(0, exotics.Size() - 1)];
                break;
            }
            break;
            
            Case 3:
            amount = 20;
            prize = "DRLAX_FamiliarBall";
            familiar = DRLAX_AppraiserObject.GetRandomFamiliar();
            break;
        }
    }

    override void Tick()
    {
        if(cooldown > 0)
        {
            cooldown--;
        }
        
        if(cooldown == 0 && !tomeactive)
        {
            target = null;
        }

        if(GetAge() % 35 * 5 == 0 && tomeactive)
        {
            ThinkerIterator ti = ThinkerIterator.Create("DRLAX_TomeCorruptedPlayer");
            DRLAX_TomeCorruptedPlayer c;

            Array<DRLAX_TomeCorruptedPlayer> corrupts;

            while(c = DRLAX_TomeCorruptedPlayer(ti.Next()))
            {
                corrupts.Push(c);
            }

            uint deadcount;

            for(int i; i<corrupts.Size(); i++)
            {
                if((corrupts[i].target && corrupts[i].target.health < 1) || !corrupts[i].target)
                {
                    deadcount++;
                }
            }

            if(deadcount >= amount)
            {
                SpawnPrize();
                let man = DRLAX_QuestManager.GetQuestMan();
                man.tomelevel++;
                tomeactive = false;
                SetStateLabel("Spawn");
                A_StartSound("weapons/legendaryspawned", attenuation: ATTN_NONE);
                Console.Printf("\cfThe Corrupted ones have been deafeated!");
                for(int i; i<corrupts.Size(); i++)
                {
                    corrupts[i].Destroy();
                }
                if(man.tomelevel > 3)
                {
                    man.tomelevel = 1;
                }
            }
        }
        Super.Tick();
    }

    void SpawnPrize()
    {
        bool spawned;
        Actor act;
		[spawned, act] = A_SpawnItemEx(prize, 48, 0, 0, 0, 0, 0, flags:SXF_NOCHECKPOSITION);
        A_SpawnItemEx("TeleportFog", 48, 0, 0, 0, 0, 0, flags:SXF_NOCHECKPOSITION);
        if(spawned && act)
        {
           
            DRLAX_FamiliarBall f = DRLAX_FamiliarBall(act);
            if(f)
            {
                f.Init(familiar);
                DRLAX_UnlockThinker.WriteUnlock(familiar);
            }
        }
        prize = "";
    }
}



class DRLAX_TomeCorruptedPlayerAmbience : Inventory
{
    override void Tick()
    {
        if(!owner)
        {
            Destroy();
            return;
        }

        if(owner.health < 1)
        {
            if(owner)
            {
                owner.A_StopSound(CHAN_7);
            }
            Destroy();
            return;
        }

        if(GetAge() == 1)
        {
            owner.A_StartSound("gizmos/tomeambient", CHAN_7, CHANF_LOOPING);
        }

  
        Super.Tick();
    }

    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
    {
       if(owner && !passive && damage > 0)
        {
            newdamage = damage * 0.6;
        }
    }

}

class DRLAX_TomeCorruptedPlayer : Actor
{
    Default
    {
        +NOINTERACTION;
        -SOLID;
    }

    States
    {
        Spawn:
        TNT1 A 0;
        TNT1 A -1
        {
            Array<String> corrupts;

            corrupts.Push("RLCorruptedMarine1");
            corrupts.Push("RLCorruptedScout1");
            corrupts.Push("RLCorruptedTechnician1");
            corrupts.Push("RLCorruptedRenegade1");
            corrupts.Push("RLCorruptedDemolitionist1");

            corrupts.Push("RLCorruptedMechanoid1");
            corrupts.Push("RLCorruptedPhaseSisters1");
            corrupts.Push("RLCorruptedNomad1");
            corrupts.Push("RLCorruptedSarge1");
            corrupts.Push("RLCorruptedNanoManiac1");

            Actor a = Spawn(corrupts[random(0, corrupts.Size() - 1)], pos);
            if(a)
            {
                a.GiveInventory("DRLAX_TomeCorruptedPlayerAmbience", 1);
                target = a;
            }
        }
    }
}

class DRLAX_SkullShrineObject : DRLAX_GizmoObject
{
    Default
	{
		-SOLID;
        +BRIGHT;
		scale 0.7;
	}

    States
    {
        Spawn:
        GIZM N -1;
        loop;
        Activated:
        GIZM N 100;
        Goto Spawn;
    }

    void GivePrize(uint which)
    {
        Switch(which)
        {
            Case 0:
            A_SpawnItemEx("DRLAX_SoulTrap", 0, 0, 32, 8, 0, 1, 0);
            break;

            Case 1:
            Spawn("RLSupplyCrateUniqueWeaponSpawner", pos + (0,0,50));
            break;

            Case 2:
                Actor act;
                bool spawned;
                [spawned, act] = A_SpawnItemEx("DRLAX_FamiliarBall", 0, 0, 32, 8, 0, 1, 0);
                if(act && spawned)
                {
                    DRLAX_FamiliarBall f = DRLAX_FamiliarBall(act);
                    if(f)
                    {
                        f.Init(familiarreward);
                        DRLAX_UnlockThinker.WriteUnlock(familiarreward);
                    }
                }
            break;
        }
    }

    override bool Used(Actor user)
	{
        let man = DRLAX_QuestManager.GetQuestMan();
        A_Face(user);

        int skullsneeded;

        switch(man.skulllevel)
        {
            Case 0:
            if(man.skullbodies >= 100)
            {
                man.skulllevel++;
                GivePrize(0);
                return true;
            }
            skullsneeded = 100;
            break;

            Case 1:
            if(man.skullbodies >= 250)
            {
                man.skulllevel++;
                GivePrize(1);
                return true;
            }
            skullsneeded = 250;
            break;

            Case 2:
            if(man.skullbodies >= 500)
            {
                man.skulllevel++;
                GivePrize(2);
                return true;
            }
            skullsneeded = 500;
            break;

            Case 3:
            user.A_StartSound("hud/error", flags:CHANF_LOCAL);
            user.A_Print("This device is no longer usable.", 5);
            return true;
            break;
        }

        user.A_Print("\cg- Skull Shrine -\n\nDestroy \cf" .. skullsneeded .. "\c- corpses using Skulls to gain rewards from this shrine.\n\n\cf" .. man.skullbodies .. "\c- corpses destroyed.", 6);
        return true;
    }

    String familiarreward;

    override void PostBeginPlay()
    {
        familiarreward = DRLAX_AppraiserObject.GetRandomFamiliar();
    }
}

// DOOMRPG COMPATIBILITY
// --------------------------------------------------

Class DRLAX_WeaponRecyclerRPG : DRLAX_GizmoObject
{
    Default
	{
		-SOLID;
		scale 1.25;
	}

    bool rng;

	states
	{
		Spawn:
		GIZM J 1 ReadyForWep();
		loop;
        WeaponsIn:
        GIZM J 1;
        WeaponsInLoop:
        GIZM JJJJJJKKKKKKK 1 bright ReadyForWep();
        loop;
        Death:
        GIZM J 8;
        GIZM J 35 A_StartSound("weapons/chameleonriflechangemode");
        GIZM J -1
        {
            for(int i; i<CanHack()+1; i++)
            {
                if(rng)
                {
                    Spawn("DRPGCraftPartsUnique", pos + (0,0,32));
                }
                else
                {
                    if (Random(0, 3) == 0)
                        Spawn("DRPGCraftPartsExotic", pos + (0,0,32));
                    else
                    {
                        int parts = random(3,6);
                        while (parts--)
                        {
                            if (Random(0, 1) == 0)
                                Spawn("DRPGLootGunParts", pos + (0,0,32));
                            if (Random(0, 1) == 0)
                                Spawn("DRPGLootAmmoCasings", pos + (0,0,32));
                        }
                    }
                }
            }
        }
        stop;
	}

    override void PostBeginPlay()
    {
        rng = (random(0, 19) == 0);
    }

    uint wepcount;

    Void ReadyForWep()
    {
        if(!CheckRange(350, true))
		{
            let b = FindDroppedWeapon();

            String badweps[] = 
            {
                "RLChainsaw",
                "RLPistol",
                "RLShotgun",
                "RLCombatShotgun",
                "RLDoubleShotgun",
                "RLChaingun",
                "RLBattleRifle",
                "RLRocketLauncher",
                "RLPlasmaRifle",
                "RLBFG9000"
            };

            if(b)
            {
                for(int i; i<badweps.Size(); i++)
                {
                    String wep = badweps[i] .. "Pickup";
                    String s = b.GetClassName();

                    if(wep ~== s || wep .. "Modded" ~== s)
                    {
                        return;
                    }
                }

                wepcount++;

                if(b.master && wepcount < 3)
                {
                    String n = b.GetTag();
                    n.Replace(" [Pickup]", "");
                    b.master.A_Print("You discarded your " .. n .. ".\n\n\cf" .. 3 - wepcount .. " weapons remain.");
                }

                if(wepcount == 3)
                {
                    SetStateLabel("Death");
                }

                if(wepcount == 1)
                {
                    SetStateLabel("WeaponsIn");
                }
                A_StartSound("weapons/flamethrowerload");
                b.Destroy();
            }
        }
    }

    override bool Used(Actor user)
	{
        if(wepcount == 3)
        {
            user.A_StartSound("hud/error", flags:CHANF_LOCAL);
            user.A_Print("This device is no longer usable.", 5);
            return true;
        }
        user.A_Print("\cq- Weapon Fabricator (Outpost) -\n\n\c-Offer 3 weapons of \ctExotic\c- rarity or higher to create a craft parts (25% chance).\n\n\cf" .. 3 - wepcount .. " weapons remain.", 5);
        return true;
    }
    
}